{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":713,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.4941466866731734,\"hacking_speed_mult\":1.4866844760707618,\"hacking_money_mult\":2.4966588186269916,\"hacking_grow_mult\":1.4951843446083313,\"hacking_exp\":9170119.410404343,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":2.2804540778689075,\"strength_mult\":1.3755695970396646,\"defense_mult\":1.196147475686665,\"dexterity_mult\":1.588782884580813,\"agility_mult\":1.2559548494709984,\"charisma_mult\":1.4353769708239978,\"hacking_exp_mult\":3.010695902794103,\"strength_exp_mult\":1.5131265567436314,\"defense_exp_mult\":1.5131265567436314,\"dexterity_exp_mult\":1.5131265567436314,\"agility_exp_mult\":1.5131265567436314,\"charisma_exp_mult\":1.5131265567436314,\"company_rep_mult\":1.196147475686665,\"faction_rep_mult\":1.196147475686665,\"money\":15135250557.895302,\"city\":\"New Tokyo\",\"location\":\"Global Pharmaceuticals\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-2048-5db7f80d-a25d-41b5-b5fd-da294800100b\",\"pserv-2048-b7d06b0d-76b7-422d-944d-335e931da52d\",\"pserv-2048-1253164e-bebc-497a-950b-accac14cc3ed\",\"pserv-2048-ad796d97-3271-4faf-b0e3-8054f38e817f\",\"pserv-2048-8f55ff8e-e002-46f7-a822-94f4564606c2\",\"pserv-2048-5abb9798-f2c5-4064-92c9-d93fc5daf0eb\",\"pserv-2048-b0a82c70-99e9-478c-b89a-d91001373beb\",\"pserv-2048-620ebcdb-0933-460d-a1c8-dcef84f95a5d\",\"pserv-2048-10b48c7c-20b7-4105-b3f3-bbd986a0e626\",\"pserv-2048-7dd5d0f0-8fb4-4c91-8d30-12fa1721dc0c\",\"pserv-2048-8fe53619-b794-4f80-8253-0ad461f9fee1\",\"pserv-2048-30934766-7170-4b01-9ac0-2c0fa7d97c9e\",\"pserv-2048-3d37cb13-8e00-4aa1-8049-5b88d3c740ba\",\"pserv-2048-cb2cd9a9-dbe5-47c4-92e0-de454cab6067\",\"pserv-2048-7eb83425-9cad-4e8b-9715-2461f3a993d3\",\"pserv-2048-fba53022-68dd-4b83-b10b-c5ace5f885db\",\"pserv-2048-4b791a04-5cd8-49d8-99cf-ac1ffb7cf3ae\",\"pserv-2048-1a08471d-4686-47dd-b81b-e3588e2414c9\",\"pserv-2048-0b18a33e-632a-4217-b7eb-75bea0c315e6\",\"pserv-2048-f1099dac-c7e1-4139-8a19-63446335d789\",\"pserv-2048-d73b88fc-7900-49ba-9cd1-20e8a25431f0\",\"pserv-2048-e9306103-e1a1-4001-acac-f6c31268f2e1\",\"pserv-2048-b023f924-a20b-484e-8b47-8fd7fb30a208\",\"pserv-2048-2e65ca20-edf3-4a0e-8746-ff2cde6ed09b\",\"pserv-32768-fca4508e-1813-455d-8607-75180dc4743d\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":167851.79999986073,\"ram\":64,\"totalMoneyGenerated\":3324967164.100124,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":167850.99999986074,\"ram\":64,\"totalMoneyGenerated\":3350111951.1188707,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":167850.99999986074,\"ram\":64,\"totalMoneyGenerated\":3352868804.4897738,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":167850.99999986074,\"ram\":64,\"totalMoneyGenerated\":3352689281.9475007,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":167850.99999986074,\"ram\":64,\"totalMoneyGenerated\":3379486365.853036,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":167793.99999986077,\"ram\":64,\"totalMoneyGenerated\":3376109656.1093373,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":167793.99999986077,\"ram\":64,\"totalMoneyGenerated\":3375591994.862314,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":167793.99999986077,\"ram\":64,\"totalMoneyGenerated\":3375078939.9132338,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":167793.99999986077,\"ram\":64,\"totalMoneyGenerated\":3374590067.5888886,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":167793.99999986077,\"ram\":64,\"totalMoneyGenerated\":3374033455.7665343,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":167793.99999986077,\"ram\":64,\"totalMoneyGenerated\":3373557048.5263553,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":167793.99999986077,\"ram\":64,\"totalMoneyGenerated\":3366491293.9332814,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":154194.59999988263,\"ram\":64,\"totalMoneyGenerated\":3352851853.551587,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":154194.59999988263,\"ram\":64,\"totalMoneyGenerated\":3352676228.1640716,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":134243.39999970922,\"ram\":64,\"totalMoneyGenerated\":2937995666.4610515,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":107326.79999973896,\"ram\":64,\"totalMoneyGenerated\":2782967747.6052976,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":107326.79999973896,\"ram\":64,\"totalMoneyGenerated\":2782570496.464687,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":107326.79999973896,\"ram\":64,\"totalMoneyGenerated\":2782181949.789348,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":107326.79999973896,\"ram\":64,\"totalMoneyGenerated\":2781805004.3649435,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27667.96961254437,\"onlineTimeSeconds\":81131.59999993173,\"ram\":64,\"totalMoneyGenerated\":2223819565.7416773,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":2,\"moneyGainRatePerSecond\":9.050388217522844,\"onlineTimeSeconds\":69356.79999995501,\"ram\":1,\"totalMoneyGenerated\":627705.9655251432,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":4.525194108761422,\"onlineTimeSeconds\":6220.999999997676,\"ram\":1,\"totalMoneyGenerated\":28151.23255059172,\"name\":\"hacknet-node-21\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"CyberSec\",\"Netburners\",\"NiteSec\",\"The Black Hand\",\"Tian Di Hui\",\"BitRunners\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":19,\"name\":\"NeuroFlux Governor\"},{\"level\":20,\"name\":\"NeuroFlux Governor\"},{\"level\":21,\"name\":\"NeuroFlux Governor\"},{\"level\":22,\"name\":\"NeuroFlux Governor\"},{\"level\":23,\"name\":\"NeuroFlux Governor\"},{\"level\":24,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":18,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-5.25,\"crime_money_mult\":1.196147475686665,\"crime_success_mult\":1.196147475686665,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":7,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":400,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.196147475686665,\"hacknet_node_money_mult\":3.016796072507615,\"hacknet_node_purchase_cost_mult\":0.6384030275093168,\"hacknet_node_ram_cost_mult\":0.8345137614500874,\"hacknet_node_core_cost_mult\":0.8345137614500874,\"hacknet_node_level_cost_mult\":0.7093366972325742,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1645808270755,\"lastSave\":1645808212368,\"totalPlaytime\":782129600,\"playtimeSinceLastAug\":167977200,\"playtimeSinceLastBitnode\":782129600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":1425000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":2736919179.08504,\"hacknet\":63373100397.079735,\"hacknet_expenses\":-7316313187.729766,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-514543.43093086686,\"total\":15134250557.89531,\"work\":0,\"servers\":-5498240000,\"other\":-5288900000,\"augmentations\":-34296801282.612465}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2372308.8000014806,\"codingcontract\":3300000000,\"corporation\":0,\"crime\":1428267.0322101316,\"gang\":0,\"hacking\":28706438086.402916,\"hacknet\":188619826303.51422,\"hacknet_expenses\":-37382051521.99043,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-18414202479.93384,\"total\":23961870940.163315,\"work\":27067547.626382735,\"servers\":-35420978016.59504,\"other\":-11230599972.90575,\"augmentations\":-94242684970.70235}},\"scriptProdSinceLastAug\":2294990703.569069,\"exploits\":[],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1645026146788},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1645028434786},{\"ID\":\"NS2\",\"unlockedOn\":1645044319911},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1645045831181},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1645056200950},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1645056560955},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1645066283086},{\"ID\":\"TOR\",\"unlockedOn\":1645066643085},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1645070003093},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1645097626865},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1645155279886},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1645183682014},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1645190539010},{\"ID\":\"TRAVEL\",\"unlockedOn\":1645202118069},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1645206439756},{\"ID\":\"WORKOUT\",\"unlockedOn\":1645274022801},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1645310391987},{\"ID\":\"NITESEC\",\"unlockedOn\":1645372344826},{\"ID\":\"4S\",\"unlockedOn\":1645407697058},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1645449421121},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1645451161327},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1645492247503},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1645588414067}],\"terminalCommandHistory\":[\"ls\",\"ls advanced/\",\"ls\",\"ls contracts/\",\"restart\",\"ls contracts/\",\"restart\",\"find unitalife\",\"connect hong-fang-tea; connect nectar-net; connect phantasy; connect avmnite-02h; connect I.I.I.I; connect millenium-fitness; connect galactic-cyber; connect unitalife\",\"ls\",\"home\",\"find taiyang-digital\",\"connect hong-fang-tea; connect nectar-net; connect phantasy; connect avmnite-02h; connect I.I.I.I; connect millenium-fitness; connect galactic-cyber; connect unitalife; connect univ-energy; connect taiyang-digital\",\"ls\",\"./contract-384551.cct\",\"home\",\"ls contracts/\",\"ls\",\"restart\",\"ls contracts/\",\"darkweb\",\"buy -a\",\"home\",\"crackall\",\"alias\",\"unalias crackall\",\"alias nukeall=\\\"run advanced/nukeall.js\\\"\",\"nukeall\",\"ls\",\"ls official/\",\"ls\",\"ls official/\",\"restart\",\"killall\",\"restart\",\"run official/custom-stats.js\",\"kill official/custom-stats.js\",\"run official/custom-stats.js\",\"restart\",\"run official/custom-stats.js\",\"ls official/\",\"restart\",\"ls\",\"run official/deploy.js --help\",\"alias\",\"hackall\",\"kill advanced/hackall.js\",\"hackall\",\"kill /advanced/hackall.js\",\"hackall\"],\"identifier\":\"afc61675d036e\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"41.2.4.6\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"Formulas.exe\"],\"ramUsed\":5.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/advanced/hackall.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":329.0099999999899,\"pid\":328,\"ramUsage\":5.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///e8b36e63-f011-4949-81f1-cb6d3f9f4296\",\"moduleSequenceNumber\":2220},{\"filename\":\"/advanced/hackall.js\",\"url\":\"blob:file:///c5a2e159-2086-4ce9-a93d-197161efa466\",\"moduleSequenceNumber\":18996}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///6bb4962f-87bb-4a80-a066-2de56d276dab\",\"moduleSequenceNumber\":477}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":2236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = ns.args[0].toString();\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.tprint(\\\"Opening ssh port\\\");\\r\\n        ns.brutessh(target);\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.tprint(\\\"Opening ftp port\\\");\\r\\n        ns.ftpcrack(target);\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.tprint(\\\"Opening smtp port\\\");\\r\\n        ns.relaysmtp(target);\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.tprint(\\\"Opening http port\\\");\\r\\n        ns.httpworm(target);\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.tprint(\\\"Opening sql port\\\");\\r\\n        ns.sqlinject(target);\\r\\n    }\\r\\n    if (!ns.hasRootAccess(target)) {\\r\\n        ns.nuke(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/nuke.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/nuke.js\",\"url\":\"blob:file:///24ce409b-9bc0-4515-a56d-f433ae86c114\",\"moduleSequenceNumber\":156515}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":2240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let servers = ns.scan();\\n    let level = ns.getHackingLevel();\\n    for(let i = 0; i < servers.length; i++) {\\n        let server = servers[i];\\n        if (server !== 'home') {\\n            let required_level = ns.getServerRequiredHackingLevel(server);\\n            if (required_level <= level) {\\n                ns.run(\\\"ServerProfiler.exe\\\", 1, server);\\n            }\\n        }\\n    }\\n}\",\"filename\":\"/wip/profileAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"profileAll.js\",\"url\":\"blob:file:///f6ee0f7f-fd90-495d-b459-a29aefa7ca8e\",\"moduleSequenceNumber\":1512}],\"dependents\":[],\"ramUsage\":2.95,\"server\":\"home\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        let money = ns.getServerMoneyAvailable('home');\\n        let nodeCount = ns.hacknet.numNodes();\\n        let nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n        // only count 1% of cash\\n        if (money * 0.01 >= nodeCost && nodeCount < ns.hacknet.maxNumNodes()) {\\n            ns.hacknet.purchaseNode();\\n            continue;\\n        }\\n\\n        for (let i = 0; i < nodeCount; i++) {\\n            money = ns.getPlayer().money;\\n            let levelCost = ns.hacknet.getLevelUpgradeCost(i, 1);\\n            if (money >= levelCost) {\\n                ns.hacknet.upgradeLevel(i, 1);\\n                continue;\\n            }\\n            let memoryCost = ns.hacknet.getRamUpgradeCost(i, 1);\\n            if (money >= memoryCost) {\\n                ns.hacknet.upgradeRam(i, 1);\\n                continue;\\n            }\\n            let coreCost = ns.hacknet.getCoreUpgradeCost(i, 1);\\n            if (money >= coreCost) {\\n                ns.hacknet.upgradeCore(i, 1);\\n                continue;\\n            }\\n        }\\n        await ns.sleep(100000);\\n    }\\n}\",\"filename\":\"/hacknet/old_hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/expansion/hacknet.js\",\"url\":\"blob:file:///1d729809-db82-436a-8005-801904660658\",\"moduleSequenceNumber\":705}],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"home\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///65da48a4-daad-4b10-852b-383647293a1c\",\"moduleSequenceNumber\":21641}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":2238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @module crawler */\\nimport { crawl, NodeType } from 'crawler.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    // should we run the share version?\\n    const flags = ns.flags([\\n        ['share', false],\\n    ]);\\n    // const shouldShare = ns.args[0] === \\\"--share\\\";\\n    const shouldShare = flags.share\\n    // SANITY CHECK\\n    if (shouldShare) {\\n        ns.tprint('Sharing flag detected!');\\n    } else {\\n        ns.tprint('Sharing flag not detected!');\\n    }\\n    // SANITY CHECK\\n\\n    const scriptName = shouldShare ? \\\"hacknshare.js\\\" : \\\"hack.js\\\";\\n\\n    /** @param {NS} ns */\\n    function hack(ns, server) {\\n        ns.kill(scriptName, ns.getHostname(), server);\\n        ns.run(scriptName, 1, server);\\n    }\\n\\n    await crawl(ns, null, null, hack, 0, NodeType.Hackable);\\n}\",\"filename\":\"/archive/hackall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"crawler.js\",\"url\":\"blob:file:///e8aa63ac-e0a1-441f-ae83-2e2715d3ea4d\",\"moduleSequenceNumber\":5829},{\"filename\":\"hackall.js\",\"url\":\"blob:file:///f9d01910-61e7-488e-9af8-901716b244f8\",\"moduleSequenceNumber\":7166}],\"dependents\":[],\"ramUsage\":6.35,\"server\":\"home\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { crawl, NodeType } from 'crawler.js';\\n\\nconst sleepTime = 1000;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    // should we run the share version?\\n\\n    const flags = ns.flags([\\n        ['share', false],\\n    ]);\\n\\n    // const shouldShare = ns.args[0] === \\\"--share\\\";\\n    const shouldShare = flags.share\\n    // SANITY CHECK\\n    if (shouldShare) {\\n        ns.tprint('Sharing flag detected!');\\n    } else {\\n        ns.tprint('Sharing flag not detected!');\\n    }\\n    // SANITY CHECK\\n\\n    /**\\n     * @param {NS} ns\\n     * @param {string} host\\n     */\\n    async function startHack(ns, host) {\\n        ns.tprint(`starting hack from ${host}`);\\n        ns.run('cpall.js', 1, host);\\n        const scriptName = shouldShare ? \\\"hacknshare.js\\\" : \\\"hack.js\\\";\\n        ns.exec('hackall.js', host, 1, ...ns.args);\\n        await ns.sleep(sleepTime);\\n    }\\n\\n    await crawl(ns, null, null, startHack, 0, NodeType.Runnable);\\n}\",\"filename\":\"/archive/crawl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"crawler.js\",\"url\":\"blob:file:///89ae83a9-957f-4b96-ae7d-f919d10d913c\",\"moduleSequenceNumber\":5829},{\"filename\":\"crawl.js\",\"url\":\"blob:file:///6e0be8e7-410c-4eed-aff4-9c0c38123e61\",\"moduleSequenceNumber\":8287}],\"dependents\":[],\"ramUsage\":7,\"server\":\"home\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  solveContract(ns, ns.args[0], ns.args[1], 1);\\n}\\n\\nexport function solveContract(ns, host, filename, logLevel = 0) {\\n  var type = ns.codingcontract.getContractType(filename, host);\\n  var desc = ns.codingcontract.getDescription(filename, host);\\n  var data = ns.codingcontract.getData(filename, host);\\n\\n  ns.tprint(host + ' ' + filename);\\n  ns.tprint(type);\\n\\n  if (logLevel >= 1) {\\n    ns.tprint(desc);\\n    ns.tprint(data);\\n  }\\n\\n  var answer;\\n\\n  switch (type) {\\n    case 'Minimum Path Sum in a Triangle':\\n      answer = minPathSumInTriangle(ns, data);\\n      break;\\n    case 'Find Largest Prime Factor':\\n      answer = largestPrimeFactor(ns, data);\\n      break;\\n    case 'Unique Paths in a Grid I':\\n      answer = uniquePathInGrid1(ns, data);\\n      break;\\n    case 'Unique Paths in a Grid II':\\n      answer = uniquePathInGrid2(ns, data);\\n      break;\\n    case 'Spiralize Matrix':\\n      answer = spiralizeMatrix(ns, data);\\n      break;\\n    case 'Total Ways to Sum':\\n      answer = totalWayToSum(ns, data);\\n      break;\\n    case 'Algorithmic Stock Trader I':\\n      answer = algorithmicStockTrader1(ns, data);\\n      break;\\n    case 'Algorithmic Stock Trader II':\\n      answer = algorithmicStockTrader2(ns, data);\\n      break;\\n    case 'Algorithmic Stock Trader III':\\n      answer = algorithmicStockTrader3(ns, data);\\n      break;\\n    case 'Algorithmic Stock Trader IV':\\n      answer = algorithmicStockTrader4(ns, data);\\n      break;\\n    case 'Array Jumping Game':\\n      answer = arrayJumpingGame(ns, data);\\n      break;\\n    case 'Subarray with Maximum Sum':\\n      answer = subarrayWithMaxSum(ns, data);\\n      break;\\n    case 'Generate IP Addresses':\\n      answer = generateIpAddresses(ns, data);\\n      break;\\n    case 'Merge Overlapping Intervals':\\n      answer = mergeOverlappingIntervals(ns, data);\\n      break;\\n    case 'Find All Valid Math Expressions':\\n      answer = findAllValidMathExpr(ns, data);\\n      break;\\n    case 'Sanitize Parentheses in Expression':\\n      answer = sanitizeParentheses(ns, data);\\n      break;\\n    default:\\n      ns.tprint('unknown type: ' + type);\\n      return;\\n  }\\n\\n  if (answer && !(answer instanceof String) && Object.keys(answer).length > 20) {\\n    ns.tprint('answer size too large to print: ' + Object.keys(answer).length);\\n  } else {\\n    ns.tprint(answer);\\n  }\\n\\n  var opts = {};\\n  opts.returnReward = true;\\n  var reward = ns.codingcontract.attempt(answer, filename, host, opts);\\n\\n  if (reward) {\\n    ns.tprint(reward);\\n  } else {\\n    ns.tprint('failed!');\\n  }\\n}\\n\\n\\n/** @param {NS} ns **/\\n\\nfunction sanitizeParentheses(ns, data) {\\n\\n  var context = { 'maxLeftLength': 0 }\\n\\n  var exprs = findSanitized(ns, data, 0, context);\\n\\n  exprs = exprs.filter(e => e.length >= context['maxLeftLength']).sort();\\n\\n  for (var i = 0; i < exprs.length - 1; i++) {\\n\\n    while (exprs == exprs[i + 1]) {\\n\\n      exprs.splice(i + 1, 1);\\n\\n    }\\n\\n  }\\n\\n  return exprs;\\n\\n}\\n\\n\\nfunction findSanitized(ns, s, pos, context) {\\n\\n  // ns.tprint(s, ' ', pos, ' ', context['maxLeftLength'], ' ', validateParentheses(s));\\n\\n  if (s.length < context['maxLeftLength']) {\\n\\n    return [];\\n\\n  }\\n\\n\\n  if (pos == s.length) {\\n\\n    if (validateParentheses(s)) {\\n\\n      if (s.length > context['maxLeftLength']) {\\n\\n        context['maxLeftLength'] = s.length;\\n\\n      }\\n\\n      return [s];\\n\\n    } else {\\n\\n      return [];\\n\\n    }\\n\\n  }\\n\\n\\n  var results = [];\\n\\n  var c = s[pos];\\n\\n  if (c == '(' || c == ')') {\\n\\n    results = results.concat(\\n\\n      findSanitized(ns, s, pos + 1, context),\\n\\n      findSanitized(ns, s.slice(0, pos) + s.slice(pos + 1), pos, context)\\n\\n    );\\n\\n  } else {\\n\\n    results = results.concat(\\n\\n      findSanitized(ns, s, pos + 1, context)\\n\\n    );\\n\\n  }\\n\\n  return results;\\n\\n}\\n\\n\\nfunction validateParentheses(s) {\\n\\n  var n = 0;\\n\\n  for (var i = 0; i < s.length; i++) {\\n\\n    if (s == '(') {\\n\\n      n++;\\n\\n    }\\n\\n    if (s == ')') {\\n\\n      n--;\\n\\n    }\\n\\n    if (n < 0) {\\n\\n      return false;\\n\\n    }\\n\\n  }\\n\\n  return n == 0;\\n\\n}\\n\\n\\n/** @param {NS} ns **/\\n\\nfunction findAllValidMathExpr(ns, data) {\\n\\n  var s = data[0];\\n\\n  var n = data[1];\\n\\n  return findExpr(s, n, '');\\n\\n}\\n\\n\\nfunction findExpr(s, n, expr) {\\n\\n  if (s.length == 0) {\\n\\n    if (eval(expr) == n) {\\n\\n      return [expr]\\n\\n    } else {\\n\\n      return []\\n\\n    }\\n\\n  }\\n\\n\\n  var results = [];\\n\\n  if (s.startsWith('0')) {\\n\\n    var sliced = s.slice(1);\\n\\n    if (expr.length == 0) {\\n\\n      return findExpr(sliced, n, expr + '0');\\n\\n    }\\n\\n    results = results.concat(\\n\\n      findExpr(sliced, n, expr + '+0'),\\n\\n      findExpr(sliced, n, expr + '-0'),\\n\\n      findExpr(sliced, n, expr + '*0'),\\n\\n    );\\n\\n    return results;\\n\\n  }\\n\\n\\n  var maxLength = s.length;\\n\\n  var ops = [];\\n\\n  if (expr.length == 0) {\\n\\n    ops = ['', '-'];\\n\\n  } else {\\n\\n    ops = ['-', '+', '*'];\\n\\n  }\\n\\n  for (var op of ops) {\\n\\n    for (var i = 1; i <= maxLength; i++) {\\n\\n      results = results.concat(\\n\\n        findExpr(s.slice(i), n, expr + op + s.slice(0, i))\\n\\n      );\\n\\n    }\\n\\n  }\\n\\n  return results;\\n\\n}\\n\\n\\n/** @param {NS} ns **/\\n\\nfunction mergeOverlappingIntervals(ns, data) {\\n\\n  var intervals = data.slice();\\n\\n  for (var i = 0; i < intervals.length; i++) {\\n\\n    for (var j = i + 1; j < intervals.length;) {\\n\\n      var merged = mergeInterval(intervals, intervals[j]);\\n\\n      if (merged !== null) {\\n\\n        intervals = merged;\\n\\n        intervals.splice(j, 1);\\n\\n        j = i + 1;\\n\\n      } else {\\n\\n        j++\\n\\n      }\\n\\n    }\\n\\n  }\\n\\n  intervals.sort((a, b) => a[0] - b[0]);\\n\\n  return intervals;\\n\\n}\\n\\n\\nfunction mergeInterval(a, b) {\\n\\n  if (a[1] < b[0] || a[0] > b[1]) {\\n\\n    return null;\\n\\n  }\\n\\n  return [Math.min(a[0], b[0]), Math.max(a[1], b[1])];\\n\\n}\\n\\n\\n/** @param {NS} ns **/\\n\\nfunction generateIpAddresses(ns, data) {\\n\\n  return parseIpNum(ns, data, []);\\n\\n}\\n\\n\\n/** @param {String} s\\n\\n * @Param {Array} parts**/\\n\\nfunction parseIpNum(ns, s, parts) {\\n\\n  if (parts.length == 4) {\\n\\n    if (s.length == 0) {\\n\\n      return [parts[0] + '.' + parts[1] + '.' + parts[2] + '.' + parts[3]];\\n\\n    } else {\\n\\n      return [];\\n\\n    }\\n\\n  }\\n\\n  if (s.length == 0) {\\n\\n    return [];\\n\\n  }\\n\\n  var results = [];\\n\\n  if (s.startsWith('0')) {\\n\\n    parts.push(0);\\n\\n    results = parseIpNum(ns, s.slice(1), parts);\\n\\n    parts.pop();\\n\\n    return results;\\n\\n  }\\n\\n  for (var i = 1; i <= 3 && i <= s.length; i++) {\\n\\n    var n = parseInt(s.slice(0, i));\\n\\n    if (n > 255) {\\n\\n      break;\\n\\n    }\\n\\n    parts.push(n);\\n\\n    results = results.concat(parseIpNum(ns, s.slice(i), parts));\\n\\n    parts.pop();\\n\\n  }\\n\\n  return results;\\n\\n}\\n\\n\\n/** @param {NS} ns **/\\n\\nfunction uniquePathInGrid2(ns, data) {\\n\\n  var maxY = data.length;\\n\\n  var maxX = data[0].length;\\n\\n  var c = Array(maxY);\\n\\n  for (var y = 0; y < maxY; y++) {\\n\\n    var row = data[y];\\n\\n    c[y] = Array(maxX);\\n\\n    for (var x = 0; x < row.length; x++) {\\n\\n      var s = 0;\\n\\n      if (row[x] == 0) {\\n\\n        if (x == 0 && y == 0) {\\n\\n          s = 1;\\n\\n        }\\n\\n        if (y > 0) {\\n\\n          s += c[y - 1][x];\\n\\n        }\\n\\n        if (x > 0) {\\n\\n          s += c[y][x - 1];\\n\\n        }\\n\\n      }\\n\\n      c[y][x] = s;\\n\\n    }\\n\\n  }\\n\\n  return c[maxY - 1][maxX - 1];\\n\\n}\\n\\n\\nfunction countPathInGrid(data, x, y) {\\n\\n  var obstacle = data[y][x];\\n\\n  if (obstacle == 1) {\\n\\n    return 0;\\n\\n  }\\n\\n  if (x == data[y].length - 1 && y == data.length) {\\n\\n    return 1;\\n\\n  }\\n\\n  var count = 0;\\n\\n  if (x < data[y].length - 1) {\\n\\n    count += countPathInGrid(data, x + 1, y);\\n\\n  }\\n\\n  if (y < data.length - 1) {\\n\\n    count += countPathInGrid(data, x, y + 1);\\n\\n  }\\n\\n}\\n\\n\\n/** @param {NS} ns **/\\n\\nfunction subarrayWithMaxSum(ns, data) {\\n\\n  return findMaxSubArraySum(data);\\n\\n}\\n\\n\\nfunction findMaxSubArraySum(arr) {\\n\\n  if (arr.length == 0) {\\n\\n    return 0;\\n\\n  }\\n\\n  if (arr.length == 1) {\\n\\n    return arr[0];\\n\\n  }\\n\\n  var sum = findMaxSubArraySum(arr.slice(1));\\n\\n  var s = 0;\\n\\n  for (var i = 0; i < arr.length; i++) {\\n\\n    s += arr;\\n\\n    if (s > sum) {\\n\\n      sum = s;\\n\\n    }\\n\\n  }\\n\\n  return sum;\\n\\n}\\n\\n\\n/** @param {NS} ns **/\\n\\nfunction arrayJumpingGame(ns, data) {\\n\\n  return findJump(data, 0);\\n\\n}\\n\\n\\nfunction findJump(data, pos) {\\n\\n  var maxJump = data[pos];\\n\\n  if (pos + maxJump >= data.length - 1) {\\n\\n    return 1;\\n\\n  }\\n\\n  for (var i = 1; i <= maxJump; i++) {\\n\\n    if (findJump(data, pos + i) == 1) {\\n\\n      return 1;\\n\\n    }\\n\\n  }\\n\\n  return 0;\\n\\n}\\n\\n\\n\\n\\n// Script to Solve Coding Contracts (Part 2)\\n/** @param {NS} ns **/\\n\\nfunction algorithmicStockTrader1(ns, data) {\\n\\n  if (data.length == 0) {\\n\\n    return 0;\\n\\n  }\\n\\n  var chances = findProfitChances(data);\\n\\n  var mergedChances = mergeChances(chances);\\n\\n  var profit = Math.max(...(mergedChances.map(cs => Math.max(...(cs.map(c => c[1] - c[0]))))));\\n\\n  return profit;\\n\\n}\\n\\n\\n/** @param {NS} ns **/\\n\\nfunction algorithmicStockTrader2(ns, data) {\\n\\n  if (data.length == 0) {\\n\\n    return 0;\\n\\n  }\\n\\n  var chances = findProfitChances(data);\\n\\n  var profit = chances.map(c => c[1] - c[0]).reduce((a, b) => a + b, 0);\\n\\n  return profit;\\n\\n}\\n\\n\\n/** @param {NS} ns **/\\n\\nfunction algorithmicStockTrader3(ns, data) {\\n\\n  if (data.length == 0) {\\n\\n    return 0;\\n\\n  }\\n\\n  var chances = findProfitChances(data);\\n\\n  // var mergedChances = mergeChances(chances);\\n\\n  // var mp = mergedChances.map(cs=>cs.map(c=>c[1]-c[0]));\\n\\n  return maxProfit(chances, 2);\\n\\n}\\n\\n\\n/** @param {NS} ns **/\\n\\nfunction algorithmicStockTrader4(ns, data) {\\n\\n  if (data[1].length == 0) {\\n\\n    return 0;\\n\\n  }\\n\\n  var chances = findProfitChances(data[1]);\\n\\n  // var mergedChances = mergeChances(chances);\\n\\n  // var mp = mergedChances.map(cs=>cs.map(c=>c[1]-c[0]));\\n\\n  return maxProfit(chances, data[0]);\\n\\n}\\n\\n\\nfunction maxProfit(chances, k) {\\n\\n  if (k == 0 || chances.length == 0) {\\n\\n    return 0;\\n\\n  }\\n\\n  var c0 = chances[0];\\n\\n  if (chances.length == 1) {\\n\\n    return c0[1] - c0[0];\\n\\n  }\\n\\n  var profit = maxProfit(chances.slice(1), k);\\n\\n  for (var i = 0; i < chances.length; i++) {\\n\\n    var p = chances[1] - chances[0][0] + maxProfit(chances.slice(i + 1), k - 1);\\n\\n    if (p > profit) {\\n\\n      profit = p;\\n\\n    }\\n\\n  }\\n\\n  return profit;\\n\\n}\\n\\n\\nfunction findProfitChances(data) {\\n\\n  var start = data[0];\\n\\n  var end = start;\\n\\n  var chances = [];\\n\\n  for (var i = 1; i < data.length; i++) {\\n\\n    var now = data;\\n\\n    if (end < now) {\\n\\n      end = now;\\n\\n    }\\n\\n    if (end > now) {\\n\\n      if (end > start) {\\n\\n        chances.push([start, end]);\\n\\n      }\\n\\n      start = now;\\n\\n      end = start;\\n\\n    }\\n\\n  }\\n\\n  if (end > start) {\\n\\n    chances.push([start, end]);\\n\\n  }\\n\\n  return chances;\\n\\n}\\n\\n\\nfunction mergeChances(chances) {\\n\\n  var n = chances.length;\\n\\n  var mc = [];\\n\\n  var cs = chances.slice();\\n\\n  mc.push(cs);\\n\\n  while (cs.length > 1) {\\n\\n    var ncs = [];\\n\\n    for (var i = 0; i < cs.length - 1; i++) {\\n\\n      ncs.push([cs[i][0], cs[i + 1][1]]);\\n\\n    }\\n\\n    mc.push(ncs);\\n\\n    cs = ncs;\\n\\n  }\\n\\n  mc.reverse();\\n\\n  return mc;\\n\\n}\\n\\n\\n/** @param {NS} ns **/\\n\\nfunction minPathSumInTriangle(ns, data) {\\n\\n  var length = data.length;\\n\\n  if (length == 1) {\\n\\n    return data[0][0];\\n\\n  }\\n\\n  var r = data[length - 1].slice();\\n\\n  for (var i = length - 2; i >= 0; i--) {\\n\\n    var row = data;\\n\\n    var nr = [];\\n\\n    for (var j = 0; j < i + 1; j++) {\\n\\n      nr.push(Math.min(r[j] + row[j], r[j + 1] + row[j]));\\n\\n    }\\n\\n    r = nr;\\n\\n  }\\n\\n  return r[0];\\n\\n}\\n\\n\\n/** @param {NS} ns **/\\n\\nfunction largestPrimeFactor(ns, data) {\\n\\n  var factor = 0;\\n\\n  var k = data;\\n\\n  var rk = Math.sqrt(k);\\n\\n  for (var i = 2; i < rk;) {\\n\\n    if (k % i == 0) {\\n\\n      factor = i;\\n\\n      k /= i;\\n\\n      rk = Math.sqrt(k);\\n\\n    } else {\\n\\n      i++;\\n\\n    }\\n\\n  }\\n\\n  if (k > factor) {\\n\\n    factor = k;\\n\\n  }\\n\\n  return factor;\\n\\n}\\n\\n\\nfunction uniquePathInGrid1(ns, data) {\\n\\n  var a = data[0];\\n\\n  var b = data[1];\\n\\n  if (a > b) {\\n\\n    a = data[1];\\n\\n    b = data[0];\\n\\n  }\\n\\n  a = a - 1;\\n\\n  b = b - 1;\\n\\n  var n = a + b;\\n\\n\\n  var c = 1;\\n\\n  for (var i = 1; i <= a; i++) {\\n\\n    c = c * n / i;\\n\\n    n--;\\n\\n  }\\n\\n  return c;\\n\\n}\\n\\n\\nfunction spiralizeMatrix(ns, data) {\\n\\n  var s = 0;\\n\\n  var m = [];\\n\\n  for (var i = 0; i < data.length; i++) {\\n\\n    m.push(data.slice());\\n\\n  }\\n\\n  var a = [];\\n\\n  while (m.length > 0 && m[0].length > 0) {\\n    switch (s) {\\n      case 0:\\n        a = a.concat(m[0]);\\n        m = m.slice(1);\\n        s = 1;\\n        break;\\n      case 1:\\n        for (var i = 0; i < m.length; i++) {\\n          a.push(m.pop());\\n        }\\n        s = 2;\\n        break;\\n      case 2:\\n        a = a.concat(m.pop().reverse());\\n        s = 3;\\n        break;\\n      case 3:\\n        for (let i = m.length - 1; i >= 0; i--) {\\n          a.push(m[0]);\\n          m = m.slice(1);\\n        }\\n        s = 0;\\n        break;\\n    }\\n  }\\n\\n  return a;\\n\\n}\\n\\n\\nfunction totalWayToSum(ns, data) {\\n\\n  var cache = {};\\n\\n  var n = data;\\n\\n  return twts(n, n, cache) - 1;\\n\\n}\\n\\n\\nfunction twts(limit, n, cache) {\\n\\n  if (n < 1) {\\n\\n    return 1;\\n\\n  }\\n\\n  if (limit == 1) {\\n\\n    return 1;\\n\\n  }\\n\\n  if (n < limit) {\\n    return twts(n, n, cache);\\n  }\\n\\n  if (n in cache) {\\n    var c = cache[n];\\n    if (limit in c) {\\n      return c[limit];\\n    }\\n  }\\n\\n  var s = 0;\\n\\n  for (var i = 1; i <= limit; i++) {\\n    s += twts(i, n - i, cache);\\n  }\\n\\n  if (!(n in cache)) {\\n    cache[n] = {};\\n  }\\n  cache[n][limit] = s; return s;\\n}\",\"filename\":\"/contracts/solve-contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"solve-contract.js\",\"url\":\"blob:file:///2cd6a0ca-c561-44f8-93c0-ae9a63d0a286\",\"moduleSequenceNumber\":4907}],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { solveContract } from \\\"contracts/solve-contract.js\\\";\\n\\n/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  while (true) {\\n    await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\n    await ns.sleep(1000);\\n  }\\n}\\n\\n/** @param {NS} ns **/\\n\\nasync function dfs(ns, parent, current, f, depth, ...args) {\\n  var hosts = ns.scan(current);\\n\\n  if (parent != null) {\\n    const index = hosts.indexOf(parent);\\n\\n    if (index > -1) {\\n      hosts.splice(index, 1);\\n    }\\n  }\\n\\n  await f(ns, current, depth, ...args);\\n\\n  for (let index = 0, len = hosts.length; index < len; ++index) {\\n    const host = hosts[index];\\n\\n    await dfs(ns, current, host, f, depth + 1, ...args);\\n  }\\n}\\n\\n/** @param {NS} ns **/\\n\\nasync function trySolveContracts(ns, host, depth) {\\n  var contracts = ns.ls(host, \\\"cct\\\");\\n\\n  for (var contract of contracts) {\\n    solveContract(ns, host, contract, 0);\\n  }\\n}\",\"filename\":\"/contracts/contract-auto-solver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solve-contract.js\",\"url\":\"blob:file:///82635338-02d3-487b-9c4f-01143f77e024\",\"moduleSequenceNumber\":66},{\"filename\":\"/contracts/contract-auto-solver.js\",\"url\":\"blob:file:///846881be-3ae5-4c65-9d6c-ee844c10f761\",\"moduleSequenceNumber\":2737}],\"dependents\":[],\"ramUsage\":27,\"server\":\"home\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await purchaseServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function purchaseServer(ns, ram = 1024) {\\n    let numServers = ns.getPurchasedServers().length;\\n\\n    while (numServers < ns.getPurchasedServerLimit()) {\\n        // Check if we have enough money to purchase a server\\n        // only use 1% of cash for purchases\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") * 0.01 > ns.getPurchasedServerCost(ram )) {\\n            // If we have enough money, then:\\n            //  1. Purchase the server\\n            //  2. Copy our hacking script onto the newly-purchased server\\n            //  3. Run our hacking script on the newly-purchased server with 3 threads\\n            //  4. Increment our iterator to indicate that we've bought a new server\\n            var hostname = ns.purchaseServer(\\\"pserv-\\\" + numServers, ram);\\n            numServers++;\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"/server-expansion/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/server-expansion/daemon.js\",\"url\":\"blob:file:///a95617e1-d7ac-4100-bda2-e20669dc15dc\",\"moduleSequenceNumber\":21635}],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"home\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @module: crawler */\\n\\n/**\\n * Crawler module - tools to aid in crawling through nodes.\\n */\\n\\n/**\\n * crawlCallback - function called for each appropriate node.\\n * @callback crawlCallback\\n * @param {NS} ns - the ns library.\\n * @param {string} current - the current node being worked on.\\n * @param {number} depth - the current depth of the search.\\n * @param {...*} args - any other arguments you want.\\n */\\n\\n/** \\n * Crawl through the node tree running the provided function\\n * @param {NS} ns - the ns library.\\n * @param {string} parent - the parent node (usually null).\\n * @param {string} current - the current node (can be null for the running host).\\n * @param {crawlCallback} f - the function to call on appropriate nodes.\\n * @param {number} depth - the depth that we are at (usually starts at 0).\\n * @param {NodeType} mode - The type of node we will execute the function for.\\n * @param {...*} args - any arguments to be passed to the callback\\n */\\n\\nexport async function crawl(ns, parent, current, f, depth, mode, ...args) {\\n    ns.tprint(`Crawling through ${mode} nodes`);\\n    // Get the list of hosts for the current node\\n    /** @type {string[]} */\\n    let hosts;\\n    if (current !== null) {\\n        hosts = ns.scan(current);\\n    } else {\\n        hosts = ns.scan();\\n    }\\n\\n    // if there is a parent remove it from the list of hosts\\n    if (parent != null) {\\n        const index = hosts.indexOf(parent);\\n\\n        if (index > -1) {\\n            hosts.splice(index, 1);\\n        }\\n    }\\n\\n    /** @type {NodeType[]} */\\n    let nodeTypes = getTypes(ns, current);\\n\\n    switch (mode) {\\n        case NodeType.Crackable:\\n            if (nodeTypes.includes(NodeType.Crackable)) {\\n                ns.tprint(`Crackable node ${current} found!`)\\n                await f(ns, current, depth, ...args);\\n            }\\n            break;\\n        case NodeType.Hackable:\\n            if (nodeTypes.includes(NodeType.Hackable)) {\\n                ns.tprint(`Hackable node ${current} found!`)\\n                await f(ns, current, depth, ...args);\\n            }\\n            break;\\n        case NodeType.Runnable:\\n            if (nodeTypes.includes(NodeType.Runnable)) {\\n                ns.tprint(`Runnable node ${current} found!`)\\n                await f(ns, current, depth, ...args);\\n            }\\n            break;\\n    }\\n\\n    for (let host of hosts) {\\n        await crawl(ns, current, host, f, depth + 1, mode, ...args);\\n        await ns.sleep(1000);\\n    }\\n}\\n\\n/**\\n * Analyze a node and get the node types it belongs to.\\n * @function getTypes\\n * @param {NS} ns - the ns library used to analyze the node\\n * @param {string} name - the name of the node to analyze.\\n * @returns {NodeType[]} - the node types that the node can be classified as.\\n */\\nfunction getTypes(ns, name) {\\n    /** @type {NodeType[]} */\\n    let types = [];\\n    /** @type {number} */\\n    let openablePorts = getOpenablePorts(ns);\\n\\n    if (!ns.serverExists(name)) return [NodeType.Invalid];\\n\\n    if (ns.hasRootAccess(name)) types.push(NodeType.Runnable);\\n    else if (ns.getServerNumPortsRequired(name) <= openablePorts) types.push(NodeType.Crackable);\\n\\n    if (ns.getServerRequiredHackingLevel(name) <= ns.getHackingLevel() && ns.hasRootAccess(name)) types.push(NodeType.Hackable);\\n\\n    return types;\\n}\\n\\n/**\\n * Get the number of ports the user can open.\\n * @param {NS} ns - the ns library.\\n * @returns {number} - the number of ports that can be opened by the user.\\n */\\nexport function getOpenablePorts(ns) {\\n    /** @type {number} */\\n    let result = 0;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        result++;\\n    }\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n        result++;\\n    }\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n        result++;\\n    }\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n        result++;\\n    }\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n        result++;\\n    }\\n    return result;\\n}\\n\\n/** Enumeration Class representing the type of node you want \\n * @enum {string}\\n*/\\nexport const NodeType = {\\n    /**\\n     * A Hackable node is one that can be hacked or backdoored.\\n     * @static\\n     */\\n    Hackable: 'Hackable',\\n    /**\\n     * A Crackable node is one that needs NUKEd and has the proper number of ports openned.\\n     * @static\\n     */\\n    Crackable: 'Crackable',\\n    /**\\n     * A Runnable node is one that has already been NUKEd.\\n     * We have root access and can run scripts on the server.\\n     * @static\\n     */\\n    Runnable: 'Runnable',\\n\\n    /**\\n     * An Invalid node is not a node at all but a string that thinks it's a node.\\n     * @static\\n     */\\n    Invalid: 'Invalid',\\n};\",\"filename\":\"/archive/crawler.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/archive/crawler.js\",\"url\":\"blob:file:///bb9db0bd-a8ea-4cb0-b03e-288b0fedeff7\",\"moduleSequenceNumber\":2125}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    // the target server\\r\\n    const target = ns.args[0].toString();\\r\\n    // The files to copy to each server node\\r\\n    const files = [\\r\\n        \\\"/basic/hacknshare.js\\\",\\r\\n        \\\"/basic/grownshare.js\\\",\\r\\n        \\\"/basic/hack.js\\\",\\r\\n        \\\"/basic/backdoor.js\\\",\\r\\n    ];\\r\\n    await ns.scp(files, \\\"home\\\", target);\\r\\n}\\r\\n\",\"filename\":\"/basic/cpall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/cpall.js\",\"url\":\"blob:file:///ea08209c-bec6-4d95-8aea-42fd9d448d91\",\"moduleSequenceNumber\":21640}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":2222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @module crawler */\\nimport { crawl, NodeType } from 'crawler.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    // should we run the share version?\\n    const flags = ns.flags([\\n        ['share', false],\\n    ]);\\n    // const shouldShare = ns.args[0] === \\\"--share\\\";\\n    const shouldShare = flags.share\\n    // SANITY CHECK\\n    if (shouldShare) {\\n        ns.tprint('Sharing flag detected!');\\n    } else {\\n        ns.tprint('Sharing flag not detected!');\\n    }\\n    // SANITY CHECK\\n\\n    const scriptName = shouldShare ? \\\"hacknshare.js\\\" : \\\"hack.js\\\";\\n\\n    /** @param {NS} ns **/\\n    function crack(ns, server) {\\n        ns.run('nuke.js', 1, server);\\n    }\\n\\n    await crawl(ns, null, null, crack, 0, NodeType.Crackable);\\n}\",\"filename\":\"/archive/crackall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"crawler.js\",\"url\":\"blob:file:///a1ea79f5-6380-4fa5-b605-4bdb8964fc93\",\"moduleSequenceNumber\":5829},{\"filename\":\"crackall.js\",\"url\":\"blob:file:///981b77cc-3e92-46cd-b75d-43480fb41af5\",\"moduleSequenceNumber\":7165}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall\\\";\\r\\nexport async function main(ns) {\\r\\n    const servers = await getAllServers(ns);\\r\\n    for (const server of servers) {\\r\\n        ns.tprint(server);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/listall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///ff345758-e473-4350-a000-22bd670108b0\",\"moduleSequenceNumber\":210},{\"filename\":\"/advanced/listall.js\",\"url\":\"blob:file:///9a790ff5-fe0b-4924-b192-00f8e597212a\",\"moduleSequenceNumber\":23608}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":2228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    await getAllServers(ns);\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function getAllServers(ns) {\\r\\n    let allServers = [];\\r\\n    async function getServers(host = undefined) {\\r\\n        let localServers = ns.scan(host);\\r\\n        localServers = localServers.filter((s) => !allServers.includes(s));\\r\\n        if (localServers.length === 0)\\r\\n            return;\\r\\n        for (let server of localServers) {\\r\\n            allServers.push(server);\\r\\n            await getServers(server);\\r\\n        }\\r\\n    }\\r\\n    await getServers();\\r\\n    // This lists all contracts.\\r\\n    /*\\r\\n      for (let server of allServers) {\\r\\n          let files = ns.ls(server, 'cct');\\r\\n          if (files.length === 0) return;\\r\\n          ns.tprint(\\\"==================================\\\");\\r\\n          ns.tprint(`Files on ${server}:`);\\r\\n          for (let file of files) {\\r\\n              ns.tprint(`\\\\t${file}`);\\r\\n          }\\r\\n          ns.tprint(\\\"==================================\\\");\\r\\n      }\\r\\n      */\\r\\n    // ns.tprint(`${allServers.length} servers found!`);\\r\\n    return allServers;\\r\\n}\\r\\n\",\"filename\":\"/lib/getall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":2220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall\\\";\\r\\nconst minCash = 100;\\r\\nconst bestServerCheckDuration = 1000 * // = 1 second\\r\\n    60 * // = 1 minute\\r\\n    60 * // = 1 hour\\r\\n    24; // = 1 day\\r\\nconst scriptUpdateDuration = 1000 * // = 1 second\\r\\n    60 * // = 1 minute\\r\\n    60; // = 1 hour\\r\\nexport async function main(ns) {\\r\\n    await crawl(ns);\\r\\n}\\r\\nasync function crawl(ns) {\\r\\n    // Always share!\\r\\n    // Get common data to compare\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    const servers = await getAllServers(ns);\\r\\n    const hackableServers = servers.filter((s) => ns.getServerRequiredHackingLevel(s) <= hackingLevel &&\\r\\n        ns.hasRootAccess(s) &&\\r\\n        ns.getServerMaxMoney(s) >= minCash);\\r\\n    const runnableServers = servers.filter((s) => ns.hasRootAccess(s));\\r\\n    // Start loop here:\\r\\n    while (true) {\\r\\n        // Find the richest server\\r\\n        let richestServer = [\\\"\\\", 0];\\r\\n        for (const s of hackableServers) {\\r\\n            const maxMoney = ns.getServerMaxMoney(s);\\r\\n            if (maxMoney > richestServer[1]) {\\r\\n                richestServer = [s, maxMoney];\\r\\n            }\\r\\n        }\\r\\n        const [target, maxMoney] = richestServer;\\r\\n        // hack/grow/weaken it as appropriate from all servers\\r\\n        let scriptName = \\\"\\\";\\r\\n        let startTime = Date.now();\\r\\n        while (true) {\\r\\n            let oldScript = scriptName;\\r\\n            if (ns.getServerMoneyAvailable(target) < maxMoney * 0.75) {\\r\\n                // if the server has less than 75% their capacity grow it.\\r\\n                scriptName = \\\"/basic/grownshare.js\\\";\\r\\n            }\\r\\n            else if (ns.hackAnalyzeChance(target) < 0.6) {\\r\\n                // if we have less than a 60% chance to successfully hack the server\\r\\n                // weaken it.\\r\\n                scriptName = \\\"/basic/weaken.js\\\";\\r\\n            }\\r\\n            else {\\r\\n                // Otherwise we hack the server.\\r\\n                scriptName = \\\"/basic/hacknshare.js\\\";\\r\\n            }\\r\\n            if (scriptName === oldScript)\\r\\n                continue;\\r\\n            for (const host of runnableServers) {\\r\\n                // Don't hog the home pc\\r\\n                if (host === \\\"home\\\")\\r\\n                    continue;\\r\\n                // kill everything on the host first\\r\\n                if (ns.scriptRunning(scriptName, host))\\r\\n                    continue;\\r\\n                ns.killall(host);\\r\\n                ns.run(\\\"/official/deploy.js\\\", 1, host, scriptName, target);\\r\\n                while (ns.scriptRunning(\\\"/official/deploy.js\\\", host))\\r\\n                    await ns.sleep(1);\\r\\n            }\\r\\n            if (Date.now() - startTime > bestServerCheckDuration) {\\r\\n                break;\\r\\n            }\\r\\n            await ns.sleep(scriptUpdateDuration);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/hackall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///e8b36e63-f011-4949-81f1-cb6d3f9f4296\",\"moduleSequenceNumber\":2220},{\"filename\":\"/advanced/hackall.js\",\"url\":\"blob:file:///c5a2e159-2086-4ce9-a93d-197161efa466\",\"moduleSequenceNumber\":18996}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":22317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall.js\\\";\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {}\\r\\n\",\"filename\":\"/advanced/crackall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///3e4c1e87-3213-4949-ada0-525149fde6cd\",\"moduleSequenceNumber\":152254},{\"filename\":\"/advanced/crackall.js\",\"url\":\"blob:file:///7d9d16b7-6e6b-4519-acb6-f513437a4541\",\"moduleSequenceNumber\":156070}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const minuteInterval = 5;\\r\\nconst nukeScript = \\\"/advanced/nukeall.js\\\";\\r\\nconst hackScript = \\\"/advanced/hackall.js\\\";\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        ns.run(nukeScript);\\r\\n        while (ns.isRunning(nukeScript, \\\"home\\\"))\\r\\n            await ns.sleep(1);\\r\\n        ns.run(hackScript, 1, \\\"--share\\\");\\r\\n        await ns.sleep(minuteInterval * 60 * 1000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/advanced/daemon.js\",\"url\":\"blob:file:///a155824c-5ac7-4ddd-8ea7-22c27800d23d\",\"moduleSequenceNumber\":21633}],\"dependents\":[],\"ramUsage\":2.7,\"server\":\"home\",\"moduleSequenceNumber\":2218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const allowancePercentage = 0.01;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n            let gain = [0, 0, 0];\\n            let currentCash = ns.getServerMoneyAvailable('home');\\n            currentCash *= allowancePercentage;\\n\\n            if (ns.hacknet.getPurchaseNodeCost() <= currentCash) {\\n                ns.hacknet.purchaseNode();\\n                continue;\\n            }\\n\\n            const node = ns.hacknet.getNodeStats(i);\\n\\n            if (node.level < 200) {\\n                gain[0] = ((node.level + 1) * 1.6) * Math.pow(1.035, (node.ram - 1)) * ((node.cores + 5) / 6) / ns.hacknet.getLevelUpgradeCost(i,1);\\n            } else {\\n                gain[0] = 0;\\n            }\\n\\n            if (node.ram < 64) {\\n                gain[1] = (node.level * 1.6) * Math.pow(1.035, (node.ram * 2) - 1) * ((node.cores + 5) / 6) / ns.hacknet.getRamUpgradeCost(i, 1);\\n            } else {\\n                gain[1] = 0;\\n            }\\n\\n            if (node.cores < 16) {\\n                gain[2] = (node.level * 1.6) * Math.pow(1.035, node.ram - 1) * ((node.cores + 6) / 6) / ns.hacknet.getCoreUpgradeCost(i, 1);\\n            } else {\\n                gain[2] = 0;\\n            }\\n            \\n            ns.print(`Level Upgrade: ${gain[0]}`);\\n            ns.print(`Ram Upgrade: ${gain[1]}`);\\n            ns.print(`Core Upgrade: ${gain[2]}`);\\n\\n            let topgain = 0;\\n\\n            for (let g of gain) {\\n                if (g > topgain) {\\n                    topgain = g;\\n                }\\n            }\\n\\n            if (topgain === 0) {\\n                ns.print(`All Gains maxed on Node ${i}`);\\n                break;\\n            }\\n\\n            if (topgain === gain[0] && ns.hacknet.getLevelUpgradeCost(i, 1) < currentCash) {\\n                ns.print(`Upgrading Level on Node ${i}`);\\n                ns.hacknet.upgradeLevel(i, 1);\\n            }\\n            if (topgain === gain[1] && ns.hacknet.getRamUpgradeCost(i, 1) < currentCash) {\\n                ns.print(`Upgrading Ram on Node ${i}`);\\n                ns.hacknet.upgradeRam(i, 1);\\n            }\\n            if (topgain === gain[2] && ns.hacknet.getCoreUpgradeCost(i, 1) < currentCash) {\\n                ns.print(`Upgrading Cores on Node ${i}`);\\n                ns.hacknet.upgradeCore(i, 1);\\n            } else {\\n                ns.print(`Cannot afford upgrades on Node ${i}`);\\n            }\\n        }\\n        await ns.sleep(1000);\\n    }\\n\\n}\",\"filename\":\"/hacknet/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hacknet/daemon.js\",\"url\":\"blob:file:///e062023e-f5a5-4bc6-a4e9-6caaa58c4e49\",\"moduleSequenceNumber\":1073}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { solveContract } from \\\"contracts/solve-contract.js\\\";\\n\\n/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  while (true) {\\n    await dfs(ns, null, \\\"home\\\", listContract, 0);\\n    await ns.sleep(1000);\\n  }\\n}\\n\\n/** @param {NS} ns **/\\n\\nasync function dfs(ns, parent, current, f, depth, ...args) {\\n  var hosts = ns.scan(current);\\n\\n  if (parent != null) {\\n    const index = hosts.indexOf(parent);\\n\\n    if (index > -1) {\\n      hosts.splice(index, 1);\\n    }\\n  }\\n\\n  await f(ns, current, depth, ...args);\\n\\n  for (let index = 0, len = hosts.length; index < len; ++index) {\\n    const host = hosts[index];\\n\\n    await dfs(ns, current, host, f, depth + 1, ...args);\\n  }\\n}\\n\\n/** @param {NS} ns **/\\n\\nasync function trySolveContracts(ns, host, depth) {\\n  var contracts = ns.ls(host, \\\"cct\\\");\\n\\n  for (var contract of contracts) {\\n    solveContract(ns, host, contract, 0);\\n  }\\n}\\n\\nasync function listContract(ns, host, depth) {\\n  var contracts = ns.ls(host, \\\"cct\\\");\\n\\n  for (var contract of contracts) {\\n    ns.tprint(`Contract found on ${host}: ${depth} levels in.`)\\n  }\\n}\",\"filename\":\"/contracts/contract-finder.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solve-contract.js\",\"url\":\"blob:file:///1a49d6e6-529f-4bc2-8111-fa9b7b854d1b\",\"moduleSequenceNumber\":66},{\"filename\":\"/contracts/contract-finder.js\",\"url\":\"blob:file:///7f2b409b-53e8-4105-92bf-32454f38ea55\",\"moduleSequenceNumber\":136}],\"dependents\":[],\"ramUsage\":27,\"server\":\"home\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall.js\\\";\\r\\nimport * as solvers from \\\"contracts/solvers/index.js\\\";\\r\\nconst minuteInterval = 2;\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        // await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\r\\n        const contracts = (await getAllServers(ns)).flatMap((server) => {\\r\\n            const onServer = ns.ls(server, \\\".cct\\\").map((contract) => {\\r\\n                const type = ns.codingcontract.getContractType(contract, server);\\r\\n                const data = ns.codingcontract.getData(contract, server);\\r\\n                const didSolve = solve(type, data, server, contract, ns);\\r\\n                return `${server} - ${contract} - ${type} - ${didSolve || \\\"FAILED!\\\"}`;\\r\\n            });\\r\\n            return onServer;\\r\\n        });\\r\\n        ns.tprint(`Found ${contracts.length} contracts`);\\r\\n        // contracts.forEach((contract) => ns.tprint(contract));\\r\\n        for (const contract of contracts) {\\r\\n            ns.tprint(contract);\\r\\n        }\\r\\n        await ns.sleep(minuteInterval * 60 * 1000);\\r\\n    }\\r\\n}\\r\\nfunction solve(type, data, server, contract, ns) {\\r\\n    let solution;\\r\\n    ns.tprint(type);\\r\\n    switch (type) {\\r\\n        case \\\"Algorithmic Stock Trader I\\\":\\r\\n            solution = solvers.maxProfit([1, data]);\\r\\n            break;\\r\\n        case \\\"Algorithmic Stock Trader II\\\":\\r\\n            solution = solvers.maxProfit([Math.ceil(data.length / 2), data]);\\r\\n            break;\\r\\n        case \\\"Algorithmic Stock Trader III\\\":\\r\\n            solution = solvers.maxProfit([2, data]);\\r\\n            break;\\r\\n        case \\\"Algorithmic Stock Trader IV\\\":\\r\\n            solution = solvers.maxProfit(data);\\r\\n            break;\\r\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\r\\n            solution = solvers.triangleSum(data);\\r\\n            break;\\r\\n        case \\\"Unique Paths in a Grid I\\\":\\r\\n            solution = solvers.uniquePathsI(data);\\r\\n            break;\\r\\n        case \\\"Unique Paths in a Grid II\\\":\\r\\n            solution = solvers.uniquePathsII(data);\\r\\n            break;\\r\\n        case \\\"Generate IP Addresses\\\":\\r\\n            solution = solvers.generateIps(data);\\r\\n            break;\\r\\n        case \\\"Find Largest Prime Factor\\\":\\r\\n            solution = solvers.factor(data);\\r\\n            break;\\r\\n        case \\\"Spiralize Matrix\\\":\\r\\n            solution = solvers.spiral(data);\\r\\n            break;\\r\\n        case \\\"Merge Overlapping Intervals\\\":\\r\\n            solution = solvers.mergeOverlap(data);\\r\\n            break;\\r\\n        case \\\"Subarray with Maximum Sum\\\":\\r\\n            solution = solvers.solveSum(data);\\r\\n            break;\\r\\n        case \\\"Array Jumping Game\\\":\\r\\n            solution = solvers.solveJump(data);\\r\\n            break;\\r\\n        case \\\"Total Ways to Sum\\\":\\r\\n            solution = solvers.totalWaysToSum(data);\\r\\n            break;\\r\\n        case \\\"Sanitize Parentheses in Expression\\\":\\r\\n            solution = solvers.sanitizeParentheses(data);\\r\\n            break;\\r\\n        default:\\r\\n            ns.tprint(`Unknown contract type: ${type}`);\\r\\n            return \\\"\\\";\\r\\n    }\\r\\n    if (solution != undefined)\\r\\n        ns.tprint(`Submitting solution: ${solution} to ${type} - ${contract}`);\\r\\n    return solution != undefined\\r\\n        ? ns.codingcontract.attempt(solution, contract, server, {\\r\\n            returnReward: true,\\r\\n        })\\r\\n        : \\\"\\\";\\r\\n}\\r\\n\",\"filename\":\"/contracts/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///d50c8d39-cace-45b5-a47e-8c1dc985cab6\",\"moduleSequenceNumber\":20552},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///9472e65c-1fbb-4473-8e91-77cd78f89008\",\"moduleSequenceNumber\":20534},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///bce57d02-63a4-44e9-a0d7-9805b74e6c7d\",\"moduleSequenceNumber\":20532},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///8bf4f808-f35b-43a3-8d16-9a3b74c0ef86\",\"moduleSequenceNumber\":20530},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///b8fb927c-95c9-44ca-84fc-b7282923906b\",\"moduleSequenceNumber\":20528},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///2cd4abf7-b37d-4a51-9157-36aa9846e339\",\"moduleSequenceNumber\":20526},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///23fc8a3b-0b44-4d91-ae9d-971904a7889a\",\"moduleSequenceNumber\":20524},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///01200dd9-5ae3-48a5-8002-ca939d6f3ca6\",\"moduleSequenceNumber\":20522},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///1b475a1c-de31-4761-bad7-dc6428ca128a\",\"moduleSequenceNumber\":20520},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///e8946306-564b-4dc3-970a-6464a01562de\",\"moduleSequenceNumber\":20518},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///ea9c7144-804c-4583-aad4-a9e89222d2a7\",\"moduleSequenceNumber\":20500},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///f20d4292-ad2e-4419-969e-182a2255681e\",\"moduleSequenceNumber\":20554},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///7e62cc5f-2af0-4554-b36e-1de15362d4f1\",\"moduleSequenceNumber\":20490},{\"filename\":\"/contracts/daemon.js\",\"url\":\"blob:file:///a1e221e8-f8ee-4b02-8f49-450ef806d656\",\"moduleSequenceNumber\":21634}],\"dependents\":[],\"ramUsage\":22,\"server\":\"home\",\"moduleSequenceNumber\":2242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall\\\";\\r\\nexport async function main(ns) {\\r\\n    const servers = await getAllServers(ns);\\r\\n    for (const server of servers) {\\r\\n        if (server !== \\\"home\\\") {\\r\\n            ns.killall(server);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/killall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///4283efe8-f748-4e40-bc5f-66c89a0efbfd\",\"moduleSequenceNumber\":20490},{\"filename\":\"/advanced/killall.js\",\"url\":\"blob:file:///2ad6fdd5-7268-4667-b33e-451642d7f521\",\"moduleSequenceNumber\":21632}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":2226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/backdoor.js\",\"url\":\"blob:file:///8166ac0f-f2ff-45a6-9b46-6817e6862ad7\",\"moduleSequenceNumber\":4702}],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"home\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///4c1fae8b-0446-4540-8391-8a9af4317e3f\",\"moduleSequenceNumber\":12776}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":2234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from 'lib/getall.js';\\n\\nconst minCash = 100;\\n\\nconst whitelist = [\\n    'sigma-cosmetics',\\n    'omega-net',\\n]\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        [\\\"share\\\", false],\\n    ]);\\n    await crawl(ns, flags.share);\\n}\\n\\n/**\\n * @param {NS} ns - the netscript library\\n * @param {boolean} shouldShare - should we share?\\n */\\nasync function crawl(ns, shouldShare) {\\n    /** @type {number} */\\n    let hackingLevel = ns.getHackingLevel();\\n    /** @type {string[]} */\\n    let servers = await getAllServers(ns);\\n    /** @type {string[]} */\\n    let hackableServers = servers.filter(s =>\\n        ns.getServerRequiredHackingLevel(s) <= hackingLevel &&\\n        ns.hasRootAccess(s) &&\\n        ns.getServerMaxMoney(s) >= minCash &&\\n        whitelist.includes(s)\\n    );\\n    /** @type {string[]} */\\n    let runnableServers = servers.filter(s =>\\n        ns.hasRootAccess(s)\\n    );\\n\\n    // let scriptName = shouldShare ? \\\"basic/hacknshare.js\\\" : \\\"basic/hack.js\\\";\\n    let scriptName = \\\"basic/grownshare.js\\\";\\n\\n    for (let host of runnableServers) {\\n        ns.run('basic/cpall.js', 1, host);\\n        if (ns.getServerRequiredHackingLevel(host) < hackingLevel) {\\n            // ns.exec('basic/backdoor.js', host);\\n        }\\n        for (let target of hackableServers) {\\n            // ns.tprint(`Hacking ${target} from ${host}`)\\n            ns.exec(scriptName, host, 1, target);\\n            await ns.sleep(1);\\n        }\\n    }\\n}\",\"filename\":\"/advanced/growall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///fb543b23-601f-4625-a207-b2a11963b06c\",\"moduleSequenceNumber\":119},{\"filename\":\"/advanced/growall.js\",\"url\":\"blob:file:///f29184ec-43c5-4bb8-b8b1-7e17b640928a\",\"moduleSequenceNumber\":9227}],\"dependents\":[],\"ramUsage\":6.8,\"server\":\"home\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.tprint(\\\"Test Hello World Function!\\\");\\r\\n}\\r\\n\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///720a51dd-6ca6-4554-9ec6-5916bd2f450b\",\"moduleSequenceNumber\":38694}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// % of money to use in buying stocks\\nconst budget = 1;\\n// % at which to buy or sell stocks\\nconst buyAt = 70;\\nconst sellBellow = 60;\\n\\n// Profit amount to sell the stock at.\\nconst sellAt = 1000000000;\\n\\n// TODO short stocks\\nconst shortAt = 40;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        deamon(ns);\\n        await ns.sleep(6 * 1000)\\n    }\\n}\\n\\n/** @param {number} n */\\nfunction formatNumber(n) {\\n    return n.toLocaleString(undefined, { minimumFractionDigits: 2 });\\n}\\n\\n/** @param {NS} ns **/\\nfunction deamon(ns) {\\n    /** @type {string[]} */\\n    let stocks = ns.stock.getSymbols();\\n    for (let stock of stocks) {\\n        let increaseChance = ns.stock.getForecast(stock) * 100;\\n        let longOrders = ns.stock.getPosition(stock)[0];\\n        let maxShares = getMaxShares(ns, stock);\\n\\n        if (longOrders > 0) {\\n        }\\n\\n        if (increaseChance >= buyAt && longOrders < maxShares) {\\n            let cost = ns.stock.buy(stock, maxShares);\\n            ns.tprint(`${formatNumber(maxShares)} shares of ${stock} purchased for a total of \\\\$${formatNumber(cost)}\\n                because it has a ${formatNumber(increaseChance)}% chance of increasing.`);\\n        } else if (longOrders > 0) {\\n            let profit = ns.stock.getSaleGain(stock, maxShares, 'Long');\\n            if (profit >= sellAt) {\\n                let total = ns.stock.sell(stock, longOrders);\\n                ns.tprint(`${formatNumber(longOrders)} of ${stock} sold for a total of \\\\$${formatNumber(total)} \\n                    because it's profit: \\\\$${formatNumber(profit)} has reached target profit: \\\\$${formatNumber(sellAt)}.`);\\n            }\\n            if (increaseChance <= sellBellow) {\\n                let total = ns.stock.sell(stock, longOrders);\\n                ns.tprint(`${formatNumber(longOrders)} of ${stock} sold for a total of \\\\$${formatNumber(total)} \\n                    because it's growth is stopping.`);\\n            }\\n        }\\n\\n    }\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {string} sym\\n * **/\\nfunction getMaxShares(ns, sym) {\\n    let cashAvailable = ns.getServerMoneyAvailable('home') * (budget / 100);\\n    let stockCost = ns.stock.getAskPrice(sym);\\n    let maxPurchaseable = Math.min(ns.stock.getMaxShares(sym), cashAvailable / stockCost);\\n    return maxPurchaseable;\\n}\",\"filename\":\"/stocks/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stocks/daemon.js\",\"url\":\"blob:file:///e5aac51b-7843-48fd-ada5-bb7107e1a0f0\",\"moduleSequenceNumber\":329}],\"dependents\":[],\"ramUsage\":19.2,\"server\":\"home\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall.js\\\";\\n\\n/**\\n * @type {fn -> string[]} getAllServers\\n */\\n\\nexport async function main(ns) {\\n    const contracts = (await getAllServers(ns)).flatMap((server) => {\\n        const onServer = ns.ls(server, \\\".cct\\\").map((contract) => {\\n            const type = ns.codingcontract.getContractType(contract, server);\\n            const data = ns.codingcontract.getData(contract, server);\\n            const didSolve = solve(type, data, server, contract, ns);\\n            return `${server} - ${contract} - ${type} - ${didSolve || \\\"FAILED!\\\"}`;\\n        });\\n        return onServer;\\n    });\\n    ns.tprint(`Found ${contracts.length} contracts`);\\n    contracts.forEach((contract) => void ns.tprint(contract));\\n}\\n\\nfunction solve(type, data, server, contract, ns) {\\n    let solution = \\\"\\\";\\n    ns.tprint(type);\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solveTriangleSum(data, ns);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = factor(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = mergeOverlap(data);\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            solution = solveSum(data);\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            solution = solveJump(data);\\n            break;\\n        case 'Total Ways to Sum':\\n            solution = totalWaysToSum(data);\\n            break;\\n        default:\\n            ns.tprint(`Unknown contract type: ${type}`);\\n    }\\n    if (solution != '') ns.tprint(`Submitting solution: ${solution} to ${type} - ${contract}`)\\n    return (solution != \\\"\\\") ? ns.codingcontract.attempt(solution, contract, server, {\\n        returnReward: true,\\n    }) : \\\"\\\";\\n}\\n\\n//ALGORITHMIC STOCK TRADER\\n\\nfunction maxProfit(arrayData) {\\n    let i, j, k;\\n\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n\\n    // WHY?\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n\\n    let highestProfit = JSON.parse(tempArr);\\n\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) { // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) { // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\\n//SMALLEST TRIANGLE SUM\\n\\nfunction solveTriangleSum(arrayData, ns) {\\n    let triangle = arrayData;\\n    let nextArray;\\n    let previousArray = triangle[0];\\n\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            } else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            } else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n\\n        }\\n\\n        previousArray = nextArray;\\n    }\\n\\n    return Math.min.apply(null, nextArray);\\n}\\n\\n//UNIQUE PATHS IN A GRID\\n\\nfunction uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n}\\n\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\n\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\n\\nfunction uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n\\n            if (grid[i][j] == 1 && (!ignoreFirst || (i != 0 || j != 0)) && (!ignoreLast || (i != grid.length - 1 || j != grid[i].length - 1))) {\\n                const newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n\\n    }\\n\\n    return totalPossiblePaths;\\n}\\n\\n//GENERATE IP ADDRESSES\\n\\nfunction generateIps(num) {\\n    num = num.toString();\\n\\n    const length = num.length;\\n\\n    const ips = [];\\n\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length)\\n                ];\\n                let isValid = true;\\n\\n                ip.forEach(seg => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n\\n                if (isValid) ips.push(ip.join(\\\".\\\"));\\n\\n            }\\n\\n        }\\n    }\\n\\n    return ips;\\n\\n}\\n\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\") return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255) return false;\\n    return true;\\n}\\n\\n//GREATEST FACTOR\\n\\nfunction factor(num) {\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\n        if (num % div != 0) {\\n            continue;\\n        }\\n        num = num / div;\\n        div = 1;\\n    }\\n    return num;\\n}\\n\\n//SPIRALIZE Matrix\\n\\nfunction spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.pop().reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\n\\nfunction column(arr, index) {\\n    const res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n\\n// Merge Overlapping Intervals\\n\\nfunction mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\n\\nfunction solveSum(data) {\\n    const arrLength = data.length;\\n    let maxSum = -Infinity;\\n\\n    for (let i = 0; i < arrLength; i++) {\\n        const sub = data.slice(0, i + 1);\\n        for (let j = 0; j < sub.length; j++) {\\n            const sub2 = sub.slice(j, sub.length);\\n            // ns.tprint(`i ${i} j ${j} ${JSON.stringify(sub)} ${JSON.stringify(sub2)}`);\\n            const sum = sub2.reduce((prev, cur) => prev += cur, 0);\\n\\n            if (sum > maxSum) maxSum = sum;\\n\\n            // ns.tprint(`${sum}: ${sub2}`);\\n        }\\n    }\\n\\n    return maxSum;\\n}\\n\\n// Array jumping game solver\\n\\nexport function solveJump(data) {\\n    // ns.tprint(JSON.stringify(data))\\n    for (let i = data[0] - 1; i > -1; i--) {\\n        if (i + 1 >= data.length) return true;\\n\\n        return solveJump(data.slice(i + 1))\\n    }\\n\\n    return false;\\n}\\n\\n// Total Ways to Sum\\n\\n/** @param {number} data */\\nexport function totalWaysToSum(data) {\\n    let N = data;\\n    let K = data - 1;\\n    // Initialize a list\\n    let dp = Array.from({ length: N + 1 }, (_, i) => 0);\\n\\n    // Update dp[0] to 1\\n    dp[0] = 1;\\n\\n    // Iterate over the range [1, K + 1]\\n    for (let row = 1; row < K + 1; row++) {\\n\\n        // Iterate over the range [1, N + 1]\\n        for (let col = 1; col < N + 1; col++) {\\n\\n            // If col is greater\\n            // than or equal to row\\n            if (col >= row)\\n\\n                // Update current\\n                // dp[col] state\\n                dp[col] = dp[col] + dp[col - row];\\n        }\\n    }\\n\\n    // Return the total number of ways\\n    return (dp[N]);\\n}\",\"filename\":\"/contracts/autoSolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///4fb8d76a-19b6-41a7-b4e7-8d8c0abf406d\",\"moduleSequenceNumber\":649},{\"filename\":\"/contracts/autoSolver.js\",\"url\":\"blob:file:///d8d09259-7b53-4767-b6e7-edec8f97d743\",\"moduleSequenceNumber\":2197}],\"dependents\":[],\"ramUsage\":22,\"server\":\"home\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Generate IP Addresses\\n\\nfunction generateIps(num) {\\n    num = num.toString();\\n\\n    const length = num.length;\\n\\n    const ips = [];\\n\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length)\\n                ];\\n                let isValid = true;\\n\\n                ip.forEach(seg => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n\\n                if (isValid) ips.push(ip.join(\\\".\\\"));\\n\\n            }\\n\\n        }\\n    }\\n\\n    return ips;\\n\\n}\\n\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\") return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255) return false;\\n    return true;\\n}\",\"filename\":\"/contracts/generateIps.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Find Largest Prime Factor\\n\\nexport function factor(num) {\\n  for (let div = 2; div <= Math.sqrt(num); div++) {\\n    if (num % div != 0) {\\n      continue;\\n    }\\n    num = num / div;\\n    div = 1;\\n  }\\n  return num;\\n}\",\"filename\":\"/contracts/greatestPrimeFactor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Merge Overlapping Intervals\\n\\nexport function mergeOverlap(intervals) {\\n  intervals.sort(([minA], [minB]) => minA - minB);\\n  for (let i = 0; i < intervals.length; i++) {\\n    for (let j = i + 1; j < intervals.length; j++) {\\n      const [min, max] = intervals[i];\\n      const [laterMin, laterMax] = intervals[j];\\n      if (laterMin <= max) {\\n        const newMax = laterMax > max ? laterMax : max;\\n        const newInterval = [min, newMax];\\n        intervals[i] = newInterval;\\n        intervals.splice(j, 1);\\n        j = i;\\n      }\\n    }\\n  }\\n  return intervals;\\n}\",\"filename\":\"/contracts/mergeOverlap.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Minimum Path Sum in a Triangle\\n\\nexport function solveTriangleSum(arrayData) {\\n    let triangle = arrayData;\\n    \\n    let nextArray;\\n    let previousArray = triangle[0];\\n    \\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; i++) {\\n            \\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            } else if (j ==  triangle[i].length - 1) {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            } else {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            }\\n            \\n        }\\n        previousArray = nextArray;\\n    }\\n    return Math.min(nextArray);\\n}\",\"filename\":\"/contracts/solveTriangleSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Spiralize Matrix\\n\\nexport function spiral(arr, accum = []) {\\n  if (arr.length === 0 || arr[0].length === 0) {\\n    return accum;\\n  }\\n  accum = accum.concat(arr.shift());\\n  if (arr.length === 0 || arr[0].length === 0) {\\n    return accum;\\n  }\\n  accum = accum.concat(column(arr, arr[0].length - 1));\\n  if (arr.length === 0 || arr[0].length === 0) {\\n    return accum;\\n  }\\n  accum = accum.concat(arr.pop().reverse());\\n  if (arr.length === 0 || arr[0].length === 0) {\\n    return accum;\\n  }\\n  accum = accum.concat(column(arr, 0).reverse());\\n  if (arr.length === 0 || arr[0].length === 0) {\\n    return accum;\\n  }\\n  return spiral(arr, accum);\\n}\\n\\nfunction column(arr, index) {\\n  const res = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    const elm = arr[i].splice(index, 1)[0];\\n    if (elm) {\\n      res.push(elm);\\n    }\\n  }\\n  return res;\\n}\",\"filename\":\"/contracts/spiral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Algorithmic Stock Trader I\\n// Algorithmic Stock Trader II\\n// Algorithmic Stock Trader III\\n// Algorithmic Stock Trader IV\\n\\nexport function maxProfit(arrayData) {\\n  let i, j, k;\\n    \\n  let maxTrades = arrayData[0];\\n  let stockPrices = arrayData[1];\\n\\n  // WHY?\\n  let tempStr = \\\"[0\\\";\\n  for (i = 0; i < stockPrices.length; i++) {\\n      tempStr += \\\",0\\\";\\n  }\\n  tempStr += \\\"]\\\";\\n  let tempArr = \\\"[\\\" + tempStr;\\n  for (i = 0; i < maxTrades - 1; i++) {\\n      tempArr += \\\",\\\" + tempStr;\\n  }\\n  tempArr += \\\"]\\\";\\n\\n  let highestProfit = JSON.parse(tempArr);\\n\\n  for (i = 0; i < maxTrades; i++) {\\n      for (j = 0; j < stockPrices.length; j++) { // Buy / Start\\n          for (k = j; k < stockPrices.length; k++) { // Sell / End\\n              if (i > 0 && j > 0 && k > 0) {\\n                  highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n              } else if (i > 0 && j > 0) {\\n                  highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n              } else if (i > 0 && k > 0) {\\n                  highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n              } else if (j > 0 && k > 0) {\\n                  highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n              } else {\\n                  highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n              }\\n          }\\n      }\\n  }\\n  return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\",\"filename\":\"/contracts/stockSolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Unique Paths in a Grid I\\n// Unique Paths in a Grid II\\n\\nexport function uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n}\\n\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\n\\nexport function uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n            \\n            if (grid[i][j] == 1 && (!ignoreFirst || (i != 0 || j != 0))&& (!ignoreLast || (i != grid.length - 1 || j != grid[i].length - 1))) {\\n                const newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n             \\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i+1, j+1]);\\n\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n\\n    }\\n\\n    return totalPossiblePaths;\\n}\",\"filename\":\"/contracts/uniquePaths.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let tree = await getTree(ns);\\r\\n    ns.tprint(JSON.stringify(tree, null, 2));\\r\\n}\\r\\n/**\\r\\n * Returns the path to a specified target - or prints the entire tree.\\r\\n */\\r\\nexport async function getTree(ns) {\\r\\n    /**\\r\\n     * @typedef HashMap\\r\\n     * @type {object}\\r\\n     *\\r\\n     * @type {HashMap}\\r\\n     */\\r\\n    let serverRoot = { home: {} };\\r\\n    let allServers = [\\\"home\\\"];\\r\\n    async function getServers(host = \\\"home\\\", parent = serverRoot.home) {\\r\\n        let localServers = ns.scan(host);\\r\\n        localServers = localServers.filter((s) => !allServers.includes(s));\\r\\n        if (localServers.length === 0)\\r\\n            return;\\r\\n        for (let server of localServers) {\\r\\n            allServers.push(server);\\r\\n            parent[server] = {};\\r\\n            await getServers(server, parent[server]);\\r\\n        }\\r\\n    }\\r\\n    await getServers();\\r\\n    // This lists all contracts.\\r\\n    /*\\r\\n      for (let server of serverRoot) {\\r\\n          let files = ns.ls(server, 'cct');\\r\\n          if (files.length === 0) return;\\r\\n          ns.tprint(\\\"==================================\\\");\\r\\n          ns.tprint(`Files on ${server}:`);\\r\\n          for (let file of files) {\\r\\n              ns.tprint(`\\\\t${file}`);\\r\\n          }\\r\\n          ns.tprint(\\\"==================================\\\");\\r\\n      }\\r\\n      */\\r\\n    // ns.tprint(`${serverRoot.length} servers found!`);\\r\\n    return serverRoot;\\r\\n}\\r\\n\",\"filename\":\"/lib/gettree.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/gettree.js\",\"url\":\"blob:file:///4790c1ac-10c0-460d-b66e-c37525898665\",\"moduleSequenceNumber\":62627}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":2244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTree } from 'lib/gettree.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let tree = await getTree(ns);\\n\\n    function iterate(obj, stack) {\\n        for (let property in obj) {\\n            if (obj.hasOwnProperty(property)) {\\n                if (typeof obj[property] == \\\"object\\\") {\\n                    iterate(obj[property], (stack ? stack + '; connect ' : stack) + property);\\n                } else {\\n                    ns.tprint(property + \\\"   \\\" + obj[property]);\\n                }\\n            }\\n        }\\n        if (stack.includes(target)) {\\n            ns.tprint(stack);\\n        }\\n    }\\n\\n    iterate(tree, '');\\n}\",\"filename\":\"/advanced/find.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/gettree.js\",\"url\":\"blob:file:///9e4402dc-4665-4b1a-967c-ebdca8980ebb\",\"moduleSequenceNumber\":100395},{\"filename\":\"/advanced/find.js\",\"url\":\"blob:file:///f6c9c7f3-c57f-4aab-9d8d-4b277c46d23c\",\"moduleSequenceNumber\":141951}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from 'lib/getall.js';\\n\\nconst minCash = 100;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        [\\\"share\\\", false],\\n    ]);\\n    await crawl(ns, flags.share);\\n}\\n\\n/**\\n * @param {NS} ns - the netscript library\\n * @param {boolean} shouldShare - should we share?\\n */\\nasync function crawl(ns, shouldShare) {\\n    // Always share!\\n    shouldShare = true;\\n    /** @type {number} */\\n    let hackingLevel = ns.getHackingLevel();\\n    /** @type {string[]} */\\n    let servers = await getAllServers(ns);\\n    /** @type {string[]} */\\n    let hackableServers = servers.filter(s =>\\n        ns.getServerRequiredHackingLevel(s) <= hackingLevel &&\\n        ns.hasRootAccess(s) &&\\n        ns.getServerMaxMoney(s) >= minCash\\n    );\\n\\n    let scriptName = shouldShare ? \\\"basic/hacknshare.js\\\" : \\\"basic/hack.js\\\";\\n\\n    let host = 'home';\\n\\n    for (let target of hackableServers) {\\n        // ns.tprint(`Hacking ${target} from ${host}`)\\n        if (!ns.run(scriptName, 5, target)) {\\n            ns.tprint(`Home is out of memory! reduce threads!`)\\n        }\\n        await ns.sleep(1);\\n    }\\n}\",\"filename\":\"/advanced/homehack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///3920185d-3846-42a3-a4c1-005f82a0355d\",\"moduleSequenceNumber\":623},{\"filename\":\"/advanced/homehack.js\",\"url\":\"blob:file:///53fbf46b-cca9-4afc-a343-db558f5c39c5\",\"moduleSequenceNumber\":11767}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"home\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const scripts = [\\r\\n        \\\"advanced/killall.js\\\",\\r\\n        \\\"advanced/daemon.js\\\",\\r\\n        \\\"contracts/daemon.js\\\",\\r\\n        \\\"hacknet/daemon.js\\\",\\r\\n        \\\"server-expansion/daemon.js\\\",\\r\\n        \\\"official/custom-stats.js\\\",\\r\\n        // 'initHacking.ns',\\r\\n        //\\r\\n        // This needs work before I start it.\\r\\n        // 'stocks/daemon.js',\\r\\n    ];\\r\\n    for (const script of scripts)\\r\\n        ns.run(script);\\r\\n}\\r\\n\",\"filename\":\"daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"daemon.js\",\"url\":\"blob:file:///a793303f-2361-4369-badb-5c51bd98df78\",\"moduleSequenceNumber\":21631}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":2216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.kill('/stocks/daemon.js', 'home');\\n    /** @type {string[]} */\\n    let stocks = ns.stock.getSymbols();\\n    ns.tprint('Liquidating assets.')\\n    let total = 0;\\n    for (let stock of stocks) {\\n        let longOrders = ns.stock.getPosition(stock)[0];\\n        if (longOrders === 0) continue;\\n        if (longOrders > 0) {\\n            total += ns.stock.sell(stock, longOrders);\\n        }\\n    }\\n    ns.tprint(`All stocks sold for a total of ${total}`);\\n}\",\"filename\":\"/stocks/liquidate.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stocks/liquidate.js\",\"url\":\"blob:file:///c83d28af-887c-4993-84bb-08a4149fa450\",\"moduleSequenceNumber\":7290}],\"dependents\":[],\"ramUsage\":8.6,\"server\":\"home\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  if (ns.getHostname() !== \\\"home\\\") {\\n    throw new Exception(\\\"Run the script from home\\\");\\n  }\\n\\n  await ns.wget(\\n    `https://raw.githubusercontent.com/moriakaice/bitburner/master/src/initHacking.ns?ts=${new Date().getTime()}`,\\n    \\\"initHacking.ns\\\"\\n  );\\n  ns.spawn(\\\"initHacking.ns\\\", 1);\\n}\",\"filename\":\"start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"start.js\",\"url\":\"blob:file:///2626829e-087b-4965-84f1-d78d96091d01\",\"moduleSequenceNumber\":7939}],\"dependents\":[],\"ramUsage\":3.65,\"server\":\"home\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const baseUrl = 'https://raw.githubusercontent.com/moriakaice/bitburner/master/src/'\\nconst filesToDownload = [\\n  'common.ns',\\n  'mainHack.ns',\\n  'spider.ns',\\n  'grow.ns',\\n  'hack.ns',\\n  'weaken.ns',\\n  'playerServers.ns',\\n  'killAll.ns',\\n  'runHacking.ns',\\n  'find.ns',\\n]\\nconst valuesToRemove = ['BB_SERVER_MAP']\\n\\nfunction localeHHMMSS(ms = 0) {\\n  if (!ms) {\\n    ms = new Date().getTime()\\n  }\\n\\n  return new Date(ms).toLocaleTimeString()\\n}\\n\\nexport async function main(ns) {\\n  ns.tprint(`[${localeHHMMSS()}] Starting initHacking.ns`)\\n\\n  let hostname = ns.getHostname()\\n\\n  if (hostname !== 'home') {\\n    throw new Exception('Run the script from home')\\n  }\\n\\n  for (let i = 0; i < filesToDownload.length; i++) {\\n    const filename = filesToDownload[i]\\n    const path = baseUrl + filename\\n    await ns.scriptKill(filename, 'home')\\n    await ns.rm(filename)\\n    await ns.sleep(200)\\n    ns.tprint(`[${localeHHMMSS()}] Trying to download ${path}`)\\n    await ns.wget(path + '?ts=' + new Date().getTime(), filename)\\n  }\\n\\n  valuesToRemove.map((value) => localStorage.removeItem(value))\\n\\n  ns.tprint(`[${localeHHMMSS()}] Spawning killAll.ns`)\\n  ns.spawn('killAll.ns', 1, 'runHacking.ns')\\n}\\n\",\"filename\":\"initHacking.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"initHacking.ns\",\"url\":\"blob:file:///c6b4867f-5fc3-4f0d-9877-aae2dea5a0b1\",\"moduleSequenceNumber\":7942}],\"dependents\":[],\"ramUsage\":5.65,\"server\":\"home\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// % of money to use in buying stocks\\nconst budget = 1;\\n// % at which to buy or sell stocks\\nconst buyAt = 60;\\n\\n// Profit amount to sell the stock at.\\nconst sellAt = 10000000;\\n\\n// TODO short stocks\\nconst shortAt = 40;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    /** @type {string[]} */\\n    let stocks = ns.stock.getSymbols();\\n    for (let stock of stocks) {\\n        let increaseChance = ns.stock.getForecast(stock) * 100;\\n        ns.tprint(`${stock} - ${increaseChance.toLocaleString(undefined, {minimumFractionDigits: 2})}%`)\\n    }\\n}\",\"filename\":\"/stocks/listall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stocks/listall.js\",\"url\":\"blob:file:///414809e9-d5b4-4a1d-a501-f4f0d27c0479\",\"moduleSequenceNumber\":6841}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { solveContract } from \\\"contracts/solve-contract.js\\\";\\n\\nconst minuteInterval = 2;\\n/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  while (true) {\\n    // await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\n    ns.run('contracts/autoSolver.js');\\n    await ns.sleep(minuteInterval * 60 * 1000);\\n  }\\n}\\n\\n/** @param {NS} ns **/\\n\\nasync function dfs(ns, parent, current, f, depth, ...args) {\\n  var hosts = ns.scan(current);\\n\\n  if (parent != null) {\\n    const index = hosts.indexOf(parent);\\n\\n    if (index > -1) {\\n      hosts.splice(index, 1);\\n    }\\n  }\\n\\n  await f(ns, current, depth, ...args);\\n\\n  for (let index = 0, len = hosts.length; index < len; ++index) {\\n    const host = hosts[index];\\n\\n    await dfs(ns, current, host, f, depth + 1, ...args);\\n  }\\n}\\n\\n/** @param {NS} ns **/\\n\\nasync function trySolveContracts(ns, host, depth) {\\n  var contracts = ns.ls(host, \\\"cct\\\");\\n\\n  for (var contract of contracts) {\\n    solveContract(ns, host, contract, 0);\\n  }\\n}\",\"filename\":\"/contracts/old-daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":28,\"server\":\"home\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function settings() {\\n  return {\\n    minSecurityLevelOffset: 2,\\n    maxMoneyMultiplayer: 0.9,\\n    minSecurityWeight: 100,\\n    mapRefreshInterval: 24 * 60 * 60 * 1000,\\n    keys: {\\n      serverMap: 'BB_SERVER_MAP',\\n      hackTarget: 'BB_HACK_TARGET',\\n      action: 'BB_ACTION',\\n    },\\n  }\\n}\\n\\nexport function getItem(key) {\\n  let item = localStorage.getItem(key)\\n\\n  return item ? JSON.parse(item) : undefined\\n}\\n\\nexport function setItem(key, value) {\\n  localStorage.setItem(key, JSON.stringify(value))\\n}\\n\\nexport async function main(ns) {\\n  return {\\n    settings,\\n    getItem,\\n    setItem,\\n  }\\n}\\n\",\"filename\":\"common.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\n  homeRamReserved: 20,\\n  homeRamReservedBase: 20,\\n  homeRamExtraRamReserved: 12,\\n  homeRamBigMode: 64,\\n  minSecurityLevelOffset: 1,\\n  maxMoneyMultiplayer: 0.9,\\n  minSecurityWeight: 100,\\n  mapRefreshInterval: 24 * 60 * 60 * 1000,\\n  maxWeakenTime: 30 * 60 * 1000,\\n  keys: {\\n    serverMap: 'BB_SERVER_MAP',\\n  },\\n  changes: {\\n    hack: 0.002,\\n    grow: 0.004,\\n    weaken: 0.05,\\n  },\\n}\\n\\nfunction getItem(key) {\\n  let item = localStorage.getItem(key)\\n\\n  return item ? JSON.parse(item) : undefined\\n}\\n\\nfunction setItem(key, value) {\\n  localStorage.setItem(key, JSON.stringify(value))\\n}\\n\\nconst hackPrograms = ['BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe']\\nconst hackScripts = ['hack.ns', 'grow.ns', 'weaken.ns']\\n\\nfunction getPlayerDetails(ns) {\\n  let portHacks = 0\\n\\n  hackPrograms.forEach((hackProgram) => {\\n    if (ns.fileExists(hackProgram, 'home')) {\\n      portHacks += 1\\n    }\\n  })\\n\\n  return {\\n    hackingLevel: ns.getHackingLevel(),\\n    portHacks,\\n  }\\n}\\n\\nfunction convertMSToHHMMSS(ms = 0) {\\n  if (ms <= 0) {\\n    return '00:00:00'\\n  }\\n\\n  if (!ms) {\\n    ms = new Date().getTime()\\n  }\\n\\n  return new Date(ms).toISOString().substr(11, 8)\\n}\\n\\nfunction localeHHMMSS(ms = 0) {\\n  if (!ms) {\\n    ms = new Date().getTime()\\n  }\\n\\n  return new Date(ms).toLocaleTimeString()\\n}\\n\\nfunction numberWithCommas(x) {\\n  return x.toString().replace(/\\\\B(?<!\\\\.\\\\d*)(?=(\\\\d{3})+(?!\\\\d))/g, ',')\\n}\\n\\nfunction createUUID() {\\n  var dt = new Date().getTime()\\n  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\\n    var r = (dt + Math.random() * 16) % 16 | 0\\n    dt = Math.floor(dt / 16)\\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16)\\n  })\\n  return uuid\\n}\\n\\nfunction weakenCyclesForGrow(growCycles) {\\n  return Math.max(0, Math.ceil(growCycles * (settings.changes.grow / settings.changes.weaken)))\\n}\\n\\nfunction weakenCyclesForHack(hackCycles) {\\n  return Math.max(0, Math.ceil(hackCycles * (settings.changes.hack / settings.changes.weaken)))\\n}\\n\\nasync function getHackableServers(ns, servers) {\\n  const playerDetails = getPlayerDetails(ns)\\n\\n  const hackableServers = Object.keys(servers)\\n    .filter((hostname) => ns.serverExists(hostname))\\n    .filter((hostname) => servers[hostname].ports <= playerDetails.portHacks || ns.hasRootAccess(hostname))\\n    .filter((hostname) => servers[hostname].ram >= 2)\\n\\n  for (const hostname of hackableServers) {\\n    if (hostname === 'home') continue;\\n    if (!ns.hasRootAccess(hostname)) {\\n      hackPrograms.forEach((hackProgram) => {\\n        if (ns.fileExists(hackProgram, 'home')) {\\n          ns[hackProgram.split('.').shift().toLocaleLowerCase()](hostname)\\n        }\\n      })\\n      ns.nuke(hostname)\\n    }\\n\\n    await ns.scp(hackScripts, hostname)\\n\\n  }\\n\\n  hackableServers.sort((a, b) => servers[a].ram - servers[b].ram)\\n  return hackableServers\\n}\\n\\nfunction findTargetServer(ns, serversList, servers, serverExtraData) {\\n  const playerDetails = getPlayerDetails(ns)\\n\\n  serversList = serversList\\n    .filter((hostname) => servers[hostname].hackingLevel <= playerDetails.hackingLevel)\\n    .filter((hostname) => servers[hostname].maxMoney)\\n    .filter((hostname) => hostname !== 'home')\\n    .filter((hostname) => ns.getWeakenTime(hostname) < settings.maxWeakenTime)\\n\\n  let weightedServers = serversList.map((hostname) => {\\n    const fullHackCycles = Math.ceil(100 / Math.max(0.00000001, ns.hackAnalyze(hostname)))\\n\\n    serverExtraData[hostname] = {\\n      fullHackCycles,\\n    }\\n\\n    const serverValue = servers[hostname].maxMoney * (settings.minSecurityWeight / (servers[hostname].minSecurityLevel + ns.getServerSecurityLevel(hostname)))\\n\\n    return {\\n      hostname,\\n      serverValue,\\n      minSecurityLevel: servers[hostname].minSecurityLevel,\\n      securityLevel: ns.getServerSecurityLevel(hostname),\\n      maxMoney: servers[hostname].maxMoney,\\n    }\\n  })\\n\\n  weightedServers.sort((a, b) => b.serverValue - a.serverValue)\\n  ns.print(JSON.stringify(weightedServers, null, 2))\\n\\n  return weightedServers.map((server) => server.hostname)\\n}\\n\\nexport async function main(ns) {\\n  ns.tprint(`[${localeHHMMSS()}] Starting mainHack.ns`)\\n\\n  let hostname = ns.getHostname()\\n\\n  if (hostname !== 'home') {\\n    throw new Exception('Run the script from home')\\n  }\\n\\n  while (true) {\\n    const serverExtraData = {}\\n    const serverMap = getItem(settings.keys.serverMap)\\n    if (serverMap.servers.home.ram >= settings.homeRamBigMode) {\\n      settings.homeRamReserved = settings.homeRamReservedBase + settings.homeRamExtraRamReserved\\n    }\\n\\n    if (!serverMap || serverMap.lastUpdate < new Date().getTime() - settings.mapRefreshInterval) {\\n      ns.tprint(`[${localeHHMMSS()}] Spawning spider.ns`)\\n      ns.spawn('spider.ns', 1, 'mainHack.ns')\\n      ns.exit()\\n      return\\n    }\\n    serverMap.servers.home.ram = Math.max(0, serverMap.servers.home.ram - settings.homeRamReserved)\\n\\n    const hackableServers = await getHackableServers(ns, serverMap.servers)\\n\\n    const targetServers = findTargetServer(ns, hackableServers, serverMap.servers, serverExtraData)\\n    const bestTarget = targetServers.shift()\\n    const hackTime = ns.getHackTime(bestTarget) * 1000\\n    const growTime = ns.getGrowTime(bestTarget) * 1000\\n    const weakenTime = ns.getWeakenTime(bestTarget) * 1000\\n\\n    const growDelay = Math.max(0, weakenTime - growTime - 15 * 1000)\\n    const hackDelay = Math.max(0, growTime + growDelay - hackTime - 15 * 1000)\\n\\n    const securityLevel = ns.getServerSecurityLevel(bestTarget)\\n    const money = ns.getServerMoneyAvailable(bestTarget)\\n\\n    let action = 'weaken'\\n    if (securityLevel > serverMap.servers[bestTarget].minSecurityLevel + settings.minSecurityLevelOffset) {\\n      action = 'weaken'\\n    } else if (money < serverMap.servers[bestTarget].maxMoney * settings.maxMoneyMultiplayer) {\\n      action = 'grow'\\n    } else {\\n      action = 'hack'\\n    }\\n\\n    let hackCycles = 0\\n    let growCycles = 0\\n    let weakenCycles = 0\\n\\n    for (let i = 0; i < hackableServers.length; i++) {\\n      const server = serverMap.servers[hackableServers[i]]\\n      hackCycles += Math.floor(server.ram / 1.7)\\n      growCycles += Math.floor(server.ram / 1.75)\\n    }\\n    weakenCycles = growCycles\\n\\n    ns.tprint(\\n      `[${localeHHMMSS()}] Selected ${bestTarget} for a target. Planning to ${action} the server. Will wake up around ${localeHHMMSS(\\n        new Date().getTime() + weakenTime + 300\\n      )}`\\n    )\\n    ns.tprint(\\n      `[${localeHHMMSS()}] Stock values: baseSecurity: ${serverMap.servers[bestTarget].baseSecurityLevel}; minSecurity: ${serverMap.servers[bestTarget].minSecurityLevel\\n      }; maxMoney: $${numberWithCommas(parseInt(serverMap.servers[bestTarget].maxMoney, 10))}`\\n    )\\n    ns.tprint(`[${localeHHMMSS()}] Current values: security: ${Math.floor(securityLevel * 1000) / 1000}; money: $${numberWithCommas(parseInt(money, 10))}`)\\n    ns.tprint(\\n      `[${localeHHMMSS()}] Time to: hack: ${convertMSToHHMMSS(hackTime)}; grow: ${convertMSToHHMMSS(growTime)}; weaken: ${convertMSToHHMMSS(weakenTime)}`\\n    )\\n    ns.tprint(`[${localeHHMMSS()}] Delays: ${convertMSToHHMMSS(hackDelay)} for hacks, ${convertMSToHHMMSS(growDelay)} for grows`)\\n\\n    if (action === 'weaken') {\\n      if (settings.changes.weaken * weakenCycles > securityLevel - serverMap.servers[bestTarget].minSecurityLevel) {\\n        weakenCycles = Math.ceil((securityLevel - serverMap.servers[bestTarget].minSecurityLevel) / settings.changes.weaken)\\n        growCycles -= weakenCycles\\n        growCycles = Math.max(0, growCycles)\\n\\n        weakenCycles += weakenCyclesForGrow(growCycles)\\n        growCycles -= weakenCyclesForGrow(growCycles)\\n        growCycles = Math.max(0, growCycles)\\n      } else {\\n        growCycles = 0\\n      }\\n\\n      ns.tprint(\\n        `[${localeHHMMSS()}] Cycles ratio: ${growCycles} grow cycles; ${weakenCycles} weaken cycles; expected security reduction: ${Math.floor(settings.changes.weaken * weakenCycles * 1000) / 1000\\n        }`\\n      )\\n\\n      for (let i = 0; i < hackableServers.length; i++) {\\n        const server = serverMap.servers[hackableServers[i]]\\n        let cyclesFittable = Math.max(0, Math.floor(server.ram / 1.75))\\n        const cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles))\\n\\n        if (growCycles) {\\n          await ns.exec('grow.ns', server.host, cyclesToRun, bestTarget, cyclesToRun, growDelay, createUUID())\\n          growCycles -= cyclesToRun\\n          cyclesFittable -= cyclesToRun\\n        }\\n\\n        if (cyclesFittable) {\\n          await ns.exec('weaken.ns', server.host, cyclesFittable, bestTarget, cyclesFittable, 0, createUUID())\\n          weakenCycles -= cyclesFittable\\n        }\\n      }\\n    } else if (action === 'grow') {\\n      weakenCycles = weakenCyclesForGrow(growCycles)\\n      growCycles -= weakenCycles\\n\\n      ns.tprint(`[${localeHHMMSS()}] Cycles ratio: ${growCycles} grow cycles; ${weakenCycles} weaken cycles`)\\n\\n      for (let i = 0; i < hackableServers.length; i++) {\\n        const server = serverMap.servers[hackableServers[i]]\\n        let cyclesFittable = Math.max(0, Math.floor(server.ram / 1.75))\\n        const cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles))\\n\\n        if (growCycles) {\\n          await ns.exec('grow.ns', server.host, cyclesToRun, bestTarget, cyclesToRun, growDelay, createUUID())\\n          growCycles -= cyclesToRun\\n          cyclesFittable -= cyclesToRun\\n        }\\n\\n        if (cyclesFittable) {\\n          await ns.exec('weaken.ns', server.host, cyclesFittable, bestTarget, cyclesFittable, 0, createUUID())\\n          weakenCycles -= cyclesFittable\\n        }\\n      }\\n    } else {\\n      if (hackCycles > serverExtraData[bestTarget].fullHackCycles) {\\n        hackCycles = serverExtraData[bestTarget].fullHackCycles\\n\\n        if (hackCycles * 100 < growCycles) {\\n          hackCycles *= 10\\n        }\\n\\n        growCycles = Math.max(0, growCycles - Math.ceil((hackCycles * 1.7) / 1.75))\\n\\n        weakenCycles = weakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles)\\n        growCycles -= weakenCycles\\n        hackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7)\\n\\n        growCycles = Math.max(0, growCycles)\\n      } else {\\n        growCycles = 0\\n        weakenCycles = weakenCyclesForHack(hackCycles)\\n        hackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7)\\n      }\\n\\n      ns.tprint(`[${localeHHMMSS()}] Cycles ratio: ${hackCycles} hack cycles; ${growCycles} grow cycles; ${weakenCycles} weaken cycles`)\\n\\n      for (let i = 0; i < hackableServers.length; i++) {\\n        const server = serverMap.servers[hackableServers[i]]\\n        let cyclesFittable = Math.max(0, Math.floor(server.ram / 1.7))\\n        const cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles))\\n\\n        if (hackCycles) {\\n          await ns.exec('hack.ns', server.host, cyclesToRun, bestTarget, cyclesToRun, hackDelay, createUUID())\\n          hackCycles -= cyclesToRun\\n          cyclesFittable -= cyclesToRun\\n        }\\n\\n        const freeRam = server.ram - cyclesToRun * 1.7\\n        cyclesFittable = Math.max(0, Math.floor(freeRam / 1.75))\\n\\n        if (cyclesFittable && growCycles) {\\n          const growCyclesToRun = Math.min(growCycles, cyclesFittable)\\n\\n          await ns.exec('grow.ns', server.host, growCyclesToRun, bestTarget, growCyclesToRun, growDelay, createUUID())\\n          growCycles -= growCyclesToRun\\n          cyclesFittable -= growCyclesToRun\\n        }\\n\\n        if (cyclesFittable) {\\n          await ns.exec('weaken.ns', server.host, cyclesFittable, bestTarget, cyclesFittable, 0, createUUID())\\n          weakenCycles -= cyclesFittable\\n        }\\n      }\\n    }\\n\\n    await ns.sleep(weakenTime + 300)\\n  }\\n}\\n\",\"filename\":\"mainHack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"mainHack.ns\",\"url\":\"blob:file:///359e9cd7-7b45-47f8-96e5-c6458b038b2d\",\"moduleSequenceNumber\":3325}],\"dependents\":[],\"ramUsage\":7.65,\"server\":\"home\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { settings, setItem } from 'common.ns'\\n\\nconst hackPrograms = ['BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe', 'HTTPWorm.exe', 'SQLInject.exe']\\n\\nfunction getPlayerDetails(ns) {\\n  let portHacks = 0\\n\\n  hackPrograms.forEach((hackProgram) => {\\n    if (ns.fileExists(hackProgram, 'home')) {\\n      portHacks += 1\\n    }\\n  })\\n\\n  return {\\n    hackingLevel: ns.getHackingLevel(),\\n    portHacks,\\n  }\\n}\\n\\nfunction allHacks(host) {\\n  ns.brutessh(host)\\n  ns.ftpcrack(host)\\n  ns.relaysmtp(host)\\n  ns.httpworm(host)\\n  ns.sqlinject(host)\\n}\\n\\nfunction localeHHMMSS(ms = 0) {\\n  if (!ms) {\\n    ms = new Date().getTime()\\n  }\\n\\n  return new Date(ms).toLocaleTimeString()\\n}\\n\\nexport async function main(ns) {\\n  ns.tprint(`[${localeHHMMSS()}] Starting spider.ns`)\\n\\n  const scriptToRunAfter = ns.args[0]\\n\\n  let hostname = ns.getHostname()\\n\\n  if (hostname !== 'home') {\\n    throw new Exception('Run the script from home')\\n  }\\n\\n  const serverMap = { servers: {}, lastUpdate: new Date().getTime() }\\n  const scanArray = ['home']\\n\\n  while (scanArray.length) {\\n    const host = scanArray.shift()\\n\\n    serverMap.servers[host] = {\\n      host,\\n      ports: ns.getServerNumPortsRequired(host),\\n      hackingLevel: ns.getServerRequiredHackingLevel(host),\\n      maxMoney: ns.getServerMaxMoney(host),\\n      growth: ns.getServerGrowth(host),\\n      minSecurityLevel: ns.getServerMinSecurityLevel(host),\\n      baseSecurityLevel: ns.getServerBaseSecurityLevel(host),\\n      ram: ns.getServerRam(host)[0],\\n      files: ns.ls(host),\\n    }\\n\\n    const playerDetails = getPlayerDetails(ns)\\n    if (!ns.hasRootAccess(host)) {\\n      if (serverMap.servers[host].ports <= playerDetails.portHacks && serverMap.servers[host].hackingLevel <= playerDetails.hackingLevel) {\\n        hackPrograms.forEach((hackProgram) => {\\n          if (ns.fileExists(hackProgram, 'home')) {\\n            ns[hackProgram.split('.').shift().toLocaleLowerCase()](host)\\n          }\\n        })\\n        ns.nuke(host)\\n      }\\n    }\\n\\n    const connections = ns.scan(host) || ['home']\\n    serverMap.servers[host].connections = connections\\n\\n    connections.filter((hostname) => !serverMap.servers[hostname]).forEach((hostname) => scanArray.push(hostname))\\n  }\\n\\n  let hasAllParents = false\\n\\n  while (!hasAllParents) {\\n    hasAllParents = true\\n\\n    Object.keys(serverMap.servers).forEach((hostname) => {\\n      const server = serverMap.servers[hostname]\\n\\n      if (!server.parent) hasAllParents = false\\n\\n      if (hostname === 'home') {\\n        server.parent = 'home'\\n        server.children = server.children ? server.children : []\\n      }\\n\\n      if (hostname.includes('pserv-')) {\\n        server.parent = 'home'\\n        server.children = []\\n\\n        if (serverMap.servers[server.parent].children) {\\n          serverMap.servers[server.parent].children.push(hostname)\\n        } else {\\n          serverMap.servers[server.parent].children = [hostname]\\n        }\\n      }\\n\\n      if (!server.parent) {\\n        if (server.connections.length === 1) {\\n          server.parent = server.connections[0]\\n          server.children = []\\n\\n          if (serverMap.servers[server.parent].children) {\\n            serverMap.servers[server.parent].children.push(hostname)\\n          } else {\\n            serverMap.servers[server.parent].children = [hostname]\\n          }\\n        } else {\\n          if (!server.children) {\\n            server.children = []\\n          }\\n\\n          if (server.children.length) {\\n            const parent = server.connections.filter((hostname) => !server.children.includes(hostname))\\n\\n            if (parent.length === 1) {\\n              server.parent = parent.shift()\\n\\n              if (serverMap.servers[server.parent].children) {\\n                serverMap.servers[server.parent].children.push(hostname)\\n              } else {\\n                serverMap.servers[server.parent].children = [hostname]\\n              }\\n            }\\n          }\\n        }\\n      }\\n    })\\n  }\\n\\n  setItem(settings().keys.serverMap, serverMap)\\n\\n  if (!scriptToRunAfter) {\\n    ns.tprint(`[${localeHHMMSS()}] Spawning mainHack.ns`)\\n    ns.spawn('mainHack.ns', 1)\\n  } else {\\n    ns.tprint(`[${localeHHMMSS()}] Spawning ${scriptToRunAfter}`)\\n    ns.spawn(scriptToRunAfter, 1)\\n  }\\n}\\n\",\"filename\":\"spider.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"common.ns\",\"url\":\"blob:file:///c44d2c0e-f196-4edb-8d50-eaabf6f956c0\",\"moduleSequenceNumber\":15685},{\"filename\":\"spider.ns\",\"url\":\"blob:file:///3a8d3ad3-2b7e-4e64-8d2d-1fde849ea8cc\",\"moduleSequenceNumber\":15705}],\"dependents\":[],\"ramUsage\":5.25,\"server\":\"home\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerBaseSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\n  maxPlayerServers: 25,\\n  gbRamCost: 55000,\\n  maxGbRam: 1048576,\\n  minGbRam: 64,\\n  totalMoneyAllocation: 0.9,\\n  actions: {\\n    BUY: 'buy',\\n    UPGRADE: 'upgrade',\\n  },\\n  keys: {\\n    serverMap: 'BB_SERVER_MAP',\\n  },\\n}\\n\\nfunction getItem(key) {\\n  let item = localStorage.getItem(key)\\n\\n  return item ? JSON.parse(item) : undefined\\n}\\n\\nfunction setItem(key, value) {\\n  localStorage.setItem(key, JSON.stringify(value))\\n}\\n\\nfunction localeHHMMSS(ms = 0) {\\n  if (!ms) {\\n    ms = new Date().getTime()\\n  }\\n\\n  return new Date(ms).toLocaleTimeString()\\n}\\n\\nfunction createUUID() {\\n  var dt = new Date().getTime()\\n  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\\n    var r = (dt + Math.random() * 16) % 16 | 0\\n    dt = Math.floor(dt / 16)\\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16)\\n  })\\n  return uuid\\n}\\n\\nfunction updateServer(ns, serverMap, host) {\\n  serverMap.servers[host] = {\\n    host,\\n    ports: ns.getServerNumPortsRequired(host),\\n    hackingLevel: ns.getServerRequiredHackingLevel(host),\\n    maxMoney: ns.getServerMaxMoney(host),\\n    growth: ns.getServerGrowth(host),\\n    minSecurityLevel: ns.getServerMinSecurityLevel(host),\\n    baseSecurityLevel: ns.getServerBaseSecurityLevel(host),\\n    ram: ns.getServerRam(host)[0],\\n    connections: ['home'],\\n    parent: 'home',\\n    children: [],\\n  }\\n\\n  Object.keys(serverMap.servers).map((hostname) => {\\n    if (!ns.serverExists(hostname)) {\\n      delete serverMap.servers[hostname]\\n    }\\n  })\\n\\n  setItem(settings.keys.serverMap, serverMap)\\n}\\n\\nfunction getPurchasedServers(ns) {\\n  let purchasedServers = ns.getPurchasedServers()\\n  if (purchasedServers.length) {\\n    purchasedServers.sort((a, b) => {\\n      const totalRamA = ns.getServerRam(a).shift()\\n      const totalRamB = ns.getServerRam(b).shift()\\n\\n      if (totalRamA === totalRamB) {\\n        return ns.getServerRam(a).shift() - ns.getServerRam(b).shift()\\n      } else {\\n        return totalRamA - totalRamB\\n      }\\n    })\\n  }\\n\\n  return purchasedServers\\n}\\n\\nexport async function main(ns) {\\n  ns.tprint(`[${localeHHMMSS()}] Starting playerServers.ns`)\\n\\n  settings.maxGbRam = ns.getPurchasedServerMaxRam()\\n  settings.maxPlayerServers = ns.getPurchasedServerLimit()\\n  let hostname = ns.getHostname()\\n\\n  if (hostname !== 'home') {\\n    throw new Exception('Run the script from home')\\n  }\\n\\n  while (true) {\\n    let didChange = false\\n\\n    const serverMap = getItem(settings.keys.serverMap)\\n    let purchasedServers = getPurchasedServers(ns)\\n\\n    let action = purchasedServers.length < settings.maxPlayerServers ? settings.actions.BUY : settings.actions.UPGRADE\\n\\n    if (action == settings.actions.BUY) {\\n      let smallestCurrentServer = purchasedServers.length ? ns.getServerRam(purchasedServers[0]).shift() : 0\\n      let targetRam = Math.max(settings.minGbRam, smallestCurrentServer)\\n\\n      if (targetRam === settings.minGbRam) {\\n        while (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost * settings.maxPlayerServers) {\\n          targetRam *= 2\\n        }\\n\\n        targetRam /= 2\\n      }\\n\\n      targetRam = Math.max(settings.minGbRam, targetRam)\\n      targetRam = Math.min(targetRam, settings.maxGbRam)\\n\\n      if (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost) {\\n        let hostname = `pserv-${targetRam}-${createUUID()}`\\n        hostname = ns.purchaseServer(hostname, targetRam)\\n\\n        if (hostname) {\\n          ns.tprint(`[${localeHHMMSS()}] Bought new server: ${hostname} (${targetRam} GB)`)\\n\\n          updateServer(ns, serverMap, hostname)\\n          didChange = true\\n        }\\n      }\\n    } else {\\n      let smallestCurrentServer = Math.max(ns.getServerRam(purchasedServers[0]).shift(), settings.minGbRam)\\n      let biggestCurrentServer = ns.getServerRam(purchasedServers[purchasedServers.length - 1]).shift()\\n      let targetRam = biggestCurrentServer\\n\\n      if (smallestCurrentServer === settings.maxGbRam) {\\n        ns.tprint(`[${localeHHMMSS()}] All servers maxxed. Exiting.`)\\n        ns.exit()\\n        return\\n      }\\n\\n      if (smallestCurrentServer === biggestCurrentServer) {\\n        while (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost) {\\n          targetRam *= 4\\n        }\\n\\n        targetRam /= 4\\n      }\\n\\n      targetRam = Math.min(targetRam, settings.maxGbRam)\\n\\n      purchasedServers = getPurchasedServers(ns)\\n      if (targetRam > ns.getServerRam(purchasedServers[0]).shift()) {\\n        didChange = true\\n        while (didChange) {\\n          didChange = false\\n          purchasedServers = getPurchasedServers(ns)\\n\\n          if (targetRam > ns.getServerRam(purchasedServers[0]).shift()) {\\n            if (ns.getServerMoneyAvailable('home') * settings.totalMoneyAllocation >= targetRam * settings.gbRamCost) {\\n              let hostname = `pserv-${targetRam}-${createUUID()}`\\n\\n              await ns.killall(purchasedServers[0])\\n              await ns.sleep(10)\\n              const serverDeleted = await ns.deleteServer(purchasedServers[0])\\n              if (serverDeleted) {\\n                hostname = await ns.purchaseServer(hostname, targetRam)\\n\\n                if (hostname) {\\n                  ns.tprint(`[${localeHHMMSS()}] Upgraded: ${purchasedServers[0]} into server: ${hostname} (${targetRam} GB)`)\\n\\n                  updateServer(ns, serverMap, hostname)\\n                  didChange = true\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n\\n    if (!didChange) {\\n      await ns.sleep(5123)\\n    }\\n  }\\n}\\n\",\"filename\":\"playerServers.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"playerServers.ns\",\"url\":\"blob:file:///ee12034a-f3ff-4eb1-9f21-ddc94cd0e05b\",\"moduleSequenceNumber\":16296}],\"dependents\":[],\"ramUsage\":9.9,\"server\":\"home\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerBaseSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\n  mapRefreshInterval: 24 * 60 * 60 * 1000,\\n  keys: {\\n    serverMap: 'BB_SERVER_MAP',\\n  },\\n}\\nconst scriptsToKill = [\\n  'mainHack.ns',\\n  'spider.ns',\\n  'grow.ns',\\n  'hack.ns',\\n  'weaken.ns',\\n  'playerServers.ns',\\n  'runHacking.ns',\\n  'initHacking.ns',\\n  'start.ns',\\n  'find.ns',\\n]\\n\\nfunction getItem(key) {\\n  let item = localStorage.getItem(key)\\n\\n  return item ? JSON.parse(item) : undefined\\n}\\n\\nfunction localeHHMMSS(ms = 0) {\\n  if (!ms) {\\n    ms = new Date().getTime()\\n  }\\n\\n  return new Date(ms).toLocaleTimeString()\\n}\\n\\nexport async function main(ns) {\\n  ns.tprint(`[${localeHHMMSS()}] Starting killAll.ns`)\\n\\n  const scriptToRunAfter = ns.args[0]\\n\\n  let hostname = ns.getHostname()\\n\\n  if (hostname !== 'home') {\\n    throw new Exception('Run the script from home')\\n  }\\n\\n  const serverMap = getItem(settings.keys.serverMap)\\n\\n  if (!serverMap || serverMap.lastUpdate < new Date().getTime() - settings.mapRefreshInterval) {\\n    ns.tprint(`[${localeHHMMSS()}] Spawning spider.ns`)\\n    ns.spawn('spider.ns', 1, 'killAll.ns')\\n    ns.exit()\\n    return\\n  }\\n\\n  for (let i = 0; i < scriptsToKill.length; i++) {\\n    await ns.scriptKill(scriptsToKill[i], 'home')\\n  }\\n\\n  const killAbleServers = Object.keys(serverMap.servers)\\n    .filter((hostname) => ns.serverExists(hostname))\\n    .filter((hostname) => hostname !== 'home')\\n\\n  for (let i = 0; i < killAbleServers.length; i++) {\\n    await ns.killall(killAbleServers[i])\\n  }\\n\\n  ns.tprint(`[${localeHHMMSS()}] All processes killed`)\\n\\n  if (scriptToRunAfter) {\\n    ns.tprint(`[${localeHHMMSS()}] Spawning ${scriptToRunAfter}`)\\n    ns.spawn(scriptToRunAfter, 1)\\n  } else {\\n    ns.tprint(`[${localeHHMMSS()}] Spawning runHacking.ns`)\\n    ns.spawn('runHacking.ns', 1)\\n  }\\n}\\n\",\"filename\":\"killAll.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"killAll.ns\",\"url\":\"blob:file:///f0d1e7f9-5955-42c3-a70d-d2c01771e3ea\",\"moduleSequenceNumber\":15704}],\"dependents\":[],\"ramUsage\":5.25,\"server\":\"home\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function localeHHMMSS(ms = 0) {\\n  if (!ms) {\\n    ms = new Date().getTime()\\n  }\\n\\n  return new Date(ms).toLocaleTimeString()\\n}\\n\\nexport async function main(ns) {\\n  ns.tprint(`[${localeHHMMSS()}] Starting runHacking.ns`)\\n\\n  let hostname = ns.getHostname()\\n\\n  if (hostname !== 'home') {\\n    throw new Exception('Run the script from home')\\n  }\\n\\n  const homeRam = ns.getServerRam('home').shift()\\n\\n  if (homeRam >= 32) {\\n    ns.tprint(`[${localeHHMMSS()}] Spawning spider.ns`)\\n    await ns.run('spider.ns', 1, 'mainHack.ns')\\n    await ns.sleep(3000)\\n    ns.tprint(`[${localeHHMMSS()}] Spawning playerServers.ns`)\\n    ns.spawn('playerServers.ns', 1)\\n  } else {\\n    ns.tprint(`[${localeHHMMSS()}] Spawning spider.ns`)\\n    ns.spawn('spider.ns', 1, 'mainHack.ns')\\n  }\\n}\\n\",\"filename\":\"runHacking.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"runHacking.ns\",\"url\":\"blob:file:///4ec3e24f-ef77-4d4f-8f96-7104ad7df6e8\",\"moduleSequenceNumber\":15706}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"home\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\n  keys: {\\n    serverMap: 'BB_SERVER_MAP',\\n  },\\n}\\n\\nfunction getItem(key) {\\n  let item = localStorage.getItem(key)\\n\\n  return item ? JSON.parse(item) : undefined\\n}\\n\\nfunction localeHHMMSS(ms = 0) {\\n  if (!ms) {\\n    ms = new Date().getTime()\\n  }\\n\\n  return new Date(ms).toLocaleTimeString()\\n}\\n\\nfunction printPathToServer(servers, serverToFind) {\\n  if (serverToFind === 'home') return 'home'\\n  if (!servers[serverToFind]) return `-- Unable to locate ${serverToFind} --`\\n\\n  const jumps = []\\n\\n  let isParentHome = servers.parent === 'home'\\n  let currentServer = serverToFind\\n\\n  while (!isParentHome) {\\n    jumps.push(servers[currentServer].parent)\\n\\n    if (servers[currentServer].parent !== 'home') {\\n      currentServer = servers[currentServer].parent\\n    } else {\\n      isParentHome = true\\n    }\\n  }\\n\\n  jumps.unshift(serverToFind)\\n\\n  return jumps.reverse().join('; connect ')\\n}\\n\\nexport async function main(ns) {\\n  ns.tprint(`[${localeHHMMSS()}] Starting find.ns`)\\n\\n  const serverToFind = ns.args[0]\\n\\n  let hostname = ns.getHostname()\\n\\n  if (hostname !== 'home') {\\n    throw new Exception('Run the script from home')\\n  }\\n\\n  const serverMap = getItem(settings.keys.serverMap)\\n\\n  if (serverToFind) {\\n    if (Object.keys(serverMap.servers).includes(serverToFind)) {\\n      ns.tprint(`[${localeHHMMSS()}] Path to ${serverToFind} found:`)\\n      ns.tprint(printPathToServer(serverMap.servers, serverToFind))\\n    } else {\\n      ns.tprint(`[${localeHHMMSS()}] Unable to find the path to ${serverToFind}`)\\n    }\\n  } else {\\n    ns.tprint(`[${localeHHMMSS()}] Common servers:`)\\n    ns.tprint(`* CSEC (CyberSec faction)`)\\n    ns.tprint(printPathToServer(serverMap.servers, 'CSEC') + '; hack;')\\n    ns.tprint('')\\n    ns.tprint(`* avmnite-02h (NiteSec faction)`)\\n    ns.tprint(printPathToServer(serverMap.servers, 'avmnite-02h') + '; hack;')\\n    ns.tprint('')\\n    ns.tprint(`* I.I.I.I (The Black Hand faction)`)\\n    ns.tprint(printPathToServer(serverMap.servers, 'I.I.I.I') + '; hack;')\\n    ns.tprint('')\\n    ns.tprint(`* run4theh111z (Bitrunners faction)`)\\n    ns.tprint(printPathToServer(serverMap.servers, 'run4theh111z') + '; hack;')\\n    ns.tprint('')\\n    ns.tprint(`* w0r1d_d43m0n`)\\n    ns.tprint(printPathToServer(serverMap.servers, 'w0r1d_d43m0n') + '; hack;')\\n    ns.tprint('')\\n    ns.tprint(`[${localeHHMMSS()}] Looking for servers with coding contracts:`)\\n    Object.keys(serverMap.servers).forEach((hostname) => {\\n      const files = ns.ls(hostname)\\n      if (files && files.length) {\\n        const contract = files.find((file) => file.includes('.cct'))\\n\\n        if (!!contract) {\\n          ns.tprint('')\\n          ns.tprint(`* ${hostname} has a coding contract(s)! Connect using:`)\\n          ns.tprint(printPathToServer(serverMap.servers, hostname) + `; run ${contract};`)\\n        }\\n      }\\n    })\\n    ns.tprint('')\\n    ns.tprint('Buy all hacks command:')\\n    ns.tprint('home; connect darkweb; buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; home;')\\n    ns.tprint('')\\n  }\\n}\\n\",\"filename\":\"find.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** This is just an arbitrary identifier to signal that this script has finished redeployment */\\r\\nexport const DeployKey = \\\"6uTdsrmCVG8^Bee*^UB46myYQya&4Qc#\\\";\\r\\n/** There is no way to get how this script is called, therefore it's hardcoded here */\\r\\nexport const ScriptName = \\\"init.js\\\";\\r\\nexport const DeploymenScriptFolder = \\\"/deployment/\\\";\\r\\nexport const HomeHost = \\\"home\\\";\\r\\nexport const SelfUpdateFile = \\\"self-update.js\\\";\\r\\nexport const RedeployFile = \\\"redeploy.js\\\";\\r\\nexport const SelfUpdateLocation = `${DeploymenScriptFolder}${SelfUpdateFile}`;\\r\\nexport const RedeployLocation = `${DeploymenScriptFolder}${RedeployFile}`;\\r\\n/**\\r\\n * The idea here is to wget once, then deploy onto home and run this script, automatically updating itself\\r\\n * @param {NS} ns\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    ns.ps().filter(x => x.filename !== ns.getScriptName()).forEach(x => ns.kill(x.pid));\\r\\n    const pid = ns.exec(SelfUpdateLocation, HomeHost, 1, ...ns.args);\\r\\n    if (pid === 0) {\\r\\n        ns.tprint(`## FAILED to spawn self-updater, start manually with: run ${SelfUpdateLocation} -t 1`);\\r\\n        return;\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(`## Spawned self updater, PID: [${pid}]`);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImluaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsZ0dBQWdHO0FBQ2hHLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxrQ0FBa0MsQ0FBQTtBQUUzRCxzRkFBc0Y7QUFDdEYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxjQUFjLENBQUM7QUFDcEQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsZ0JBQWdCLENBQUM7QUFDL0MsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLGFBQWEsQ0FBQztBQUUxQyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLHFCQUFxQixHQUFHLGNBQWMsRUFBRSxDQUFBO0FBQzdFLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcscUJBQXFCLEdBQUcsWUFBWSxFQUFFLENBQUE7QUFFekU7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsS0FBSyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ25GLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRSxJQUFHLEdBQUcsS0FBSyxDQUFDLEVBQUU7UUFDVixFQUFFLENBQUMsTUFBTSxDQUFDLDZEQUE2RCxrQkFBa0IsT0FBTyxDQUFDLENBQUM7UUFDbEcsT0FBTztLQUNWO1NBQU07UUFDSCxFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0tBQ3ZEO0FBRUwsQ0FBQyJ9\",\"filename\":\"init.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"init.js\",\"url\":\"blob:file:///1e84b216-9257-4280-b3f5-454c6cd0bca4\",\"moduleSequenceNumber\":11145}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** This is just an arbitrary identifier to signal that this script has finished redeployment */\\r\\nexport const DeployKey = \\\"6uTdsrmCVG8^Bee*^UB46myYQya&4Qc#\\\";\\r\\n/** There is no way to get how this script is called, therefore it's hardcoded here */\\r\\nexport const InitScriptFile = \\\"init.js\\\";\\r\\nexport const DeployFolder = \\\"/\\\";\\r\\nexport const HomeHost = \\\"home\\\";\\r\\nexport const DeploymenScriptFolder = \\\"/deployment/\\\";\\r\\nexport const UtilsScriptFolder = \\\"/utils/\\\";\\r\\nexport const SelfUpdateFile = \\\"self-update.js\\\";\\r\\nexport const RedeployFile = \\\"redeploy.js\\\";\\r\\nexport const UtilsFile = \\\"patch-ns.js\\\";\\r\\nexport const SelfUpdateLocation = `${DeploymenScriptFolder}${SelfUpdateFile}`;\\r\\nexport const RedeployLocation = `${DeploymenScriptFolder}${RedeployFile}`;\\r\\nexport const UtilsLocation = `${UtilsScriptFolder}${UtilsFile}`;\\r\\nexport const Host = \\\"http://localhost:8000\\\";\\r\\n/**\\r\\n * The idea here is to wget once, then deploy onto home and run this script, automatically updating itself\\r\\n * @param {NS} ns\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(\\\"# Starting self updater\\\");\\r\\n    // overwrite the update script\\r\\n    ns.tprint(`## Updating '${InitScriptFile}'`);\\r\\n    // deleting the current script hardcode first, might change later\\r\\n    // ns.rm(InitScriptFile, HomeHost);\\r\\n    if (!await ns.wget(`${Host}/${InitScriptFile}`, InitScriptFile, HomeHost)) {\\r\\n        ns.tprint(`# CRITICAL failure, could not download init script file (no connection?)`);\\r\\n        return;\\r\\n    }\\r\\n    // gets all files in the deploy folder\\r\\n    const deployedFiles = ns.ls(HomeHost, \\\"/**/*.js\\\");\\r\\n    ns.tprint(`## Removing [${deployedFiles.length}] source files`);\\r\\n    // deployedFiles.forEach(x => ns.rm(x, HomeHost));\\r\\n    await ns.sleep(5);\\r\\n    ns.tprint(`## Updating '${SelfUpdateFile}', '${RedeployFile}', '${UtilsFile}'`);\\r\\n    if (!await ns.wget(`${Host}${SelfUpdateLocation}`, SelfUpdateLocation, HomeHost) ||\\r\\n        !await ns.wget(`${Host}${RedeployLocation}`, RedeployLocation, HomeHost) ||\\r\\n        !await ns.wget(`${Host}${UtilsLocation}`, UtilsLocation, HomeHost)) {\\r\\n        ns.tprint(`# CRITICAL failure, could not download deployment files (no connection?)`);\\r\\n        return;\\r\\n    }\\r\\n    const pid = ns.exec(RedeployLocation, HomeHost, 1, ...ns.args, DeployKey);\\r\\n    if (pid === 0) {\\r\\n        ns.tprint(`## FAILED to spawn redeployment, start manually with: run ${RedeployLocation} -t 1 ${DeployKey}`);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(`## Spawned redeployment, PID: [${pid}]`);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZi11cGRhdGUuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJkZXBsb3ltZW50L3NlbGYtdXBkYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLGdHQUFnRztBQUNoRyxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsa0NBQWtDLENBQUE7QUFFM0Qsc0ZBQXNGO0FBQ3RGLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUM7QUFDeEMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQztBQUNoQyxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDO0FBRS9CLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLGNBQWMsQ0FBQztBQUNwRCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxTQUFTLENBQUM7QUFDM0MsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLGdCQUFnQixDQUFDO0FBQy9DLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxhQUFhLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQTtBQUV0QyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLHFCQUFxQixHQUFHLGNBQWMsRUFBRSxDQUFBO0FBQzdFLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcscUJBQXFCLEdBQUcsWUFBWSxFQUFFLENBQUE7QUFDekUsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLEdBQUcsaUJBQWlCLEdBQUcsU0FBUyxFQUFFLENBQUM7QUFDaEUsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLHVCQUF1QixDQUFDO0FBRzVDOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBO0lBRXBDLDhCQUE4QjtJQUM5QixFQUFFLENBQUMsTUFBTSxDQUFDLGdCQUFnQixjQUFjLEdBQUcsQ0FBQyxDQUFDO0lBQzdDLGlFQUFpRTtJQUNqRSxtQ0FBbUM7SUFDbkMsSUFBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxjQUFjLEVBQUUsRUFBRSxjQUFjLEVBQUUsUUFBUSxDQUFDLEVBQUU7UUFDdEUsRUFBRSxDQUFDLE1BQU0sQ0FBQywwRUFBMEUsQ0FBQyxDQUFDO1FBQ3RGLE9BQU87S0FDVjtJQUVELHNDQUFzQztJQUN0QyxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNsRCxFQUFFLENBQUMsTUFBTSxDQUFDLGdCQUFnQixhQUFhLENBQUMsTUFBTSxnQkFBZ0IsQ0FBQyxDQUFBO0lBQy9ELGtEQUFrRDtJQUVsRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsY0FBYyxPQUFPLFlBQVksT0FBTyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ2hGLElBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsa0JBQWtCLEVBQUUsRUFBRSxrQkFBa0IsRUFBRSxRQUFRLENBQUM7UUFDNUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsZ0JBQWdCLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLENBQUM7UUFDeEUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsYUFBYSxFQUFFLEVBQUUsYUFBYSxFQUFFLFFBQVEsQ0FBQyxFQUFFO1FBQ25FLEVBQUUsQ0FBQyxNQUFNLENBQUMsMEVBQTBFLENBQUMsQ0FBQztRQUN0RixPQUFPO0tBQ1Y7SUFFRCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzFFLElBQUcsR0FBRyxLQUFLLENBQUMsRUFBRTtRQUNWLEVBQUUsQ0FBQyxNQUFNLENBQUMsNkRBQTZELGdCQUFnQixTQUFTLFNBQVMsRUFBRSxDQUFDLENBQUM7S0FDaEg7U0FBTTtRQUNILEVBQUUsQ0FBQyxNQUFNLENBQUMsa0NBQWtDLEdBQUcsR0FBRyxDQUFDLENBQUM7S0FDdkQ7QUFDTCxDQUFDIn0=\",\"filename\":\"/deployment/self-update.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/deployment/self-update.js\",\"url\":\"blob:file:///967fb7b9-77ac-4c5e-bd5e-d9017c45c0bc\",\"moduleSequenceNumber\":11557}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const UpdateList = \\\"index.txt\\\";\\r\\nexport const DeployFolder = \\\"\\\";\\r\\nexport const HomeHost = \\\"home\\\";\\r\\nexport const BootstrapScript = \\\"processor.js\\\";\\r\\n/**\\r\\n * The idea here is to wget once, then deploy onto home and run this script, automatically updating itself\\r\\n * @param {NS} ns\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(\\\"# Starting redeployment\\\");\\r\\n    let lastChange = new Date(0);\\r\\n    while (true) {\\r\\n        const success = await ns.wget(\\\"http://localhost:8000/index.json\\\", UpdateList, HomeHost);\\r\\n        if (!success) {\\r\\n            await ns.sleep(10_000);\\r\\n            continue;\\r\\n        }\\r\\n        const updateList = JSON.parse(`${ns.read(UpdateList)}`);\\r\\n        const updateDate = new Date(updateList.lastChange);\\r\\n        if (updateDate <= lastChange) {\\r\\n            await ns.sleep(1_000);\\r\\n            continue;\\r\\n        }\\r\\n        lastChange = updateDate;\\r\\n        // remove the update list\\r\\n        ns.rm(UpdateList, HomeHost);\\r\\n        ns.tprint(`## Downloading [${updateList.fileList.length}] source files`);\\r\\n        for (const idx in updateList.fileList) {\\r\\n            const file = updateList.fileList[idx];\\r\\n            const location = file.includes(\\\"/\\\") ? `/${file}` : file;\\r\\n            await ns.wget(`http://localhost:8000/${file}`, location, HomeHost);\\r\\n            // avoid choking the browser and/or server\\r\\n            await ns.sleep(5);\\r\\n        }\\r\\n        ns.exec(DeployFolder, BootstrapScript);\\r\\n        ns.tprint(\\\"# Self updating complete\\\");\\r\\n        await ns.sleep(10_000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkZXBsb3kuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJkZXBsb3ltZW50L3JlZGVwbG95LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUM7QUFDdEMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxjQUFjLENBQUM7QUFROUM7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFFckMsSUFBSSxVQUFVLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFN0IsT0FBTyxJQUFJLEVBQUU7UUFDWCxNQUFNLE9BQU8sR0FBRyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQzNCLGtDQUFrQyxFQUNsQyxVQUFVLEVBQ1YsUUFBUSxDQUNULENBQUM7UUFDRixJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZCLFNBQVM7U0FDVjtRQUNELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQWUsQ0FBQztRQUN0RSxNQUFNLFVBQVUsR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbkQsSUFBSSxVQUFVLElBQUksVUFBVSxFQUFFO1lBQzVCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0QixTQUFTO1NBQ1Y7UUFFRCxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQ3hCLHlCQUF5QjtRQUN6QixFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM1QixFQUFFLENBQUMsTUFBTSxDQUFDLG1CQUFtQixVQUFVLENBQUMsUUFBUSxDQUFDLE1BQU0sZ0JBQWdCLENBQUMsQ0FBQztRQUV6RSxLQUFLLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FBQyxRQUFRLEVBQUU7WUFDckMsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDeEQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLHlCQUF5QixJQUFJLEVBQUUsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbkUsMENBQTBDO1lBQzFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQjtRQUVELEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3ZDLEVBQUUsQ0FBQyxNQUFNLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUN0QyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDeEI7QUFDSCxDQUFDIn0=\",\"filename\":\"/deployment/redeploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/deployment/redeploy.js\",\"url\":\"blob:file:///ac164b0f-8c85-4793-b48e-5df918c987b3\",\"moduleSequenceNumber\":11542}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYml0YnVybmVyLnQuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJiaXRidXJuZXIudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIn0=\",\"filename\":\"bitburner.t.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const processes = ns\\r\\n        .ps(\\\"home\\\")\\r\\n        .filter((x) => ![\\\"processor.js\\\", \\\"/deployment/redeploy.js\\\"].includes(x.filename));\\r\\n    processes.forEach((x) => ns.kill(x.pid));\\r\\n    // exec(ns, '/scripts/deploy-all.js', 'home', (pid) => {\\r\\n    //     ns.tprint(`# deploy-all started, pid ${pid}`);\\r\\n    // }, () => {\\r\\n    //     ns.tprint(`# deploy-all failed!`);\\r\\n    // });\\r\\n    ns.exec(\\\"/scripts/deploy-all.js\\\", \\\"home\\\");\\r\\n    // exec(ns, '/scripts/find-target.js', 'home', (pid) => {\\r\\n    //     ns.tprint(`# find-target started, pid ${pid}`);\\r\\n    // }, () => {\\r\\n    //     ns.tprint(`# find-target failed!`);\\r\\n    // });\\r\\n    ns.exec(\\\"/scripts/find-target.js\\\", \\\"home\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzc29yLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsicHJvY2Vzc29yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsTUFBTSxTQUFTLEdBQUcsRUFBRTtTQUNqQixFQUFFLENBQUMsTUFBTSxDQUFDO1NBQ1YsTUFBTSxDQUNMLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLHlCQUF5QixDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FDekUsQ0FBQztJQUNKLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFekMsd0RBQXdEO0lBQ3hELHFEQUFxRDtJQUNyRCxhQUFhO0lBQ2IseUNBQXlDO0lBQ3pDLE1BQU07SUFDTixFQUFFLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRTFDLHlEQUF5RDtJQUN6RCxzREFBc0Q7SUFDdEQsYUFBYTtJQUNiLDBDQUEwQztJQUMxQyxNQUFNO0lBQ04sRUFBRSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM3QyxDQUFDIn0=\",\"filename\":\"processor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.tprint(\\\"This is a test of processor.ts\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbmhhY2suanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJzY3JpcHRzL21haW5oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQzlDLENBQUMifQ==\",\"filename\":\"/scripts/mainhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.tprint(\\\"This is a test of processor.ts\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzc29yLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic2NyaXB0cy9wcm9jZXNzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDOUMsQ0FBQyJ9\",\"filename\":\"/scripts/processor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall.js\\\";\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n  const flags = ns.flags([[\\\"share\\\", false]]);\\r\\n  await crawl(ns, flags.share);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {NS} ns - the netscript library\\r\\n * @param {boolean} shouldShare - should we share?\\r\\n */\\r\\nasync function crawl(ns, shouldShare) {\\r\\n  /** @type {string[]} */\\r\\n  let servers = await getAllServers(ns);\\r\\n  /** @type {number} */\\r\\n  let hackingLevel = ns.getHackingLevel();\\r\\n  /** @type {string[]} */\\r\\n  let hackableServers = servers.filter(\\r\\n    (s) =>\\r\\n      ns.getServerRequiredHackingLevel(s) <= hackingLevel && ns.hasRootAccess(s)\\r\\n  );\\r\\n  /** @type {string[]} */\\r\\n  let runnableServers = servers.filter((s) => ns.hasRootAccess(s));\\r\\n\\r\\n  let scriptName = shouldShare ? \\\"basic/hacknshare.js\\\" : \\\"basic/hack.js\\\";\\r\\n\\r\\n  for (let host of runnableServers) {\\r\\n    ns.run(\\\"basic/cpall.js\\\", 1, host);\\r\\n    for (let target of hackableServers) {\\r\\n      ns.tprint(`Hacking ${target} from ${host}`);\\r\\n      ns.exec(scriptName, host, 1, target);\\r\\n      await ns.sleep(1);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/advanced/crawlnhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.7,\"server\":\"home\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/lib/Bitburner.t.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":2170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall\\\";\\r\\nconst hackPrograms = [\\r\\n    \\\"BruteSSH.exe\\\",\\r\\n    \\\"FTPCrack.exe\\\",\\r\\n    \\\"relaySMTP.exe\\\",\\r\\n    \\\"HTTPWorm.exe\\\",\\r\\n    \\\"SQLInject.exe\\\",\\r\\n];\\r\\nfunction getPlayerDetails(ns) {\\r\\n    let portHacks = 0;\\r\\n    for (let hackProgram of hackPrograms) {\\r\\n        if (ns.fileExists(hackProgram, \\\"home\\\")) {\\r\\n            portHacks += 1;\\r\\n        }\\r\\n    }\\r\\n    return {\\r\\n        hackingLevel: ns.getHackingLevel(),\\r\\n        portHacks,\\r\\n    };\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const servers = await getAllServers(ns);\\r\\n    const player = getPlayerDetails(ns);\\r\\n    // get all the nukeable servers\\r\\n    let nukableServers = servers.filter((s) => ns.getServerNumPortsRequired(s) <= player.portHacks &&\\r\\n        !ns.hasRootAccess(s));\\r\\n    for (let server of nukableServers) {\\r\\n        ns.tprint(`Nuking ${server}!`);\\r\\n        ns.run(\\\"/basic/nuke.js\\\", 1, server);\\r\\n    }\\r\\n    if (nukableServers.length === 0)\\r\\n        ns.tprint(\\\"No nukable servers found.\\\");\\r\\n    else\\r\\n        ns.tprint(\\\"All servers nuked!\\\");\\r\\n}\\r\\n\",\"filename\":\"/advanced/nukeall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///821eff0c-4ac9-4caa-acf1-e600e31ca773\",\"moduleSequenceNumber\":20490},{\"filename\":\"/advanced/nukeall.js\",\"url\":\"blob:file:///f392388c-34c1-4f12-b2d2-91fb41e972ce\",\"moduleSequenceNumber\":21637}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":2230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    const server = ns.args[0].toString();\\r\\n    if (args.help || !server) {\\r\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\r\\n        return;\\r\\n    }\\r\\n    // const ram = ns.getServerRam(server);\\r\\n    const ram = [ns.getServerMaxRam(server), ns.getServerUsedRam(server)];\\r\\n    const money = ns.getServerMoneyAvailable(server);\\r\\n    const maxMoney = ns.getServerMaxMoney(server);\\r\\n    const minSec = ns.getServerMinSecurityLevel(server);\\r\\n    const sec = ns.getServerSecurityLevel(server);\\r\\n    ns.tprint(`\\n\\n${server}:\\n    RAM        : ${ram[1]} / ${ram[0]} (${(ram[1] / ram[0]) * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${((money / maxMoney) * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${ns.growthAnalyze(server, 2).toFixed(2)} threads\\n    grow x3    : ${ns.growthAnalyze(server, 3).toFixed(2)} threads\\n    grow x4    : ${ns.growthAnalyze(server, 4).toFixed(2)} threads\\n    hack 10%   : ${(0.1 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(0.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(0.5 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\r\\n}\\r\\n\",\"filename\":\"/official/analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"server\":\"home\",\"moduleSequenceNumber\":2246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    const hostname = args._[0];\\r\\n    if (args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will generate money by hacking a target server.\\\");\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\r\\n        return;\\r\\n    }\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) >\\r\\n            ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(hostname);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/official/basic_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":2270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const updateSeconds = 30;\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    const doc = document; // This is expensive! (25GB RAM) Perhaps there's a way around it? ;)\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hook1 = doc.getElementById(\\\"overview-extra-hook-1\\\");\\r\\n    if (hook0 === null || hook1 === null) {\\r\\n        ns.tprint(\\\"Could not get overview hooks. Is this being run in bitburner?\\\");\\r\\n        return;\\r\\n    }\\r\\n    while (true) {\\r\\n        try {\\r\\n            let headers = [];\\r\\n            let values = [];\\r\\n            // Add script income per second\\r\\n            headers.push(\\\"Script Income\\\");\\r\\n            values.push(ns.getScriptIncome()[0].toLocaleString(undefined, {\\r\\n                style: \\\"currency\\\",\\r\\n                currency: \\\"USD\\\",\\r\\n                currencyDisplay: \\\"narrowSymbol\\\",\\r\\n                notation: \\\"compact\\\",\\r\\n                maximumSignificantDigits: 3,\\r\\n            }) + \\\"/sec\\\");\\r\\n            // Add script exp gain rate per second\\r\\n            headers.push(\\\"Script XP\\\");\\r\\n            values.push(ns.getScriptExpGain().toLocaleString(undefined, {\\r\\n                style: \\\"decimal\\\",\\r\\n                maximumSignificantDigits: 3,\\r\\n                notation: \\\"compact\\\",\\r\\n            }) + \\\"/sec\\\");\\r\\n            // TODO: Add more neat stuff\\r\\n            // Now drop it into the placeholder elements\\r\\n            hook0.innerText = headers.join(\\\" \\\\n\\\");\\r\\n            hook1.innerText = values.join(\\\"\\\\n\\\");\\r\\n        }\\r\\n        catch (err) {\\r\\n            // This might come in handy later\\r\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\r\\n        }\\r\\n        await ns.sleep(updateSeconds * 1000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/official/custom-stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/official/custom-stats.js\",\"url\":\"blob:file:///0a724767-d531-475d-bdc8-b845448a8acb\",\"moduleSequenceNumber\":21636}],\"dependents\":[],\"ramUsage\":26.8,\"server\":\"home\",\"moduleSequenceNumber\":2272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help || args._.length < 2) {\\r\\n        ns.tprint(\\\"This script deploys another script on a server with maximum threads possible.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} HOST SCRIPT ARGUMENTS`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles basic_hack.js foodnstuff`);\\r\\n        return;\\r\\n    }\\r\\n    const host = args._[0];\\r\\n    const script = args._[1];\\r\\n    const script_args = args._.slice(2);\\r\\n    if (!ns.serverExists(host)) {\\r\\n        ns.tprint(`Server '${host}' does not exist. Aborting.`);\\r\\n        return;\\r\\n    }\\r\\n    if (!ns.ls(ns.getHostname()).find((f) => f === script)) {\\r\\n        ns.tprint(`Script '${script}' does not exist. Aborting.`);\\r\\n        return;\\r\\n    }\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) /\\r\\n        ns.getScriptRam(script));\\r\\n    ns.tprint(`Launching script '${script}' on server '${host}' with ${threads} threads and the following arguments: ${script_args}`);\\r\\n    await ns.scp(script, ns.getHostname(), host);\\r\\n    if (threads > 0)\\r\\n        ns.exec(script, host, threads, ...script_args);\\r\\n}\\r\\n\",\"filename\":\"/official/deploy.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/official/deploy.js\",\"url\":\"blob:file:///79bb3bc9-8688-4694-b0a8-805ffe80359b\",\"moduleSequenceNumber\":20169}],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"moduleSequenceNumber\":20169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\r\\n    const children = ns.scan(server);\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue;\\r\\n        }\\r\\n        list.push(child);\\r\\n        scan(ns, server, child, list);\\r\\n    }\\r\\n}\\r\\nexport function list_servers(ns) {\\r\\n    const list = [];\\r\\n    scan(ns, \\\"\\\", \\\"home\\\", list);\\r\\n    return list;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script helps you find an unsolved coding contract.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    let servers = list_servers(ns);\\r\\n    const boughtServers = ns.getPurchasedServers();\\r\\n    servers = servers.filter((s) => !boughtServers.includes(s));\\r\\n    const hostname = servers.find((s) => ns.ls(s).find((f) => f.endsWith(\\\".cct\\\")));\\r\\n    if (!hostname) {\\r\\n        ns.tprint(\\\"No coding contract found.\\\");\\r\\n        return;\\r\\n    }\\r\\n    ns.tprint(`Found coding contract on '${hostname}'.`);\\r\\n}\\r\\n\",\"filename\":\"/official/find_coding_contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.25,\"server\":\"home\",\"moduleSequenceNumber\":2276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\r\\n    const children = ns.scan(server);\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue;\\r\\n        }\\r\\n        if (child == target) {\\r\\n            route.unshift(child);\\r\\n            route.unshift(server);\\r\\n            return true;\\r\\n        }\\r\\n        if (recursiveScan(ns, server, child, target, route)) {\\r\\n            route.unshift(server);\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    let route = [];\\r\\n    let server = args._[0];\\r\\n    if (!server || args.help) {\\r\\n        ns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\r\\n        return;\\r\\n    }\\r\\n    recursiveScan(ns, \\\"\\\", \\\"home\\\", server, route);\\r\\n    for (const i in route) {\\r\\n        await ns.sleep(500);\\r\\n        const extra = i.length > 0 ? \\\"└ \\\" : \\\"\\\";\\r\\n        ns.tprint(`${\\\" \\\".repeat(parseInt(i))}${extra}${route[i]}`);\\r\\n    }\\r\\n}\\r\\nexport function autocomplete(data, _args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"/official/find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/official/find_server.js\",\"url\":\"blob:file:///d35cae28-2969-40aa-b8b7-0a067289c072\",\"moduleSequenceNumber\":98371}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":2278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"refreshrate\\\", 200],\\r\\n        [\\\"help\\\", false],\\r\\n    ]);\\r\\n    if (flags._.length === 0 || flags.help) {\\r\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\");\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\r\\n        return;\\r\\n    }\\r\\n    ns.tail();\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    while (true) {\\r\\n        const server = flags._[0];\\r\\n        let money = ns.getServerMoneyAvailable(server);\\r\\n        if (money === 0)\\r\\n            money = 1;\\r\\n        const maxMoney = ns.getServerMaxMoney(server);\\r\\n        const minSec = ns.getServerMinSecurityLevel(server);\\r\\n        const sec = ns.getServerSecurityLevel(server);\\r\\n        ns.clearLog();\\r\\n        ns.print(`${server}:`);\\r\\n        ns.print(` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${((money / maxMoney) * 100).toFixed(2)}%)`);\\r\\n        ns.print(` security: +${(sec - minSec).toFixed(2)}`);\\r\\n        ns.print(` hack____: ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`);\\r\\n        ns.print(` grow____: ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`);\\r\\n        ns.print(` weaken__: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil((sec - minSec) * 20)})`);\\r\\n        await ns.sleep(flags.refreshrate);\\r\\n    }\\r\\n}\\r\\nexport function autocomplete(data, _args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"/official/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":2280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\r\\n    const children = ns.scan(server);\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue;\\r\\n        }\\r\\n        list.push(child);\\r\\n        scan(ns, server, child, list);\\r\\n    }\\r\\n}\\r\\nexport function list_servers(ns) {\\r\\n    const list = [];\\r\\n    scan(ns, \\\"\\\", \\\"home\\\", list);\\r\\n    return list;\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script lists all servers on which you can run scripts.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    const servers = list_servers(ns)\\r\\n        .filter((s) => ns.hasRootAccess(s))\\r\\n        .concat(\\\"home\\\");\\r\\n    for (const server of servers) {\\r\\n        const used = ns.getServerUsedRam(server);\\r\\n        const max = ns.getServerMaxRam(server);\\r\\n        ns.tprint(`${server} is opened. ${used} GB / ${max} GB (${((100 * used) /\\r\\n            max).toFixed(2)}%)`);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/official/opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":2282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Total Ways to Sum\\r\\nexport function totalWaysToSum(data) {\\r\\n    let N = data;\\r\\n    let K = data - 1;\\r\\n    // Initialize a list\\r\\n    let dp = Array.from({ length: N + 1 }, () => 0);\\r\\n    // Update dp[0] to 1\\r\\n    dp[0] = 1;\\r\\n    // Iterate over the range [1, K + 1]\\r\\n    for (let row = 1; row < K + 1; row++) {\\r\\n        // Iterate over the range [1, N + 1]\\r\\n        for (let col = 1; col < N + 1; col++) {\\r\\n            // If col is greater\\r\\n            // than or equal to row\\r\\n            if (col >= row)\\r\\n                // Update current\\r\\n                // dp[col] state\\r\\n                dp[col] = dp[col] + dp[col - row];\\r\\n        }\\r\\n    }\\r\\n    // Return the total number of ways\\r\\n    return dp[N];\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":2232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export * from \\\"contracts/solvers/totalWaysToSum.js\\\";\\r\\nexport * from \\\"contracts/solvers/arrayJumpingGame.js\\\";\\r\\nexport * from \\\"contracts/solvers/solveSum.js\\\";\\r\\nexport * from \\\"contracts/solvers/mergeOverlap.js\\\";\\r\\nexport * from \\\"contracts/solvers/spiral.js\\\";\\r\\nexport * from \\\"contracts/solvers/factor.js\\\";\\r\\nexport * from \\\"contracts/solvers/generateIps.js\\\";\\r\\nexport * from \\\"contracts/solvers/uniquePaths.js\\\";\\r\\nexport * from \\\"contracts/solvers/triangleSum.js\\\";\\r\\nexport * from \\\"contracts/solvers/stockSolver.js\\\";\\r\\nexport * from \\\"contracts/solvers/sanitizeParentheses.js\\\";\\r\\n\",\"filename\":\"/contracts/solvers/index.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":2268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Array jumping game solver\\r\\nexport function solveJump(data) {\\r\\n    // ns.tprint(JSON.stringify(data))\\r\\n    for (let i = data[0] - 1; i > -1; i--) {\\r\\n        if (i + 1 >= data.length)\\r\\n            return true;\\r\\n        return solveJump(data.slice(i + 1));\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":2248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function solveSum(data) {\\r\\n    const arrLength = data.length;\\r\\n    let maxSum = -Infinity;\\r\\n    for (let i = 0; i < arrLength; i++) {\\r\\n        const sub = data.slice(0, i + 1);\\r\\n        for (let j = 0; j < sub.length; j++) {\\r\\n            const sub2 = sub.slice(j, sub.length);\\r\\n            // ns.tprint(`i ${i} j ${j} ${JSON.stringify(sub)} ${JSON.stringify(sub2)}`);\\r\\n            const sum = sub2.reduce((prev, cur) => (prev += cur), 0);\\r\\n            if (sum > maxSum)\\r\\n                maxSum = sum;\\r\\n            // ns.tprint(`${sum}: ${sub2}`);\\r\\n        }\\r\\n    }\\r\\n    return maxSum;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":2250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Merge Overlapping Intervals\\r\\nexport function mergeOverlap(intervals) {\\r\\n    intervals.sort(([minA], [minB]) => minA - minB);\\r\\n    for (let i = 0; i < intervals.length; i++) {\\r\\n        for (let j = i + 1; j < intervals.length; j++) {\\r\\n            const [min, max] = intervals[i];\\r\\n            const [laterMin, laterMax] = intervals[j];\\r\\n            if (laterMin <= max) {\\r\\n                const newMax = laterMax > max ? laterMax : max;\\r\\n                const newInterval = [min, newMax];\\r\\n                intervals[i] = newInterval;\\r\\n                intervals.splice(j, 1);\\r\\n                j = i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return intervals;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":2252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//SPIRALIZE Matrix\\r\\nexport function spiral(arr, accum = []) {\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(arr.shift() || []);\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat((arr.pop() || []).reverse());\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(column(arr, 0).reverse());\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    return spiral(arr, accum);\\r\\n}\\r\\nfunction column(arr, index) {\\r\\n    let res = [];\\r\\n    for (let i = 0; i < arr.length; i++) {\\r\\n        const elm = arr[i].splice(index, 1)[0];\\r\\n        if (elm) {\\r\\n            res.push(elm);\\r\\n        }\\r\\n    }\\r\\n    return res;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":2254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//GREATEST FACTOR\\r\\nexport function factor(num) {\\r\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\r\\n        if (num % div != 0) {\\r\\n            continue;\\r\\n        }\\r\\n        num = num / div;\\r\\n        div = 1;\\r\\n    }\\r\\n    return num;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":2256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//GENERATE IP ADDRESSES\\r\\nexport function generateIps(num) {\\r\\n    num = num.toString();\\r\\n    const length = num.length;\\r\\n    let ips = [];\\r\\n    for (let i = 1; i < length - 2; i++) {\\r\\n        for (let j = i + 1; j < length - 1; j++) {\\r\\n            for (let k = j + 1; k < length; k++) {\\r\\n                const ip = [\\r\\n                    num.slice(0, i),\\r\\n                    num.slice(i, j),\\r\\n                    num.slice(j, k),\\r\\n                    num.slice(k, num.length),\\r\\n                ];\\r\\n                let isValid = true;\\r\\n                ip.forEach((seg) => {\\r\\n                    isValid = isValid && isValidIpSegment(seg);\\r\\n                });\\r\\n                if (isValid)\\r\\n                    ips.push(ip.join(\\\".\\\"));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return ips;\\r\\n}\\r\\nfunction isValidIpSegment(segment) {\\r\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\")\\r\\n        return false;\\r\\n    segment = Number(segment);\\r\\n    if (segment < 0 || segment > 255)\\r\\n        return false;\\r\\n    return true;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":2258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//UNIQUE PATHS IN A GRID//UNIQUE PATHS IN A GRID\\r\\nexport function uniquePathsI(grid) {\\r\\n    const rightMoves = grid[0] - 1;\\r\\n    const downMoves = grid[1] - 1;\\r\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\r\\n}\\r\\nfunction factorial(n) {\\r\\n    return factorialDivision(n, 1);\\r\\n}\\r\\nfunction factorialDivision(n, d) {\\r\\n    if (n == 0 || n == 1 || n == d)\\r\\n        return 1;\\r\\n    return factorialDivision(n - 1, d) * n;\\r\\n}\\r\\nexport function uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\r\\n    const rightMoves = grid[0].length - 1;\\r\\n    const downMoves = grid.length - 1;\\r\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\r\\n    for (let i = 0; i < grid.length; i++) {\\r\\n        for (let j = 0; j < grid[i].length; j++) {\\r\\n            if (grid[i][j] == 1 &&\\r\\n                (!ignoreFirst || i != 0 || j != 0) &&\\r\\n                (!ignoreLast || i != grid.length - 1 || j != grid[i].length - 1)) {\\r\\n                let newArray = [];\\r\\n                for (let k = i; k < grid.length; k++) {\\r\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\r\\n                }\\r\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\r\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\r\\n                totalPossiblePaths -= removedPaths;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return totalPossiblePaths;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":2260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function triangleSum(arrayData) {\\r\\n    let triangle = arrayData;\\r\\n    let nextArray = [];\\r\\n    let previousArray = triangle[0];\\r\\n    for (let i = 1; i < triangle.length; i++) {\\r\\n        nextArray = [];\\r\\n        for (let j = 0; j < triangle[i].length; j++) {\\r\\n            if (j == 0) {\\r\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\r\\n            }\\r\\n            else if (j == triangle[i].length - 1) {\\r\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\r\\n            }\\r\\n            else {\\r\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\r\\n            }\\r\\n        }\\r\\n        previousArray = nextArray;\\r\\n    }\\r\\n    return Math.min.apply(null, nextArray);\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":2262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function maxProfit(arrayData) {\\r\\n    let i, j, k;\\r\\n    let maxTrades = arrayData[0];\\r\\n    let stockPrices = arrayData[1];\\r\\n    // WHY?\\r\\n    let tempStr = \\\"[0\\\";\\r\\n    for (i = 0; i < stockPrices.length; i++) {\\r\\n        tempStr += \\\",0\\\";\\r\\n    }\\r\\n    tempStr += \\\"]\\\";\\r\\n    let tempArr = \\\"[\\\" + tempStr;\\r\\n    for (i = 0; i < maxTrades - 1; i++) {\\r\\n        tempArr += \\\",\\\" + tempStr;\\r\\n    }\\r\\n    tempArr += \\\"]\\\";\\r\\n    let highestProfit = JSON.parse(tempArr);\\r\\n    for (i = 0; i < maxTrades; i++) {\\r\\n        for (j = 0; j < stockPrices.length; j++) {\\r\\n            // Buy / Start\\r\\n            for (k = j; k < stockPrices.length; k++) {\\r\\n                // Sell / End\\r\\n                if (i > 0 && j > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else if (i > 0 && j > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else if (i > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else if (j > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":2264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function sanitizeParentheses(data) {\\r\\n    var solution = Sanitize(data);\\r\\n    if (solution == null) {\\r\\n        return '[\\\"\\\"]';\\r\\n    }\\r\\n    else {\\r\\n        return \\\"[\\\" + solution.join(\\\",\\\") + \\\"]\\\";\\r\\n    }\\r\\n}\\r\\nfunction Sanitize_removeOneParth(item) {\\r\\n    var possibleAnswers = [];\\r\\n    for (let i = 0; i < item.length; i++) {\\r\\n        if (item[i].toLowerCase().indexOf(\\\"(\\\") === -1 &&\\r\\n            item[i].toLowerCase().indexOf(\\\")\\\") === -1) {\\r\\n            continue;\\r\\n        }\\r\\n        let possible = item.substring(0, i) + item.substring(i + 1);\\r\\n        possibleAnswers.push(possible);\\r\\n    }\\r\\n    return possibleAnswers;\\r\\n}\\r\\nfunction Sanitize_isValid(item) {\\r\\n    var unclosed = 0;\\r\\n    for (var i = 0; i < item.length; i++) {\\r\\n        if (item[i] == \\\"(\\\") {\\r\\n            unclosed++;\\r\\n        }\\r\\n        else if (item[i] == \\\")\\\") {\\r\\n            unclosed--;\\r\\n        }\\r\\n        if (unclosed < 0) {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n    return unclosed == 0;\\r\\n}\\r\\nfunction Sanitize(data) {\\r\\n    var currentPossible = [data];\\r\\n    for (var i = 0; i < currentPossible.length; i++) {\\r\\n        var newPossible = new Set();\\r\\n        for (var j = 0; j < currentPossible.length; j++) {\\r\\n            let newRemovedPossible = Sanitize_removeOneParth(currentPossible[j]);\\r\\n            for (let item of newRemovedPossible) {\\r\\n                newPossible.add(item);\\r\\n            }\\r\\n        }\\r\\n        var validBoolList = [];\\r\\n        for (const item of newPossible) {\\r\\n            validBoolList.push(Sanitize_isValid(item));\\r\\n        }\\r\\n        if (validBoolList.includes(true)) {\\r\\n            let finalList = [];\\r\\n            newPossible = [...newPossible];\\r\\n            for (var j = 0; j < validBoolList.length; j++) {\\r\\n                if (validBoolList[j]) {\\r\\n                    finalList.push(newPossible[j]);\\r\\n                }\\r\\n            }\\r\\n            finalList = new Set(finalList);\\r\\n            return [...finalList];\\r\\n        }\\r\\n        currentPossible = [...newPossible];\\r\\n    }\\r\\n    return null;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":2266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-2048-5db7f80d-a25d-41b5-b5fd-da294800100b\",\"pserv-2048-b7d06b0d-76b7-422d-944d-335e931da52d\",\"pserv-2048-1253164e-bebc-497a-950b-accac14cc3ed\",\"pserv-2048-ad796d97-3271-4faf-b0e3-8054f38e817f\",\"pserv-2048-8f55ff8e-e002-46f7-a822-94f4564606c2\",\"pserv-2048-5abb9798-f2c5-4064-92c9-d93fc5daf0eb\",\"pserv-2048-b0a82c70-99e9-478c-b89a-d91001373beb\",\"pserv-2048-620ebcdb-0933-460d-a1c8-dcef84f95a5d\",\"pserv-2048-10b48c7c-20b7-4105-b3f3-bbd986a0e626\",\"pserv-2048-7dd5d0f0-8fb4-4c91-8d30-12fa1721dc0c\",\"pserv-2048-8fe53619-b794-4f80-8253-0ad461f9fee1\",\"pserv-2048-30934766-7170-4b01-9ac0-2c0fa7d97c9e\",\"pserv-2048-3d37cb13-8e00-4aa1-8049-5b88d3c740ba\",\"pserv-2048-cb2cd9a9-dbe5-47c4-92e0-de454cab6067\",\"pserv-2048-7eb83425-9cad-4e8b-9715-2461f3a993d3\",\"pserv-2048-fba53022-68dd-4b83-b10b-c5ace5f885db\",\"pserv-2048-4b791a04-5cd8-49d8-99cf-ac1ffb7cf3ae\",\"pserv-2048-1a08471d-4686-47dd-b81b-e3588e2414c9\",\"pserv-2048-0b18a33e-632a-4217-b7eb-75bea0c315e6\",\"pserv-2048-f1099dac-c7e1-4139-8a19-63446335d789\",\"pserv-2048-d73b88fc-7900-49ba-9cd1-20e8a25431f0\",\"pserv-2048-e9306103-e1a1-4001-acac-f6c31268f2e1\",\"pserv-2048-b023f924-a20b-484e-8b47-8fd7fb30a208\",\"pserv-2048-2e65ca20-edf3-4a0e-8746-ff2cde6ed09b\",\"pserv-32768-fca4508e-1813-455d-8607-75180dc4743d\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"40.3.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"ecorp\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"ecorp\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"ecorp\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"ecorp\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":60147272558,\"moneyMax\":1503681813950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1200,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"12.5.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"megacorp\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"megacorp\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"megacorp\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"megacorp\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":46327953459,\"moneyMax\":1158198836475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1301,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"18.2.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"b-and-a\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"b-and-a\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"b-and-a\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"b-and-a\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":20490863016,\"moneyMax\":512271575400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":989,\"serverGrowth\":76}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"10.7.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":62.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":459,\"ramUsage\":4.15,\"server\":\"blade\",\"threads\":15,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///589f28b0-9532-4e67-9af0-3818d094e500\",\"moduleSequenceNumber\":7684}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///05b2f76a-f07a-4cb7-bede-0bd889d7dcfc\",\"moduleSequenceNumber\":1112}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"blade\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///589f28b0-9532-4e67-9af0-3818d094e500\",\"moduleSequenceNumber\":7684}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"blade\",\"moduleSequenceNumber\":7684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"blade\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"blade\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":29664701079,\"moneyMax\":741617526975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1082,\"serverGrowth\":74}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"21.5.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"nwo\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"nwo\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"nwo\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"nwo\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":29861763489,\"moneyMax\":746544087225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1061,\"serverGrowth\":74}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"82.3.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"clarkinc\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"clarkinc\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"clarkinc\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"clarkinc\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":24507394640,\"moneyMax\":612684866000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1000,\"serverGrowth\":65}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"90.7.8.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":253.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":458,\"ramUsage\":4.15,\"server\":\"omnitek\",\"threads\":61,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///f31c29c7-82a4-479c-be72-487fce46e85d\",\"moduleSequenceNumber\":7683}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///084d3777-b946-42ff-a6bb-41a37172c330\",\"moduleSequenceNumber\":1139}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"omnitek\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///f31c29c7-82a4-479c-be72-487fce46e85d\",\"moduleSequenceNumber\":7683}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"omnitek\",\"moduleSequenceNumber\":7683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"omnitek\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"omnitek\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":14628466293,\"moneyMax\":365711657325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1095,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"8.7.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"4sigma\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"4sigma\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"4sigma\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"4sigma\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":16549500452,\"moneyMax\":413737511300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1091,\"serverGrowth\":88}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"67.3.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":22072172673,\"moneyMax\":551804316825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1167,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"67.4.9.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":510.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":457,\"ramUsage\":4.15,\"server\":\"fulcrumtech\",\"threads\":123,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///7e5936d9-a943-4e7c-b39f-87678af856f5\",\"moduleSequenceNumber\":7682}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///4f149c62-8e07-4e21-9dc7-01c133d52e08\",\"moduleSequenceNumber\":1166}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///7e5936d9-a943-4e7c-b39f-87678af856f5\",\"moduleSequenceNumber\":7682}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":7682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":1591467387,\"moneyMax\":39786684675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1073,\"serverGrowth\":87}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"73.4.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1469,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"76.2.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"stormtech\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"stormtech\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"stormtech\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"stormtech\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1188012333,\"moneyMax\":29700308325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1034,\"serverGrowth\":86}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"2.3.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"defcomm\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"defcomm\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"defcomm\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"defcomm\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":866848593,\"moneyMax\":21671214825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":919,\"serverGrowth\":48}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"5.8.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"infocomm\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"infocomm\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"infocomm\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"infocomm\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":771975308,\"moneyMax\":19299382700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":933,\"serverGrowth\":61}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"72.7.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":29.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":441,\"ramUsage\":4.15,\"server\":\"helios\",\"threads\":7,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///e65324f2-dd96-42b8-9fd8-e58874c44894\",\"moduleSequenceNumber\":7666}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///070d6b8b-31a7-4414-a01f-b545e1b42a0e\",\"moduleSequenceNumber\":1171}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"helios\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///e65324f2-dd96-42b8-9fd8-e58874c44894\",\"moduleSequenceNumber\":7666}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"helios\",\"moduleSequenceNumber\":7666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"helios\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"helios\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":724979349,\"moneyMax\":18124483725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":76}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"24.8.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":29.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":455,\"ramUsage\":4.15,\"server\":\"vitalife\",\"threads\":7,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///f1e40ea0-090f-4b3a-84ea-566d75d6cc82\",\"moduleSequenceNumber\":7680}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///b5d7b824-8e3e-44e9-991f-10d856ae9aad\",\"moduleSequenceNumber\":1176}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"vitalife\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///f1e40ea0-090f-4b3a-84ea-566d75d6cc82\",\"moduleSequenceNumber\":7680}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"vitalife\",\"moduleSequenceNumber\":7680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"vitalife\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"vitalife\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":720140696,\"moneyMax\":18003517400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":67}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"94.8.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"icarus\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"icarus\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"icarus\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"icarus\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":978725318,\"moneyMax\":24468132950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":857,\"serverGrowth\":94}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"11.5.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":29.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":453,\"ramUsage\":4.15,\"server\":\"univ-energy\",\"threads\":7,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///5a112d0b-30d1-4d4a-865c-f733ecbdd3b8\",\"moduleSequenceNumber\":7678}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///64678306-c250-4716-bfda-856a27be3718\",\"moduleSequenceNumber\":1181}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"univ-energy\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///5a112d0b-30d1-4d4a-865c-f733ecbdd3b8\",\"moduleSequenceNumber\":7678}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"univ-energy\",\"moduleSequenceNumber\":7678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"univ-energy\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"univ-energy\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1144119705,\"moneyMax\":28602992625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":800,\"serverGrowth\":83}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"58.3.4.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":62.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":456,\"ramUsage\":4.15,\"server\":\"titan-labs\",\"threads\":15,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///a458f5a7-c27f-4f0f-8b8d-92b24a0ea664\",\"moduleSequenceNumber\":7681}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///366f4209-011f-4e84-b3c4-cf1e597bf4b0\",\"moduleSequenceNumber\":1192}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"titan-labs\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///a458f5a7-c27f-4f0f-8b8d-92b24a0ea664\",\"moduleSequenceNumber\":7681}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"titan-labs\",\"moduleSequenceNumber\":7681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"titan-labs\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"titan-labs\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":807243283,\"moneyMax\":20181082075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":831,\"serverGrowth\":71}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"63.0.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":29.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":454,\"ramUsage\":4.15,\"server\":\"microdyne\",\"threads\":7,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///9a5f853e-588f-4e93-acde-25504cd415e2\",\"moduleSequenceNumber\":7679}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///bf139633-880d-4e5d-b36e-242e958cf0a9\",\"moduleSequenceNumber\":1197}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"microdyne\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///9a5f853e-588f-4e93-acde-25504cd415e2\",\"moduleSequenceNumber\":7679}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"microdyne\",\"moduleSequenceNumber\":7679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"microdyne\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"microdyne\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"infocomm\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":573162250,\"moneyMax\":14329056250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":851,\"serverGrowth\":89}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"79.9.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":897342162,\"moneyMax\":22433554050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":852,\"serverGrowth\":74}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"12.5.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":840735133,\"moneyMax\":21018378325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":865,\"serverGrowth\":85}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"55.0.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"aerocorp\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"aerocorp\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"aerocorp\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"aerocorp\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1064942293,\"moneyMax\":26623557325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":881,\"serverGrowth\":56}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"59.8.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":62.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":439,\"ramUsage\":4.15,\"server\":\"omnia\",\"threads\":15,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///7381c674-3ae1-41de-a3bc-5662ad550121\",\"moduleSequenceNumber\":7664}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///c65e5c6a-f345-4f81-a3db-36917d8e3275\",\"moduleSequenceNumber\":1208}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"omnia\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///7381c674-3ae1-41de-a3bc-5662ad550121\",\"moduleSequenceNumber\":7664}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"omnia\",\"moduleSequenceNumber\":7664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"omnia\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"omnia\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":945275877,\"moneyMax\":23631896925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":927,\"serverGrowth\":69}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"15.1.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"zb-def\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"zb-def\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zb-def\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"zb-def\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":951163767,\"moneyMax\":23779094175,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":804,\"serverGrowth\":74}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"67.3.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":961947686,\"moneyMax\":24048692150,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":826,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"71.6.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":29.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":461,\"ramUsage\":4.15,\"server\":\"solaris\",\"threads\":7,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///09681bbe-7380-46e1-bbd2-2ad79625c5e4\",\"moduleSequenceNumber\":7686}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///dba4a6c4-80c8-4c2d-b03e-b456e76c865c\",\"moduleSequenceNumber\":1213}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"solaris\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///09681bbe-7380-46e1-bbd2-2ad79625c5e4\",\"moduleSequenceNumber\":7686}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"solaris\",\"moduleSequenceNumber\":7686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"solaris\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"solaris\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":798033444,\"moneyMax\":19950836100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":774,\"serverGrowth\":79}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"18.4.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"deltaone\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"deltaone\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"deltaone\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"deltaone\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1465939502,\"moneyMax\":36648487550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":857,\"serverGrowth\":53}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"20.7.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":12.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":462,\"ramUsage\":4.15,\"server\":\"global-pharm\",\"threads\":3,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///b3e4e7a9-7920-4062-adb0-d7ead0936cdf\",\"moduleSequenceNumber\":7687}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///558bb69e-40de-404f-b283-2e418453bee6\",\"moduleSequenceNumber\":1215}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"global-pharm\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///b3e4e7a9-7920-4062-adb0-d7ead0936cdf\",\"moduleSequenceNumber\":7687}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"global-pharm\",\"moduleSequenceNumber\":7687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"global-pharm\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"global-pharm\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1540861922,\"moneyMax\":38521548050,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":817,\"serverGrowth\":84}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"13.1.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"nova-med\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"nova-med\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"nova-med\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"nova-med\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":1167339259,\"moneyMax\":29183481475,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":843,\"serverGrowth\":80}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"24.8.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"zeus-med\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"zeus-med\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zeus-med\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"zeus-med\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1386889910,\"moneyMax\":34672247750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":75}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"77.2.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":12.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":452,\"ramUsage\":4.15,\"server\":\"unitalife\",\"threads\":3,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///509e728d-5eb5-4842-9adf-867ae54a792d\",\"moduleSequenceNumber\":7677}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///383b7fab-5179-479b-aa62-770145fe0d5e\",\"moduleSequenceNumber\":1217}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"unitalife\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///509e728d-5eb5-4842-9adf-867ae54a792d\",\"moduleSequenceNumber\":7677}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"unitalife\",\"moduleSequenceNumber\":7677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"unitalife\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"unitalife\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1000302147,\"moneyMax\":25007553675,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":778,\"serverGrowth\":72}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"84.8.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":12.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":438,\"ramUsage\":4.15,\"server\":\"lexo-corp\",\"threads\":3,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///5e1e83b9-0674-43ae-8698-58b0f54955ce\",\"moduleSequenceNumber\":7663}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///45d070de-1cbe-418e-b5d7-6a0e5a94af98\",\"moduleSequenceNumber\":1219}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///5e1e83b9-0674-43ae-8698-58b0f54955ce\",\"moduleSequenceNumber\":7663}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":7663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"syscore\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":798047173,\"moneyMax\":19951179325,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":710,\"serverGrowth\":56}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"42.4.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":29.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":450,\"ramUsage\":4.15,\"server\":\"rho-construction\",\"threads\":7,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///0dbbc34e-f30b-4714-adce-aee64bec569c\",\"moduleSequenceNumber\":7675}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///0f47e4f0-9332-4b86-9a16-0063c5ab6ce2\",\"moduleSequenceNumber\":1224}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"rho-construction\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///0dbbc34e-f30b-4714-adce-aee64bec569c\",\"moduleSequenceNumber\":7675}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"rho-construction\",\"moduleSequenceNumber\":7675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"rho-construction\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///1db75b25-6821-49e7-a0cc-9faa072fa562\",\"moduleSequenceNumber\":15858}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.ns\",\"url\":\"blob:file:///aa37ce00-df05-4de3-9e3c-444a9f5ad817\",\"moduleSequenceNumber\":8291}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":32.95950000000143,\"minDifficulty\":20,\"moneyAvailable\":1014514863.016836,\"moneyMax\":16665140000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":482,\"serverGrowth\":46}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"38.6.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":124.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":443,\"ramUsage\":4.15,\"server\":\"alpha-ent\",\"threads\":30,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///68899772-3630-4b1b-8b29-85031e7da127\",\"moduleSequenceNumber\":7668}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///4889c5f9-69e6-4cac-9fa7-33790b05f689\",\"moduleSequenceNumber\":1246}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///68899772-3630-4b1b-8b29-85031e7da127\",\"moduleSequenceNumber\":7668}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":7668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":32.0763750000017,\"minDifficulty\":20,\"moneyAvailable\":1184702521.0100536,\"moneyMax\":17651055950,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":503,\"serverGrowth\":53}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"41.3.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":12.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":447,\"ramUsage\":4.15,\"server\":\"aevum-police\",\"threads\":3,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///3f14423c-0be0-42c8-8222-1ccb9d49bccb\",\"moduleSequenceNumber\":7672}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///78ff8b45-f3b2-4f36-b4c9-cf5e4447fbb7\",\"moduleSequenceNumber\":1248}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"aevum-police\",\"moduleSequenceNumber\":764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///3f14423c-0be0-42c8-8222-1ccb9d49bccb\",\"moduleSequenceNumber\":7672}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"aevum-police\",\"moduleSequenceNumber\":7672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"aevum-police\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":24.792000000000264,\"minDifficulty\":24,\"moneyAvailable\":386638115.1507398,\"moneyMax\":8632975625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":400,\"serverGrowth\":31}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"16.7.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":29.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":435,\"ramUsage\":4.15,\"server\":\"rothman-uni\",\"threads\":7,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///e7fcefe0-a245-4e3d-bd11-1cf33620725e\",\"moduleSequenceNumber\":7660}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///2f58152e-ee3f-4cf1-82a1-a51993f37055\",\"moduleSequenceNumber\":1253}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///e7fcefe0-a245-4e3d-bd11-1cf33620725e\",\"moduleSequenceNumber\":7660}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":7660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///522ce76e-a924-419a-8676-1c8c32c6965a\",\"moduleSequenceNumber\":8289}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.ns\",\"url\":\"blob:file:///0daa2b5b-433d-4b02-80d8-988480b19473\",\"moduleSequenceNumber\":8290}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":41.0084999999983,\"minDifficulty\":16,\"moneyAvailable\":448820907.32356524,\"moneyMax\":4723231425,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":385,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"2.8.3.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":124.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":436,\"ramUsage\":4.15,\"server\":\"zb-institute\",\"threads\":30,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///f189cb45-a90e-424c-a235-a9c63d53d023\",\"moduleSequenceNumber\":7661}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///5272ece9-bb09-4de8-85a7-9ab83c335e3f\",\"moduleSequenceNumber\":1275}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"zb-institute\",\"moduleSequenceNumber\":775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///f189cb45-a90e-424c-a235-a9c63d53d023\",\"moduleSequenceNumber\":7661}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"zb-institute\",\"moduleSequenceNumber\":7661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zb-institute\",\"moduleSequenceNumber\":777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"zb-institute\",\"moduleSequenceNumber\":778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":837460763,\"moneyMax\":20936519075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":749,\"serverGrowth\":84}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"60.7.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":62.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":437,\"ramUsage\":4.15,\"server\":\"summit-uni\",\"threads\":15,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///34aaa8df-99e9-470b-9cdb-f7533b8e9ad6\",\"moduleSequenceNumber\":7662}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///1568c14e-5bda-4e77-bbc4-4d3ddc891766\",\"moduleSequenceNumber\":1286}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"summit-uni\",\"moduleSequenceNumber\":779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///34aaa8df-99e9-470b-9cdb-f7533b8e9ad6\",\"moduleSequenceNumber\":7662}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"summit-uni\",\"moduleSequenceNumber\":7662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"summit-uni\",\"moduleSequenceNumber\":782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///f105ae3e-8ddf-4f26-b1cc-bfbc82386699\",\"moduleSequenceNumber\":15862}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.ns\",\"url\":\"blob:file:///ef7085a0-5600-427e-91bd-0aeb45b18f07\",\"moduleSequenceNumber\":8295}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":34.18775000000059,\"minDifficulty\":19,\"moneyAvailable\":525698298.98616284,\"moneyMax\":6254318125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":471,\"serverGrowth\":55}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"5.1.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"syscore\",\"moduleSequenceNumber\":786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"syscore\",\"moduleSequenceNumber\":787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"syscore\",\"moduleSequenceNumber\":788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"syscore\",\"moduleSequenceNumber\":789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":66.28750000000034,\"minDifficulty\":24,\"moneyAvailable\":518046121,\"moneyMax\":12951153025,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":649,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"19.3.3.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":124.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":446,\"ramUsage\":4.15,\"server\":\"catalyst\",\"threads\":30,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///dd2936ce-34e0-49dc-b7f3-1cbea3fc73be\",\"moduleSequenceNumber\":7671}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///7aaf13e0-f6b3-43d0-a762-50a93d232675\",\"moduleSequenceNumber\":1308}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"catalyst\",\"moduleSequenceNumber\":790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///dd2936ce-34e0-49dc-b7f3-1cbea3fc73be\",\"moduleSequenceNumber\":7671}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"catalyst\",\"moduleSequenceNumber\":7671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"catalyst\",\"moduleSequenceNumber\":792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"catalyst\",\"moduleSequenceNumber\":793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///0dfc3713-8077-4c28-923b-60f10ead14ca\",\"moduleSequenceNumber\":15883}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.ns\",\"url\":\"blob:file:///5357ef56-a033-4ece-8854-a6fb4fff4be9\",\"moduleSequenceNumber\":8296}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":36.832124999999934,\"minDifficulty\":21,\"moneyAvailable\":879237603.3564405,\"moneyMax\":10080150050,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":438,\"serverGrowth\":30}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"4.9.8.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":62.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":445,\"ramUsage\":4.15,\"server\":\"the-hub\",\"threads\":15,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///575ab3b3-bc8a-4919-9bbb-668ca850596e\",\"moduleSequenceNumber\":7670}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///e3b9b84d-dd62-4cbc-9907-7b27a830c8a2\",\"moduleSequenceNumber\":1319}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"the-hub\",\"moduleSequenceNumber\":797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///575ab3b3-bc8a-4919-9bbb-668ca850596e\",\"moduleSequenceNumber\":7670}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"the-hub\",\"moduleSequenceNumber\":7670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"the-hub\",\"moduleSequenceNumber\":799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"the-hub\",\"moduleSequenceNumber\":800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///39ea52a5-9776-4d48-b27e-8c0d27fcc91e\",\"moduleSequenceNumber\":15861}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.ns\",\"url\":\"blob:file:///f7df68d8-1861-4b6a-9f66-c11996455d35\",\"moduleSequenceNumber\":8294}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":47.09962499999637,\"minDifficulty\":13,\"moneyAvailable\":732605423.6340089,\"moneyMax\":4772097825,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":302,\"serverGrowth\":52}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"65.6.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"comptek\",\"moduleSequenceNumber\":804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"comptek\",\"moduleSequenceNumber\":805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"comptek\",\"moduleSequenceNumber\":806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"comptek\",\"moduleSequenceNumber\":807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":44.05262499999905,\"minDifficulty\":19,\"moneyAvailable\":561271859.617404,\"moneyMax\":5753950600,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":344,\"serverGrowth\":55}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"25.3.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":12.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":431,\"ramUsage\":4.15,\"server\":\"netlink\",\"threads\":3,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///80592293-f86d-4023-899f-63e642635a17\",\"moduleSequenceNumber\":7656}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///cb89ee72-8834-45ba-8e8c-5b78e9b768e4\",\"moduleSequenceNumber\":1321}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"netlink\",\"moduleSequenceNumber\":808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///80592293-f86d-4023-899f-63e642635a17\",\"moduleSequenceNumber\":7656}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"netlink\",\"moduleSequenceNumber\":7656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"netlink\",\"moduleSequenceNumber\":810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"netlink\",\"moduleSequenceNumber\":811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///3e4ab8d2-a2ec-4781-9d30-8bde0a081b69\",\"moduleSequenceNumber\":8281}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":39.471750000000185,\"minDifficulty\":21,\"moneyAvailable\":507898026.22567576,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":404,\"serverGrowth\":47}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"65.6.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":46.730999999996214,\"minDifficulty\":13,\"moneyAvailable\":250831173.45373404,\"moneyMax\":1866901525,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":294,\"serverGrowth\":45}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"81.7.5.1\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"n00dles\",\"moduleSequenceNumber\":819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"n00dles\",\"moduleSequenceNumber\":820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"n00dles\",\"moduleSequenceNumber\":822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///2db61e67-f541-4190-abcf-d604b9489ed5\",\"moduleSequenceNumber\":8273}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":14.926000000001213,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"98.7.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":12.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":424,\"ramUsage\":4.15,\"server\":\"foodnstuff\",\"threads\":3,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///15bbf109-ea93-43c3-95db-ed6c332c69e6\",\"moduleSequenceNumber\":7649}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///a3a183b5-5940-4b0d-a9e4-f490fe5dbda9\",\"moduleSequenceNumber\":1323}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///15bbf109-ea93-43c3-95db-ed6c332c69e6\",\"moduleSequenceNumber\":7649}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":7649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///4929d2ca-d581-4349-ad15-88515fb0fb0d\",\"moduleSequenceNumber\":8275}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":41.189999999998854,\"minDifficulty\":3,\"moneyAvailable\":27867102.4701349,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"46.1.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":12.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":425,\"ramUsage\":4.15,\"server\":\"sigma-cosmetics\",\"threads\":3,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///201d6fe8-7533-4b08-9128-0fb8505a9d00\",\"moduleSequenceNumber\":7650}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///eca3e8fc-1f7e-4c9d-9186-4eb6b8da72b2\",\"moduleSequenceNumber\":1325}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///201d6fe8-7533-4b08-9128-0fb8505a9d00\",\"moduleSequenceNumber\":7650}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":7650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///bc1543ac-bdb2-469b-9791-d21135a5f61a\",\"moduleSequenceNumber\":8276}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":30.32400000000345,\"minDifficulty\":3,\"moneyAvailable\":38468353.1475542,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"44.5.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":12.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":427,\"ramUsage\":4.15,\"server\":\"joesguns\",\"threads\":3,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///a0cf5eb9-5bef-476d-b857-086849d16bf5\",\"moduleSequenceNumber\":7652}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///bf8f2bec-dc14-4aff-be18-03c26288e21d\",\"moduleSequenceNumber\":1327}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"joesguns\",\"moduleSequenceNumber\":840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///a0cf5eb9-5bef-476d-b857-086849d16bf5\",\"moduleSequenceNumber\":7652}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"joesguns\",\"moduleSequenceNumber\":7652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"joesguns\",\"moduleSequenceNumber\":843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///0c2fe7f7-b608-4551-b99b-87b79926e1c3\",\"moduleSequenceNumber\":8277}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":28.760000000002904,\"minDifficulty\":5,\"moneyAvailable\":42929192.9758548,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"94.4.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":29.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":426,\"ramUsage\":4.15,\"server\":\"zer0\",\"threads\":7,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///0a33b459-cfab-494b-984f-ce497d240ba6\",\"moduleSequenceNumber\":7651}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///3096c7c3-980c-4183-8955-e3b25ed1eee8\",\"moduleSequenceNumber\":1332}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"zer0\",\"moduleSequenceNumber\":847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///0a33b459-cfab-494b-984f-ce497d240ba6\",\"moduleSequenceNumber\":7651}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"zer0\",\"moduleSequenceNumber\":7651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zer0\",\"moduleSequenceNumber\":849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"zer0\",\"moduleSequenceNumber\":850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///dd315673-71e3-4ff1-97b3-f2025a38c768\",\"moduleSequenceNumber\":8284}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":54.59149999998743,\"minDifficulty\":8,\"moneyAvailable\":128294174.44477817,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"75.9.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":12.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":433,\"ramUsage\":4.15,\"server\":\"nectar-net\",\"threads\":3,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///af8f6328-0ffd-457c-a8b3-f702dde5f9f2\",\"moduleSequenceNumber\":7658}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///6bbb5b81-4fd7-40d6-8e21-c1cff74b5ddf\",\"moduleSequenceNumber\":1334}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"nectar-net\",\"moduleSequenceNumber\":854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///af8f6328-0ffd-457c-a8b3-f702dde5f9f2\",\"moduleSequenceNumber\":7658}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"nectar-net\",\"moduleSequenceNumber\":7658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"nectar-net\",\"moduleSequenceNumber\":857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///c8fd1209-ea6a-49b2-af33-23e4bffeb96c\",\"moduleSequenceNumber\":8280}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":27.994999999980084,\"minDifficulty\":7,\"moneyAvailable\":47226221.18342228,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"8.7.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":29.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":434,\"ramUsage\":4.15,\"server\":\"neo-net\",\"threads\":7,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///d3f2e6bc-8f68-4992-be08-e6205dd5293b\",\"moduleSequenceNumber\":7659}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///35afeba5-2dd0-45a9-971e-2798cf3de561\",\"moduleSequenceNumber\":1339}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"neo-net\",\"moduleSequenceNumber\":861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///d3f2e6bc-8f68-4992-be08-e6205dd5293b\",\"moduleSequenceNumber\":7659}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"neo-net\",\"moduleSequenceNumber\":7659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"neo-net\",\"moduleSequenceNumber\":863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"neo-net\",\"moduleSequenceNumber\":864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///4fb43cc2-667e-4bc9-8903-899bf19a15d5\",\"moduleSequenceNumber\":8287}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":51.06824999998476,\"minDifficulty\":8,\"moneyAvailable\":85172281.05443498,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"58.0.7.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":429,\"ramUsage\":4.15,\"server\":\"silver-helix\",\"threads\":15,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///3ef0a4cc-f419-42f7-907a-64a4cc9f9361\",\"moduleSequenceNumber\":7654}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///81995bfd-32a1-493c-8c93-b7e2ae7c812b\",\"moduleSequenceNumber\":1350}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"silver-helix\",\"moduleSequenceNumber\":868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///3ef0a4cc-f419-42f7-907a-64a4cc9f9361\",\"moduleSequenceNumber\":7654}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"silver-helix\",\"moduleSequenceNumber\":7654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"silver-helix\",\"moduleSequenceNumber\":871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///0ebaa290-e915-41e5-9244-20fe28d018f7\",\"moduleSequenceNumber\":15860}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.ns\",\"url\":\"blob:file:///377c8913-d1f2-4646-94d9-a3b3f7f91b19\",\"moduleSequenceNumber\":8293}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":53.06287499999316,\"minDifficulty\":10,\"moneyAvailable\":348524248.5332553,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"12.1.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":12.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":432,\"ramUsage\":4.15,\"server\":\"hong-fang-tea\",\"threads\":3,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///10a28320-cba7-44f3-b433-87b2c2b72ba4\",\"moduleSequenceNumber\":7657}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///56ea1ce5-e29d-4df9-bb86-4f4a310f408d\",\"moduleSequenceNumber\":1352}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///10a28320-cba7-44f3-b433-87b2c2b72ba4\",\"moduleSequenceNumber\":7657}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":7657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///f4197131-f4aa-4b09-9d8a-7bddea65643e\",\"moduleSequenceNumber\":8278}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":48.54662499998109,\"minDifficulty\":5,\"moneyAvailable\":48191532.48611846,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"9.6.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":12.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":463,\"ramUsage\":4.15,\"server\":\"harakiri-sushi\",\"threads\":3,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///842cd21b-aaf8-45fe-be14-57159bbb08a0\",\"moduleSequenceNumber\":7688}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///16c1b903-e539-498d-b0d8-1479bcad8838\",\"moduleSequenceNumber\":1354}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///842cd21b-aaf8-45fe-be14-57159bbb08a0\",\"moduleSequenceNumber\":7688}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":7688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///0cd79186-34e7-4989-ac57-e2d745147963\",\"moduleSequenceNumber\":8279}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":58.232624999992254,\"minDifficulty\":5,\"moneyAvailable\":69746839.36859007,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"57.5.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":29.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":444,\"ramUsage\":4.15,\"server\":\"phantasy\",\"threads\":7,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///21283f6d-0ad4-46cc-a647-944d1bca9eca\",\"moduleSequenceNumber\":7669}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///e0fde48a-f687-4505-92f3-5307de9b16cb\",\"moduleSequenceNumber\":1359}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"phantasy\",\"moduleSequenceNumber\":889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///21283f6d-0ad4-46cc-a647-944d1bca9eca\",\"moduleSequenceNumber\":7669}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"phantasy\",\"moduleSequenceNumber\":7669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"phantasy\",\"moduleSequenceNumber\":891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"phantasy\",\"moduleSequenceNumber\":892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///3edc6f8d-fd00-47ea-9377-dec5df6b196c\",\"moduleSequenceNumber\":8288}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":49.49599999999705,\"minDifficulty\":7,\"moneyAvailable\":421061170.85591465,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"56.5.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":29.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":464,\"ramUsage\":4.15,\"server\":\"max-hardware\",\"threads\":7,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///b80af9cb-4e43-4510-b396-51fc6eba47e7\",\"moduleSequenceNumber\":7689}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///04af9818-efc6-417e-a4cf-02ec592493e0\",\"moduleSequenceNumber\":1364}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"max-hardware\",\"moduleSequenceNumber\":896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///b80af9cb-4e43-4510-b396-51fc6eba47e7\",\"moduleSequenceNumber\":7689}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"max-hardware\",\"moduleSequenceNumber\":7689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"max-hardware\",\"moduleSequenceNumber\":899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///d2053f7d-4b9c-4f28-a60d-29bb3535e89a\",\"moduleSequenceNumber\":8285}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":49.87199999999893,\"minDifficulty\":5,\"moneyAvailable\":186898734.34507215,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"89.7.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":29.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":430,\"ramUsage\":4.15,\"server\":\"omega-net\",\"threads\":7,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///2d778e52-dc5b-4a72-b14c-a2b7d998cc10\",\"moduleSequenceNumber\":7655}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///c560a957-8451-4b21-9a80-074c69dd7db5\",\"moduleSequenceNumber\":1369}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"omega-net\",\"moduleSequenceNumber\":903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///2d778e52-dc5b-4a72-b14c-a2b7d998cc10\",\"moduleSequenceNumber\":7655}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"omega-net\",\"moduleSequenceNumber\":7655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"omega-net\",\"moduleSequenceNumber\":905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"omega-net\",\"moduleSequenceNumber\":906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///2442c727-6922-4776-868c-c6413c6db4e1\",\"moduleSequenceNumber\":8286}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":47.50062499999708,\"minDifficulty\":9,\"moneyAvailable\":761631555.3058467,\"moneyMax\":1745240725,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":209,\"serverGrowth\":39}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"49.1.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":910,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":48.165249999995446,\"minDifficulty\":12,\"moneyAvailable\":123107817.39642955,\"moneyMax\":1056748075,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":250,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"7.7.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":29.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":465,\"ramUsage\":4.15,\"server\":\"iron-gym\",\"threads\":7,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///2b8389d0-a6e6-418d-905e-7904b84deac9\",\"moduleSequenceNumber\":7690}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///c4cafa61-eb56-4476-8b3d-0a7e8d84ad57\",\"moduleSequenceNumber\":1374}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"iron-gym\",\"moduleSequenceNumber\":914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///2b8389d0-a6e6-418d-905e-7904b84deac9\",\"moduleSequenceNumber\":7690}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"iron-gym\",\"moduleSequenceNumber\":7690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"iron-gym\",\"moduleSequenceNumber\":917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///d594371e-3722-4fca-977c-0dd247abb05b\",\"moduleSequenceNumber\":8283}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":55.9097499999919,\"minDifficulty\":10,\"moneyAvailable\":91209838.33196689,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"70.5.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":29.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":451,\"ramUsage\":4.15,\"server\":\"millenium-fitness\",\"threads\":7,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///4b005da8-6f6c-401c-bc57-df041c65830e\",\"moduleSequenceNumber\":7676}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///fcf609a5-1b3f-4831-ac98-25042ce7ec32\",\"moduleSequenceNumber\":1379}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///4b005da8-6f6c-401c-bc57-df041c65830e\",\"moduleSequenceNumber\":7676}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":7676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///501d0378-f07a-40a7-b36a-288ebd7df19d\",\"moduleSequenceNumber\":15859}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.ns\",\"url\":\"blob:file:///e4fcfd18-d4e8-4b94-ad43-b1053aec5519\",\"moduleSequenceNumber\":8292}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":30.34375000000143,\"minDifficulty\":17,\"moneyAvailable\":379290899.9126434,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":514,\"serverGrowth\":29}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"95.0.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":29.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":460,\"ramUsage\":4.15,\"server\":\"powerhouse-fitness\",\"threads\":7,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///8a941547-4efb-4b08-8d6d-f97f28f75ce1\",\"moduleSequenceNumber\":7685}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///1d9f81dc-8e83-4246-bed7-5109f6dd945d\",\"moduleSequenceNumber\":1384}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///8a941547-4efb-4b08-8d6d-f97f28f75ce1\",\"moduleSequenceNumber\":7685}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":7685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1039,\"serverGrowth\":60}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"25.1.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":755,\"serverGrowth\":49}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"67.0.6.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":510.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":440,\"ramUsage\":4.15,\"server\":\"run4theh111z\",\"threads\":123,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///1e38980b-e68d-4c60-bf30-6531437e66f2\",\"moduleSequenceNumber\":7665}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///81980979-f1c3-442a-9634-e147e1975b47\",\"moduleSequenceNumber\":1411}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///1e38980b-e68d-4c60-bf30-6531437e66f2\",\"moduleSequenceNumber\":7665}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":7665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"nova-med\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":525,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"33.9.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":124.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":449,\"ramUsage\":4.15,\"server\":\"I.I.I.I\",\"threads\":30,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///01ac848a-64eb-4346-80fd-3335492767b5\",\"moduleSequenceNumber\":7674}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///5d42d824-66c7-457e-ab92-2cf85cda704c\",\"moduleSequenceNumber\":1433}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///01ac848a-64eb-4346-80fd-3335492767b5\",\"moduleSequenceNumber\":7674}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":7674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///988cfe94-2bb8-4dcd-a850-940f6398cda0\",\"moduleSequenceNumber\":15884}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.ns\",\"url\":\"blob:file:///cbaa7d2e-cfca-4144-a986-593e95afe374\",\"moduleSequenceNumber\":8297}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":359,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"77.9.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":12.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":448,\"ramUsage\":4.15,\"server\":\"avmnite-02h\",\"threads\":3,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///45f8d03e-4554-4dbe-a77c-4077cc314c6e\",\"moduleSequenceNumber\":7673}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///75acfa31-1bdd-433e-9f77-77c7599cfd6a\",\"moduleSequenceNumber\":1435}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///45f8d03e-4554-4dbe-a77c-4077cc314c6e\",\"moduleSequenceNumber\":7673}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":7673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///ca94fa1d-3382-4780-b158-880121ae0f68\",\"moduleSequenceNumber\":8282}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":211,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"33.7.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":12.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":442,\"ramUsage\":4.15,\"server\":\".\",\"threads\":3,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///ae9a2af8-8949-4d2d-bb0a-647feae88e82\",\"moduleSequenceNumber\":7667}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///b863a206-adb9-4928-87ad-9f741a544196\",\"moduleSequenceNumber\":1437}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\".\",\"moduleSequenceNumber\":954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///ae9a2af8-8949-4d2d-bb0a-647feae88e82\",\"moduleSequenceNumber\":7667}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\".\",\"moduleSequenceNumber\":7667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\".\",\"moduleSequenceNumber\":956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\".\",\"moduleSequenceNumber\":957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":532,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"85.9.5.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":4.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":428,\"ramUsage\":4.15,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///f8e5ed6f-e59b-41a8-9033-65e32930aa8d\",\"moduleSequenceNumber\":7653}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///3bce4521-a383-4549-ae44-14dabd81c6d1\",\"moduleSequenceNumber\":1438}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"CSEC\",\"moduleSequenceNumber\":958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///f8e5ed6f-e59b-41a8-9033-65e32930aa8d\",\"moduleSequenceNumber\":7653}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"CSEC\",\"moduleSequenceNumber\":7653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"CSEC\",\"moduleSequenceNumber\":961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///d127659b-6abb-479c-ac60-8287fbdc5127\",\"moduleSequenceNumber\":8274}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":59,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"92.5.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"The-Cave\",\"moduleSequenceNumber\":965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"The-Cave\",\"moduleSequenceNumber\":966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"The-Cave\",\"moduleSequenceNumber\":967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"The-Cave\",\"moduleSequenceNumber\":968,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"59.8.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"67.1.0.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"darkweb\",\"moduleSequenceNumber\":969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"darkweb\",\"moduleSequenceNumber\":970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"darkweb\",\"moduleSequenceNumber\":971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"darkweb\",\"moduleSequenceNumber\":972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-5db7f80d-a25d-41b5-b5fd-da294800100b\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-5db7f80d-a25d-41b5-b5fd-da294800100b\",\"httpPortOpen\":false,\"ip\":\"66.3.8.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":466,\"ramUsage\":4.15,\"server\":\"pserv-2048-5db7f80d-a25d-41b5-b5fd-da294800100b\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///53fe7081-2ccb-4153-adef-3e1d6cadbb9b\",\"moduleSequenceNumber\":7691}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///527e55dc-8858-4dfe-9bcf-2a40204afc5a\",\"moduleSequenceNumber\":1465}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-5db7f80d-a25d-41b5-b5fd-da294800100b\",\"moduleSequenceNumber\":973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///53fe7081-2ccb-4153-adef-3e1d6cadbb9b\",\"moduleSequenceNumber\":7691}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-5db7f80d-a25d-41b5-b5fd-da294800100b\",\"moduleSequenceNumber\":7691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-5db7f80d-a25d-41b5-b5fd-da294800100b\",\"moduleSequenceNumber\":975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-5db7f80d-a25d-41b5-b5fd-da294800100b\",\"moduleSequenceNumber\":976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-b7d06b0d-76b7-422d-944d-335e931da52d\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-b7d06b0d-76b7-422d-944d-335e931da52d\",\"httpPortOpen\":false,\"ip\":\"21.7.1.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":467,\"ramUsage\":4.15,\"server\":\"pserv-2048-b7d06b0d-76b7-422d-944d-335e931da52d\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///91f13221-c8dd-4fd7-a876-fdbf24014b7e\",\"moduleSequenceNumber\":7692}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///0c900a62-68a9-40dc-93f5-cdae3efc915a\",\"moduleSequenceNumber\":1492}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-b7d06b0d-76b7-422d-944d-335e931da52d\",\"moduleSequenceNumber\":977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///91f13221-c8dd-4fd7-a876-fdbf24014b7e\",\"moduleSequenceNumber\":7692}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-b7d06b0d-76b7-422d-944d-335e931da52d\",\"moduleSequenceNumber\":7692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-b7d06b0d-76b7-422d-944d-335e931da52d\",\"moduleSequenceNumber\":979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-b7d06b0d-76b7-422d-944d-335e931da52d\",\"moduleSequenceNumber\":980,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-1253164e-bebc-497a-950b-accac14cc3ed\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-1253164e-bebc-497a-950b-accac14cc3ed\",\"httpPortOpen\":false,\"ip\":\"76.9.0.0\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":468,\"ramUsage\":4.15,\"server\":\"pserv-2048-1253164e-bebc-497a-950b-accac14cc3ed\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///08754e48-8d3c-4f65-803a-428c51bc9eb0\",\"moduleSequenceNumber\":7693}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///eee8f5cc-60e6-4621-9f56-4a495fc89812\",\"moduleSequenceNumber\":1519}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-1253164e-bebc-497a-950b-accac14cc3ed\",\"moduleSequenceNumber\":981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///08754e48-8d3c-4f65-803a-428c51bc9eb0\",\"moduleSequenceNumber\":7693}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-1253164e-bebc-497a-950b-accac14cc3ed\",\"moduleSequenceNumber\":7693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-1253164e-bebc-497a-950b-accac14cc3ed\",\"moduleSequenceNumber\":983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-1253164e-bebc-497a-950b-accac14cc3ed\",\"moduleSequenceNumber\":984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-ad796d97-3271-4faf-b0e3-8054f38e817f\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-ad796d97-3271-4faf-b0e3-8054f38e817f\",\"httpPortOpen\":false,\"ip\":\"77.2.7.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":469,\"ramUsage\":4.15,\"server\":\"pserv-2048-ad796d97-3271-4faf-b0e3-8054f38e817f\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///30ec8917-71e6-4708-8baa-17df72ea4c00\",\"moduleSequenceNumber\":7694}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///c5bbb311-607e-48f0-b683-6c48a4beca42\",\"moduleSequenceNumber\":1546}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-ad796d97-3271-4faf-b0e3-8054f38e817f\",\"moduleSequenceNumber\":985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///30ec8917-71e6-4708-8baa-17df72ea4c00\",\"moduleSequenceNumber\":7694}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-ad796d97-3271-4faf-b0e3-8054f38e817f\",\"moduleSequenceNumber\":7694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-ad796d97-3271-4faf-b0e3-8054f38e817f\",\"moduleSequenceNumber\":987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-ad796d97-3271-4faf-b0e3-8054f38e817f\",\"moduleSequenceNumber\":988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-8f55ff8e-e002-46f7-a822-94f4564606c2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-8f55ff8e-e002-46f7-a822-94f4564606c2\",\"httpPortOpen\":false,\"ip\":\"88.4.0.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":470,\"ramUsage\":4.15,\"server\":\"pserv-2048-8f55ff8e-e002-46f7-a822-94f4564606c2\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///34f7fcf0-7819-4491-bc58-4c5ca38faeeb\",\"moduleSequenceNumber\":7695}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///d4ae8655-b4d0-4ec7-8112-b90776ab1c04\",\"moduleSequenceNumber\":1573}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-8f55ff8e-e002-46f7-a822-94f4564606c2\",\"moduleSequenceNumber\":989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///34f7fcf0-7819-4491-bc58-4c5ca38faeeb\",\"moduleSequenceNumber\":7695}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-8f55ff8e-e002-46f7-a822-94f4564606c2\",\"moduleSequenceNumber\":7695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-8f55ff8e-e002-46f7-a822-94f4564606c2\",\"moduleSequenceNumber\":991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-8f55ff8e-e002-46f7-a822-94f4564606c2\",\"moduleSequenceNumber\":992,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-5abb9798-f2c5-4064-92c9-d93fc5daf0eb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-5abb9798-f2c5-4064-92c9-d93fc5daf0eb\",\"httpPortOpen\":false,\"ip\":\"60.4.1.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":471,\"ramUsage\":4.15,\"server\":\"pserv-2048-5abb9798-f2c5-4064-92c9-d93fc5daf0eb\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///094ad509-29ac-4788-95d8-f21e67d56be7\",\"moduleSequenceNumber\":7696}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///4a295559-2f28-4175-95de-e4345b333138\",\"moduleSequenceNumber\":1600}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-5abb9798-f2c5-4064-92c9-d93fc5daf0eb\",\"moduleSequenceNumber\":993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///094ad509-29ac-4788-95d8-f21e67d56be7\",\"moduleSequenceNumber\":7696}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-5abb9798-f2c5-4064-92c9-d93fc5daf0eb\",\"moduleSequenceNumber\":7696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-5abb9798-f2c5-4064-92c9-d93fc5daf0eb\",\"moduleSequenceNumber\":995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-5abb9798-f2c5-4064-92c9-d93fc5daf0eb\",\"moduleSequenceNumber\":996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-b0a82c70-99e9-478c-b89a-d91001373beb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-b0a82c70-99e9-478c-b89a-d91001373beb\",\"httpPortOpen\":false,\"ip\":\"90.5.4.0\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":472,\"ramUsage\":4.15,\"server\":\"pserv-2048-b0a82c70-99e9-478c-b89a-d91001373beb\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///4406d585-fca7-4d42-9d0c-6eca9ac7954c\",\"moduleSequenceNumber\":7697}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///af5dd89e-ba5d-441d-b2d4-cd49a3bd2015\",\"moduleSequenceNumber\":1627}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-b0a82c70-99e9-478c-b89a-d91001373beb\",\"moduleSequenceNumber\":997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///4406d585-fca7-4d42-9d0c-6eca9ac7954c\",\"moduleSequenceNumber\":7697}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-b0a82c70-99e9-478c-b89a-d91001373beb\",\"moduleSequenceNumber\":7697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-b0a82c70-99e9-478c-b89a-d91001373beb\",\"moduleSequenceNumber\":999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-b0a82c70-99e9-478c-b89a-d91001373beb\",\"moduleSequenceNumber\":1000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-620ebcdb-0933-460d-a1c8-dcef84f95a5d\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-620ebcdb-0933-460d-a1c8-dcef84f95a5d\",\"httpPortOpen\":false,\"ip\":\"98.6.6.5\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":473,\"ramUsage\":4.15,\"server\":\"pserv-2048-620ebcdb-0933-460d-a1c8-dcef84f95a5d\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///8707e632-7517-49e7-bdca-6d8dfb51e640\",\"moduleSequenceNumber\":7698}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///d3586522-2222-4b10-8fb9-c0185842de6a\",\"moduleSequenceNumber\":1654}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-620ebcdb-0933-460d-a1c8-dcef84f95a5d\",\"moduleSequenceNumber\":1001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///8707e632-7517-49e7-bdca-6d8dfb51e640\",\"moduleSequenceNumber\":7698}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-620ebcdb-0933-460d-a1c8-dcef84f95a5d\",\"moduleSequenceNumber\":7698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-620ebcdb-0933-460d-a1c8-dcef84f95a5d\",\"moduleSequenceNumber\":1003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-620ebcdb-0933-460d-a1c8-dcef84f95a5d\",\"moduleSequenceNumber\":1004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-10b48c7c-20b7-4105-b3f3-bbd986a0e626\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-10b48c7c-20b7-4105-b3f3-bbd986a0e626\",\"httpPortOpen\":false,\"ip\":\"24.4.7.5\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":474,\"ramUsage\":4.15,\"server\":\"pserv-2048-10b48c7c-20b7-4105-b3f3-bbd986a0e626\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///366f60a1-88b0-4517-841a-590c57a6c8d3\",\"moduleSequenceNumber\":7699}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///2a01e7f8-5ab7-46b0-afd8-68f980e86be9\",\"moduleSequenceNumber\":1681}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-10b48c7c-20b7-4105-b3f3-bbd986a0e626\",\"moduleSequenceNumber\":1005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///366f60a1-88b0-4517-841a-590c57a6c8d3\",\"moduleSequenceNumber\":7699}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-10b48c7c-20b7-4105-b3f3-bbd986a0e626\",\"moduleSequenceNumber\":7699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-10b48c7c-20b7-4105-b3f3-bbd986a0e626\",\"moduleSequenceNumber\":1007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-10b48c7c-20b7-4105-b3f3-bbd986a0e626\",\"moduleSequenceNumber\":1008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-7dd5d0f0-8fb4-4c91-8d30-12fa1721dc0c\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-7dd5d0f0-8fb4-4c91-8d30-12fa1721dc0c\",\"httpPortOpen\":false,\"ip\":\"93.0.0.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":475,\"ramUsage\":4.15,\"server\":\"pserv-2048-7dd5d0f0-8fb4-4c91-8d30-12fa1721dc0c\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///5ee57c3d-548b-44de-bf80-1af7f70208ad\",\"moduleSequenceNumber\":7700}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///a7dbefe0-0b01-43ac-8c37-9ad5d9f5c972\",\"moduleSequenceNumber\":1708}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-7dd5d0f0-8fb4-4c91-8d30-12fa1721dc0c\",\"moduleSequenceNumber\":1009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///5ee57c3d-548b-44de-bf80-1af7f70208ad\",\"moduleSequenceNumber\":7700}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-7dd5d0f0-8fb4-4c91-8d30-12fa1721dc0c\",\"moduleSequenceNumber\":7700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-7dd5d0f0-8fb4-4c91-8d30-12fa1721dc0c\",\"moduleSequenceNumber\":1011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-7dd5d0f0-8fb4-4c91-8d30-12fa1721dc0c\",\"moduleSequenceNumber\":1012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-8fe53619-b794-4f80-8253-0ad461f9fee1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-8fe53619-b794-4f80-8253-0ad461f9fee1\",\"httpPortOpen\":false,\"ip\":\"2.8.0.0\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":476,\"ramUsage\":4.15,\"server\":\"pserv-2048-8fe53619-b794-4f80-8253-0ad461f9fee1\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///05f0785b-d473-4268-a2df-0b6f9b0e1e3f\",\"moduleSequenceNumber\":7701}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///afc4dfc0-5975-4f01-aa25-eb21ba34bbea\",\"moduleSequenceNumber\":1735}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-8fe53619-b794-4f80-8253-0ad461f9fee1\",\"moduleSequenceNumber\":1013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///05f0785b-d473-4268-a2df-0b6f9b0e1e3f\",\"moduleSequenceNumber\":7701}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-8fe53619-b794-4f80-8253-0ad461f9fee1\",\"moduleSequenceNumber\":7701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-8fe53619-b794-4f80-8253-0ad461f9fee1\",\"moduleSequenceNumber\":1015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-8fe53619-b794-4f80-8253-0ad461f9fee1\",\"moduleSequenceNumber\":1016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-30934766-7170-4b01-9ac0-2c0fa7d97c9e\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-30934766-7170-4b01-9ac0-2c0fa7d97c9e\",\"httpPortOpen\":false,\"ip\":\"84.0.5.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":477,\"ramUsage\":4.15,\"server\":\"pserv-2048-30934766-7170-4b01-9ac0-2c0fa7d97c9e\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///b307bdc0-def4-47ac-9d6e-bd8085f4ea47\",\"moduleSequenceNumber\":7702}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///5576b815-aa6d-4d60-b059-36aaaec53721\",\"moduleSequenceNumber\":1762}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-30934766-7170-4b01-9ac0-2c0fa7d97c9e\",\"moduleSequenceNumber\":1017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///b307bdc0-def4-47ac-9d6e-bd8085f4ea47\",\"moduleSequenceNumber\":7702}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-30934766-7170-4b01-9ac0-2c0fa7d97c9e\",\"moduleSequenceNumber\":7702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-30934766-7170-4b01-9ac0-2c0fa7d97c9e\",\"moduleSequenceNumber\":1019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-30934766-7170-4b01-9ac0-2c0fa7d97c9e\",\"moduleSequenceNumber\":1020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-3d37cb13-8e00-4aa1-8049-5b88d3c740ba\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-3d37cb13-8e00-4aa1-8049-5b88d3c740ba\",\"httpPortOpen\":false,\"ip\":\"29.8.9.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":478,\"ramUsage\":4.15,\"server\":\"pserv-2048-3d37cb13-8e00-4aa1-8049-5b88d3c740ba\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///107ae13e-4b2e-4559-baa1-f83941488f03\",\"moduleSequenceNumber\":7703}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///db6cec4d-5bd3-4bea-8dc3-c433fb2689aa\",\"moduleSequenceNumber\":1789}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-3d37cb13-8e00-4aa1-8049-5b88d3c740ba\",\"moduleSequenceNumber\":1021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///107ae13e-4b2e-4559-baa1-f83941488f03\",\"moduleSequenceNumber\":7703}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-3d37cb13-8e00-4aa1-8049-5b88d3c740ba\",\"moduleSequenceNumber\":7703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-3d37cb13-8e00-4aa1-8049-5b88d3c740ba\",\"moduleSequenceNumber\":1023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-3d37cb13-8e00-4aa1-8049-5b88d3c740ba\",\"moduleSequenceNumber\":1024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-cb2cd9a9-dbe5-47c4-92e0-de454cab6067\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-cb2cd9a9-dbe5-47c4-92e0-de454cab6067\",\"httpPortOpen\":false,\"ip\":\"8.6.1.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":479,\"ramUsage\":4.15,\"server\":\"pserv-2048-cb2cd9a9-dbe5-47c4-92e0-de454cab6067\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///fb9482c3-ac3d-45de-a2e4-6ec1f84d62a7\",\"moduleSequenceNumber\":7704}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///67489442-fbfd-4d92-9a25-aecafa69fc18\",\"moduleSequenceNumber\":1816}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-cb2cd9a9-dbe5-47c4-92e0-de454cab6067\",\"moduleSequenceNumber\":1025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///fb9482c3-ac3d-45de-a2e4-6ec1f84d62a7\",\"moduleSequenceNumber\":7704}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-cb2cd9a9-dbe5-47c4-92e0-de454cab6067\",\"moduleSequenceNumber\":7704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-cb2cd9a9-dbe5-47c4-92e0-de454cab6067\",\"moduleSequenceNumber\":1027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-cb2cd9a9-dbe5-47c4-92e0-de454cab6067\",\"moduleSequenceNumber\":1028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-7eb83425-9cad-4e8b-9715-2461f3a993d3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-7eb83425-9cad-4e8b-9715-2461f3a993d3\",\"httpPortOpen\":false,\"ip\":\"40.4.8.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":480,\"ramUsage\":4.15,\"server\":\"pserv-2048-7eb83425-9cad-4e8b-9715-2461f3a993d3\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///44b39bf0-6f76-41c2-8855-b577629e2a56\",\"moduleSequenceNumber\":7705}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///8c53c982-a1e5-46e4-bfc8-a7538c0847fe\",\"moduleSequenceNumber\":1843}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-7eb83425-9cad-4e8b-9715-2461f3a993d3\",\"moduleSequenceNumber\":1029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///44b39bf0-6f76-41c2-8855-b577629e2a56\",\"moduleSequenceNumber\":7705}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-7eb83425-9cad-4e8b-9715-2461f3a993d3\",\"moduleSequenceNumber\":7705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-7eb83425-9cad-4e8b-9715-2461f3a993d3\",\"moduleSequenceNumber\":1031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-7eb83425-9cad-4e8b-9715-2461f3a993d3\",\"moduleSequenceNumber\":1032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-fba53022-68dd-4b83-b10b-c5ace5f885db\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-fba53022-68dd-4b83-b10b-c5ace5f885db\",\"httpPortOpen\":false,\"ip\":\"13.1.2.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":481,\"ramUsage\":4.15,\"server\":\"pserv-2048-fba53022-68dd-4b83-b10b-c5ace5f885db\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///c081a1bf-9fe0-4b09-addc-89c256cc1e40\",\"moduleSequenceNumber\":7706}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///853190fc-6376-4814-ae1f-d26f8b8ce355\",\"moduleSequenceNumber\":1870}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-fba53022-68dd-4b83-b10b-c5ace5f885db\",\"moduleSequenceNumber\":1033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///c081a1bf-9fe0-4b09-addc-89c256cc1e40\",\"moduleSequenceNumber\":7706}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-fba53022-68dd-4b83-b10b-c5ace5f885db\",\"moduleSequenceNumber\":7706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-fba53022-68dd-4b83-b10b-c5ace5f885db\",\"moduleSequenceNumber\":1035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-fba53022-68dd-4b83-b10b-c5ace5f885db\",\"moduleSequenceNumber\":1036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-4b791a04-5cd8-49d8-99cf-ac1ffb7cf3ae\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-4b791a04-5cd8-49d8-99cf-ac1ffb7cf3ae\",\"httpPortOpen\":false,\"ip\":\"89.8.4.5\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":482,\"ramUsage\":4.15,\"server\":\"pserv-2048-4b791a04-5cd8-49d8-99cf-ac1ffb7cf3ae\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///fefd2049-e843-49ae-9a83-05591a40c702\",\"moduleSequenceNumber\":7707}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///33064cd0-ee6f-428b-b287-b4c48bec1043\",\"moduleSequenceNumber\":1897}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-4b791a04-5cd8-49d8-99cf-ac1ffb7cf3ae\",\"moduleSequenceNumber\":1037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///fefd2049-e843-49ae-9a83-05591a40c702\",\"moduleSequenceNumber\":7707}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-4b791a04-5cd8-49d8-99cf-ac1ffb7cf3ae\",\"moduleSequenceNumber\":7707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-4b791a04-5cd8-49d8-99cf-ac1ffb7cf3ae\",\"moduleSequenceNumber\":1039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-4b791a04-5cd8-49d8-99cf-ac1ffb7cf3ae\",\"moduleSequenceNumber\":1040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-1a08471d-4686-47dd-b81b-e3588e2414c9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-1a08471d-4686-47dd-b81b-e3588e2414c9\",\"httpPortOpen\":false,\"ip\":\"65.2.5.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":483,\"ramUsage\":4.15,\"server\":\"pserv-2048-1a08471d-4686-47dd-b81b-e3588e2414c9\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///c7808458-f913-441e-a5e3-55a29f08b6bb\",\"moduleSequenceNumber\":7708}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///c89b56c7-9e64-4b6e-9c87-4a2104338ab3\",\"moduleSequenceNumber\":1924}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-1a08471d-4686-47dd-b81b-e3588e2414c9\",\"moduleSequenceNumber\":1041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///c7808458-f913-441e-a5e3-55a29f08b6bb\",\"moduleSequenceNumber\":7708}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-1a08471d-4686-47dd-b81b-e3588e2414c9\",\"moduleSequenceNumber\":7708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-1a08471d-4686-47dd-b81b-e3588e2414c9\",\"moduleSequenceNumber\":1043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-1a08471d-4686-47dd-b81b-e3588e2414c9\",\"moduleSequenceNumber\":1044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-0b18a33e-632a-4217-b7eb-75bea0c315e6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-0b18a33e-632a-4217-b7eb-75bea0c315e6\",\"httpPortOpen\":false,\"ip\":\"94.1.8.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":484,\"ramUsage\":4.15,\"server\":\"pserv-2048-0b18a33e-632a-4217-b7eb-75bea0c315e6\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///83a5d66d-b76e-4f75-9617-d68776c1669e\",\"moduleSequenceNumber\":7709}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///7e10909c-e674-42c6-b516-1a2c84abba34\",\"moduleSequenceNumber\":1951}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-0b18a33e-632a-4217-b7eb-75bea0c315e6\",\"moduleSequenceNumber\":1045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///83a5d66d-b76e-4f75-9617-d68776c1669e\",\"moduleSequenceNumber\":7709}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-0b18a33e-632a-4217-b7eb-75bea0c315e6\",\"moduleSequenceNumber\":7709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-0b18a33e-632a-4217-b7eb-75bea0c315e6\",\"moduleSequenceNumber\":1047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-0b18a33e-632a-4217-b7eb-75bea0c315e6\",\"moduleSequenceNumber\":1048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-f1099dac-c7e1-4139-8a19-63446335d789\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-f1099dac-c7e1-4139-8a19-63446335d789\",\"httpPortOpen\":false,\"ip\":\"85.4.9.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":485,\"ramUsage\":4.15,\"server\":\"pserv-2048-f1099dac-c7e1-4139-8a19-63446335d789\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///45a1be79-9db8-48ff-b112-54a1f02ad5b0\",\"moduleSequenceNumber\":7710}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///ab78b00b-977e-4587-997a-f6f582f0d756\",\"moduleSequenceNumber\":1978}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-f1099dac-c7e1-4139-8a19-63446335d789\",\"moduleSequenceNumber\":1049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///45a1be79-9db8-48ff-b112-54a1f02ad5b0\",\"moduleSequenceNumber\":7710}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-f1099dac-c7e1-4139-8a19-63446335d789\",\"moduleSequenceNumber\":7710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-f1099dac-c7e1-4139-8a19-63446335d789\",\"moduleSequenceNumber\":1051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-f1099dac-c7e1-4139-8a19-63446335d789\",\"moduleSequenceNumber\":1052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-d73b88fc-7900-49ba-9cd1-20e8a25431f0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-d73b88fc-7900-49ba-9cd1-20e8a25431f0\",\"httpPortOpen\":false,\"ip\":\"49.8.2.5\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":486,\"ramUsage\":4.15,\"server\":\"pserv-2048-d73b88fc-7900-49ba-9cd1-20e8a25431f0\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///3ab546c2-41a1-4bc4-b526-c3d28f815702\",\"moduleSequenceNumber\":7711}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///b9bb1bf7-213c-4942-97a6-cf4d9b81da90\",\"moduleSequenceNumber\":2005}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-d73b88fc-7900-49ba-9cd1-20e8a25431f0\",\"moduleSequenceNumber\":1053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///3ab546c2-41a1-4bc4-b526-c3d28f815702\",\"moduleSequenceNumber\":7711}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-d73b88fc-7900-49ba-9cd1-20e8a25431f0\",\"moduleSequenceNumber\":7711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-d73b88fc-7900-49ba-9cd1-20e8a25431f0\",\"moduleSequenceNumber\":1055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-d73b88fc-7900-49ba-9cd1-20e8a25431f0\",\"moduleSequenceNumber\":1056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-e9306103-e1a1-4001-acac-f6c31268f2e1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-e9306103-e1a1-4001-acac-f6c31268f2e1\",\"httpPortOpen\":false,\"ip\":\"28.2.7.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":487,\"ramUsage\":4.15,\"server\":\"pserv-2048-e9306103-e1a1-4001-acac-f6c31268f2e1\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///fb67dce3-86ce-4388-889e-abf66f5f6343\",\"moduleSequenceNumber\":7712}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///5a2c87a0-6b6e-4669-977e-63232b5a08c5\",\"moduleSequenceNumber\":2032}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-e9306103-e1a1-4001-acac-f6c31268f2e1\",\"moduleSequenceNumber\":1057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///fb67dce3-86ce-4388-889e-abf66f5f6343\",\"moduleSequenceNumber\":7712}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-e9306103-e1a1-4001-acac-f6c31268f2e1\",\"moduleSequenceNumber\":7712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-e9306103-e1a1-4001-acac-f6c31268f2e1\",\"moduleSequenceNumber\":1059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-e9306103-e1a1-4001-acac-f6c31268f2e1\",\"moduleSequenceNumber\":1060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-b023f924-a20b-484e-8b47-8fd7fb30a208\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-b023f924-a20b-484e-8b47-8fd7fb30a208\",\"httpPortOpen\":false,\"ip\":\"20.6.6.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":488,\"ramUsage\":4.15,\"server\":\"pserv-2048-b023f924-a20b-484e-8b47-8fd7fb30a208\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///6f4bb990-36dd-4182-846c-3b8404f7d416\",\"moduleSequenceNumber\":7713}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///7f97d8c6-fc96-4471-a963-c4f2c53e57ae\",\"moduleSequenceNumber\":2059}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-b023f924-a20b-484e-8b47-8fd7fb30a208\",\"moduleSequenceNumber\":1061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///6f4bb990-36dd-4182-846c-3b8404f7d416\",\"moduleSequenceNumber\":7713}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-b023f924-a20b-484e-8b47-8fd7fb30a208\",\"moduleSequenceNumber\":7713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-b023f924-a20b-484e-8b47-8fd7fb30a208\",\"moduleSequenceNumber\":1063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-b023f924-a20b-484e-8b47-8fd7fb30a208\",\"moduleSequenceNumber\":1064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2048-2e65ca20-edf3-4a0e-8746-ff2cde6ed09b\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048-2e65ca20-edf3-4a0e-8746-ff2cde6ed09b\",\"httpPortOpen\":false,\"ip\":\"96.4.8.0\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2045.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":489,\"ramUsage\":4.15,\"server\":\"pserv-2048-2e65ca20-edf3-4a0e-8746-ff2cde6ed09b\",\"threads\":493,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///ad68636f-75cf-464b-a439-1bf9d7820f3d\",\"moduleSequenceNumber\":7714}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///796e889d-77db-4708-b1aa-0c848397cb1f\",\"moduleSequenceNumber\":2086}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-2048-2e65ca20-edf3-4a0e-8746-ff2cde6ed09b\",\"moduleSequenceNumber\":1065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///ad68636f-75cf-464b-a439-1bf9d7820f3d\",\"moduleSequenceNumber\":7714}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-2048-2e65ca20-edf3-4a0e-8746-ff2cde6ed09b\",\"moduleSequenceNumber\":7714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-2048-2e65ca20-edf3-4a0e-8746-ff2cde6ed09b\",\"moduleSequenceNumber\":1067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-2048-2e65ca20-edf3-4a0e-8746-ff2cde6ed09b\",\"moduleSequenceNumber\":1068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-32768-fca4508e-1813-455d-8607-75180dc4743d\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768-fca4508e-1813-455d-8607-75180dc4743d\",\"httpPortOpen\":false,\"ip\":\"96.0.4.2\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32764.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/basic/grownshare.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":328.00999999998993,\"pid\":490,\"ramUsage\":4.15,\"server\":\"pserv-32768-fca4508e-1813-455d-8607-75180dc4743d\",\"threads\":7895,\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///61714b70-f78b-4a5d-909d-affebd195261\",\"moduleSequenceNumber\":7715}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const targetChance = 60;\\r\\nconst targetMoney = 0.75;\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        if (ns.hackAnalyzeChance(target) * 100 < targetChance) {\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) <\\r\\n            ns.getServerMaxMoney(target) * targetMoney) {\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hacknshare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hacknshare.js\",\"url\":\"blob:file:///e6fefead-0def-4dc8-bb44-b894ba5fc10c\",\"moduleSequenceNumber\":2113}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"pserv-32768-fca4508e-1813-455d-8607-75180dc4743d\",\"moduleSequenceNumber\":1069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n        await ns.grow(target, {\\r\\n            stock: true,\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/grownshare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grownshare.js\",\"url\":\"blob:file:///61714b70-f78b-4a5d-909d-affebd195261\",\"moduleSequenceNumber\":7715}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"pserv-32768-fca4508e-1813-455d-8607-75180dc4743d\",\"moduleSequenceNumber\":7715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (ns.getServerSecurityLevel(target) >\\r\\n        ns.getServerMinSecurityLevel(target) + 5)\\r\\n        await ns.weaken(target);\\r\\n    while (true) {\\r\\n        await ns.weaken(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.grow(target);\\r\\n        await ns.weaken(target);\\r\\n        await ns.hack(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"pserv-32768-fca4508e-1813-455d-8607-75180dc4743d\",\"moduleSequenceNumber\":1071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.installBackdoor();\\n}\",\"filename\":\"/basic/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"pserv-32768-fca4508e-1813-455d-8607-75180dc4743d\",\"moduleSequenceNumber\":1072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":23.964,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":25.3044,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":42.6323,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":33.7588,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0249,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":18.1578,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.1161,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":73.7498,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":533050.6539400556}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":121.1943,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":166925.05443173906}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":115.8133,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":164642.92162992706}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":2.6456,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":110.5354,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":231901.37624983318}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":108.0499,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":159008.47594580415}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":24.5674,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":315268.4987531853}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":97.6801,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":151358.4973128186}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"nuke\":\"run nuke.js\",\"profile\":\"run ServerProfiler.exe\",\"scanall\":\"scan-analyze\",\"scn\":\"cls;scan-analyze 10\",\"track\":\"run fl1ght.exe\",\"cb\":\"connect\",\"restart\":\"killall;run daemon.js\",\"hackall\":\"run advanced/hackall.js\",\"darkweb\":\"home;connect darkweb\",\"killeverything\":\"killall;run advanced/killall.js\",\"scn5\":\"cls;scan-analyze 5\",\"scn3\":\"cls;scan-analyze 3\",\"listall\":\"run advanced/listall.js\",\"find\":\"run advanced/find.js\",\"killstocks\":\"kill /stocks/daemon.js\",\"liquidate\":\"run stocks/liquidate.js\",\"init\":\"wget http://localhost:8000/init.js init.js; wget http://localhost:8000/deployment/self-update.js deployment/self-update.js\",\"nukeall\":\"run advanced/nukeall.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":15876.59127442756,\"lastPrice\":15881.421940501064,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.4,\"b\":false,\"otlkMag\":21.82543626643735,\"otlkMagForecast\":32.1620023814974,\"cap\":230156685,\"spreadPerc\":0.1,\"shareTxForMovement\":35886,\"shareTxUntilMovement\":35886,\"totalShares\":117100000,\"maxShares\":23400000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":13850.27544156551,\"lastPrice\":13845.325605757493,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":true,\"otlkMag\":18.917299653927934,\"otlkMagForecast\":67.98086564366777,\"cap\":229126332,\"spreadPerc\":0.1,\"shareTxForMovement\":79725,\"shareTxUntilMovement\":79725,\"totalShares\":79500000,\"maxShares\":15900000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":53860.598460873705,\"lastPrice\":53828.66117965546,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":10.607107255683575,\"otlkMagForecast\":62.60306133828441,\"cap\":24507307,\"spreadPerc\":0.4,\"shareTxForMovement\":67851,\"shareTxUntilMovement\":67851,\"totalShares\":70500000,\"maxShares\":14100000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":65142.91873146608,\"lastPrice\":65179.09134053945,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":12.61742391281497,\"otlkMagForecast\":38.50475977679092,\"cap\":236602928,\"spreadPerc\":0.3,\"shareTxForMovement\":35857,\"shareTxUntilMovement\":35857,\"totalShares\":113700000,\"maxShares\":22700000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":14886.144354945704,\"lastPrice\":14893.051551627166,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":17.300012356063487,\"otlkMagForecast\":34.328089004701994,\"cap\":377238536,\"spreadPerc\":0.2,\"shareTxForMovement\":83108,\"shareTxUntilMovement\":83108,\"totalShares\":47600000,\"maxShares\":9500000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":21831.38842836805,\"lastPrice\":21849.323159640528,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":false,\"otlkMag\":19.140963843722357,\"otlkMagForecast\":35.13526339732965,\"cap\":1285824765,\"spreadPerc\":1,\"shareTxForMovement\":40129,\"shareTxUntilMovement\":40129,\"totalShares\":25100000,\"maxShares\":5000000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":40446.848170200254,\"lastPrice\":40470.538176239854,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":11.14097946968168,\"otlkMagForecast\":59.588775487143955,\"cap\":337320170,\"spreadPerc\":0.3,\"shareTxForMovement\":45064,\"shareTxUntilMovement\":45064,\"totalShares\":96900000,\"maxShares\":19400000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":47415.70319493252,\"lastPrice\":47459.705131222814,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":false,\"otlkMag\":5.726521836845559,\"otlkMagForecast\":43.99663154739478,\"cap\":519423178,\"spreadPerc\":1,\"shareTxForMovement\":54793,\"shareTxUntilMovement\":54793,\"totalShares\":55800000,\"maxShares\":11200000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":10420.633816095971,\"lastPrice\":10427.371378832877,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":true,\"otlkMag\":5.311081199397377,\"otlkMagForecast\":54.09092200093127,\"cap\":80951187,\"spreadPerc\":0.6,\"shareTxForMovement\":59221,\"shareTxUntilMovement\":59221,\"totalShares\":49500000,\"maxShares\":9900000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":3018.598620660695,\"lastPrice\":3019.9762944032173,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":7.811858978328591,\"otlkMagForecast\":41.384341851529946,\"cap\":89348900,\"spreadPerc\":0.2,\"shareTxForMovement\":48701,\"shareTxUntilMovement\":48701,\"totalShares\":71600000,\"maxShares\":14300000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":19442.736375106662,\"lastPrice\":19434.457902432467,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":8.28876897090305,\"otlkMagForecast\":58.11100169501976,\"cap\":220304825,\"spreadPerc\":0.4,\"shareTxForMovement\":82571,\"shareTxUntilMovement\":82571,\"totalShares\":59500000,\"maxShares\":11900000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":6198.396159101001,\"lastPrice\":6201.932306460779,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":5.727842325483513,\"otlkMagForecast\":42.87867533819307,\"cap\":220649674,\"spreadPerc\":0.2,\"shareTxForMovement\":55584,\"shareTxUntilMovement\":55584,\"totalShares\":103800000,\"maxShares\":20800000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":23383.529157236717,\"lastPrice\":23372.684191419212,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":6.469354026137651,\"otlkMagForecast\":44.016762811716724,\"cap\":122181672,\"spreadPerc\":0.5,\"shareTxForMovement\":102743,\"shareTxUntilMovement\":102743,\"totalShares\":34300000,\"maxShares\":6900000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":23719.797902411112,\"lastPrice\":23729.9017962145,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":10.0223299266649,\"otlkMagForecast\":39.02454269166962,\"cap\":104476298,\"spreadPerc\":0.2,\"shareTxForMovement\":82795,\"shareTxUntilMovement\":82795,\"totalShares\":36500000,\"maxShares\":7300000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":6439.067337032826,\"lastPrice\":6441.908137441991,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":5.2778962419860616,\"otlkMagForecast\":53.302364198327055,\"cap\":110362025,\"spreadPerc\":0.9,\"shareTxForMovement\":54650,\"shareTxUntilMovement\":54650,\"totalShares\":50600000,\"maxShares\":10100000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":4139.65720427031,\"lastPrice\":4141.924387589483,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":5.314023622772187,\"otlkMagForecast\":50.467530123965915,\"cap\":198914050,\"spreadPerc\":0.7,\"shareTxForMovement\":108486,\"shareTxUntilMovement\":108486,\"totalShares\":67800000,\"maxShares\":13600000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":64588.607327018806,\"lastPrice\":64624.4721376372,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":7.462639759975015,\"otlkMagForecast\":58.41636594176381,\"cap\":374558131,\"spreadPerc\":1.1,\"shareTxForMovement\":45394,\"shareTxUntilMovement\":45394,\"totalShares\":28700000,\"maxShares\":5700000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":16071.49867320471,\"lastPrice\":16064.533486933049,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":8.262731071331652,\"otlkMagForecast\":42.153441671067455,\"cap\":36940745,\"spreadPerc\":1,\"shareTxForMovement\":94968,\"shareTxUntilMovement\":94968,\"totalShares\":49700000,\"maxShares\":9900000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":40992.02741623333,\"lastPrice\":40967.097837052155,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":6.07290307908576,\"otlkMagForecast\":56.17223661060465,\"cap\":474368055,\"spreadPerc\":0.4,\"shareTxForMovement\":63895,\"shareTxUntilMovement\":63895,\"totalShares\":30700000,\"maxShares\":6100000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":24739.758088822397,\"lastPrice\":24690.92654027716,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.6,\"b\":false,\"otlkMag\":23.914783397228362,\"otlkMagForecast\":22.409034898216532,\"cap\":63766214,\"spreadPerc\":0.6,\"shareTxForMovement\":20080,\"shareTxUntilMovement\":20080,\"totalShares\":105800000,\"maxShares\":21200000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":5630.988107312871,\"lastPrice\":5625.681870649234,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":true,\"otlkMag\":6.247585130847347,\"otlkMagForecast\":55.61738800570725,\"cap\":183821915,\"spreadPerc\":0.7,\"shareTxForMovement\":72566,\"shareTxUntilMovement\":72566,\"totalShares\":38000000,\"maxShares\":7600000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":8829.754471180575,\"lastPrice\":8833.985821067517,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":5.460429959651555,\"otlkMagForecast\":44.22013724219891,\"cap\":56240354,\"spreadPerc\":0.7,\"shareTxForMovement\":109242,\"shareTxUntilMovement\":109242,\"totalShares\":41900000,\"maxShares\":8400000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":166.23365840309918,\"lastPrice\":165.9798878152916,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.01,\"b\":true,\"otlkMag\":8.713207678457682,\"otlkMagForecast\":61.76297630805956,\"cap\":80890381,\"spreadPerc\":0.6,\"shareTxForMovement\":52188,\"shareTxUntilMovement\":52188,\"totalShares\":35600000,\"maxShares\":7100000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":1547.238144726334,\"lastPrice\":1549.2271394444463,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.69,\"b\":false,\"otlkMag\":6.286754414522993,\"otlkMagForecast\":43.70594728604307,\"cap\":42812759,\"spreadPerc\":1.1,\"shareTxForMovement\":89617,\"shareTxUntilMovement\":89617,\"totalShares\":58000000,\"maxShares\":11600000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":2865.151871378757,\"lastPrice\":2867.004363350441,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":false,\"otlkMag\":6.280332383876487,\"otlkMagForecast\":44.83625248666332,\"cap\":21733460,\"spreadPerc\":0.6,\"shareTxForMovement\":100325,\"shareTxUntilMovement\":100325,\"totalShares\":101900000,\"maxShares\":20400000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":4874.617302737878,\"lastPrice\":4865.66062514444,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.42,\"b\":true,\"otlkMag\":7.443419721214212,\"otlkMagForecast\":56.782442674326866,\"cap\":41031063,\"spreadPerc\":1.3,\"shareTxForMovement\":32971,\"shareTxUntilMovement\":32971,\"totalShares\":28100000,\"maxShares\":5600000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4591.210551361966,\"lastPrice\":4588.069592360495,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.9,\"b\":true,\"otlkMag\":5.325597968843485,\"otlkMagForecast\":52.41816850525428,\"cap\":38582524,\"spreadPerc\":0.6,\"shareTxForMovement\":42818,\"shareTxUntilMovement\":42818,\"totalShares\":9300000,\"maxShares\":1900000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":322.3492801554084,\"lastPrice\":322.5405343940465,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":5.383772202468605,\"otlkMagForecast\":43.19004839896574,\"cap\":6014714,\"spreadPerc\":0.9,\"shareTxForMovement\":80700,\"shareTxUntilMovement\":80700,\"totalShares\":84600000,\"maxShares\":16900000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":4428.5878569352135,\"lastPrice\":4434.280864108132,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.69,\"b\":true,\"otlkMag\":5.5305817522983665,\"otlkMagForecast\":54.7169451209236,\"cap\":61059812,\"spreadPerc\":1.3,\"shareTxForMovement\":48344,\"shareTxUntilMovement\":48344,\"totalShares\":10500000,\"maxShares\":2100000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":30.477881659367007,\"lastPrice\":30.40549040341413,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.13,\"b\":true,\"otlkMag\":16.12051919767367,\"otlkMagForecast\":70.03732437808073,\"cap\":636285,\"spreadPerc\":1.2,\"shareTxForMovement\":27092,\"shareTxUntilMovement\":27092,\"totalShares\":155000000,\"maxShares\":31000000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":3240.555348386904,\"lastPrice\":3244.7211243494867,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.69,\"b\":false,\"otlkMag\":6.35974126218982,\"otlkMagForecast\":44.72515697644441,\"cap\":2940933,\"spreadPerc\":1.1,\"shareTxForMovement\":38283,\"shareTxUntilMovement\":38283,\"totalShares\":100200000,\"maxShares\":20000000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":45365.67873615289,\"lastPrice\":45339.46796652163,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":6.140531129520922,\"otlkMagForecast\":56.322488142930276,\"cap\":147955052,\"spreadPerc\":0.3,\"shareTxForMovement\":119154,\"shareTxUntilMovement\":119154,\"totalShares\":13100000,\"maxShares\":2600000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":73622.28649632733,\"lastPrice\":73657.56739283011,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":11.02891647264598,\"otlkMagForecast\":38.75041750993469,\"cap\":512557602,\"spreadPerc\":0.9,\"shareTxForMovement\":118018,\"shareTxUntilMovement\":118018,\"totalShares\":18700000,\"maxShares\":3700000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":483456,\"lastUpdate\":1645808268561,\"ticksUntilCycle\":44}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":24,\"MonacoVim\":true,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Fira Code, Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-113,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1645756317982","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}