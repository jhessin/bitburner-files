{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":3133,\"hp\":30,\"max_hp\":30,\"strength\":233,\"defense\":209,\"dexterity\":271,\"agility\":203,\"charisma\":443,\"intelligence\":0,\"hacking_chance_mult\":2.003529895285957,\"hacking_speed_mult\":1.959996230624548,\"hacking_money_mult\":6.499983530943193,\"hacking_grow_mult\":3.037759561629644,\"hacking_exp\":61711377255.715416,\"strength_exp\":22860.555165463906,\"defense_exp\":25684.2634260344,\"dexterity_exp\":23387.563052841484,\"agility_exp\":39707.24063195478,\"charisma_exp\":995100.9288551715,\"intelligence_exp\":0,\"hacking_mult\":5.266445495643298,\"strength_mult\":1.916392317736644,\"defense_mult\":1.6664281023796905,\"dexterity_mult\":2.2134331269858234,\"agility_mult\":1.458124589582229,\"charisma_mult\":1.8330709126176588,\"hacking_exp_mult\":5.547079945322122,\"strength_exp_mult\":1.7566929579252573,\"defense_exp_mult\":1.7566929579252573,\"dexterity_exp_mult\":1.7566929579252573,\"agility_exp_mult\":1.7566929579252573,\"charisma_exp_mult\":1.7566929579252573,\"company_rep_mult\":2.3188347044613393,\"faction_rep_mult\":1.7566929579252573,\"money\":115842258650484.52,\"city\":\"Volhaven\",\"location\":\"OmniTek Incorporated\",\"jobs\":{\"MegaCorp\":\"Business Intern\",\"KuaiGong International\":\"Senior Software Engineer\",\"ECorp\":\"IT Manager\",\"Four Sigma\":\"Business Analyst\",\"Blade Industries\":\"Business Manager\",\"Bachman & Associates\":\"Business Analyst\",\"Clarke Incorporated\":\"Business Manager\",\"Fulcrum Technologies\":\"Business Manager\",\"NWO\":\"Business Analyst\",\"OmniTek Incorporated\":\"Business Manager\",\"Carmichael Security\":\"Security Guard\",\"National Security Agency\":\"Security Guard\"},\"companyName\":\"OmniTek Incorporated\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":570991.5999992293,\"ram\":64,\"totalMoneyGenerated\":18268057758.401154,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":570924.7999992291,\"ram\":64,\"totalMoneyGenerated\":18267929297.33147,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":570924.7999992291,\"ram\":64,\"totalMoneyGenerated\":18268030620.22476,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":570924.7999992291,\"ram\":64,\"totalMoneyGenerated\":18267993668.097237,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":570924.7999992291,\"ram\":64,\"totalMoneyGenerated\":18267975971.127975,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":570924.7999992291,\"ram\":64,\"totalMoneyGenerated\":18267798375.105877,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":570385.5999992271,\"ram\":64,\"totalMoneyGenerated\":18266978176.76528,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":570385.5999992271,\"ram\":64,\"totalMoneyGenerated\":18266978048.23983,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":570385.5999992271,\"ram\":64,\"totalMoneyGenerated\":18266969459.603874,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":570385.5999992271,\"ram\":64,\"totalMoneyGenerated\":18266943281.237988,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":570385.5999992271,\"ram\":64,\"totalMoneyGenerated\":18266917090.840794,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":570385.5999992271,\"ram\":64,\"totalMoneyGenerated\":18266875304.68227,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":570010.3999992256,\"ram\":64,\"totalMoneyGenerated\":18263097398.70564,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":570010.3999992256,\"ram\":64,\"totalMoneyGenerated\":18263032849.477554,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":570010.3999992256,\"ram\":64,\"totalMoneyGenerated\":18262542458.896435,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":570010.3999992256,\"ram\":64,\"totalMoneyGenerated\":18262458330.755566,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":566668.1999989866,\"ram\":64,\"totalMoneyGenerated\":18187376232.338867,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":566668.1999989866,\"ram\":64,\"totalMoneyGenerated\":18187316577.838974,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":566122.9999989674,\"ram\":64,\"totalMoneyGenerated\":18172628768.478188,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":566122.9999989674,\"ram\":64,\"totalMoneyGenerated\":18172628768.478188,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":562281.9999998924,\"ram\":64,\"totalMoneyGenerated\":15660872571.743708,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":560679.8000003581,\"ram\":64,\"totalMoneyGenerated\":15660317945.749908,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":548079.4000038439,\"ram\":64,\"totalMoneyGenerated\":15660148348.40245,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":548079.4000038439,\"ram\":64,\"totalMoneyGenerated\":15660050164.729595,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":548079.4000038439,\"ram\":64,\"totalMoneyGenerated\":15659838614.675827,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":504880.2000049258,\"ram\":64,\"totalMoneyGenerated\":15659526116.725554,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":493313.2000051094,\"ram\":64,\"totalMoneyGenerated\":15659383470.958342,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":487551.80000512884,\"ram\":64,\"totalMoneyGenerated\":15659226571.682072,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":487550.80000512884,\"ram\":64,\"totalMoneyGenerated\":15659141020.222,\"name\":\"hacknet-node-28\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":485400.20000512945,\"ram\":64,\"totalMoneyGenerated\":15591571915.073483,\"name\":\"hacknet-node-29\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":462967.00000493147,\"ram\":64,\"totalMoneyGenerated\":14870920787.550922,\"name\":\"hacknet-node-30\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":462947.2000049301,\"ram\":64,\"totalMoneyGenerated\":14870404066.791422,\"name\":\"hacknet-node-31\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":462932.200004929,\"ram\":64,\"totalMoneyGenerated\":14869972002.84634,\"name\":\"hacknet-node-32\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":224125.000001838,\"ram\":64,\"totalMoneyGenerated\":7198692606.899185,\"name\":\"hacknet-node-33\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":224124.800001838,\"ram\":64,\"totalMoneyGenerated\":7198582155.52585,\"name\":\"hacknet-node-34\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":224124.800001838,\"ram\":64,\"totalMoneyGenerated\":7198475923.194283,\"name\":\"hacknet-node-35\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":224124.40000183802,\"ram\":64,\"totalMoneyGenerated\":7198380779.083666,\"name\":\"hacknet-node-36\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":32121.65377828452,\"onlineTimeSeconds\":224124.40000183802,\"ram\":64,\"totalMoneyGenerated\":7198281884.641502,\"name\":\"hacknet-node-37\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"The Black Hand\",\"NiteSec\",\"Netburners\",\"Sector-12\",\"BitRunners\",\"MegaCorp\",\"Aevum\",\"Tian Di Hui\",\"Daedalus\",\"KuaiGong International\",\"ECorp\",\"Four Sigma\",\"Blade Industries\",\"Bachman & Associates\",\"Clarke Incorporated\",\"Fulcrum Secret Technologies\",\"NWO\",\"OmniTek Incorporated\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":34,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"Neurotrainer III\"}],\"augmentations\":[{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":33,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Neural Accelerator\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-5.35,\"crime_money_mult\":1.3886900853164088,\"crime_success_mult\":1.3886900853164088,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":18,\"workExpMult\":10,\"currentWorkFactionName\":\"Blade Industries\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.8320619917983183,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":7.220070314712,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":611.565563971763,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":5306.75168131326,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":750,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":147000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.5275590938480499,\"hacknet_node_money_mult\":3.502406584863482,\"hacknet_node_purchase_cost_mult\":0.5490638574376802,\"hacknet_node_ram_cost_mult\":0.7177305325982748,\"hacknet_node_core_cost_mult\":0.7177305325982748,\"hacknet_node_level_cost_mult\":0.6100709527085335,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1646567852545,\"lastSave\":1646567808746,\"totalPlaytime\":1541707000,\"playtimeSinceLastAug\":571037000,\"playtimeSinceLastBitnode\":1541707000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2418271.2,\"codingcontract\":6000000000,\"corporation\":0,\"crime\":6249105.38392384,\"gang\":0,\"hacking\":269485216156390,\"hacknet\":602114315521.273,\"hacknet_expenses\":-9188639653718.662,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":50914495472104.73,\"total\":115842257650484.52,\"work\":657122604.582516,\"servers\":-174424645079465.1,\"other\":-5030800000,\"augmentations\":-21547913698324.008}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-4790580.000001483,\"codingcontract\":11212500000,\"corporation\":0,\"crime\":7677372.416133972,\"gang\":0,\"hacking\":269527866637493.72,\"hacknet\":855969296840.2622,\"hacknet_expenses\":-9236792180807.588,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":50922702845109.99,\"total\":115871185748920.17,\"work\":684190152.2094398,\"servers\":-174473282486722.12,\"other\":-45572299972.90575,\"augmentations\":-21691605624088.207}},\"scriptProdSinceLastAug\":287654042210556.6,\"exploits\":[],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1645026146788},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1645028434786},{\"ID\":\"NS2\",\"unlockedOn\":1645044319911},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1645045831181},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1645056200950},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1645056560955},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1645066283086},{\"ID\":\"TOR\",\"unlockedOn\":1645066643085},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1645070003093},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1645097626865},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1645155279886},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1645183682014},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1645190539010},{\"ID\":\"TRAVEL\",\"unlockedOn\":1645202118069},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1645206439756},{\"ID\":\"WORKOUT\",\"unlockedOn\":1645274022801},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1645310391987},{\"ID\":\"NITESEC\",\"unlockedOn\":1645372344826},{\"ID\":\"4S\",\"unlockedOn\":1645407697058},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1645449421121},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1645451161327},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1645492247503},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1645588414067},{\"ID\":\"DONATION\",\"unlockedOn\":1645808344381},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1645842991741},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1646071287225},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1646082477122},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1646132482080}],\"terminalCommandHistory\":[\"rm find.js\",\"ls\",\"rm growall.js\",\"rm homehack.js\",\"ls\",\"cd ../basic/\",\"ls\",\"rm backdoor.js\",\"ls\",\"rm grownshare.js\",\"rm hacknshare.js\",\"ls\",\"ls ..\",\"cd ../contracts/\",\"ls\",\"rm *.js\",\"rm autoSolver.js\",\"rm contract-auto-solver.js\",\"rm contract-finder.js\",\"rm generateIps.js\",\"rm greatestPrimeFactor.js\",\"rm mergeOverlap.js\",\"rm old-daemon.js\",\"rm solve-contract.js\",\"rm solveTriangleSum.js\",\"rm spiral.js\",\"rm stockSolver.js\",\"rm uniquePaths.js\",\"ls\",\"ls solvers/\",\"cd ../hacknet/\",\"ls\",\"rm old_hacknet.js\",\"cd ..\",\"alias\",\"unalias profile\",\"ls\",\"unalias restart\",\"alias\",\"unalias hackall\",\"unalias killstocks\",\"unalias restock\",\"unalias scanto\",\"alias\",\"ls\",\"alias\",\"alias hackall=\\\"killall; run hackGrind.js\\\"\",\"alias expand=\\\"killall; run expand.js\\\"\",\"alias repGrind=\\\"killall; run repGrind.js\\\"\",\"cat utils.js\"],\"identifier\":\"afc61675d036e\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":6,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"41.2.4.6\",\"isConnectedTo\":true,\"maxRam\":1048576,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"Formulas.exe\"],\"ramUsed\":1048567.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/contracts/daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38817.81000003159,\"pid\":2517,\"ramUsage\":22,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///0e712ea2-3d86-4519-a0fa-11e919f28cea\",\"moduleSequenceNumber\":26635},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///2d488b6c-b3d1-4b64-8809-b2b10ed49ed5\",\"moduleSequenceNumber\":26633},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///d2209a08-347e-456c-a6ac-56001b7d1e5e\",\"moduleSequenceNumber\":26631},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///68f67859-8195-4e51-a744-010eab3cfe94\",\"moduleSequenceNumber\":26629},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///f3d2f90e-4ce5-4020-948a-1db8edd1a127\",\"moduleSequenceNumber\":26627},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///d49ef2d5-e9d6-4cb5-981f-1bacc7116524\",\"moduleSequenceNumber\":26625},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///c611aeef-55fa-4231-9ac8-345992bd7c47\",\"moduleSequenceNumber\":26623},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///fce9f026-161a-461b-b81c-685d6c3dfd24\",\"moduleSequenceNumber\":26621},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///bddfd264-8548-45b8-ae94-789f4309fbec\",\"moduleSequenceNumber\":26619},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///f82ad77a-7b73-467a-9a8b-ba7934cf375f\",\"moduleSequenceNumber\":26617},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///035c14d9-75ee-4900-8a44-97687693096b\",\"moduleSequenceNumber\":26615},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///58e801f9-6c85-4a16-8388-bc0ebdad584f\",\"moduleSequenceNumber\":26573},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///7202e5a2-bd40-49b6-85aa-7fcecda5d397\",\"moduleSequenceNumber\":26637},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///46b22f3a-334e-410e-be5b-66bd74a27e58\",\"moduleSequenceNumber\":26557},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///dbb25c36-e7f9-4224-86b6-6a05cedff0f0\",\"moduleSequenceNumber\":26565},{\"filename\":\"/contracts/daemon.js\",\"url\":\"blob:file:///5e4ef053-5010-4e8e-9a12-d67bbe088b5c\",\"moduleSequenceNumber\":28764}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/stocks/daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":4323978920475.67,\"onlineRunningTime\":38817.81000003159,\"pid\":2518,\"ramUsage\":17.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///4d6ee812-d508-4b89-8d5f-b521e75cc9f9\",\"moduleSequenceNumber\":366},{\"filename\":\"/stocks/daemon.js\",\"url\":\"blob:file:///c5364f1b-4072-46e4-937a-eeacee100d53\",\"moduleSequenceNumber\":597}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.210000031584,\"pid\":2523,\"ramUsage\":4,\"server\":\"home\",\"threads\":262132,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///b7498acf-519b-4402-ad71-6e61c4c83284\",\"moduleSequenceNumber\":29634}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///4a388446-e414-463a-bc0e-abd3fd575b0f\",\"moduleSequenceNumber\":29200}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":34490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = ns.args[0].toString();\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.print(\\\"Opening ssh port\\\");\\r\\n        ns.brutessh(target);\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.print(\\\"Opening ftp port\\\");\\r\\n        ns.ftpcrack(target);\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.print(\\\"Opening smtp port\\\");\\r\\n        ns.relaysmtp(target);\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.print(\\\"Opening http port\\\");\\r\\n        ns.httpworm(target);\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.print(\\\"Opening sql port\\\");\\r\\n        ns.sqlinject(target);\\r\\n    }\\r\\n    if (!ns.hasRootAccess(target)) {\\r\\n        ns.nuke(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/nuke.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/nuke.js\",\"url\":\"blob:file:///755fd651-a453-42c3-82c6-7c65c5b928bc\",\"moduleSequenceNumber\":2772}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":34492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatCurrency, formatNumber } from \\\"utils\\\";\\r\\nconst allowancePercentage = 0.5;\\r\\nexport async function main(ns) {\\r\\n    let ram = ns.args[0];\\r\\n    if (typeof ram === \\\"string\\\") {\\r\\n        ram = parseInt(ram);\\r\\n    }\\r\\n    else {\\r\\n        ram = ns.getPurchasedServerMaxRam();\\r\\n        let cost = ns.getPurchasedServerCost(ram);\\r\\n        ns.tprint(`Purchasing servers with ${formatNumber(ram)} for ${formatCurrency(cost)} a piece.`);\\r\\n    }\\r\\n    await purchaseServer(ns, ram);\\r\\n}\\r\\nasync function purchaseServer(ns, ram) {\\r\\n    let numServers = ns.getPurchasedServers().length;\\r\\n    while (numServers < ns.getPurchasedServerLimit()) {\\r\\n        // Check if we have enough money to purchase a server\\r\\n        // only use 1% of cash for purchases\\r\\n        let cost = ns.getPurchasedServerCost(ram);\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") * allowancePercentage > cost) {\\r\\n            // If we have enough money, then:\\r\\n            //  1. Purchase the server\\r\\n            //  2. Copy our hacking script onto the newly-purchased server\\r\\n            //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n            //  4. Increment our iterator to indicate that we've bought a new server\\r\\n            var hostname = ns.purchaseServer(\\\"pserv-\\\" + numServers, ram);\\r\\n            ns.tprint(`Purchased ${hostname} for ${cost.toLocaleString(undefined, {\\r\\n                style: \\\"currency\\\",\\r\\n                currency: \\\"USD\\\",\\r\\n                maximumSignificantDigits: 3,\\r\\n                compactDisplay: \\\"short\\\",\\r\\n            })}.`);\\r\\n            numServers++;\\r\\n        }\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/server-expansion/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///761ed463-8a98-42c0-8906-d0fe485ffe70\",\"moduleSequenceNumber\":298},{\"filename\":\"/server-expansion/daemon.js\",\"url\":\"blob:file:///e2fda5c5-acb7-4e2b-b25c-7990b6a0c9fd\",\"moduleSequenceNumber\":457}],\"dependents\":[],\"ramUsage\":6.55,\"server\":\"home\",\"moduleSequenceNumber\":34520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall\\\";\\r\\nexport async function main(ns) {\\r\\n    const servers = await getAllServers(ns);\\r\\n    for (const server of servers) {\\r\\n        ns.tprint(server);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/listall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///362de7c9-adf4-41ac-8f1c-5460485d51af\",\"moduleSequenceNumber\":360},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///b704c542-9416-4199-977d-33f090e8b685\",\"moduleSequenceNumber\":309},{\"filename\":\"/advanced/listall.js\",\"url\":\"blob:file:///4a19ae62-b244-4349-b946-b2538da6433d\",\"moduleSequenceNumber\":9528}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":34482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getPlayerDetails } from \\\"lib/getDetails\\\";\\r\\nexport async function main(ns) {\\r\\n    await getAllServers(ns);\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function getAllServers(ns) {\\r\\n    let allServers = [];\\r\\n    async function getServers(host = undefined) {\\r\\n        let localServers = ns.scan(host);\\r\\n        localServers = localServers.filter((s) => !allServers.includes(s));\\r\\n        if (localServers.length === 0)\\r\\n            return;\\r\\n        for (let server of localServers) {\\r\\n            allServers.push(server);\\r\\n            await ns.sleep(1);\\r\\n            await getServers(server);\\r\\n        }\\r\\n    }\\r\\n    await getServers();\\r\\n    return allServers;\\r\\n}\\r\\nexport async function getHackableServers(ns) {\\r\\n    let playerData = getPlayerDetails(ns);\\r\\n    return (await getAllServers(ns)).filter((s) => s !== \\\"home\\\" &&\\r\\n        playerData.hackingLevel >= ns.getServerRequiredHackingLevel(s) &&\\r\\n        ns.hasRootAccess(s) &&\\r\\n        ns.getServerMaxMoney(s) > 1e9 &&\\r\\n        ns.getServerMoneyAvailable(s) > 0);\\r\\n}\\r\\nexport async function getNukableServers(ns) {\\r\\n    let playerData = getPlayerDetails(ns);\\r\\n    return (await getAllServers(ns)).filter((s) => playerData.portHacks >= ns.getServerNumPortsRequired(s) &&\\r\\n        !ns.hasRootAccess(s));\\r\\n}\\r\\nexport async function getRunnableServers(ns) {\\r\\n    return (await getAllServers(ns)).filter((s) => ns.hasRootAccess(s));\\r\\n}\\r\\n\",\"filename\":\"/lib/getall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":34462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"lib/getall\\\";\\r\\nconst bufferTime = 300;\\r\\nexport async function main(ns) {\\r\\n    await crawl(ns);\\r\\n}\\r\\nasync function crawl(ns) {\\r\\n    while (true) {\\r\\n        for (const target of await getHackableServers(ns)) {\\r\\n            if (ns.isRunning(\\\"/advanced/batch.js\\\", \\\"home\\\", target))\\r\\n                continue;\\r\\n            ns.run(\\\"/advanced/batch.js\\\", 1, target);\\r\\n            await ns.sleep(bufferTime);\\r\\n        }\\r\\n        await ns.sleep(1e50);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/hackall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///a1a9b427-8cbf-4b64-a681-b8f20bff0e41\",\"moduleSequenceNumber\":360},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///b724cd32-b95a-4c6b-a624-f3c87198fe2d\",\"moduleSequenceNumber\":309},{\"filename\":\"/advanced/hackall.js\",\"url\":\"blob:file:///b64792c7-c6f4-4d05-b870-084445eb4b11\",\"moduleSequenceNumber\":599}],\"dependents\":[],\"ramUsage\":3.4,\"server\":\"home\",\"moduleSequenceNumber\":34478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const minuteInterval = 5;\\r\\nconst nukeScript = \\\"/advanced/nukeall.js\\\";\\r\\nconst hackScript = \\\"/advanced/hackall.js\\\";\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        ns.run(nukeScript);\\r\\n        while (ns.isRunning(nukeScript, \\\"home\\\"))\\r\\n            await ns.sleep(1);\\r\\n        if (!ns.scriptRunning(hackScript, \\\"home\\\"))\\r\\n            ns.run(hackScript, 1, \\\"--share\\\");\\r\\n        await ns.sleep(minuteInterval * 60 * 1000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/advanced/daemon.js\",\"url\":\"blob:file:///e01514a4-f096-4c5f-aa73-c19810b4f580\",\"moduleSequenceNumber\":598}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home\",\"moduleSequenceNumber\":34474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const allowancePercentage = 0.01;\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\r\\n            let gain = [0, 0, 0];\\r\\n            let currentCash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n            currentCash *= allowancePercentage;\\r\\n            if (ns.hacknet.getPurchaseNodeCost() <= currentCash) {\\r\\n                ns.hacknet.purchaseNode();\\r\\n                continue;\\r\\n            }\\r\\n            const node = ns.hacknet.getNodeStats(i);\\r\\n            if (node.level < 200) {\\r\\n                gain[0] =\\r\\n                    ((node.level + 1) *\\r\\n                        1.6 *\\r\\n                        Math.pow(1.035, node.ram - 1) *\\r\\n                        ((node.cores + 5) / 6)) /\\r\\n                        ns.hacknet.getLevelUpgradeCost(i, 1);\\r\\n            }\\r\\n            else {\\r\\n                gain[0] = 0;\\r\\n            }\\r\\n            if (node.ram < 64) {\\r\\n                gain[1] =\\r\\n                    (node.level *\\r\\n                        1.6 *\\r\\n                        Math.pow(1.035, node.ram * 2 - 1) *\\r\\n                        ((node.cores + 5) / 6)) /\\r\\n                        ns.hacknet.getRamUpgradeCost(i, 1);\\r\\n            }\\r\\n            else {\\r\\n                gain[1] = 0;\\r\\n            }\\r\\n            if (node.cores < 16) {\\r\\n                gain[2] =\\r\\n                    (node.level *\\r\\n                        1.6 *\\r\\n                        Math.pow(1.035, node.ram - 1) *\\r\\n                        ((node.cores + 6) / 6)) /\\r\\n                        ns.hacknet.getCoreUpgradeCost(i, 1);\\r\\n            }\\r\\n            else {\\r\\n                gain[2] = 0;\\r\\n            }\\r\\n            ns.print(`Level Upgrade: ${gain[0]}`);\\r\\n            ns.print(`Ram Upgrade: ${gain[1]}`);\\r\\n            ns.print(`Core Upgrade: ${gain[2]}`);\\r\\n            let topgain = 0;\\r\\n            for (let g of gain) {\\r\\n                if (g > topgain) {\\r\\n                    topgain = g;\\r\\n                }\\r\\n            }\\r\\n            if (topgain === 0) {\\r\\n                ns.print(`All Gains maxed on Node ${i}`);\\r\\n                break;\\r\\n            }\\r\\n            if (topgain === gain[0] &&\\r\\n                ns.hacknet.getLevelUpgradeCost(i, 1) < currentCash) {\\r\\n                ns.print(`Upgrading Level on Node ${i}`);\\r\\n                ns.hacknet.upgradeLevel(i, 1);\\r\\n            }\\r\\n            if (topgain === gain[1] &&\\r\\n                ns.hacknet.getRamUpgradeCost(i, 1) < currentCash) {\\r\\n                ns.print(`Upgrading Ram on Node ${i}`);\\r\\n                ns.hacknet.upgradeRam(i, 1);\\r\\n            }\\r\\n            if (topgain === gain[2] &&\\r\\n                ns.hacknet.getCoreUpgradeCost(i, 1) < currentCash) {\\r\\n                ns.print(`Upgrading Cores on Node ${i}`);\\r\\n                ns.hacknet.upgradeCore(i, 1);\\r\\n            }\\r\\n            else {\\r\\n                ns.print(`Cannot afford upgrades on Node ${i}`);\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/hacknet/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hacknet/daemon.js\",\"url\":\"blob:file:///9b5210bb-17fe-463b-8509-17ae4e5479d7\",\"moduleSequenceNumber\":456}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":34500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall.js\\\";\\r\\nimport * as solvers from \\\"contracts/solvers/index.js\\\";\\r\\nconst minuteInterval = 2;\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        // await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\r\\n        const contracts = (await getAllServers(ns)).flatMap((server) => {\\r\\n            const onServer = ns.ls(server, \\\".cct\\\").map((contract) => {\\r\\n                const type = ns.codingcontract.getContractType(contract, server);\\r\\n                const data = ns.codingcontract.getData(contract, server);\\r\\n                const reward = solve(type, data, server, contract, ns);\\r\\n                return `${server} - ${contract} - ${type} - ${reward || \\\"FAILED!\\\"}`;\\r\\n            });\\r\\n            return onServer;\\r\\n        });\\r\\n        if (contracts.length > 0)\\r\\n            ns.tprint(`Found ${contracts.length} contracts`);\\r\\n        for (const contract of contracts) {\\r\\n            ns.tprint(contract);\\r\\n        }\\r\\n        await ns.sleep(minuteInterval * 60 * 1000);\\r\\n    }\\r\\n}\\r\\nfunction solve(type, data, server, contract, ns) {\\r\\n    let solution;\\r\\n    ns.tprint(type);\\r\\n    switch (type) {\\r\\n        case \\\"Algorithmic Stock Trader I\\\":\\r\\n            solution = solvers.maxProfit([1, data]);\\r\\n            break;\\r\\n        case \\\"Algorithmic Stock Trader II\\\":\\r\\n            solution = solvers.maxProfit([Math.ceil(data.length / 2), data]);\\r\\n            break;\\r\\n        case \\\"Algorithmic Stock Trader III\\\":\\r\\n            solution = solvers.maxProfit([2, data]);\\r\\n            break;\\r\\n        case \\\"Algorithmic Stock Trader IV\\\":\\r\\n            solution = solvers.maxProfit(data);\\r\\n            break;\\r\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\r\\n            solution = solvers.triangleSum(data);\\r\\n            break;\\r\\n        case \\\"Unique Paths in a Grid I\\\":\\r\\n            solution = solvers.uniquePathsI(data);\\r\\n            break;\\r\\n        case \\\"Unique Paths in a Grid II\\\":\\r\\n            solution = solvers.uniquePathsII(data);\\r\\n            break;\\r\\n        case \\\"Generate IP Addresses\\\":\\r\\n            solution = solvers.generateIps(data);\\r\\n            break;\\r\\n        case \\\"Find Largest Prime Factor\\\":\\r\\n            solution = solvers.factor(data);\\r\\n            break;\\r\\n        case \\\"Spiralize Matrix\\\":\\r\\n            solution = solvers.spiral(data);\\r\\n            break;\\r\\n        case \\\"Merge Overlapping Intervals\\\":\\r\\n            solution = solvers.mergeOverlap(data);\\r\\n            break;\\r\\n        case \\\"Subarray with Maximum Sum\\\":\\r\\n            solution = solvers.solveSum(data);\\r\\n            break;\\r\\n        case \\\"Array Jumping Game\\\":\\r\\n            solution = solvers.solveJump(data);\\r\\n            break;\\r\\n        case \\\"Total Ways to Sum\\\":\\r\\n            solution = solvers.totalWaysToSum(data);\\r\\n            break;\\r\\n        case \\\"Sanitize Parentheses in Expression\\\":\\r\\n            solution = solvers.sanitizeParentheses(data);\\r\\n            break;\\r\\n        case \\\"Find All Valid Math Expressions\\\":\\r\\n            solution = solvers.findMathExpression(data);\\r\\n            break;\\r\\n        default:\\r\\n            ns.tprint(`Unknown contract type: ${type}`);\\r\\n            return \\\"\\\";\\r\\n    }\\r\\n    if (solution != undefined)\\r\\n        ns.tprint(`Submitting solution: ${solution} to ${type} - ${contract}`);\\r\\n    return solution != undefined\\r\\n        ? ns.codingcontract.attempt(solution, contract, server, {\\r\\n            returnReward: true,\\r\\n        })\\r\\n        : \\\"\\\";\\r\\n}\\r\\n\",\"filename\":\"/contracts/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///0e712ea2-3d86-4519-a0fa-11e919f28cea\",\"moduleSequenceNumber\":26635},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///2d488b6c-b3d1-4b64-8809-b2b10ed49ed5\",\"moduleSequenceNumber\":26633},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///d2209a08-347e-456c-a6ac-56001b7d1e5e\",\"moduleSequenceNumber\":26631},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///68f67859-8195-4e51-a744-010eab3cfe94\",\"moduleSequenceNumber\":26629},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///f3d2f90e-4ce5-4020-948a-1db8edd1a127\",\"moduleSequenceNumber\":26627},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///d49ef2d5-e9d6-4cb5-981f-1bacc7116524\",\"moduleSequenceNumber\":26625},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///c611aeef-55fa-4231-9ac8-345992bd7c47\",\"moduleSequenceNumber\":26623},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///fce9f026-161a-461b-b81c-685d6c3dfd24\",\"moduleSequenceNumber\":26621},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///bddfd264-8548-45b8-ae94-789f4309fbec\",\"moduleSequenceNumber\":26619},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///f82ad77a-7b73-467a-9a8b-ba7934cf375f\",\"moduleSequenceNumber\":26617},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///035c14d9-75ee-4900-8a44-97687693096b\",\"moduleSequenceNumber\":26615},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///58e801f9-6c85-4a16-8388-bc0ebdad584f\",\"moduleSequenceNumber\":26573},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///7202e5a2-bd40-49b6-85aa-7fcecda5d397\",\"moduleSequenceNumber\":26637},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///46b22f3a-334e-410e-be5b-66bd74a27e58\",\"moduleSequenceNumber\":26557},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///dbb25c36-e7f9-4224-86b6-6a05cedff0f0\",\"moduleSequenceNumber\":26565},{\"filename\":\"/contracts/daemon.js\",\"url\":\"blob:file:///5e4ef053-5010-4e8e-9a12-d67bbe088b5c\",\"moduleSequenceNumber\":28764}],\"dependents\":[],\"ramUsage\":22,\"server\":\"home\",\"moduleSequenceNumber\":34498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall\\\";\\r\\nexport async function main(ns) {\\r\\n    await killAll(ns);\\r\\n}\\r\\nexport async function killAll(ns) {\\r\\n    const servers = await getAllServers(ns);\\r\\n    for (const server of servers) {\\r\\n        if (server !== \\\"home\\\") {\\r\\n            ns.killall(server);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/killall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///2a510167-20cc-483b-bb3f-7d00c64cd4d2\",\"moduleSequenceNumber\":26557},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///a2631a4f-47d9-490f-bbc4-57995d88806e\",\"moduleSequenceNumber\":26565},{\"filename\":\"/advanced/killall.js\",\"url\":\"blob:file:///f37526f3-460f-49ab-930a-b9687e9d1aaa\",\"moduleSequenceNumber\":28762}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":34480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatCurrency, formatNumber, getFolio } from \\\"utils\\\";\\r\\n// % of money to use in buying stocks\\r\\nconst budget = 0.9;\\r\\n// % at which to buy or sell stocks\\r\\nconst buyAt = 0.6;\\r\\nconst sellBellow = 0.5;\\r\\n// const stockToWatch = \\\"MGCP\\\"; // Megacorp\\r\\n// TODO short stocks\\r\\n// const shortAt = 40;\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await manageStock(ns);\\r\\n        await ns.sleep(1);\\r\\n    }\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nasync function manageStock(ns) {\\r\\n    // let stock = stockToWatch;\\r\\n    let folio = getFolio(ns);\\r\\n    if (folio.length > 0) {\\r\\n        // we have a stock - get it and monitor if it is increasing/decreasing\\r\\n        let { sym, shares } = folio[0];\\r\\n        while (ns.stock.getPosition(sym)[0] > 0) {\\r\\n            let increaseChance = ns.stock.getForecast(sym);\\r\\n            if (increaseChance <= sellBellow) {\\r\\n                let total = ns.stock.sell(sym, shares);\\r\\n                ns.tprint(`${formatNumber(shares)} shares of ${sym} sold for a total of ${formatCurrency(total * shares)} \\n                    because it's growth is stopping.`);\\r\\n            }\\r\\n            else {\\r\\n                await ns.sleep(1);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    else {\\r\\n        // find a stock to get\\r\\n        const stock = getBestStock(ns);\\r\\n        let increaseChance = ns.stock.getForecast(stock);\\r\\n        let maxShares = getMaxShares(ns, stock);\\r\\n        if (increaseChance >= buyAt) {\\r\\n            let cost = ns.stock.buy(stock, maxShares);\\r\\n            ns.tprint(`${formatNumber(maxShares)} shares of ${stock} purchased for a total of ${formatCurrency(cost * maxShares)}\\n        because it has a ${increaseChance.toLocaleString(undefined, {\\r\\n                style: \\\"percent\\\",\\r\\n            })} chance of increasing.`);\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction getMaxShares(ns, sym) {\\r\\n    let cashAvailable = ns.getServerMoneyAvailable(\\\"home\\\") * budget;\\r\\n    let stockCost = ns.stock.getBidPrice(sym);\\r\\n    let maxPurchaseable = Math.min(ns.stock.getMaxShares(sym), cashAvailable / stockCost);\\r\\n    return maxPurchaseable;\\r\\n}\\r\\nexport function getBestStock(ns) {\\r\\n    let best = [\\\"\\\", 0];\\r\\n    for (const stock of ns.stock.getSymbols()) {\\r\\n        let increaseChance = ns.stock.getForecast(stock);\\r\\n        if (increaseChance > best[1]) {\\r\\n            best = [stock, increaseChance];\\r\\n        }\\r\\n    }\\r\\n    return best[0];\\r\\n}\\r\\n\",\"filename\":\"/stocks/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///c2b338ba-6baa-4ad5-8e04-b7a008db417c\",\"moduleSequenceNumber\":26575},{\"filename\":\"/stocks/daemon.js\",\"url\":\"blob:file:///df72cf3c-0f71-4b9d-a283-7968f8af9172\",\"moduleSequenceNumber\":33137}],\"dependents\":[],\"ramUsage\":17.2,\"server\":\"home\",\"moduleSequenceNumber\":34522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let tree = await getTree(ns);\\r\\n    ns.tprint(JSON.stringify(tree, null, 2));\\r\\n}\\r\\n/**\\r\\n * Returns the path to a specified target - or prints the entire tree.\\r\\n */\\r\\nexport async function getTree(ns) {\\r\\n    /**\\r\\n     * @typedef HashMap\\r\\n     * @type {object}\\r\\n     *\\r\\n     * @type {HashMap}\\r\\n     */\\r\\n    let serverRoot = { home: {} };\\r\\n    let allServers = [\\\"home\\\"];\\r\\n    async function getServers(host = \\\"home\\\", parent = serverRoot.home) {\\r\\n        let localServers = ns.scan(host);\\r\\n        localServers = localServers.filter((s) => !allServers.includes(s));\\r\\n        if (localServers.length === 0)\\r\\n            return;\\r\\n        for (let server of localServers) {\\r\\n            allServers.push(server);\\r\\n            parent[server] = {};\\r\\n            await getServers(server, parent[server]);\\r\\n        }\\r\\n    }\\r\\n    await getServers();\\r\\n    // This lists all contracts.\\r\\n    /*\\r\\n      for (let server of serverRoot) {\\r\\n          let files = ns.ls(server, 'cct');\\r\\n          if (files.length === 0) return;\\r\\n          ns.tprint(\\\"==================================\\\");\\r\\n          ns.tprint(`Files on ${server}:`);\\r\\n          for (let file of files) {\\r\\n              ns.tprint(`\\\\t${file}`);\\r\\n          }\\r\\n          ns.tprint(\\\"==================================\\\");\\r\\n      }\\r\\n      */\\r\\n    // ns.tprint(`${serverRoot.length} servers found!`);\\r\\n    return serverRoot;\\r\\n}\\r\\n\",\"filename\":\"/lib/gettree.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/gettree.js\",\"url\":\"blob:file:///4790c1ac-10c0-460d-b66e-c37525898665\",\"moduleSequenceNumber\":62627}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":34466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolio, formatCurrency } from \\\"utils\\\";\\r\\nexport async function main(ns) {\\r\\n    ns.scriptKill(\\\"/stocks/daemon.js\\\", \\\"home\\\");\\r\\n    ns.tprint(\\\"Liquidating assets.\\\");\\r\\n    let total = 0;\\r\\n    const folio = getFolio(ns);\\r\\n    for (const { sym, shares } of folio) {\\r\\n        ns.tprint(`Waiting for ${sym} to stop growing.`);\\r\\n        while (ns.stock.getPosition(sym)[0] > 0) {\\r\\n            let increaseChance = ns.stock.getForecast(sym);\\r\\n            if (increaseChance <= 0.5) {\\r\\n                let stockPrice = ns.stock.sell(sym, shares);\\r\\n                ns.tprint(`${formatCurrency(shares)} of ${sym} sold for a total of ${formatCurrency(stockPrice * shares)} \\n                    because it's growth is stopping.`);\\r\\n                total += stockPrice * shares;\\r\\n            }\\r\\n            else {\\r\\n                await ns.sleep(1);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    ns.tprint(`All stocks sold for a total of ${total}`);\\r\\n}\\r\\n\",\"filename\":\"/stocks/liquidate.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///7a4f2480-aa93-4609-9ceb-bd55eadb738f\",\"moduleSequenceNumber\":26575},{\"filename\":\"/stocks/liquidate.js\",\"url\":\"blob:file:///cce3904f-ed73-462c-ae23-c3433e006b8a\",\"moduleSequenceNumber\":29631}],\"dependents\":[],\"ramUsage\":11.6,\"server\":\"home\",\"moduleSequenceNumber\":34524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// % of money to use in buying stocks\\r\\n// const budget = 1;\\r\\n// % at which to buy or sell stocks\\r\\n// const buyAt = 60;\\r\\n// Profit amount to sell the stock at.\\r\\n// const sellAt = 10000000;\\r\\n// TODO short stocks\\r\\n// const shortAt = 40;\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let stocks = ns.stock.getSymbols();\\r\\n    for (let stock of stocks) {\\r\\n        let increaseChance = ns.stock.getForecast(stock) * 100;\\r\\n        ns.tprint(`${stock} - ${increaseChance.toLocaleString(undefined, {\\r\\n            minimumFractionDigits: 2,\\r\\n        })}%`);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/stocks/listall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stocks/listall.js\",\"url\":\"blob:file:///007cf73f-7c6f-4614-9551-73491e961bba\",\"moduleSequenceNumber\":23453}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":34526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/lib/Bitburner.t.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":26499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall\\\";\\r\\nimport { getPlayerDetails } from \\\"lib/getDetails\\\";\\r\\nexport async function main(ns) {\\r\\n    const servers = await getAllServers(ns);\\r\\n    const player = getPlayerDetails(ns);\\r\\n    // get all the nukeable servers\\r\\n    let nukableServers = servers.filter((s) => ns.getServerNumPortsRequired(s) <= player.portHacks &&\\r\\n        !ns.hasRootAccess(s));\\r\\n    for (let server of nukableServers) {\\r\\n        ns.print(`Nuking ${server}!`);\\r\\n        ns.run(\\\"/basic/nuke.js\\\", 1, server);\\r\\n    }\\r\\n    if (nukableServers.length === 0)\\r\\n        ns.print(\\\"No nukable servers found.\\\");\\r\\n    else\\r\\n        ns.print(\\\"All servers nuked!\\\");\\r\\n}\\r\\n\",\"filename\":\"/advanced/nukeall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///4f1ba115-396a-433f-93f4-0522b8a05cbb\",\"moduleSequenceNumber\":360},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///85753fda-4f15-4629-9d67-655b51879e07\",\"moduleSequenceNumber\":360},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///ca37250f-711d-4e42-a10d-1cba98b1c579\",\"moduleSequenceNumber\":309},{\"filename\":\"/advanced/nukeall.js\",\"url\":\"blob:file:///4c45b121-fa6f-4523-b445-ec76864ac55e\",\"moduleSequenceNumber\":1660}],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":34484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    const server = ns.args[0].toString();\\r\\n    if (args.help || !server) {\\r\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\r\\n        return;\\r\\n    }\\r\\n    // const ram = ns.getServerRam(server);\\r\\n    const ram = [ns.getServerMaxRam(server), ns.getServerUsedRam(server)];\\r\\n    const money = ns.getServerMoneyAvailable(server);\\r\\n    const maxMoney = ns.getServerMaxMoney(server);\\r\\n    const minSec = ns.getServerMinSecurityLevel(server);\\r\\n    const sec = ns.getServerSecurityLevel(server);\\r\\n    ns.tprint(`\\n\\n${server}:\\n    RAM        : ${ram[1]} / ${ram[0]} (${(ram[1] / ram[0]) * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${((money / maxMoney) * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${ns.growthAnalyze(server, 2).toFixed(2)} threads\\n    grow x3    : ${ns.growthAnalyze(server, 3).toFixed(2)} threads\\n    grow x4    : ${ns.growthAnalyze(server, 4).toFixed(2)} threads\\n    hack 10%   : ${(0.1 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(0.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(0.5 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\r\\n}\\r\\n\",\"filename\":\"/official/analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"server\":\"home\",\"moduleSequenceNumber\":34502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    const hostname = args._[0];\\r\\n    if (args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will generate money by hacking a target server.\\\");\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\r\\n        return;\\r\\n    }\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) >\\r\\n            ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(hostname);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/official/basic_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":34504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getPlayerDetails } from \\\"lib/getDetails\\\";\\r\\nimport { getAllServers, getHackableServers, getNukableServers, } from \\\"lib/getall\\\";\\r\\nconst updateSeconds = 30;\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    const doc = document; // This is expensive! (25GB RAM) Perhaps there's a way around it? ;)\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hook1 = doc.getElementById(\\\"overview-extra-hook-1\\\");\\r\\n    if (hook0 === null || hook1 === null) {\\r\\n        ns.tprint(\\\"Could not get overview hooks. Is this being run in bitburner?\\\");\\r\\n        return;\\r\\n    }\\r\\n    while (true) {\\r\\n        try {\\r\\n            let headers = [];\\r\\n            let values = [];\\r\\n            // Add script income per second\\r\\n            headers.push(\\\"Script Income\\\");\\r\\n            values.push(ns.getScriptIncome()[0].toLocaleString(undefined, {\\r\\n                style: \\\"currency\\\",\\r\\n                currency: \\\"USD\\\",\\r\\n                currencyDisplay: \\\"narrowSymbol\\\",\\r\\n                notation: \\\"compact\\\",\\r\\n                maximumSignificantDigits: 3,\\r\\n            }) + \\\"/sec\\\");\\r\\n            // Add script exp gain rate per second\\r\\n            headers.push(\\\"Script XP\\\");\\r\\n            values.push(ns.getScriptExpGain().toLocaleString(undefined, {\\r\\n                style: \\\"decimal\\\",\\r\\n                maximumSignificantDigits: 3,\\r\\n                notation: \\\"compact\\\",\\r\\n            }) + \\\"/sec\\\");\\r\\n            // Add number of hackable ports\\r\\n            headers.push(\\\"Hackable Ports\\\");\\r\\n            let { portHacks } = getPlayerDetails(ns);\\r\\n            values.push(portHacks < 5 ? portHacks.toString() : \\\"ALL\\\");\\r\\n            // Add number of hackable servers\\r\\n            headers.push(\\\"Hackable servers\\\");\\r\\n            // values.push((await getHackableServers(ns)).length.toString());\\r\\n            values.push(`${(await getHackableServers(ns)).length}/${(await getAllServers(ns)).length}`);\\r\\n            // Add the number of servers that need nuked\\r\\n            headers.push(\\\"Servers Needing Nuked\\\");\\r\\n            values.push((await getNukableServers(ns)).length.toString());\\r\\n            // TODO: Add more neat stuff\\r\\n            // Now drop it into the placeholder elements\\r\\n            hook0.innerText = headers.join(\\\" \\\\n\\\");\\r\\n            hook1.innerText = values.join(\\\"\\\\n\\\");\\r\\n        }\\r\\n        catch (err) {\\r\\n            // This might come in handy later\\r\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\r\\n        }\\r\\n        await ns.sleep(updateSeconds * 1000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/official/custom-stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///1510769c-3fc0-4706-a83d-0e0304bfd180\",\"moduleSequenceNumber\":26557},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///09012fa9-fe81-470a-8810-2f14e28839fc\",\"moduleSequenceNumber\":26565},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///3029ed18-c10c-4ab9-ba85-55d211edacb7\",\"moduleSequenceNumber\":26557},{\"filename\":\"/official/custom-stats.js\",\"url\":\"blob:file:///30f2c648-fa61-453a-9bcf-0077bd11005c\",\"moduleSequenceNumber\":29630}],\"dependents\":[],\"ramUsage\":27.6,\"server\":\"home\",\"moduleSequenceNumber\":34506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help || args._.length < 2) {\\r\\n        ns.tprint(\\\"This script deploys another script on a server with maximum threads possible.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} HOST SCRIPT ARGUMENTS`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles basic_hack.js foodnstuff`);\\r\\n        return;\\r\\n    }\\r\\n    const host = args._[0];\\r\\n    const script = args._[1];\\r\\n    const script_args = args._.slice(2);\\r\\n    if (!ns.serverExists(host)) {\\r\\n        ns.tprint(`Server '${host}' does not exist. Aborting.`);\\r\\n        return;\\r\\n    }\\r\\n    if (!ns.ls(ns.getHostname()).find((f) => f === script)) {\\r\\n        ns.tprint(`Script '${script}' does not exist. Aborting.`);\\r\\n        return;\\r\\n    }\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) /\\r\\n        ns.getScriptRam(script));\\r\\n    ns.tprint(`Launching script '${script}' on server '${host}' with ${threads} threads and the following arguments: ${script_args}`);\\r\\n    await ns.scp(script, ns.getHostname(), host);\\r\\n    if (threads > 0)\\r\\n        ns.exec(script, host, threads, ...script_args);\\r\\n}\\r\\n\",\"filename\":\"/official/deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/official/deploy.js\",\"url\":\"blob:file:///6bf33d00-7d84-4e8e-9f04-645f63293bad\",\"moduleSequenceNumber\":244}],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"moduleSequenceNumber\":34508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\r\\n    const children = ns.scan(server);\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue;\\r\\n        }\\r\\n        list.push(child);\\r\\n        scan(ns, server, child, list);\\r\\n    }\\r\\n}\\r\\nexport function list_servers(ns) {\\r\\n    const list = [];\\r\\n    scan(ns, \\\"\\\", \\\"home\\\", list);\\r\\n    return list;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script helps you find an unsolved coding contract.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    let servers = list_servers(ns);\\r\\n    const boughtServers = ns.getPurchasedServers();\\r\\n    servers = servers.filter((s) => !boughtServers.includes(s));\\r\\n    const hostname = servers.find((s) => ns.ls(s).find((f) => f.endsWith(\\\".cct\\\")));\\r\\n    if (!hostname) {\\r\\n        ns.tprint(\\\"No coding contract found.\\\");\\r\\n        return;\\r\\n    }\\r\\n    ns.tprint(`Found coding contract on '${hostname}'.`);\\r\\n}\\r\\n\",\"filename\":\"/official/find_coding_contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.25,\"server\":\"home\",\"moduleSequenceNumber\":34510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\r\\n    const children = ns.scan(server);\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue;\\r\\n        }\\r\\n        if (child == target) {\\r\\n            route.unshift(child);\\r\\n            route.unshift(server);\\r\\n            return true;\\r\\n        }\\r\\n        if (recursiveScan(ns, server, child, target, route)) {\\r\\n            route.unshift(server);\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    let route = [];\\r\\n    let server = args._[0];\\r\\n    if (!server || args.help) {\\r\\n        ns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\r\\n        return;\\r\\n    }\\r\\n    recursiveScan(ns, \\\"\\\", \\\"home\\\", server, route);\\r\\n    for (const i in route) {\\r\\n        await ns.sleep(500);\\r\\n        const extra = i.length > 0 ? \\\"└ \\\" : \\\"\\\";\\r\\n        ns.tprint(`${\\\" \\\".repeat(parseInt(i))}${extra}${route[i]}`);\\r\\n    }\\r\\n}\\r\\nexport function autocomplete(data, _args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"/official/find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/official/find_server.js\",\"url\":\"blob:file:///d35cae28-2969-40aa-b8b7-0a067289c072\",\"moduleSequenceNumber\":98371}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":34512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"refreshrate\\\", 200],\\r\\n        [\\\"help\\\", false],\\r\\n    ]);\\r\\n    if (flags._.length === 0 || flags.help) {\\r\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\");\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\r\\n        return;\\r\\n    }\\r\\n    ns.tail();\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    while (true) {\\r\\n        const server = flags._[0];\\r\\n        let money = ns.getServerMoneyAvailable(server);\\r\\n        if (money === 0)\\r\\n            money = 1;\\r\\n        const maxMoney = ns.getServerMaxMoney(server);\\r\\n        const minSec = ns.getServerMinSecurityLevel(server);\\r\\n        const sec = ns.getServerSecurityLevel(server);\\r\\n        ns.clearLog();\\r\\n        ns.print(`${server}:`);\\r\\n        ns.print(` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${((money / maxMoney) * 100).toFixed(2)}%)`);\\r\\n        ns.print(` security: +${(sec - minSec).toFixed(2)}`);\\r\\n        ns.print(` hack____: ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`);\\r\\n        ns.print(` grow____: ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`);\\r\\n        ns.print(` weaken__: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil((sec - minSec) * 20)})`);\\r\\n        await ns.sleep(flags.refreshrate);\\r\\n    }\\r\\n}\\r\\nexport function autocomplete(data, _args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"/official/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":34514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\r\\n    const children = ns.scan(server);\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue;\\r\\n        }\\r\\n        list.push(child);\\r\\n        scan(ns, server, child, list);\\r\\n    }\\r\\n}\\r\\nexport function list_servers(ns) {\\r\\n    const list = [];\\r\\n    scan(ns, \\\"\\\", \\\"home\\\", list);\\r\\n    return list;\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script lists all servers on which you can run scripts.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    const servers = list_servers(ns)\\r\\n        .filter((s) => ns.hasRootAccess(s))\\r\\n        .concat(\\\"home\\\");\\r\\n    for (const server of servers) {\\r\\n        const used = ns.getServerUsedRam(server);\\r\\n        const max = ns.getServerMaxRam(server);\\r\\n        ns.tprint(`${server} is opened. ${used} GB / ${max} GB (${((100 * used) /\\r\\n            max).toFixed(2)}%)`);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/official/opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":34516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Total Ways to Sum\\r\\nexport function totalWaysToSum(data) {\\r\\n    let N = data;\\r\\n    let K = data - 1;\\r\\n    // Initialize a list\\r\\n    let dp = Array.from({ length: N + 1 }, () => 0);\\r\\n    // Update dp[0] to 1\\r\\n    dp[0] = 1;\\r\\n    // Iterate over the range [1, K + 1]\\r\\n    for (let row = 1; row < K + 1; row++) {\\r\\n        // Iterate over the range [1, N + 1]\\r\\n        for (let col = 1; col < N + 1; col++) {\\r\\n            // If col is greater\\r\\n            // than or equal to row\\r\\n            if (col >= row)\\r\\n                // Update current\\r\\n                // dp[col] state\\r\\n                dp[col] = dp[col] + dp[col - row];\\r\\n        }\\r\\n    }\\r\\n    // Return the total number of ways\\r\\n    return dp[N];\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":34548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export * from \\\"contracts/solvers/totalWaysToSum.js\\\";\\r\\nexport * from \\\"contracts/solvers/arrayJumpingGame.js\\\";\\r\\nexport * from \\\"contracts/solvers/solveSum.js\\\";\\r\\nexport * from \\\"contracts/solvers/mergeOverlap.js\\\";\\r\\nexport * from \\\"contracts/solvers/spiral.js\\\";\\r\\nexport * from \\\"contracts/solvers/factor.js\\\";\\r\\nexport * from \\\"contracts/solvers/generateIps.js\\\";\\r\\nexport * from \\\"contracts/solvers/uniquePaths.js\\\";\\r\\nexport * from \\\"contracts/solvers/triangleSum.js\\\";\\r\\nexport * from \\\"contracts/solvers/stockSolver.js\\\";\\r\\nexport * from \\\"contracts/solvers/sanitizeParentheses.js\\\";\\r\\nexport * from \\\"contracts/solvers/findMathExpressions.js\\\";\\r\\n\",\"filename\":\"/contracts/solvers/index.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":34536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Array jumping game solver\\r\\nexport function solveJump(data) {\\r\\n    // ns.tprint(JSON.stringify(data))\\r\\n    for (let i = data[0] - 1; i > -1; i--) {\\r\\n        if (i + 1 >= data.length)\\r\\n            return 1;\\r\\n        return solveJump(data.slice(i + 1));\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":34528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function solveSum(data) {\\r\\n    const arrLength = data.length;\\r\\n    let maxSum = -Infinity;\\r\\n    for (let i = 0; i < arrLength; i++) {\\r\\n        const sub = data.slice(0, i + 1);\\r\\n        for (let j = 0; j < sub.length; j++) {\\r\\n            const sub2 = sub.slice(j, sub.length);\\r\\n            // ns.tprint(`i ${i} j ${j} ${JSON.stringify(sub)} ${JSON.stringify(sub2)}`);\\r\\n            const sum = sub2.reduce((prev, cur) => (prev += cur), 0);\\r\\n            if (sum > maxSum)\\r\\n                maxSum = sum;\\r\\n            // ns.tprint(`${sum}: ${sub2}`);\\r\\n        }\\r\\n    }\\r\\n    return maxSum;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":34542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Merge Overlapping Intervals\\r\\nexport function mergeOverlap(intervals) {\\r\\n    intervals.sort(([minA], [minB]) => minA - minB);\\r\\n    for (let i = 0; i < intervals.length; i++) {\\r\\n        for (let j = i + 1; j < intervals.length; j++) {\\r\\n            const [min, max] = intervals[i];\\r\\n            const [laterMin, laterMax] = intervals[j];\\r\\n            if (laterMin <= max) {\\r\\n                const newMax = laterMax > max ? laterMax : max;\\r\\n                const newInterval = [min, newMax];\\r\\n                intervals[i] = newInterval;\\r\\n                intervals.splice(j, 1);\\r\\n                j = i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return intervals;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":34538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//SPIRALIZE Matrix\\r\\nexport function spiral(arr, accum = []) {\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(arr.shift() || []);\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat((arr.pop() || []).reverse());\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(column(arr, 0).reverse());\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    return spiral(arr, accum);\\r\\n}\\r\\nfunction column(arr, index) {\\r\\n    let res = [];\\r\\n    for (let i = 0; i < arr.length; i++) {\\r\\n        const elm = arr[i].splice(index, 1)[0];\\r\\n        if (elm) {\\r\\n            res.push(elm);\\r\\n        }\\r\\n    }\\r\\n    return res;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":34544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//GREATEST FACTOR\\r\\nexport function factor(num) {\\r\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\r\\n        if (num % div != 0) {\\r\\n            continue;\\r\\n        }\\r\\n        num = num / div;\\r\\n        div = 1;\\r\\n    }\\r\\n    return num;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":34530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//GENERATE IP ADDRESSES\\r\\nexport function generateIps(num) {\\r\\n    num = num.toString();\\r\\n    const length = num.length;\\r\\n    let ips = [];\\r\\n    for (let i = 1; i < length - 2; i++) {\\r\\n        for (let j = i + 1; j < length - 1; j++) {\\r\\n            for (let k = j + 1; k < length; k++) {\\r\\n                const ip = [\\r\\n                    num.slice(0, i),\\r\\n                    num.slice(i, j),\\r\\n                    num.slice(j, k),\\r\\n                    num.slice(k, num.length),\\r\\n                ];\\r\\n                let isValid = true;\\r\\n                ip.forEach((seg) => {\\r\\n                    isValid = isValid && isValidIpSegment(seg);\\r\\n                });\\r\\n                if (isValid)\\r\\n                    ips.push(ip.join(\\\".\\\"));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return ips;\\r\\n}\\r\\nfunction isValidIpSegment(segment) {\\r\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\")\\r\\n        return false;\\r\\n    segment = Number(segment);\\r\\n    if (segment < 0 || segment > 255)\\r\\n        return false;\\r\\n    return true;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":34534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//UNIQUE PATHS IN A GRID//UNIQUE PATHS IN A GRID\\r\\nexport function uniquePathsI(grid) {\\r\\n    const rightMoves = grid[0] - 1;\\r\\n    const downMoves = grid[1] - 1;\\r\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\r\\n}\\r\\nfunction factorial(n) {\\r\\n    return factorialDivision(n, 1);\\r\\n}\\r\\nfunction factorialDivision(n, d) {\\r\\n    if (n == 0 || n == 1 || n == d)\\r\\n        return 1;\\r\\n    return factorialDivision(n - 1, d) * n;\\r\\n}\\r\\nexport function uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\r\\n    const rightMoves = grid[0].length - 1;\\r\\n    const downMoves = grid.length - 1;\\r\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\r\\n    for (let i = 0; i < grid.length; i++) {\\r\\n        for (let j = 0; j < grid[i].length; j++) {\\r\\n            if (grid[i][j] == 1 &&\\r\\n                (!ignoreFirst || i != 0 || j != 0) &&\\r\\n                (!ignoreLast || i != grid.length - 1 || j != grid[i].length - 1)) {\\r\\n                let newArray = [];\\r\\n                for (let k = i; k < grid.length; k++) {\\r\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\r\\n                }\\r\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\r\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\r\\n                totalPossiblePaths -= removedPaths;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return totalPossiblePaths;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":34552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function triangleSum(arrayData) {\\r\\n    let triangle = arrayData;\\r\\n    let nextArray = [];\\r\\n    let previousArray = triangle[0];\\r\\n    for (let i = 1; i < triangle.length; i++) {\\r\\n        nextArray = [];\\r\\n        for (let j = 0; j < triangle[i].length; j++) {\\r\\n            if (j == 0) {\\r\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\r\\n            }\\r\\n            else if (j == triangle[i].length - 1) {\\r\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\r\\n            }\\r\\n            else {\\r\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\r\\n            }\\r\\n        }\\r\\n        previousArray = nextArray;\\r\\n    }\\r\\n    return Math.min.apply(null, nextArray);\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":34550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function maxProfit(arrayData) {\\r\\n    let i, j, k;\\r\\n    let maxTrades = arrayData[0];\\r\\n    let stockPrices = arrayData[1];\\r\\n    // WHY?\\r\\n    let tempStr = \\\"[0\\\";\\r\\n    for (i = 0; i < stockPrices.length; i++) {\\r\\n        tempStr += \\\",0\\\";\\r\\n    }\\r\\n    tempStr += \\\"]\\\";\\r\\n    let tempArr = \\\"[\\\" + tempStr;\\r\\n    for (i = 0; i < maxTrades - 1; i++) {\\r\\n        tempArr += \\\",\\\" + tempStr;\\r\\n    }\\r\\n    tempArr += \\\"]\\\";\\r\\n    let highestProfit = JSON.parse(tempArr);\\r\\n    for (i = 0; i < maxTrades; i++) {\\r\\n        for (j = 0; j < stockPrices.length; j++) {\\r\\n            // Buy / Start\\r\\n            for (k = j; k < stockPrices.length; k++) {\\r\\n                // Sell / End\\r\\n                if (i > 0 && j > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else if (i > 0 && j > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else if (i > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else if (j > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":34546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function sanitizeParentheses(data) {\\r\\n    var solution = Sanitize(data);\\r\\n    if (solution == null) {\\r\\n        return '[\\\"\\\"]';\\r\\n    }\\r\\n    else {\\r\\n        return \\\"[\\\" + solution.join(\\\",\\\") + \\\"]\\\";\\r\\n    }\\r\\n}\\r\\nfunction Sanitize_removeOneParth(item) {\\r\\n    var possibleAnswers = [];\\r\\n    for (let i = 0; i < item.length; i++) {\\r\\n        if (item[i].toLowerCase().indexOf(\\\"(\\\") === -1 &&\\r\\n            item[i].toLowerCase().indexOf(\\\")\\\") === -1) {\\r\\n            continue;\\r\\n        }\\r\\n        let possible = item.substring(0, i) + item.substring(i + 1);\\r\\n        possibleAnswers.push(possible);\\r\\n    }\\r\\n    return possibleAnswers;\\r\\n}\\r\\nfunction Sanitize_isValid(item) {\\r\\n    var unclosed = 0;\\r\\n    for (var i = 0; i < item.length; i++) {\\r\\n        if (item[i] == \\\"(\\\") {\\r\\n            unclosed++;\\r\\n        }\\r\\n        else if (item[i] == \\\")\\\") {\\r\\n            unclosed--;\\r\\n        }\\r\\n        if (unclosed < 0) {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n    return unclosed == 0;\\r\\n}\\r\\nfunction Sanitize(data) {\\r\\n    var currentPossible = [data];\\r\\n    for (var i = 0; i < currentPossible.length; i++) {\\r\\n        var newPossible = new Set();\\r\\n        for (var j = 0; j < currentPossible.length; j++) {\\r\\n            let newRemovedPossible = Sanitize_removeOneParth(currentPossible[j]);\\r\\n            for (let item of newRemovedPossible) {\\r\\n                newPossible.add(item);\\r\\n            }\\r\\n        }\\r\\n        var validBoolList = [];\\r\\n        for (const item of newPossible) {\\r\\n            validBoolList.push(Sanitize_isValid(item));\\r\\n        }\\r\\n        if (validBoolList.includes(true)) {\\r\\n            let finalList = [];\\r\\n            newPossible = [...newPossible];\\r\\n            for (var j = 0; j < validBoolList.length; j++) {\\r\\n                if (validBoolList[j]) {\\r\\n                    finalList.push(newPossible[j]);\\r\\n                }\\r\\n            }\\r\\n            finalList = new Set(finalList);\\r\\n            return [...finalList];\\r\\n        }\\r\\n        currentPossible = [...newPossible];\\r\\n    }\\r\\n    return null;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":34540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const hackPrograms = [\\r\\n    \\\"BruteSSH.exe\\\",\\r\\n    \\\"FTPCrack.exe\\\",\\r\\n    \\\"relaySMTP.exe\\\",\\r\\n    \\\"HTTPWorm.exe\\\",\\r\\n    \\\"SQLInject.exe\\\",\\r\\n];\\r\\nexport function getPlayerDetails(ns) {\\r\\n    let portHacks = 0;\\r\\n    for (let hackProgram of hackPrograms) {\\r\\n        if (ns.fileExists(hackProgram, \\\"home\\\")) {\\r\\n            portHacks += 1;\\r\\n        }\\r\\n    }\\r\\n    return {\\r\\n        hackingLevel: ns.getHackingLevel(),\\r\\n        portHacks,\\r\\n    };\\r\\n}\\r\\n\",\"filename\":\"/lib/getports.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":26507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const hackPrograms = [\\r\\n    \\\"BruteSSH.exe\\\",\\r\\n    \\\"FTPCrack.exe\\\",\\r\\n    \\\"relaySMTP.exe\\\",\\r\\n    \\\"HTTPWorm.exe\\\",\\r\\n    \\\"SQLInject.exe\\\",\\r\\n];\\r\\nexport function getPlayerDetails(ns) {\\r\\n    let portHacks = 0;\\r\\n    let programming = false;\\r\\n    for (let hackProgram of hackPrograms) {\\r\\n        if (ns.fileExists(hackProgram, \\\"home\\\")) {\\r\\n            portHacks += 1;\\r\\n        }\\r\\n        else {\\r\\n            if (!programming) {\\r\\n                // programming = ns.createProgram(hackProgram, true);\\r\\n                // } else {\\r\\n                // ns.purchaseTor();\\r\\n                // ns.purchaseProgram(hackProgram);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return {\\r\\n        hackingLevel: ns.getHackingLevel(),\\r\\n        portHacks,\\r\\n    };\\r\\n}\\r\\n\",\"filename\":\"/lib/getDetails.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":34464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"lib/getall\\\";\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help || args._.length < 2) {\\r\\n        ns.tprint(\\\"This script deploys another script on a server with maximum threads possible.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} HOST SCRIPT ARGUMENTS`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles basic_hack.js foodnstuff`);\\r\\n        return;\\r\\n    }\\r\\n    const host = args._[0];\\r\\n    const script = args._[1];\\r\\n    const script_args = args._.slice(2);\\r\\n    await deploy(ns, host, script, ...script_args);\\r\\n}\\r\\n/**\\r\\n * Deploys another script on a server with maximum threads possible.\\r\\n * @param {NS} ns - the netscript library.\\r\\n * @param {string} host - the host to run the script on.\\r\\n * @param {...(string | number | boolean)} script_args - the arguments to pass\\r\\n * to the script.\\r\\n */\\r\\nexport async function deploy(ns, host, script, ...script_args) {\\r\\n    if (!ns.serverExists(host)) {\\r\\n        ns.tprint(`Server '${host}' does not exist. Aborting.`);\\r\\n        return;\\r\\n    }\\r\\n    if (!ns.ls(ns.getHostname()).find((f) => f === script)) {\\r\\n        ns.tprint(`Script '${script}' does not exist. Aborting.`);\\r\\n        return;\\r\\n    }\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) /\\r\\n        ns.getScriptRam(script));\\r\\n    if (threads > 0) {\\r\\n        ns.print(`Launching script '${script}' on server '${host}' with ${threads} threads and the following arguments: ${script_args}`);\\r\\n        await ns.scp(script, ns.getHostname(), host);\\r\\n        ns.exec(script, host, threads, ...script_args);\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * Deploys another script on a server with maximum threads possible.\\r\\n * @param {NS} ns - the netscript library.\\r\\n * @param {string} host - the host to run the script on.\\r\\n * @param {...(string | number | boolean)} script_args - the arguments to pass\\r\\n * to the script.\\r\\n */\\r\\nexport async function deployHalf(ns, host, script, ...script_args) {\\r\\n    if (!ns.serverExists(host)) {\\r\\n        ns.tprint(`Server '${host}' does not exist. Aborting.`);\\r\\n        return;\\r\\n    }\\r\\n    if (!ns.ls(ns.getHostname()).find((f) => f === script)) {\\r\\n        ns.tprint(`Script '${script}' does not exist. Aborting.`);\\r\\n        return;\\r\\n    }\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) /\\r\\n        (ns.getScriptRam(script) * 2));\\r\\n    if (threads > 0) {\\r\\n        ns.tprint(`Launching script '${script}' on server '${host}' with ${threads} threads and the following arguments: ${script_args}`);\\r\\n        await ns.scp(script, ns.getHostname(), host);\\r\\n        ns.exec(script, host, threads, ...script_args);\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * @param {NS} ns - The netscript library.\\r\\n * @param {string} script - The name of the script to run.\\r\\n * @param {boolean} restart - Should the script be restarted if it is already\\r\\n * running? Defaults to false. If true this will kill all scripts on the server.\\r\\n * @param {...string | number | boolean} args - Any arguments to pass to the script.\\r\\n */\\r\\nexport async function deployToAll(ns, script, restart = false, ...args) {\\r\\n    const servers = await getRunnableServers(ns);\\r\\n    for (const s of servers) {\\r\\n        // Don't hog home - so I can still run things like find...\\r\\n        if (s === \\\"home\\\") {\\r\\n            if (ns.scriptRunning(script, s))\\r\\n                continue;\\r\\n            await deployHalf(ns, s, script, ...args);\\r\\n            await ns.sleep(1);\\r\\n            continue;\\r\\n        }\\r\\n        if (restart)\\r\\n            ns.killall(s);\\r\\n        if (ns.scriptRunning(script, s))\\r\\n            continue;\\r\\n        await deploy(ns, s, script, ...args);\\r\\n        await ns.sleep(1);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/lib/deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///e5ee9e0c-c83b-451e-8fe7-73cf13ac4b83\",\"moduleSequenceNumber\":26557},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///7b7d4201-09be-4285-a8cd-7d15d129580d\",\"moduleSequenceNumber\":26565},{\"filename\":\"/lib/deploy.js\",\"url\":\"blob:file:///36189483-a33e-49d6-8708-74b61a6ff2c9\",\"moduleSequenceNumber\":29633}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":34460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///c60161e2-de73-4656-a91f-004de1ff2262\",\"moduleSequenceNumber\":1661}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":34488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///db59a5d0-2640-44e9-8e2e-ed3dbf63a593\",\"moduleSequenceNumber\":678}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":34496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const testData = [\\\"123\\\", 6];\\r\\n    ns.tprint(findMathExpression(testData));\\r\\n}\\r\\nexport function findMathExpression(data) {\\r\\n    const digits = data[0].split(\\\"\\\");\\r\\n    const operators = [\\\"+\\\", \\\"-\\\", \\\"*\\\", \\\"\\\"];\\r\\n    let expressions = [digits[0], \\\"-\\\" + digits[0]].flatMap((d) => operators.map((op) => d + op));\\r\\n    for (let i = 1; i < digits.length - 1; i++) {\\r\\n        expressions = expressions.flatMap((e) => operators.map((op) => e + digits[i] + op));\\r\\n    }\\r\\n    return expressions\\r\\n        .map((e) => e + digits[digits.length - 1])\\r\\n        .filter((e) => {\\r\\n        try {\\r\\n            return eval(e) === data[1];\\r\\n        }\\r\\n        catch (e) {\\r\\n            return false;\\r\\n        }\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///a54ba11e-0bcd-4a13-bd1a-7c881afa8c47\",\"moduleSequenceNumber\":13879}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":34532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTree } from \\\"lib/gettree.js\\\";\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0].toString();\\r\\n    let path = \\\"\\\";\\r\\n    function iterate(obj, stack = \\\"\\\") {\\r\\n        for (let property in obj) {\\r\\n            if (obj.hasOwnProperty(property)) {\\r\\n                if (typeof obj[property] === \\\"object\\\") {\\r\\n                    iterate(obj[property], (stack ? stack + \\\"; connect \\\" : stack) + property);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if (stack.includes(target)) {\\r\\n            path = stack;\\r\\n        }\\r\\n    }\\r\\n    iterate(await getTree(ns));\\r\\n    const terminalInput = document.getElementById(\\\"terminal-input\\\");\\r\\n    if (!terminalInput) {\\r\\n        ns.tprint(\\\"Couldn't get terminal-input field.\\\");\\r\\n        return;\\r\\n    }\\r\\n    terminalInput.value = path;\\r\\n    const handler = Object.keys(terminalInput)[1];\\r\\n    terminalInput[handler].onChange({ target: terminalInput });\\r\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\r\\n}\\r\\nexport function autocomplete(data, _args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"/advanced/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/gettree.js\",\"url\":\"blob:file:///e53db69c-fe51-4165-8954-e16617990e5b\",\"moduleSequenceNumber\":328},{\"filename\":\"/advanced/cnct.js\",\"url\":\"blob:file:///8c4c39b2-ebce-483a-9516-8454418a604d\",\"moduleSequenceNumber\":1979}],\"dependents\":[],\"ramUsage\":26.8,\"server\":\"home\",\"moduleSequenceNumber\":34470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function formatCurrency(n) {\\r\\n    return n.toLocaleString(undefined, {\\r\\n        style: \\\"currency\\\",\\r\\n        currency: \\\"USD\\\",\\r\\n        maximumSignificantDigits: 3,\\r\\n        notation: \\\"compact\\\",\\r\\n        compactDisplay: \\\"short\\\",\\r\\n    });\\r\\n}\\r\\nexport function formatNumber(n) {\\r\\n    return n.toLocaleString(undefined, {\\r\\n        maximumSignificantDigits: 3,\\r\\n        notation: \\\"compact\\\",\\r\\n        compactDisplay: \\\"short\\\",\\r\\n    });\\r\\n}\\r\\nexport function formatPercent(n) {\\r\\n    return n.toLocaleString(undefined, {\\r\\n        style: \\\"percent\\\",\\r\\n    });\\r\\n}\\r\\nexport function getFolio(ns) {\\r\\n    let folio = [];\\r\\n    for (const sym of ns.stock.getSymbols()) {\\r\\n        let shares = ns.stock.getPosition(sym)[0];\\r\\n        if (shares > 0) {\\r\\n            folio.push({\\r\\n                sym,\\r\\n                shares,\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    return folio;\\r\\n}\\r\\n\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":34456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    const server = ns.args[0].toString();\\r\\n    if (args.help || !server) {\\r\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\r\\n        return;\\r\\n    }\\r\\n    analyzeServer(ns, server);\\r\\n}\\r\\nexport const getServerFreeRam = (ns, host) => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\nexport function analyzeServer(ns, server, printToTerminal = true) {\\r\\n    // const ram = ns.getServerRam(server);\\r\\n    const ram = [ns.getServerMaxRam(server), ns.getServerUsedRam(server)];\\r\\n    const money = ns.getServerMoneyAvailable(server);\\r\\n    const maxMoney = ns.getServerMaxMoney(server);\\r\\n    const minSec = ns.getServerMinSecurityLevel(server);\\r\\n    const sec = ns.getServerSecurityLevel(server);\\r\\n    const print = printToTerminal ? ns.tprint : ns.print;\\r\\n    print(`\\n${server}:\\n    RAM        : ${ram[1]} / ${ram[0]} (${(ram[1] / ram[0]) * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${((money / maxMoney) * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${ns.growthAnalyze(server, 2).toFixed(2)} threads\\n    grow x3    : ${ns.growthAnalyze(server, 3).toFixed(2)} threads\\n    grow x4    : ${ns.growthAnalyze(server, 4).toFixed(2)} threads\\n    hack 10%   : ${(0.1 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(0.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(0.5 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\nexport function weakenTime(ns, host) {\\r\\n    return ns.getWeakenTime(host);\\r\\n}\\r\\nexport function getMemForHack(ns, host) {\\r\\n    const hackMem = ns.getScriptRam(\\\"/basic/hack.js\\\");\\r\\n    const hackCount = hackThreads(ns, host);\\r\\n    return hackMem * hackCount;\\r\\n}\\r\\nexport function getMemForGrow(ns, host) {\\r\\n    const growMem = ns.getScriptRam(\\\"/basic/grow.js\\\");\\r\\n    const growCount = growThreads(ns, host);\\r\\n    return growMem * growCount;\\r\\n}\\r\\nexport function getMemForWeaken(ns, host) {\\r\\n    const weakenMem = ns.getScriptRam(\\\"/basic/weaken.js\\\");\\r\\n    const weakenCount = weakenThreads(ns, host);\\r\\n    return weakenMem * weakenCount;\\r\\n}\\r\\n\",\"filename\":\"/lib/analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///3bb6421e-03da-4815-83b2-a2a2bb3e9ad2\",\"moduleSequenceNumber\":16170}],\"dependents\":[],\"ramUsage\":6.45,\"server\":\"home\",\"moduleSequenceNumber\":34458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"lib/getall\\\";\\r\\nimport { analyzeServer, getMemForHack, getMemForGrow, getMemForWeaken, getServerFreeRam, growThreads, hackThreads, weakenThreads, hackTime, growTime, weakenTime, } from \\\"lib/analyze_server\\\";\\r\\nconst bufferTime = 300;\\r\\nexport async function main(ns) {\\r\\n    await batch(ns, ns.args[0].toString());\\r\\n}\\r\\nasync function batch(ns, target) {\\r\\n    let weakenThreads = 1;\\r\\n    // Growth Phase\\r\\n    ns.print(\\\"Begining growth phase.\\\");\\r\\n    analyzeServer(ns, target, false);\\r\\n    weakenThreads = await deployGrow(ns, target);\\r\\n    // Weaken Phase\\r\\n    ns.print(\\\"Beginning Weaken Phase\\\");\\r\\n    analyzeServer(ns, target, false);\\r\\n    while (ns.hackAnalyzeChance(target) < 1) {\\r\\n        await deployWeaken(ns, target);\\r\\n    }\\r\\n    // Hack Phase\\r\\n    ns.print(\\\"Benninging Hack Phase\\\");\\r\\n    analyzeServer(ns, target, false);\\r\\n    while (true) {\\r\\n        await deployHack(ns, target, weakenThreads);\\r\\n    }\\r\\n}\\r\\nasync function deployHack(ns, target, threadsToWeaken) {\\r\\n    // get hackTime and threads\\r\\n    const timeToHack = hackTime(ns, target);\\r\\n    const timeToGrow = growTime(ns, target);\\r\\n    const timeToWeaken = weakenTime(ns, target);\\r\\n    const threadsToHack = hackThreads(ns, target);\\r\\n    const threadsToGrow = growThreads(ns, target);\\r\\n    let weakening = false;\\r\\n    let growing = false;\\r\\n    let hacking = false;\\r\\n    for (const host of await getRunnableServers(ns)) {\\r\\n        // first check if the server can successfully hack the target.\\r\\n        if (!weakening &&\\r\\n            getServerFreeRam(ns, host) >= getMemForWeaken(ns, target)) {\\r\\n            // Start with a weaken\\r\\n            if (ns.exec(\\\"/basic/weaken.js\\\", host, threadsToWeaken, target)) {\\r\\n                weakening = true;\\r\\n                await ns.sleep(timeToWeaken - timeToGrow - bufferTime);\\r\\n            }\\r\\n        }\\r\\n        else if (!growing &&\\r\\n            getServerFreeRam(ns, host) >= getMemForGrow(ns, target)) {\\r\\n            if (ns.exec(\\\"/basic/grow.js\\\", host, threadsToGrow, target)) {\\r\\n                growing = true;\\r\\n                await ns.sleep(timeToGrow - timeToHack - bufferTime);\\r\\n            }\\r\\n        }\\r\\n        else if (!hacking &&\\r\\n            getServerFreeRam(ns, host) >= getMemForHack(ns, target)) {\\r\\n            if (ns.exec(\\\"/basic/hack.js\\\", host, threadsToHack, target)) {\\r\\n                hacking = true;\\r\\n                await ns.sleep(timeToHack + bufferTime);\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\nasync function deployGrow(ns, target) {\\r\\n    for (const host of await getRunnableServers(ns)) {\\r\\n        if (!ns.exec(\\\"/basic/grow.js\\\", host, growThreads(ns, target), target))\\r\\n            continue;\\r\\n        await ns.sleep(growTime(ns, target));\\r\\n        break;\\r\\n    }\\r\\n    return weakenThreads(ns, target);\\r\\n}\\r\\nasync function deployWeaken(ns, target) {\\r\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        for (const host of await getRunnableServers(ns)) {\\r\\n            if (!ns.exec(\\\"/basic/weaken.js\\\", host, weakenThreads(ns, target), target))\\r\\n                continue;\\r\\n            await ns.sleep(weakenTime(ns, target));\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/batch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///35e10b8d-445d-4e22-a7da-ee99d62f0d92\",\"moduleSequenceNumber\":367},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///0e1e85e8-a9c7-4072-a9fb-995d60049266\",\"moduleSequenceNumber\":360},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///340ba08d-18f0-4be8-9809-9fc8ef0450a7\",\"moduleSequenceNumber\":309},{\"filename\":\"/advanced/batch.js\",\"url\":\"blob:file:///0df93201-3110-4a87-9845-0b8731bfa6db\",\"moduleSequenceNumber\":642}],\"dependents\":[],\"ramUsage\":8,\"server\":\"home\",\"moduleSequenceNumber\":34468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall\\\";\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    // files to copy to each server\\r\\n    const files = [\\\"/basic/hack.js\\\", \\\"/basic/grow.js\\\", \\\"/basic/weaken.js\\\"];\\r\\n    for (const server of await getAllServers(ns)) {\\r\\n        await ns.scp(files, \\\"home\\\", server);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/cpall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":39660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const scripts = [\\\"hacknet/daemon.js\\\", \\\"server-expansion/daemon.js\\\"];\\r\\n    for (const script of scripts)\\r\\n        ns.run(script);\\r\\n}\\r\\n\",\"filename\":\"expand.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":34450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///b7498acf-519b-4402-ad71-6e61c4c83284\",\"moduleSequenceNumber\":29634}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":34494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall\\\";\\r\\nexport async function main(ns) {\\r\\n    // The files to copy to each server node\\r\\n    const files = [\\r\\n        \\\"/basic/hack.js\\\",\\r\\n        \\\"/basic/grow.js\\\",\\r\\n        \\\"/basic/weaken.js\\\",\\r\\n        \\\"/basic/share.js\\\",\\r\\n    ];\\r\\n    for (const host of await getAllServers(ns))\\r\\n        await ns.scp(files, \\\"home\\\", host);\\r\\n}\\r\\n\",\"filename\":\"/advanced/cpall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///19f54d90-55e9-4c5f-a65c-a1c77195b619\",\"moduleSequenceNumber\":26557},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///648c49e1-000d-4de9-bfe0-4ad5591a3537\",\"moduleSequenceNumber\":26565},{\"filename\":\"/advanced/cpall.js\",\"url\":\"blob:file:///a1ca5497-e090-40db-a46f-8710c04d45f1\",\"moduleSequenceNumber\":28763}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":34472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"lib/getall\\\";\\r\\nimport { analyzeServer } from \\\"lib/analyze_server\\\";\\r\\nexport async function main(ns) {\\r\\n    let richest = [\\\"\\\", 0];\\r\\n    for (const s of await getHackableServers(ns)) {\\r\\n        const money = ns.getServerMaxMoney(s);\\r\\n        if (money > richest[1]) {\\r\\n            richest = [s, money];\\r\\n        }\\r\\n    }\\r\\n    analyzeServer(ns, richest[0], true);\\r\\n}\\r\\n\",\"filename\":\"/advanced/richestServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///b148d544-5aba-4390-b0ef-65b875ddd791\",\"moduleSequenceNumber\":367},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///fe2413e5-37fa-4c87-9480-7666d55e8486\",\"moduleSequenceNumber\":360},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///9a6a6508-0bb1-42fe-b4e7-9e8c7a44403c\",\"moduleSequenceNumber\":309},{\"filename\":\"/advanced/richestServer.js\",\"url\":\"blob:file:///beb59798-4caa-4d2e-a070-ec676f845236\",\"moduleSequenceNumber\":2242}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"home\",\"moduleSequenceNumber\":34486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"lib/getall\\\";\\r\\nimport { analyzeServer } from \\\"lib/analyze_server\\\";\\r\\nexport async function main(ns) {\\r\\n    let fastest = [\\\"\\\", 1e500];\\r\\n    for (const s of await getHackableServers(ns)) {\\r\\n        const time = ns.getHackTime(s) + ns.getGrowTime(s) + ns.getWeakenTime(s);\\r\\n        if (time < fastest[1]) {\\r\\n            fastest = [s, time];\\r\\n        }\\r\\n    }\\r\\n    analyzeServer(ns, fastest[0], true);\\r\\n}\\r\\n\",\"filename\":\"/advanced/fastestServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///e91a2e7b-e233-4d90-b1d9-22faa243ae2d\",\"moduleSequenceNumber\":1060},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///3d5c533d-2eea-47c6-86fc-6cd2fac2a961\",\"moduleSequenceNumber\":1048},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///dee170eb-472e-4555-812f-2e86bcd4275f\",\"moduleSequenceNumber\":1057},{\"filename\":\"/advanced/fastestServer.js\",\"url\":\"blob:file:///87f64e5f-cb31-4d37-a70b-f5ae37491495\",\"moduleSequenceNumber\":2721}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"home\",\"moduleSequenceNumber\":34476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const scripts = [\\r\\n        \\\"advanced/killall.js\\\",\\r\\n        \\\"advanced/cpall.js\\\",\\r\\n        \\\"contracts/daemon.js\\\",\\r\\n        \\\"stocks/daemon.js\\\",\\r\\n        \\\"rep/shareall.js\\\",\\r\\n    ];\\r\\n    for (const script of scripts)\\r\\n        ns.run(script);\\r\\n}\\r\\n\",\"filename\":\"repGrind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"repGrind.js\",\"url\":\"blob:file:///71bac247-2416-4e7a-b674-b4a1b2a1c204\",\"moduleSequenceNumber\":33136}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":34454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"lib/getall\\\";\\r\\nexport async function main(ns) {\\r\\n    for (const s of await getRunnableServers(ns)) {\\r\\n        ns.run(\\\"/lib/deploy.js\\\", 1, s, \\\"/basic/share.js\\\");\\r\\n        await ns.sleep(1);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/rep/shareall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///5b67c47d-2b54-4e23-bb72-4c233cf645db\",\"moduleSequenceNumber\":26557},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///f750f284-a3af-4ff7-8cc0-3b2d551b3fda\",\"moduleSequenceNumber\":26565},{\"filename\":\"/rep/shareall.js\",\"url\":\"blob:file:///7578ce21-1bdd-4c93-b149-586a02cba738\",\"moduleSequenceNumber\":29632}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"home\",\"moduleSequenceNumber\":34518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const scripts = [\\r\\n        \\\"advanced/killall.js\\\",\\r\\n        \\\"advanced/cpall.js\\\",\\r\\n        \\\"contracts/daemon.js\\\",\\r\\n        \\\"official/custom-stats.js\\\",\\r\\n        \\\"stocks/daemon.js\\\",\\r\\n        \\\"advanced/daemon.js\\\",\\r\\n    ];\\r\\n    for (const script of scripts)\\r\\n        ns.run(script);\\r\\n}\\r\\n\",\"filename\":\"hackGrind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":40504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"36.0.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const maxNodes = ns.hacknet.maxNumNodes()\\n    ns.tprint(maxNodes);\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"ecorp\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":28985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":28986,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":28987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"ecorp\",\"moduleSequenceNumber\":28988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":69.78925,\"minDifficulty\":33,\"moneyAvailable\":353188221255,\"moneyMax\":1591234378700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1073,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"1.5.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":28996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":28997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":28998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"megacorp\",\"moduleSequenceNumber\":28999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":38.344,\"minDifficulty\":33,\"moneyAvailable\":0,\"moneyMax\":1181223190350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1231,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"98.3.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":29039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":29040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":29041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":29042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":99.42037499999999,\"minDifficulty\":27,\"moneyAvailable\":701284540850,\"moneyMax\":701284540850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":972,\"serverGrowth\":66}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"35.9.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2615,\"ramUsage\":4,\"server\":\"blade\",\"threads\":16,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///e9094d32-df01-4193-ae7f-05484dead248\",\"moduleSequenceNumber\":18370}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///b698574e-5b3b-4f89-a5c7-20981b45ab35\",\"moduleSequenceNumber\":2516}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":29048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///225a763a-a53a-4577-9498-cc5e60a45184\",\"moduleSequenceNumber\":739}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":29047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///5c33ae03-7c1b-4841-9f75-9b2aefc6ea71\",\"moduleSequenceNumber\":453}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":29046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///e9094d32-df01-4193-ae7f-05484dead248\",\"moduleSequenceNumber\":18370}],\"dependents\":[],\"ramUsage\":4,\"server\":\"blade\",\"moduleSequenceNumber\":18370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":89,\"hackDifficulty\":38.542,\"minDifficulty\":30,\"moneyAvailable\":0,\"moneyMax\":792625982825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":918,\"serverGrowth\":58}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"93.7.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":28977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":28978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":28979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nwo\",\"moduleSequenceNumber\":28980,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":100,\"minDifficulty\":33,\"moneyAvailable\":52736809857.16333,\"moneyMax\":727835852575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1017,\"serverGrowth\":72}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"66.5.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":29012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":29013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":29014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":29015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":93.99599999999991,\"minDifficulty\":18,\"moneyAvailable\":1208219250.1134062,\"moneyMax\":510141701975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":976,\"serverGrowth\":54}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"25.2.1.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.810000031575,\"pid\":2599,\"ramUsage\":4,\"server\":\"omnitek\",\"threads\":32,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///382614e9-e612-4a70-b1ee-4dd10f449a77\",\"moduleSequenceNumber\":18362}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///e527df3f-4243-4713-b676-eb1cdc830978\",\"moduleSequenceNumber\":2508}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":28972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///8ef2eef0-0a82-4238-b08c-106e84c880fe\",\"moduleSequenceNumber\":609}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":28971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///5cf72719-f298-4e41-971d-bffc4e680000\",\"moduleSequenceNumber\":740}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":28970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///382614e9-e612-4a70-b1ee-4dd10f449a77\",\"moduleSequenceNumber\":18362}],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnitek\",\"moduleSequenceNumber\":18362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":95,\"hackDifficulty\":76.50925000000005,\"minDifficulty\":32,\"moneyAvailable\":9943208.373931082,\"moneyMax\":453970240800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":930,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"50.5.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":29004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":29005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":29006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"4sigma\",\"moduleSequenceNumber\":29007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":59,\"hackDifficulty\":81.72799999999991,\"minDifficulty\":20,\"moneyAvailable\":552205009525,\"moneyMax\":552205009525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1116,\"serverGrowth\":77}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"90.3.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":29031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":29032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":29033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":29034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":98,\"hackDifficulty\":83.31199999999998,\"minDifficulty\":33,\"moneyAvailable\":145695601925,\"moneyMax\":594495523150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1042,\"serverGrowth\":97}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"51.5.4.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":1024,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.810000031575,\"pid\":2597,\"ramUsage\":4,\"server\":\"fulcrumtech\",\"threads\":256,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///d3a36e4f-7945-4af1-9a9d-445b75fe10c7\",\"moduleSequenceNumber\":18360}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///07d7568c-b4d8-4c3d-95c6-35026816cfd1\",\"moduleSequenceNumber\":1944}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":28969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///30c29d43-9446-4c4f-a206-c62a5ce3299f\",\"moduleSequenceNumber\":747}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":28968,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///9a7c7055-8098-4fd6-9273-44218987fcbd\",\"moduleSequenceNumber\":684}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":28967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///d3a36e4f-7945-4af1-9a9d-445b75fe10c7\",\"moduleSequenceNumber\":18360}],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":18360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":89,\"hackDifficulty\":65.53250000000028,\"minDifficulty\":30,\"moneyAvailable\":3252463012,\"moneyMax\":39833353450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1195,\"serverGrowth\":92}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"47.2.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":29020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":29021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":29022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":29023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":25000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1525,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"24.3.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":28896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":28897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":28898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"stormtech\",\"moduleSequenceNumber\":28899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":82,\"hackDifficulty\":68.82487499999999,\"minDifficulty\":27,\"moneyAvailable\":139373917.35427684,\"moneyMax\":25519965375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":979,\"serverGrowth\":88}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"76.0.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":28874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":28875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":28876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"defcomm\",\"moduleSequenceNumber\":28877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":92,\"hackDifficulty\":94.65737500000002,\"minDifficulty\":31,\"moneyAvailable\":20768368138,\"moneyMax\":22366752950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":915,\"serverGrowth\":49}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"21.9.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":29064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":29065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":29066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"infocomm\",\"moduleSequenceNumber\":29067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":80,\"hackDifficulty\":34.812000000000005,\"minDifficulty\":27,\"moneyAvailable\":0,\"moneyMax\":20084414600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":886,\"serverGrowth\":74}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"95.9.0.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":256,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2622,\"ramUsage\":4,\"server\":\"helios\",\"threads\":64,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///5097e413-c4ff-4da2-a73b-65b991834180\",\"moduleSequenceNumber\":18374}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///13925bc3-a858-499f-8670-df0ef20f36a2\",\"moduleSequenceNumber\":1580}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":29078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///515635d5-3404-43ea-8089-937d373d180f\",\"moduleSequenceNumber\":609}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":29077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///d9798626-af95-4e79-93a4-632554fb8ca3\",\"moduleSequenceNumber\":685}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":29076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///5097e413-c4ff-4da2-a73b-65b991834180\",\"moduleSequenceNumber\":18374}],\"dependents\":[],\"ramUsage\":4,\"server\":\"helios\",\"moduleSequenceNumber\":18374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":36.97,\"minDifficulty\":30,\"moneyAvailable\":0,\"moneyMax\":15728428300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":816,\"serverGrowth\":73}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"63.2.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2609,\"ramUsage\":4,\"server\":\"vitalife\",\"threads\":4,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///a216dd32-74a2-47cd-9ebf-9af3854ee0c9\",\"moduleSequenceNumber\":18366}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///9b48c923-969a-4cc7-a027-fb68b2c7f13f\",\"moduleSequenceNumber\":2512}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":29026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///f9fc15a8-fe2c-48e5-8275-09883d9e5b15\",\"moduleSequenceNumber\":536}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":29025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///223ef5d2-fa9d-46f0-bb59-8264a4618439\",\"moduleSequenceNumber\":457}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":29024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///a216dd32-74a2-47cd-9ebf-9af3854ee0c9\",\"moduleSequenceNumber\":18366}],\"dependents\":[],\"ramUsage\":4,\"server\":\"vitalife\",\"moduleSequenceNumber\":18366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":91.92562500000001,\"minDifficulty\":30,\"moneyAvailable\":3919596330.4038067,\"moneyMax\":19611304125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":775,\"serverGrowth\":60}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"27.0.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":28952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":28953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":28954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"icarus\",\"moduleSequenceNumber\":28955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":90,\"hackDifficulty\":36.608000000000004,\"minDifficulty\":30,\"moneyAvailable\":0,\"moneyMax\":23802543225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":896,\"serverGrowth\":85}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"92.0.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2618,\"ramUsage\":4,\"server\":\"univ-energy\",\"threads\":8,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///0ea19d05-d281-484b-a86a-4c881998ca8b\",\"moduleSequenceNumber\":18372}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///fe2f9703-30a1-4127-b32b-0368d2aeca85\",\"moduleSequenceNumber\":751}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":29058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///f2d319f5-6223-464d-b2e5-77dc5a573d96\",\"moduleSequenceNumber\":2518}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":29059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///a6c39355-97f1-4873-9d18-300388e0af95\",\"moduleSequenceNumber\":458}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":29057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///0ea19d05-d281-484b-a86a-4c881998ca8b\",\"moduleSequenceNumber\":18372}],\"dependents\":[],\"ramUsage\":4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":18372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":88,\"hackDifficulty\":51.556625000000004,\"minDifficulty\":29,\"moneyAvailable\":73546895.08923715,\"moneyMax\":27862820500,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":893,\"serverGrowth\":90}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"72.3.3.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2569,\"ramUsage\":4,\"server\":\"titan-labs\",\"threads\":32,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///8bbdb005-ff22-48f1-b73c-8325460aa5a7\",\"moduleSequenceNumber\":18338}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///9662f6da-dff0-48f1-b0ea-6453d3f88f61\",\"moduleSequenceNumber\":2484}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":28888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///edf15a5e-c154-4fe1-88de-a36efb363d0f\",\"moduleSequenceNumber\":1368}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":28887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///973f750a-37c1-4605-8142-0201a88fd4aa\",\"moduleSequenceNumber\":752}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":28886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///8bbdb005-ff22-48f1-b73c-8325460aa5a7\",\"moduleSequenceNumber\":18338}],\"dependents\":[],\"ramUsage\":4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":18338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":71,\"hackDifficulty\":100,\"minDifficulty\":24,\"moneyAvailable\":13150166875.536228,\"moneyMax\":21056333350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":844,\"serverGrowth\":62}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"16.1.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.810000031575,\"pid\":2571,\"ramUsage\":4,\"server\":\"microdyne\",\"threads\":8,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///f806407a-ecf3-46a1-9210-a648094c8356\",\"moduleSequenceNumber\":18340}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///55af449b-8fec-421c-95fc-15367d381c8b\",\"moduleSequenceNumber\":2486}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":28891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///c282ca89-9cbd-4aa5-9a87-47839c0f8c77\",\"moduleSequenceNumber\":753}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":28890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///47b183b0-ca12-4e3e-b249-c3be83af0686\",\"moduleSequenceNumber\":460}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":28889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///f806407a-ecf3-46a1-9210-a648094c8356\",\"moduleSequenceNumber\":18340}],\"dependents\":[],\"ramUsage\":4,\"server\":\"microdyne\",\"moduleSequenceNumber\":18340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":67,\"hackDifficulty\":89.99112499999991,\"minDifficulty\":22,\"moneyAvailable\":8135764.436822542,\"moneyMax\":15576951950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":830,\"serverGrowth\":75}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"96.9.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":28960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":28961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":28962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":28963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":71,\"hackDifficulty\":57.58112499999998,\"minDifficulty\":24,\"moneyAvailable\":0,\"moneyMax\":21451817150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":892,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"84.2.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":28830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":28831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":28832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":28833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":55,\"hackDifficulty\":93.0975,\"minDifficulty\":18,\"moneyAvailable\":1901189665.3804057,\"moneyMax\":19381804750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":845,\"serverGrowth\":78}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"59.9.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":28855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":28856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":28857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":28858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":83,\"hackDifficulty\":100,\"minDifficulty\":28,\"moneyAvailable\":96305315.09576033,\"moneyMax\":29309672675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":924,\"serverGrowth\":63}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"21.8.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.810000031575,\"pid\":2591,\"ramUsage\":4,\"server\":\"omnia\",\"threads\":8,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///d3b33a3d-9a22-47e3-9fc8-b1d21b6652f2\",\"moduleSequenceNumber\":18356}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///db3155e1-3c25-4326-a8a2-35ddd1a40fc5\",\"moduleSequenceNumber\":2502}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":28947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///f3876f66-3554-4d58-9686-337f466f444a\",\"moduleSequenceNumber\":754}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":28946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///46b94f4a-a6cc-4a23-b74b-2b5fc843ba19\",\"moduleSequenceNumber\":461}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":28945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///d3b33a3d-9a22-47e3-9fc8-b1d21b6652f2\",\"moduleSequenceNumber\":18356}],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnia\",\"moduleSequenceNumber\":18356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":91,\"hackDifficulty\":38.748,\"minDifficulty\":30,\"moneyAvailable\":0,\"moneyMax\":22643560975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":912,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"26.1.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":28882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":28883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":28884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-def\",\"moduleSequenceNumber\":28885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":58,\"hackDifficulty\":86.40149999999998,\"minDifficulty\":19,\"moneyAvailable\":26213210600,\"moneyMax\":26213210600,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":776,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"78.9.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":29072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":29073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":29074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":29075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":54.749499999999955,\"minDifficulty\":21,\"moneyAvailable\":44901617.10123062,\"moneyMax\":18682406300,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":834,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"76.0.0.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.810000031575,\"pid\":2575,\"ramUsage\":4,\"server\":\"solaris\",\"threads\":16,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///85d69012-2616-4538-95fa-5e06ab0a8b9a\",\"moduleSequenceNumber\":18342}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///42d33380-51c4-46d4-8110-8170af8031dd\",\"moduleSequenceNumber\":2005}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":28910,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///b58b3089-8c4d-4df6-bf70-729a7605a9b5\",\"moduleSequenceNumber\":755}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":28909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///1d8e6161-249b-4439-b04e-89475309931f\",\"moduleSequenceNumber\":462}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":28908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///85d69012-2616-4538-95fa-5e06ab0a8b9a\",\"moduleSequenceNumber\":18342}],\"dependents\":[],\"ramUsage\":4,\"server\":\"solaris\",\"moduleSequenceNumber\":18342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":80,\"hackDifficulty\":81.258,\"minDifficulty\":27,\"moneyAvailable\":50371444.213544935,\"moneyMax\":22311881600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":811,\"serverGrowth\":73}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"73.9.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":28863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":28864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":28865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"deltaone\",\"moduleSequenceNumber\":28866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":77,\"hackDifficulty\":58.466249999999995,\"minDifficulty\":26,\"moneyAvailable\":44380.83809544146,\"moneyMax\":38350475325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":863,\"serverGrowth\":63}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"47.4.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2629,\"ramUsage\":4,\"server\":\"global-pharm\",\"threads\":4,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///189bfb4c-a593-457a-9c89-d4069dcbbf6f\",\"moduleSequenceNumber\":18380}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///3bb742db-707a-4aaa-b69a-253ba0f525fa\",\"moduleSequenceNumber\":543}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":29094,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///63fa51dc-b0dc-44c9-99b6-51ac4c8c5eff\",\"moduleSequenceNumber\":2526}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":29095,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///9ea6b203-1d36-4b62-b934-9ed58f2b38fc\",\"moduleSequenceNumber\":463}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":29093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///189bfb4c-a593-457a-9c89-d4069dcbbf6f\",\"moduleSequenceNumber\":18380}],\"dependents\":[],\"ramUsage\":4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":18380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":45.44374999999995,\"minDifficulty\":25,\"moneyAvailable\":31597319136.570244,\"moneyMax\":43160499300,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":827,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"61.5.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":28904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":28905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":28906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nova-med\",\"moduleSequenceNumber\":28907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":66,\"hackDifficulty\":40.69062500000001,\"minDifficulty\":22,\"moneyAvailable\":338108.5758891496,\"moneyMax\":27958693050,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":839,\"serverGrowth\":69}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"70.0.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":29083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":29084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":29085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":29086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":77,\"hackDifficulty\":94.66100000000002,\"minDifficulty\":26,\"moneyAvailable\":34155861550,\"moneyMax\":34155861550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":813,\"serverGrowth\":70}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"34.9.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2565,\"ramUsage\":4,\"server\":\"unitalife\",\"threads\":4,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///af749fd9-d69a-4e3e-9ab6-e3a6d3840da4\",\"moduleSequenceNumber\":18336}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///3f1f0ccf-b276-4d51-9e23-805a21bcdca1\",\"moduleSequenceNumber\":521}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":28868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///e0e54237-794f-4828-aa24-f9cd1e60eb6a\",\"moduleSequenceNumber\":2482}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":28869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///4ee97290-73e2-4a92-a426-16f13c2f55b6\",\"moduleSequenceNumber\":464}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":28867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///af749fd9-d69a-4e3e-9ab6-e3a6d3840da4\",\"moduleSequenceNumber\":18336}],\"dependents\":[],\"ramUsage\":4,\"server\":\"unitalife\",\"moduleSequenceNumber\":18336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":79,\"hackDifficulty\":36.29199999999998,\"minDifficulty\":26,\"moneyAvailable\":0,\"moneyMax\":25584617525,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":792,\"serverGrowth\":80}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"47.0.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2561,\"ramUsage\":4,\"server\":\"lexo-corp\",\"threads\":8,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///a7abf1ef-a1fd-4f1e-a87f-0f52805507e0\",\"moduleSequenceNumber\":18334}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///671c18b7-84c1-4875-af53-e8a30c718ccc\",\"moduleSequenceNumber\":756}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":28849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///215c6cbb-2fdb-44a9-8f22-38d68587e4ee\",\"moduleSequenceNumber\":2480}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":28850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///a232cc55-c0d5-4899-9dd4-d268031ae1a3\",\"moduleSequenceNumber\":465}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":28848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///a7abf1ef-a1fd-4f1e-a87f-0f52805507e0\",\"moduleSequenceNumber\":18334}],\"dependents\":[],\"ramUsage\":4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":18334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":77,\"hackDifficulty\":93.292,\"minDifficulty\":26,\"moneyAvailable\":19088989825,\"moneyMax\":19088989825,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":672,\"serverGrowth\":57}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"61.9.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2627,\"ramUsage\":4,\"server\":\"rho-construction\",\"threads\":8,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///14ff0e81-31e1-4b28-b607-55e8ca5e7cf4\",\"moduleSequenceNumber\":18378}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///b1fc1ae9-f5b2-4d0f-8eff-d231ce4ce769\",\"moduleSequenceNumber\":757}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":29091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///c5aed66f-7bb5-4f3e-ba38-b9fdef792bda\",\"moduleSequenceNumber\":466}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":29090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///4ec80325-6e70-494b-8f42-c7977f3e20c9\",\"moduleSequenceNumber\":2524}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":29092,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///14ff0e81-31e1-4b28-b607-55e8ca5e7cf4\",\"moduleSequenceNumber\":18378}],\"dependents\":[],\"ramUsage\":4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":18378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"catalyst\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":55,\"hackDifficulty\":31.37099999999997,\"minDifficulty\":18,\"moneyAvailable\":0,\"moneyMax\":14538860750,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":518,\"serverGrowth\":48}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"33.2.3.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2553,\"ramUsage\":4,\"server\":\"alpha-ent\",\"threads\":8,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///1dc2a0be-6aea-44f2-b773-c1336dcc4675\",\"moduleSequenceNumber\":18328}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///2a6adde3-fd49-41a1-9c84-a79ba53602da\",\"moduleSequenceNumber\":758}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":28824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///2f55bc05-cd8f-4699-a784-2dcc09ae6ad6\",\"moduleSequenceNumber\":2474}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":28825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///6fe14aed-400c-4d01-b566-c89c81e92779\",\"moduleSequenceNumber\":467}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":28823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///1dc2a0be-6aea-44f2-b773-c1336dcc4675\",\"moduleSequenceNumber\":18328}],\"dependents\":[],\"ramUsage\":4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":18328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":68,\"hackDifficulty\":100,\"minDifficulty\":23,\"moneyAvailable\":17866705375,\"moneyMax\":17866705375,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":541,\"serverGrowth\":59}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"35.3.6.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2633,\"ramUsage\":4,\"server\":\"aevum-police\",\"threads\":16,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///6ab8c2ef-30be-4d20-b817-d47fbcbb77a7\",\"moduleSequenceNumber\":18384}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///339dce58-1491-4a62-950c-73b5c1cdd37d\",\"moduleSequenceNumber\":759}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":29100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///81d5a39f-1f0d-4e6a-9fb8-87a24edf45ba\",\"moduleSequenceNumber\":2530}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":29101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///2fadddf1-839d-458f-a546-bd16ec483c66\",\"moduleSequenceNumber\":468}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":29099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///6ab8c2ef-30be-4d20-b817-d47fbcbb77a7\",\"moduleSequenceNumber\":18384}],\"dependents\":[],\"ramUsage\":4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":18384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":26.297999999999984,\"minDifficulty\":25,\"moneyAvailable\":0,\"moneyMax\":9391205150,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":409,\"serverGrowth\":32}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"86.7.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.810000031575,\"pid\":2586,\"ramUsage\":4,\"server\":\"rothman-uni\",\"threads\":8,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///e0241edf-6fac-4a29-82d7-5623d8c721f6\",\"moduleSequenceNumber\":18352}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///6ff9c6ea-d4bf-4d4e-b0f5-ad0c07e3cfa1\",\"moduleSequenceNumber\":760}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":28932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///85e68636-fcb3-4f79-b3ff-7f99e87176e9\",\"moduleSequenceNumber\":469}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":28931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///31cc8c07-412c-4316-a305-47cbf1d5d15b\",\"moduleSequenceNumber\":2498}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":28933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///e0241edf-6fac-4a29-82d7-5623d8c721f6\",\"moduleSequenceNumber\":18352}],\"dependents\":[],\"ramUsage\":4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":18352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"the-hub\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":54,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":0,\"moneyMax\":4405033950,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":371,\"serverGrowth\":43}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"37.4.8.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2551,\"ramUsage\":4,\"server\":\"zb-institute\",\"threads\":32,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///bfda5ee1-efbf-449c-8d3b-f9c0bd306cce\",\"moduleSequenceNumber\":18326}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///2662df6d-7a6d-4baa-b335-aa4018169365\",\"moduleSequenceNumber\":5147}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":28822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///406996ed-911c-451a-934d-8fff392de09f\",\"moduleSequenceNumber\":605}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":28821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///1d7c9af9-1063-4718-8cf2-ce9d105b6846\",\"moduleSequenceNumber\":761}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":28820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///bfda5ee1-efbf-449c-8d3b-f9c0bd306cce\",\"moduleSequenceNumber\":18326}],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":18326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":81,\"hackDifficulty\":55.72999999999996,\"minDifficulty\":27,\"moneyAvailable\":16573885787.513592,\"moneyMax\":23435314725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":762,\"serverGrowth\":76}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"78.7.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2559,\"ramUsage\":4,\"server\":\"summit-uni\",\"threads\":8,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///6187e97c-94d2-4df9-baa0-4c512d9a108e\",\"moduleSequenceNumber\":18332}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///6f0f1390-61a7-432f-9ad2-cd173e01be5c\",\"moduleSequenceNumber\":762}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":28846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///6cfc8547-72bb-4380-9886-75b7aa588aea\",\"moduleSequenceNumber\":471}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":28845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///ef1a0d3f-6b02-4d18-b9ac-1b942794b29f\",\"moduleSequenceNumber\":2478}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":28847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///6187e97c-94d2-4df9-baa0-4c512d9a108e\",\"moduleSequenceNumber\":18332}],\"dependents\":[],\"ramUsage\":4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":18332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":51,\"hackDifficulty\":78.18912499999993,\"minDifficulty\":17,\"moneyAvailable\":7205492700,\"moneyMax\":7205492700,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":429,\"serverGrowth\":56}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"18.3.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":28805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":28806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":28807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"syscore\",\"moduleSequenceNumber\":28808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":63,\"hackDifficulty\":82.62262499999989,\"minDifficulty\":21,\"moneyAvailable\":209424994.04767135,\"moneyMax\":13601424450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":603,\"serverGrowth\":65}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"73.4.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2625,\"ramUsage\":4,\"server\":\"catalyst\",\"threads\":8,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///77a46ac6-d406-404b-b838-c72d6ca8504e\",\"moduleSequenceNumber\":18376}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///d60c1a61-e09e-4772-9b8d-1223c3c620a1\",\"moduleSequenceNumber\":763}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":29088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///d1e13914-def1-4400-9c67-c07d49a07c36\",\"moduleSequenceNumber\":472}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":29087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///545eeafd-de6b-4755-9f10-9f5e1fef721f\",\"moduleSequenceNumber\":2522}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":29089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///77a46ac6-d406-404b-b838-c72d6ca8504e\",\"moduleSequenceNumber\":18376}],\"dependents\":[],\"ramUsage\":4,\"server\":\"catalyst\",\"moduleSequenceNumber\":18376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":65,\"hackDifficulty\":22.679999999999996,\"minDifficulty\":22,\"moneyAvailable\":0,\"moneyMax\":12434532150,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":449,\"serverGrowth\":51}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"91.8.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.810000031575,\"pid\":2584,\"ramUsage\":4,\"server\":\"the-hub\",\"threads\":4,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///399d0753-31d9-44ac-9212-400c60ba3832\",\"moduleSequenceNumber\":18350}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///f9c45ad6-4205-4aed-84e4-7e2f7480238e\",\"moduleSequenceNumber\":528}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":28929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///25d3b1f8-78d8-4fd6-98d1-4133090b92da\",\"moduleSequenceNumber\":473}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":28928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///9eb809ee-991c-4687-badd-42a2eb0303cd\",\"moduleSequenceNumber\":2496}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":28930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///399d0753-31d9-44ac-9212-400c60ba3832\",\"moduleSequenceNumber\":18350}],\"dependents\":[],\"ramUsage\":4,\"server\":\"the-hub\",\"moduleSequenceNumber\":18350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":99.35987499999996,\"minDifficulty\":15,\"moneyAvailable\":637586699.5136921,\"moneyMax\":4076520325,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":303,\"serverGrowth\":47}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"44.2.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":28841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":28842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":28843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"comptek\",\"moduleSequenceNumber\":28844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":65,\"hackDifficulty\":59.223375,\"minDifficulty\":22,\"moneyAvailable\":2392221.483154595,\"moneyMax\":5541223300,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":319,\"serverGrowth\":62}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"59.5.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2545,\"ramUsage\":4,\"server\":\"netlink\",\"threads\":16,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///5290c03b-3186-4f6c-8cfd-e2609e123e51\",\"moduleSequenceNumber\":18322}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///64dfbdad-367e-42ba-865e-685942b68c38\",\"moduleSequenceNumber\":764}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":28799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///95ce11bf-4975-47f1-94dc-3cfb3ce1d9a7\",\"moduleSequenceNumber\":474}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":28798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///d37fa8e8-7d80-4bd4-bce0-aa91ae4922f0\",\"moduleSequenceNumber\":1943}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":28800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///5290c03b-3186-4f6c-8cfd-e2609e123e51\",\"moduleSequenceNumber\":18322}],\"dependents\":[],\"ramUsage\":4,\"server\":\"netlink\",\"moduleSequenceNumber\":18322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":79,\"hackDifficulty\":84.29424999999999,\"minDifficulty\":26,\"moneyAvailable\":2727951042,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":416,\"serverGrowth\":47}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"68.7.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":28915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":28916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":28917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":28918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":1869188625,\"moneyMax\":1869188625,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":262,\"serverGrowth\":38}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"69.6.6.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.210000031584,\"pid\":2521,\"ramUsage\":4,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///6f7e6859-23e9-4e11-aa32-611359481161\",\"moduleSequenceNumber\":18300}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///f13c21a7-c3be-4fa7-ab84-54249d21011d\",\"moduleSequenceNumber\":735}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":28765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///3758419d-5eea-40cc-8500-8c07a8c46296\",\"moduleSequenceNumber\":847}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":28766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///ea353da0-425e-4235-9bff-231359ef6b66\",\"moduleSequenceNumber\":686}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":28767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///6f7e6859-23e9-4e11-aa32-611359481161\",\"moduleSequenceNumber\":18300}],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":18300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":9.092874999999967,\"minDifficulty\":1,\"moneyAvailable\":4984,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"98.1.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2525,\"ramUsage\":4,\"server\":\"foodnstuff\",\"threads\":4,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///44d42272-ef22-4e85-bdfb-a80fa032f9a4\",\"moduleSequenceNumber\":18302}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///75b9c9b6-8df8-48b1-9d8c-2de557432fe6\",\"moduleSequenceNumber\":504}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":28769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///b2aa6d5f-919b-47a4-b6fc-4665a35a60b0\",\"moduleSequenceNumber\":475}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":28768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///a382089e-55bd-4625-8de0-fb80a6d91c44\",\"moduleSequenceNumber\":1941}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":28770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///44d42272-ef22-4e85-bdfb-a80fa032f9a4\",\"moduleSequenceNumber\":18302}],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":18302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":99.25612500000034,\"minDifficulty\":3,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"78.0.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2531,\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"threads\":4,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///a94a8e15-e7b3-4396-80a5-dfae054ea431\",\"moduleSequenceNumber\":18308}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///f806f765-c84c-4be9-88e2-c8c78abe08e9\",\"moduleSequenceNumber\":507}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":28778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///026f944c-685d-40e6-a0be-0de5b8d246ef\",\"moduleSequenceNumber\":476}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":28777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///a09764c3-1bc0-4bc5-97dd-1555c0cdc9b0\",\"moduleSequenceNumber\":2454}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":28779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///a94a8e15-e7b3-4396-80a5-dfae054ea431\",\"moduleSequenceNumber\":18308}],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":18308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":5.236,\"minDifficulty\":3,\"moneyAvailable\":0,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"82.0.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2535,\"ramUsage\":4,\"server\":\"joesguns\",\"threads\":4,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///4422159f-3409-4aa7-bf6b-2f35695eacc1\",\"moduleSequenceNumber\":18312}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///6966d4e6-f741-497c-aeba-e36d2be51646\",\"moduleSequenceNumber\":509}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":28784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///85303c5a-0a72-4258-9210-5df74444f3f8\",\"moduleSequenceNumber\":477}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":28783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///ee9437a7-f731-4c83-b940-07126a4792b6\",\"moduleSequenceNumber\":2458}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":28785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///4422159f-3409-4aa7-bf6b-2f35695eacc1\",\"moduleSequenceNumber\":18312}],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":18312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":98.49112500000011,\"minDifficulty\":5,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"27.4.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2533,\"ramUsage\":4,\"server\":\"zer0\",\"threads\":8,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///59ef48e7-36f8-4cb9-af6c-12f19974e3df\",\"moduleSequenceNumber\":18310}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///1b4e3d39-9f73-41f8-9726-8acaa962c493\",\"moduleSequenceNumber\":766}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":28781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///d45ebf74-0efa-44de-a5fa-26e582f41e0a\",\"moduleSequenceNumber\":478}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":28780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///3c01e1f7-d975-4c54-beae-4491bea3ba36\",\"moduleSequenceNumber\":724}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":28782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///59ef48e7-36f8-4cb9-af6c-12f19974e3df\",\"moduleSequenceNumber\":18310}],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":18310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":32.19362499999998,\"minDifficulty\":8,\"moneyAvailable\":6563.38001708583,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"50.8.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2527,\"ramUsage\":4,\"server\":\"nectar-net\",\"threads\":4,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///39bfd651-76bb-4a82-8bf9-d15a23465f38\",\"moduleSequenceNumber\":18304}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///19d94944-3678-4fa4-8724-9f85e48927dd\",\"moduleSequenceNumber\":505}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":28772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///9fb4e8f6-38f1-4796-9eec-2115ce40774f\",\"moduleSequenceNumber\":479}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":28771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///4df4687f-0625-46d0-bf9d-ec4510d7a6b8\",\"moduleSequenceNumber\":1942}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":28773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///39bfd651-76bb-4a82-8bf9-d15a23465f38\",\"moduleSequenceNumber\":18304}],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":18304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":99.10375000000012,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"52.2.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2543,\"ramUsage\":4,\"server\":\"neo-net\",\"threads\":8,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///843049b0-fda9-45a1-ade9-67128bc36c3a\",\"moduleSequenceNumber\":18320}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///49bc9e8e-137c-4a7e-80bd-70e933a9aea0\",\"moduleSequenceNumber\":767}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":28796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///fde6e615-8842-4fca-8a5c-68fce474e0da\",\"moduleSequenceNumber\":480}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":28795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///1cafe93a-77a3-4453-aae7-4a6560e0f833\",\"moduleSequenceNumber\":615}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":28797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///843049b0-fda9-45a1-ade9-67128bc36c3a\",\"moduleSequenceNumber\":18320}],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":18320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":42.42062499999987,\"minDifficulty\":8,\"moneyAvailable\":23519035.1232137,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"94.4.0.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.810000031575,\"pid\":2582,\"ramUsage\":4,\"server\":\"silver-helix\",\"threads\":16,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///0ed027f5-4567-4f0f-a984-db5a6745de81\",\"moduleSequenceNumber\":18348}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///9eeaec64-01d8-40c8-9685-7649c4ab0fe4\",\"moduleSequenceNumber\":768}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":28926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///65567fe7-5808-461d-b2a5-1a13a1d858ea\",\"moduleSequenceNumber\":481}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":28925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///0cc1a8d6-da86-4ee9-9f7d-ae0335cdaa21\",\"moduleSequenceNumber\":1506}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":28927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///0ed027f5-4567-4f0f-a984-db5a6745de81\",\"moduleSequenceNumber\":18348}],\"dependents\":[],\"ramUsage\":4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":18348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":63.971875,\"minDifficulty\":10,\"moneyAvailable\":4481665.0929684695,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"73.6.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2537,\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"threads\":4,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///468d4d62-2b87-4064-9aa3-32bfc1b2f419\",\"moduleSequenceNumber\":18314}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///8510a030-ab4a-44f7-bf7d-3e77d499cd53\",\"moduleSequenceNumber\":510}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":28787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///29bd6457-af09-421a-b1e8-e542e2e5810d\",\"moduleSequenceNumber\":482}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":28786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///3709bf15-2e5b-4ba9-93a3-ee4da79247b9\",\"moduleSequenceNumber\":2460}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":28788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///468d4d62-2b87-4064-9aa3-32bfc1b2f419\",\"moduleSequenceNumber\":18314}],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":18314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":99.38750000000003,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"58.1.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2539,\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"threads\":4,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///4e92b52b-ce31-47e6-9d95-3c19482ba57d\",\"moduleSequenceNumber\":18316}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///711e71d7-ff3b-42fa-b6b4-a562b2699178\",\"moduleSequenceNumber\":511}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":28790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///f4eb527e-fab6-4ce6-8d3d-631e1e231165\",\"moduleSequenceNumber\":483}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":28789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///2c5f4221-623c-4333-a093-4abad41b69e8\",\"moduleSequenceNumber\":2462}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":28791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///4e92b52b-ce31-47e6-9d95-3c19482ba57d\",\"moduleSequenceNumber\":18316}],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":18316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":99.62512500000003,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"90.0.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2529,\"ramUsage\":4,\"server\":\"phantasy\",\"threads\":8,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///fa710793-2fe4-4e0d-a9bc-555f0495e359\",\"moduleSequenceNumber\":18306}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///fd912a94-cbf2-439b-91c7-6bf7794710af\",\"moduleSequenceNumber\":769}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":28775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///286554df-cdec-4ccb-8014-f8e750342ca0\",\"moduleSequenceNumber\":484}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":28774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///bc98ebd0-540c-45ab-b65a-bee0b9a2e794\",\"moduleSequenceNumber\":723}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":28776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///fa710793-2fe4-4e0d-a9bc-555f0495e359\",\"moduleSequenceNumber\":18306}],\"dependents\":[],\"ramUsage\":4,\"server\":\"phantasy\",\"moduleSequenceNumber\":18306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":68.96499999999997,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"3.8.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.810000031575,\"pid\":2580,\"ramUsage\":4,\"server\":\"max-hardware\",\"threads\":8,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///b4ad6587-d969-427f-a3f4-0bc76d39d3f8\",\"moduleSequenceNumber\":18346}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///c5088432-5921-4cda-933a-78b08e42a156\",\"moduleSequenceNumber\":770}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":28923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///9a003506-4f8c-4d74-acbb-c4d13d274675\",\"moduleSequenceNumber\":485}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":28922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///f65cee11-de25-424c-a2a4-b93601b2b34b\",\"moduleSequenceNumber\":2492}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":28924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///b4ad6587-d969-427f-a3f4-0bc76d39d3f8\",\"moduleSequenceNumber\":18346}],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":18346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":8.325999999999999,\"minDifficulty\":5,\"moneyAvailable\":71964.28020651959,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"38.2.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2556,\"ramUsage\":4,\"server\":\"omega-net\",\"threads\":8,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///9255a19f-cb51-40ee-a435-bbc1af622522\",\"moduleSequenceNumber\":18330}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///1b94564e-c493-41a4-955a-6ed324a050a3\",\"moduleSequenceNumber\":771}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":28835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///71420c31-f37c-4cc9-8a93-eadae5a0d8bf\",\"moduleSequenceNumber\":486}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":28834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///b68c2e90-27ba-4afe-a653-6c2654cb62c7\",\"moduleSequenceNumber\":2476}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":28836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///9255a19f-cb51-40ee-a435-bbc1af622522\",\"moduleSequenceNumber\":18330}],\"dependents\":[],\"ramUsage\":4,\"server\":\"omega-net\",\"moduleSequenceNumber\":18330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":35,\"hackDifficulty\":17.524,\"minDifficulty\":12,\"moneyAvailable\":1731588950,\"moneyMax\":1731588950,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":209,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"72.7.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":28813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":28814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":28815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":28816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":44,\"hackDifficulty\":29.67199999999999,\"minDifficulty\":15,\"moneyAvailable\":0,\"moneyMax\":1121252500,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":237,\"serverGrowth\":28}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"94.5.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.810000031575,\"pid\":2578,\"ramUsage\":4,\"server\":\"iron-gym\",\"threads\":8,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///65d629f8-e8ad-461d-975e-53e8239f77b9\",\"moduleSequenceNumber\":18344}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///15dedf61-bee2-448d-8b23-badae21090d7\",\"moduleSequenceNumber\":772}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":28920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///a318a80b-d226-4a21-97ae-45940316bf6e\",\"moduleSequenceNumber\":487}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":28919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///ecd00539-7e9d-4a5e-8b73-987b01b56afc\",\"moduleSequenceNumber\":2490}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":28921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///65d629f8-e8ad-461d-975e-53e8239f77b9\",\"moduleSequenceNumber\":18344}],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":18344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":71.42712499999996,\"minDifficulty\":10,\"moneyAvailable\":9655783.882448152,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"11.2.0.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":256,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.810000031575,\"pid\":2588,\"ramUsage\":4,\"server\":\"millenium-fitness\",\"threads\":64,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///669fcc5e-6bce-4a01-b466-ec366523bcf5\",\"moduleSequenceNumber\":18354}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///77c60de9-07cf-487e-8c11-ac7eebe09b0b\",\"moduleSequenceNumber\":650}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":28935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///0397e1a4-d952-47fd-bf76-2e6a870a34cf\",\"moduleSequenceNumber\":687}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":28934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///b8487769-c105-47a1-b3dd-b0115217abdb\",\"moduleSequenceNumber\":1813}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":28936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///669fcc5e-6bce-4a01-b466-ec366523bcf5\",\"moduleSequenceNumber\":18354}],\"dependents\":[],\"ramUsage\":4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":18354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":51,\"hackDifficulty\":67.04887499999998,\"minDifficulty\":17,\"moneyAvailable\":557904900,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":517,\"serverGrowth\":38}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"56.2.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.810000031575,\"pid\":2603,\"ramUsage\":4,\"server\":\"powerhouse-fitness\",\"threads\":4,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///7574bfe8-2e95-49d6-a37f-553f7570b18c\",\"moduleSequenceNumber\":18364}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///10ec4c4a-330c-44a3-946c-6fe546056401\",\"moduleSequenceNumber\":2510}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":28991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///1ccd1b98-229e-4247-9e60-02f33f21a4ed\",\"moduleSequenceNumber\":535}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":28990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///3e744da7-3e20-4323-baf9-0b8099453725\",\"moduleSequenceNumber\":489}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":28989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///7574bfe8-2e95-49d6-a37f-553f7570b18c\",\"moduleSequenceNumber\":18364}],\"dependents\":[],\"ramUsage\":4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":18364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":56,\"hackDifficulty\":100,\"minDifficulty\":19,\"moneyAvailable\":22500000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1029,\"serverGrowth\":54}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"57.1.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":28941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":28942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":28943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":28944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":48,\"hackDifficulty\":27.43199999999996,\"minDifficulty\":16,\"moneyAvailable\":11250000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":721,\"serverGrowth\":50}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"4.9.6.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.810000031575,\"pid\":2595,\"ramUsage\":4,\"server\":\"run4theh111z\",\"threads\":32,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///b8a07141-63ca-45ec-81e0-a016565355b9\",\"moduleSequenceNumber\":18358}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///f5f18bae-cc00-482e-8bbe-c41b21462f39\",\"moduleSequenceNumber\":1377}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":28965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///c7160e71-f76d-45de-baf5-b542ac75721d\",\"moduleSequenceNumber\":2504}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":28966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///13a37f71-9003-47bb-8e52-7af8e2061a2a\",\"moduleSequenceNumber\":775}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":28964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///b8a07141-63ca-45ec-81e0-a016565355b9\",\"moduleSequenceNumber\":18358}],\"dependents\":[],\"ramUsage\":4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":18358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":542,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"86.0.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2631,\"ramUsage\":4,\"server\":\"I.I.I.I\",\"threads\":8,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///5ea0ffd5-46a7-46b1-9cea-587b121b93b5\",\"moduleSequenceNumber\":18382}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///690026a3-2629-4f32-9b31-7aa399cfc092\",\"moduleSequenceNumber\":776}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":29097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///ea827565-33cf-45ad-bedc-0e78a2700959\",\"moduleSequenceNumber\":491}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":29096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///03219f9d-9a9e-4dec-92d6-87e55dd96b2e\",\"moduleSequenceNumber\":2528}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":29098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///5ea0ffd5-46a7-46b1-9cea-587b121b93b5\",\"moduleSequenceNumber\":18382}],\"dependents\":[],\"ramUsage\":4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":18382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":340,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"28.8.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2549,\"ramUsage\":4,\"server\":\"avmnite-02h\",\"threads\":4,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///084d5652-b9f9-4443-b035-96b6053617ae\",\"moduleSequenceNumber\":18324}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///63731782-4db0-41f2-8c3a-c074230c0a56\",\"moduleSequenceNumber\":515}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":28818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///0555973c-8a0f-48db-9e41-b953a4683d2c\",\"moduleSequenceNumber\":492}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":28817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///1d879c23-4a06-412b-954f-48086d62be27\",\"moduleSequenceNumber\":2470}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":28819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///084d5652-b9f9-4443-b035-96b6053617ae\",\"moduleSequenceNumber\":18324}],\"dependents\":[],\"ramUsage\":4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":18324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":207,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"58.5.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2613,\"ramUsage\":4,\"server\":\".\",\"threads\":4,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///c4648153-1bfe-431d-bf82-4e27c1c84efb\",\"moduleSequenceNumber\":18368}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///663cd3b2-58bd-43ea-b59a-2b3dc608510f\",\"moduleSequenceNumber\":537}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":29044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///492d8d52-6433-4e23-9c7c-8205b010daa0\",\"moduleSequenceNumber\":2514}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":29045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///24dd66f8-4de5-4329-a6f8-d0424a6adff1\",\"moduleSequenceNumber\":493}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":29043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///c4648153-1bfe-431d-bf82-4e27c1c84efb\",\"moduleSequenceNumber\":18368}],\"dependents\":[],\"ramUsage\":4,\"server\":\".\",\"moduleSequenceNumber\":18368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"vitalife\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":507,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"46.0.3.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38816.01000003158,\"pid\":2541,\"ramUsage\":4,\"server\":\"CSEC\",\"threads\":2,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///fe64a513-a29d-40c0-9953-19201c3f1321\",\"moduleSequenceNumber\":18318}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///5ffd6eeb-af5b-4f18-9abb-26ebacfb1823\",\"moduleSequenceNumber\":512}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":28793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///8eb2ad6f-6a74-4109-bbed-60009b9952cb\",\"moduleSequenceNumber\":494}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":28792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///1eacf5d1-401b-4067-92fd-e8bac02cff9f\",\"moduleSequenceNumber\":2464}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":28794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///fe64a513-a29d-40c0-9953-19201c3f1321\",\"moduleSequenceNumber\":18318}],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":18318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"40.1.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":29053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":29054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":29055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":29056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"52.8.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"98.4.2.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":29106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":29107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":29108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"darkweb\",\"moduleSequenceNumber\":29109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"72.8.7.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2636,\"ramUsage\":4,\"server\":\"pserv-0\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///6dd8739f-8ace-4eb6-b739-6b25742e75ac\",\"moduleSequenceNumber\":18386}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///95074bf1-8852-41c3-81da-bc54f6bbe8e0\",\"moduleSequenceNumber\":737}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"moduleSequenceNumber\":29111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///741fb458-a5ab-4297-942e-076d6f4103d5\",\"moduleSequenceNumber\":777}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"moduleSequenceNumber\":29112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///053b289d-c157-402a-9c4e-e2174f9def00\",\"moduleSequenceNumber\":767}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-0\",\"moduleSequenceNumber\":29110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///6dd8739f-8ace-4eb6-b739-6b25742e75ac\",\"moduleSequenceNumber\":18386}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-0\",\"moduleSequenceNumber\":18386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"13.7.3.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2638,\"ramUsage\":4,\"server\":\"pserv-1\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///50435e4b-fe14-4b75-8671-7d43d9027863\",\"moduleSequenceNumber\":18388}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///70308160-e010-414e-9cda-03b014764d43\",\"moduleSequenceNumber\":863}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"moduleSequenceNumber\":29114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///3e5de135-5536-4a13-ae36-e0c0a51a743b\",\"moduleSequenceNumber\":869}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"moduleSequenceNumber\":29115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///29b374e3-cd30-4612-a39f-52d537be8190\",\"moduleSequenceNumber\":861}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1\",\"moduleSequenceNumber\":29113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///50435e4b-fe14-4b75-8671-7d43d9027863\",\"moduleSequenceNumber\":18388}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1\",\"moduleSequenceNumber\":18388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"72.5.3.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2640,\"ramUsage\":4,\"server\":\"pserv-2\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///0443aff0-66b3-419c-afbc-38b421b2f213\",\"moduleSequenceNumber\":18390}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///22afdfaa-5c02-4888-9ca5-dbf1bcd1a196\",\"moduleSequenceNumber\":955}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"moduleSequenceNumber\":29117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///c3676c32-4634-4266-a9f1-27a26ac10af0\",\"moduleSequenceNumber\":960}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"moduleSequenceNumber\":29118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///e58f49bb-08ba-4643-a338-31515cdbf4e2\",\"moduleSequenceNumber\":953}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-2\",\"moduleSequenceNumber\":29116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///0443aff0-66b3-419c-afbc-38b421b2f213\",\"moduleSequenceNumber\":18390}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-2\",\"moduleSequenceNumber\":18390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"29.6.1.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2642,\"ramUsage\":4,\"server\":\"pserv-3\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///6ee4eb79-58cd-49a0-991b-3571fa01ddf5\",\"moduleSequenceNumber\":18392}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///999abd87-14bc-46a2-9bde-2956a1a103fa\",\"moduleSequenceNumber\":1049}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"moduleSequenceNumber\":29121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///56fad58f-8e4a-438a-ac24-97367a929b69\",\"moduleSequenceNumber\":1044}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-3\",\"moduleSequenceNumber\":29119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///22e45609-c8f1-4a0d-9d31-80207c019ab9\",\"moduleSequenceNumber\":1046}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"moduleSequenceNumber\":29120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///6ee4eb79-58cd-49a0-991b-3571fa01ddf5\",\"moduleSequenceNumber\":18392}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-3\",\"moduleSequenceNumber\":18392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"11.9.9.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2644,\"ramUsage\":4,\"server\":\"pserv-4\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///42f2193e-7ae8-4bb0-a8d7-83885764dbce\",\"moduleSequenceNumber\":18394}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///a931775f-5fad-4634-aeec-a71c32c5bdbf\",\"moduleSequenceNumber\":1138}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"moduleSequenceNumber\":29124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///bac3d417-bceb-4aa2-a562-bdda84a3b259\",\"moduleSequenceNumber\":1133}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4\",\"moduleSequenceNumber\":29122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///a00f6114-5020-408b-8bfa-60dd62ffca97\",\"moduleSequenceNumber\":1135}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"moduleSequenceNumber\":29123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///42f2193e-7ae8-4bb0-a8d7-83885764dbce\",\"moduleSequenceNumber\":18394}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4\",\"moduleSequenceNumber\":18394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"25.1.0.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2646,\"ramUsage\":4,\"server\":\"pserv-5\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///a5eebde3-9a86-4c63-8969-8fea8eaa07b4\",\"moduleSequenceNumber\":18396}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///233063c2-c483-44e4-9291-b94d89842cb3\",\"moduleSequenceNumber\":1225}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"moduleSequenceNumber\":29127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///e4647183-72d4-414f-869b-edb18c852a0e\",\"moduleSequenceNumber\":1222}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-5\",\"moduleSequenceNumber\":29125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///a514a445-e6da-4c40-bbf5-a30f88116d1a\",\"moduleSequenceNumber\":1224}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"moduleSequenceNumber\":29126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///a5eebde3-9a86-4c63-8969-8fea8eaa07b4\",\"moduleSequenceNumber\":18396}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-5\",\"moduleSequenceNumber\":18396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"24.3.4.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.61000003158,\"pid\":2648,\"ramUsage\":4,\"server\":\"pserv-6\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///bdd6e8e3-2a2c-4fb5-8a88-e64310a89d7b\",\"moduleSequenceNumber\":18398}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///0f0c9c2b-c373-43e0-90d7-2627df1fdc44\",\"moduleSequenceNumber\":19209}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"moduleSequenceNumber\":29130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///550a2c43-e086-4031-b569-f4dc82de156c\",\"moduleSequenceNumber\":1311}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-6\",\"moduleSequenceNumber\":29128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///404ddaa2-1d45-45bb-a913-000dfa7f3eb8\",\"moduleSequenceNumber\":1310}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"moduleSequenceNumber\":29129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///bdd6e8e3-2a2c-4fb5-8a88-e64310a89d7b\",\"moduleSequenceNumber\":18398}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-6\",\"moduleSequenceNumber\":18398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"70.5.9.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.41000003158,\"pid\":2650,\"ramUsage\":4,\"server\":\"pserv-7\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///e532b972-10e2-4bb7-852b-a0558605f439\",\"moduleSequenceNumber\":18400}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///8debd5ae-5ea1-486e-bc00-b9d327414925\",\"moduleSequenceNumber\":1351}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"moduleSequenceNumber\":29132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///1dd36f82-a2b8-49d4-b2cf-205dd42fc1b1\",\"moduleSequenceNumber\":1940}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"moduleSequenceNumber\":29133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///e532b972-10e2-4bb7-852b-a0558605f439\",\"moduleSequenceNumber\":18400}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-7\",\"moduleSequenceNumber\":18400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-7\",\"moduleSequenceNumber\":29134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"31.2.6.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.41000003158,\"pid\":2652,\"ramUsage\":4,\"server\":\"pserv-8\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///9845f1a9-a9de-4959-8ae8-c1ed6a1e1150\",\"moduleSequenceNumber\":18402}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///2a455cdc-a21b-44a9-b84d-f23b67a3844d\",\"moduleSequenceNumber\":1362}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"moduleSequenceNumber\":29136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///997f6d32-9044-4868-9c57-86af96212fca\",\"moduleSequenceNumber\":29496}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"moduleSequenceNumber\":29137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///9845f1a9-a9de-4959-8ae8-c1ed6a1e1150\",\"moduleSequenceNumber\":18402}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8\",\"moduleSequenceNumber\":18402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8\",\"moduleSequenceNumber\":29138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"42.3.7.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.41000003158,\"pid\":2654,\"ramUsage\":4,\"server\":\"pserv-9\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///e6ff18c4-b99a-4559-8c31-a769b6fa44a8\",\"moduleSequenceNumber\":18404}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///e6ff18c4-b99a-4559-8c31-a769b6fa44a8\",\"moduleSequenceNumber\":18404}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-9\",\"moduleSequenceNumber\":18404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-9\",\"moduleSequenceNumber\":29142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"moduleSequenceNumber\":29143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"moduleSequenceNumber\":29144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"28.8.4.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.41000003158,\"pid\":2656,\"ramUsage\":4,\"server\":\"pserv-10\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///25443bb9-aa3a-4316-93c5-f2bd00d68c05\",\"moduleSequenceNumber\":18406}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///25443bb9-aa3a-4316-93c5-f2bd00d68c05\",\"moduleSequenceNumber\":18406}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-10\",\"moduleSequenceNumber\":18406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-10\",\"moduleSequenceNumber\":29148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"moduleSequenceNumber\":29149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"moduleSequenceNumber\":29150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"61.3.8.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.41000003158,\"pid\":2658,\"ramUsage\":4,\"server\":\"pserv-11\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///26d1b7e8-6b2c-42c8-80ed-3e0d30a4e084\",\"moduleSequenceNumber\":18408}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///26d1b7e8-6b2c-42c8-80ed-3e0d30a4e084\",\"moduleSequenceNumber\":18408}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-11\",\"moduleSequenceNumber\":18408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-11\",\"moduleSequenceNumber\":29154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"moduleSequenceNumber\":29155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"moduleSequenceNumber\":29156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"34.4.3.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.41000003158,\"pid\":2660,\"ramUsage\":4,\"server\":\"pserv-12\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///39350bbc-59c6-4603-8a23-ca36a840f120\",\"moduleSequenceNumber\":18410}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///39350bbc-59c6-4603-8a23-ca36a840f120\",\"moduleSequenceNumber\":18410}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-12\",\"moduleSequenceNumber\":18410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-12\",\"moduleSequenceNumber\":29160,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"moduleSequenceNumber\":29161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"moduleSequenceNumber\":29162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"61.6.8.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.41000003158,\"pid\":2662,\"ramUsage\":4,\"server\":\"pserv-13\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///272e111e-ff22-4986-a0d4-a58bfd1807ca\",\"moduleSequenceNumber\":18412}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///272e111e-ff22-4986-a0d4-a58bfd1807ca\",\"moduleSequenceNumber\":18412}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-13\",\"moduleSequenceNumber\":18412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-13\",\"moduleSequenceNumber\":29166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"moduleSequenceNumber\":29167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"moduleSequenceNumber\":29168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"4.2.4.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.41000003158,\"pid\":2664,\"ramUsage\":4,\"server\":\"pserv-14\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///624d5afc-6d0a-43e8-8a75-9ead733723ea\",\"moduleSequenceNumber\":18414}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///624d5afc-6d0a-43e8-8a75-9ead733723ea\",\"moduleSequenceNumber\":18414}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-14\",\"moduleSequenceNumber\":18414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-14\",\"moduleSequenceNumber\":29172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"moduleSequenceNumber\":29173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"moduleSequenceNumber\":29174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"35.5.4.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.41000003158,\"pid\":2666,\"ramUsage\":4,\"server\":\"pserv-15\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///fc2d0228-80f1-477a-b894-6a0f365e933f\",\"moduleSequenceNumber\":18416}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///fc2d0228-80f1-477a-b894-6a0f365e933f\",\"moduleSequenceNumber\":18416}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-15\",\"moduleSequenceNumber\":18416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-15\",\"moduleSequenceNumber\":29178,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"moduleSequenceNumber\":29179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"moduleSequenceNumber\":29180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"91.5.6.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.41000003158,\"pid\":2668,\"ramUsage\":4,\"server\":\"pserv-16\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///f1c74644-55f7-47fc-8354-6f0b745f2d01\",\"moduleSequenceNumber\":18418}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///f1c74644-55f7-47fc-8354-6f0b745f2d01\",\"moduleSequenceNumber\":18418}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-16\",\"moduleSequenceNumber\":18418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-16\",\"moduleSequenceNumber\":29184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"moduleSequenceNumber\":29185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"moduleSequenceNumber\":29186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"61.2.5.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048576,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/basic/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38815.41000003158,\"pid\":2670,\"ramUsage\":4,\"server\":\"pserv-17\",\"threads\":262144,\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///b3ed4fd3-9115-4e5e-b4c0-84f919597d17\",\"moduleSequenceNumber\":18420}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///b3ed4fd3-9115-4e5e-b4c0-84f919597d17\",\"moduleSequenceNumber\":18420}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-17\",\"moduleSequenceNumber\":18420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-17\",\"moduleSequenceNumber\":29190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"moduleSequenceNumber\":29191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"moduleSequenceNumber\":29192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":472639.8256649342,\"favor\":0.016,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1117604.5968485486,\"favor\":0.016,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":315505.13981366425,\"favor\":0.016,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":236641.44515096524,\"favor\":0.016,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":223458.63190702716,\"favor\":0.016,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":202399.1223601574,\"favor\":0.016,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":205687.0020290434,\"favor\":0.016,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":284638.65908924956,\"favor\":0.016,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":235152.59702526295,\"favor\":0.016,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":443344.1255316769,\"favor\":0.016,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":23.9679,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":4945.525072731577,\"favor\":0.016,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":25.308,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":42.635,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":96.40923180847564,\"favor\":33.7618,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0309,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":18.162,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.1221,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":3,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":2165365.115652513}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"ECorp\",\"playerReputation\":175090.07334939195}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":4,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":1159375.5194290222}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Bachman & Associates\",\"playerReputation\":102230.61361913367}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Blade Industries\",\"playerReputation\":409138.960369842}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"NWO\",\"playerReputation\":38493.02842997969}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Clarke Incorporated\",\"playerReputation\":79064.7145077562}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"OmniTek Incorporated\",\"playerReputation\":27793.967909213934}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Four Sigma\",\"playerReputation\":1119028.9162470987}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"KuaiGong International\",\"playerReputation\":191372.79425096055}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":54520.50318265648}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":233.9411,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":8848497.126319109}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":181.3058,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":7517837.8877734495}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":184.6465,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":7632393.385048688}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":6.660299999999999,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":408233.5854540455}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":191.7391,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":7825237.497534494}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":185.2296,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":7635456.340683297}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":138.2816,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":5664260.144885973}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":184.3245,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":7598927.008916864}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"track\":\"run fl1ght.exe\",\"darkweb\":\"home;connect darkweb\",\"killeverything\":\"killall;run advanced/killall.js\",\"listall\":\"run advanced/listall.js\",\"liquidate\":\"run stocks/liquidate.js\",\"nukeall\":\"run advanced/nukeall.js\",\"cnct\":\"run advanced/cnct.js\",\"scn\":\"cls;scan-analyze 10\",\"hackall\":\"killall; run hackGrind.js\",\"expand\":\"killall; run expand.js\",\"repGrind\":\"killall; run repGrind.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":13192.834602487355,\"lastPrice\":13193.332668459632,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":false,\"otlkMag\":14.486306299664932,\"otlkMagForecast\":34.256706523946114,\"cap\":219456534,\"spreadPerc\":0.1,\"shareTxForMovement\":64774,\"shareTxUntilMovement\":64774,\"totalShares\":116300000,\"maxShares\":23300000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":8844.261025558468,\"lastPrice\":8843.943041467832,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.4,\"b\":true,\"otlkMag\":16.910826060180923,\"otlkMagForecast\":67.70805609458671,\"cap\":229045192,\"spreadPerc\":0.3,\"shareTxForMovement\":33247,\"shareTxUntilMovement\":33247,\"totalShares\":75500000,\"maxShares\":15100000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":47521.57918474696,\"lastPrice\":47518.162152432305,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":6.374609093507916,\"otlkMagForecast\":57.254406033718595,\"cap\":197416383,\"spreadPerc\":0.2,\"shareTxForMovement\":65759,\"shareTxUntilMovement\":65759,\"totalShares\":127800000,\"maxShares\":25600000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":13198.716693735349,\"lastPrice\":13199.582765800491,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":30.27518740877169,\"otlkMagForecast\":19.447388211430063,\"cap\":274809685,\"spreadPerc\":0.5,\"shareTxForMovement\":63427,\"shareTxUntilMovement\":36960,\"totalShares\":74600000,\"maxShares\":14900000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":20310.695260727294,\"lastPrice\":20311.918465189014,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":21.91526219368517,\"otlkMagForecast\":73.24206102718465,\"cap\":461871269,\"spreadPerc\":0.6,\"shareTxForMovement\":50824,\"shareTxUntilMovement\":12210,\"totalShares\":47100000,\"maxShares\":9400000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":144021.75409513753,\"lastPrice\":144035.99443141132,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.1,\"b\":false,\"otlkMag\":6.663923350033329,\"otlkMagForecast\":42.77556735131092,\"cap\":223373833,\"spreadPerc\":0.7,\"shareTxForMovement\":57421,\"shareTxUntilMovement\":57421,\"totalShares\":33400000,\"maxShares\":6700000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":1275640.8968275003,\"lastPrice\":1275549.1720523322,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":7.9703330821482075,\"otlkMagForecast\":59.618887934465015,\"cap\":376195644,\"spreadPerc\":0.4,\"shareTxForMovement\":87434,\"shareTxUntilMovement\":87434,\"totalShares\":72200000,\"maxShares\":14400000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":17690.595076332567,\"lastPrice\":17688.62349277852,\"playerShares\":11900000,\"playerAvgPx\":2347.7938126229265,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":true,\"otlkMag\":32.59832024633306,\"otlkMagForecast\":80.69484005888033,\"cap\":714113740,\"spreadPerc\":0.4,\"shareTxForMovement\":82802,\"shareTxUntilMovement\":52468,\"totalShares\":59600000,\"maxShares\":11900000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":4441.372109439253,\"lastPrice\":4441.727418785337,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.89,\"b\":false,\"otlkMag\":7.89101482712628,\"otlkMagForecast\":42.66696327902543,\"cap\":416577153,\"spreadPerc\":0.8,\"shareTxForMovement\":67900,\"shareTxUntilMovement\":67900,\"totalShares\":55100000,\"maxShares\":11000000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":37382.7895689144,\"lastPrice\":37384.9737293022,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":11.0609064917095,\"otlkMagForecast\":38.94097695043581,\"cap\":161204716,\"spreadPerc\":0.5,\"shareTxForMovement\":102480,\"shareTxUntilMovement\":102480,\"totalShares\":69000000,\"maxShares\":13800000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":15236.099043579246,\"lastPrice\":15235.277366676251,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":7.292643036946019,\"otlkMagForecast\":58.95957939185554,\"cap\":35370291,\"spreadPerc\":1,\"shareTxForMovement\":69720,\"shareTxUntilMovement\":69720,\"totalShares\":54700000,\"maxShares\":10900000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":17159.463549062282,\"lastPrice\":17158.26054436081,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":7.707066571460818,\"otlkMagForecast\":57.66743687951197,\"cap\":235645779,\"spreadPerc\":0.5,\"shareTxForMovement\":77983,\"shareTxUntilMovement\":77983,\"totalShares\":89900000,\"maxShares\":18000000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":40706.2682922758,\"lastPrice\":40708.500273769736,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":11.762438518958051,\"otlkMagForecast\":36.40120890073868,\"cap\":233755748,\"spreadPerc\":1,\"shareTxForMovement\":93818,\"shareTxUntilMovement\":93818,\"totalShares\":33900000,\"maxShares\":6800000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":8523.379265060375,\"lastPrice\":8523.762337830074,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":8.807748130016089,\"otlkMagForecast\":58.15751705082441,\"cap\":448577947,\"spreadPerc\":1,\"shareTxForMovement\":49223,\"shareTxUntilMovement\":49223,\"totalShares\":46100000,\"maxShares\":9200000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":39061.55210799737,\"lastPrice\":39063.588573010566,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":11.128594441685367,\"otlkMagForecast\":39.303536968174186,\"cap\":261668837,\"spreadPerc\":1,\"shareTxForMovement\":75310,\"shareTxUntilMovement\":75310,\"totalShares\":41400000,\"maxShares\":8300000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":11252.055246019658,\"lastPrice\":11252.722782885105,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":10.327989520197955,\"otlkMagForecast\":40.698875750441,\"cap\":97444431,\"spreadPerc\":1,\"shareTxForMovement\":94583,\"shareTxUntilMovement\":94583,\"totalShares\":47200000,\"maxShares\":9400000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":15999.099753132174,\"lastPrice\":15998.064374017842,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":5.158193776359467,\"otlkMagForecast\":46.352548998205755,\"cap\":57319694,\"spreadPerc\":0.4,\"shareTxForMovement\":47353,\"shareTxUntilMovement\":47353,\"totalShares\":27800000,\"maxShares\":5600000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":133410.77595155308,\"lastPrice\":133403.10153506603,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":16.95946972674803,\"otlkMagForecast\":66.40293478398426,\"cap\":45284703,\"spreadPerc\":0.7,\"shareTxForMovement\":91856,\"shareTxUntilMovement\":30686,\"totalShares\":24000000,\"maxShares\":4800000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":119906.48741814421,\"lastPrice\":119897.97332499814,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":5.7970785607719515,\"otlkMagForecast\":53.7228599935798,\"cap\":413235861,\"spreadPerc\":0.4,\"shareTxForMovement\":82340,\"shareTxUntilMovement\":82340,\"totalShares\":29700000,\"maxShares\":5900000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":1495.5624379724409,\"lastPrice\":1495.8931417226281,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.46,\"b\":false,\"otlkMag\":10.047169399851438,\"otlkMagForecast\":41.877635069143444,\"cap\":46058395,\"spreadPerc\":0.6,\"shareTxForMovement\":31962,\"shareTxUntilMovement\":31962,\"totalShares\":96000000,\"maxShares\":19200000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":786.1612537249739,\"lastPrice\":786.2495863450323,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.25,\"b\":false,\"otlkMag\":8.347423924263516,\"otlkMagForecast\":43.893456446536774,\"cap\":86205382,\"spreadPerc\":1.2,\"shareTxForMovement\":80165,\"shareTxUntilMovement\":80165,\"totalShares\":65600000,\"maxShares\":13100000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":13704.919569874039,\"lastPrice\":13705.60943466769,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":7.265864131767965,\"otlkMagForecast\":42.32050250853316,\"cap\":81218353,\"spreadPerc\":0.4,\"shareTxForMovement\":104250,\"shareTxUntilMovement\":104250,\"totalShares\":53000000,\"maxShares\":10600000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":58.48244364666103,\"lastPrice\":58.49195853179173,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.81,\"b\":true,\"otlkMag\":13.227273173087166,\"otlkMagForecast\":64.49611737028836,\"cap\":74107095,\"spreadPerc\":0.7,\"shareTxForMovement\":54033,\"shareTxUntilMovement\":54033,\"totalShares\":44900000,\"maxShares\":9000000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":6124.603987525381,\"lastPrice\":6125.468312632959,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.57,\"b\":true,\"otlkMag\":9.668945802900577,\"otlkMagForecast\":59.70406834226581,\"cap\":183748760,\"spreadPerc\":1,\"shareTxForMovement\":20478,\"shareTxUntilMovement\":20478,\"totalShares\":25500000,\"maxShares\":5100000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":2587.341442705247,\"lastPrice\":2587.1391228527214,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.87,\"b\":false,\"otlkMag\":7.620278200361314,\"otlkMagForecast\":44.14577347321773,\"cap\":85882042,\"spreadPerc\":1,\"shareTxForMovement\":87053,\"shareTxUntilMovement\":87053,\"totalShares\":33300000,\"maxShares\":6700000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":321.1548665544087,\"lastPrice\":321.2590793803947,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.61,\"b\":true,\"otlkMag\":6.529817508760203,\"otlkMagForecast\":57.891497141917796,\"cap\":30483134,\"spreadPerc\":1,\"shareTxForMovement\":50428,\"shareTxUntilMovement\":50428,\"totalShares\":21800000,\"maxShares\":4400000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":9060.503589610327,\"lastPrice\":9061.24471756164,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.91,\"b\":true,\"otlkMag\":7.767131525198394,\"otlkMagForecast\":56.415553826096136,\"cap\":88903359,\"spreadPerc\":0.5,\"shareTxForMovement\":44077,\"shareTxUntilMovement\":44077,\"totalShares\":8100000,\"maxShares\":1600000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1740.8781527754625,\"lastPrice\":1740.7561044027677,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":7.625284140331211,\"otlkMagForecast\":43.38543951053655,\"cap\":52086930,\"spreadPerc\":1,\"shareTxForMovement\":77994,\"shareTxUntilMovement\":77994,\"totalShares\":12200000,\"maxShares\":2400000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":43124.43685512495,\"lastPrice\":43114.01199631093,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.69,\"b\":true,\"otlkMag\":8.88097432586018,\"otlkMagForecast\":56.0290728756444,\"cap\":34692370,\"spreadPerc\":1.4,\"shareTxForMovement\":58787,\"shareTxUntilMovement\":58787,\"totalShares\":16300000,\"maxShares\":3300000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":37972.002091976596,\"lastPrice\":37979.067435871126,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.07,\"b\":false,\"otlkMag\":11.695493262757521,\"otlkMagForecast\":39.88920631476595,\"cap\":17273034,\"spreadPerc\":0.9,\"shareTxForMovement\":18472,\"shareTxUntilMovement\":18472,\"totalShares\":58700000,\"maxShares\":11700000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":11227.083443003547,\"lastPrice\":11225.5497068007,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.52,\"b\":true,\"otlkMag\":6.800409949179503,\"otlkMagForecast\":54.664547859587564,\"cap\":6049705,\"spreadPerc\":0.9,\"shareTxForMovement\":71957,\"shareTxUntilMovement\":71957,\"totalShares\":389100000,\"maxShares\":77800000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":2795.7714221611045,\"lastPrice\":2795.9523617592504,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":13.5323314439081,\"otlkMagForecast\":63.039963102160456,\"cap\":188669555,\"spreadPerc\":0.9,\"shareTxForMovement\":99444,\"shareTxUntilMovement\":99444,\"totalShares\":16900000,\"maxShares\":3400000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":1179306.1750546203,\"lastPrice\":1179378.2584024922,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":15.010315602750296,\"otlkMagForecast\":64.27867567276697,\"cap\":539362946,\"spreadPerc\":1,\"shareTxForMovement\":121742,\"shareTxUntilMovement\":121742,\"totalShares\":19100000,\"maxShares\":3800000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":1726195,\"lastUpdate\":1646567850345,\"ticksUntilCycle\":17}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":24,\"MonacoVim\":true,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Fira Code, Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-134,\"y\":55,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1646567852730","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}