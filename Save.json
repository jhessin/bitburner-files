{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":233,\"hp\":14,\"max_hp\":14,\"strength\":49,\"defense\":49,\"dexterity\":49,\"agility\":49,\"charisma\":95,\"intelligence\":0,\"hacking_chance_mult\":1.16,\"hacking_speed_mult\":1.16,\"hacking_money_mult\":1.16,\"hacking_grow_mult\":1.16,\"hacking_exp\":280080.2947997391,\"strength_exp\":1431.00383999952,\"defense_exp\":1431.00383999952,\"dexterity_exp\":1431.00383999952,\"agility_exp\":1431.00383999952,\"charisma_exp\":6187.426080000642,\"intelligence_exp\":0,\"hacking_mult\":1.16,\"strength_mult\":1.16,\"defense_mult\":1.16,\"dexterity_mult\":1.16,\"agility_mult\":1.16,\"charisma_mult\":1.16,\"hacking_exp_mult\":1.16,\"strength_exp_mult\":1.16,\"defense_exp_mult\":1.16,\"dexterity_exp_mult\":1.16,\"agility_exp_mult\":1.16,\"charisma_exp_mult\":1.16,\"company_rep_mult\":1.16,\"faction_rep_mult\":1.16,\"money\":7394879800.161963,\"city\":\"Aevum\",\"location\":\"Travel Agency\",\"jobs\":{\"Joe's Guns\":\"Part-time Employee\",\"Carmichael Security\":\"Software Engineering Intern\",\"Watchdog Security\":\"Software Engineering Intern\"},\"companyName\":\"Watchdog Security\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":81964.19999939819,\"ram\":64,\"totalMoneyGenerated\":588321170.8010533,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":81510.99999940582,\"ram\":64,\"totalMoneyGenerated\":587743258.8227865,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":81504.99999940592,\"ram\":64,\"totalMoneyGenerated\":587311701.0428808,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":78713.59999945128,\"ram\":64,\"totalMoneyGenerated\":586777542.9674782,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":77014.59999947915,\"ram\":64,\"totalMoneyGenerated\":586209286.7257266,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":75460.3999995046,\"ram\":64,\"totalMoneyGenerated\":582922244.582024,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":75460.3999995046,\"ram\":64,\"totalMoneyGenerated\":582460389.6757388,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":75460.3999995046,\"ram\":64,\"totalMoneyGenerated\":582002915.4623015,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":75460.3999995046,\"ram\":64,\"totalMoneyGenerated\":580883655.7909055,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":75460.3999995046,\"ram\":64,\"totalMoneyGenerated\":579795994.4950722,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":75460.3999995046,\"ram\":64,\"totalMoneyGenerated\":579469283.1872853,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":75460.3999995046,\"ram\":64,\"totalMoneyGenerated\":578988864.6255058,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":75460.3999995046,\"ram\":64,\"totalMoneyGenerated\":578381196.9073868,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":67054.59999964248,\"ram\":64,\"totalMoneyGenerated\":573696267.5123165,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":67054.59999964248,\"ram\":64,\"totalMoneyGenerated\":573093001.5023081,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":60453.39999973808,\"ram\":64,\"totalMoneyGenerated\":528682805.67437935,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":51439.79999984919,\"ram\":64,\"totalMoneyGenerated\":460354945.0851979,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":38842.20000000248,\"ram\":64,\"totalMoneyGenerated\":354853424.85270715,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":10132.113034952865,\"onlineTimeSeconds\":10634.400000003263,\"ram\":64,\"totalMoneyGenerated\":101320954.00105274,\"name\":\"hacknet-node-18\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"NiteSec\",\"Aevum\",\"Sector-12\",\"Netburners\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"}],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.16,\"crime_success_mult\":1.16,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"Sector-12\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.174,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.3037991029469515,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":579.176400000002,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":1008.2260364888737,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":826800,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.16,\"hacknet_node_money_mult\":1.16,\"hacknet_node_purchase_cost_mult\":0.84,\"hacknet_node_ram_cost_mult\":0.84,\"hacknet_node_core_cost_mult\":0.84,\"hacknet_node_level_cost_mult\":0.84,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1648031048442,\"lastSave\":1648031038270,\"totalPlaytime\":3004895200,\"playtimeSinceLastAug\":82159600,\"playtimeSinceLastBitnode\":82159600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":3525000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":52805,\"hacknet\":10173268903.782337,\"hacknet_expenses\":-4717767518.73282,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":7394878800.161963,\"work\":5702091.940013327,\"servers\":-1466177482.087522,\"other\":-200000,\"augmentations\":-125000000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":3525000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":52805,\"hacknet\":10173268903.782337,\"hacknet_expenses\":-4717767518.73282,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":7394878800.161963,\"work\":5702091.940013327,\"servers\":-1466177482.087522,\"other\":-200000,\"augmentations\":-125000000}},\"scriptProdSinceLastAug\":50238,\"exploits\":[],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1645026146788},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1645028434786},{\"ID\":\"NS2\",\"unlockedOn\":1645044319911},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1645045831181},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1645056200950},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1645056560955},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1645066283086},{\"ID\":\"TOR\",\"unlockedOn\":1645066643085},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1645070003093},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1645097626865},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1645155279886},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1645183682014},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1645190539010},{\"ID\":\"TRAVEL\",\"unlockedOn\":1645202118069},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1645206439756},{\"ID\":\"WORKOUT\",\"unlockedOn\":1645274022801},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1645310391987},{\"ID\":\"NITESEC\",\"unlockedOn\":1645372344826},{\"ID\":\"4S\",\"unlockedOn\":1645407697058},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1645449421121},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1645451161327},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1645492247503},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1645588414067},{\"ID\":\"DONATION\",\"unlockedOn\":1645808344381},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1645842991741},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1646071287225},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1646082477122},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1646132482080},{\"ID\":\"SF1.1\",\"unlockedOn\":1646609210207},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1647371428634}],\"terminalCommandHistory\":[\"mem phase1/actions/programming.js\",\"mem phase1/expandServer.js\",\"ps\",\"run phase1/programs.js\",\"run phase1/basicHack.js\",\"run hack.js iron-gym\",\"alias\",\"alias cnct=\\\"run phase2/cnct.js\\\"\",\"cnct CSEC\",\"connect harakiri-sushi;connect CSEC;\",\"home\",\"connect harakiri-sushi;connect CSEC;\",\"home\",\"cnct CSEC\",\"connect harakiri-sushi;connect CSEC;\",\"home\",\"clear\",\"cls\",\"alias\",\"ps\",\"cnct phantasy\",\"connect CSEC;connect phantasy;\",\"backdoor\",\"home\",\"hostname\",\"run phase1/shareAll.js\",\"run phase1/basicHack.js\",\"run phase1/hackRichest.js\",\"ls phase1\",\"cnct silver-helix\",\"ps\",\"scan-analyze 3\",\"connect joesguns ; connect zer0; connect silver-helix; backdoor\",\"home\",\"run phase2/test.js\",\"run contracts/start.js\",\"run phase2/hackRichest.js\",\"cnct omega-net\",\"ps\",\"kill hack.js silver-helix\",\"cnct omega-net\",\"connect max-hardware;connect omega-net; backdoor\",\"home\",\"cnct crush-fitness\",\"connect phantasy;connect crush-fitness; backdoor\",\"home\",\"cnct avmnite-02h\",\"connect phantasy;connect avmnite-02h; backdoor\",\"home\",\"run phase2/hackRichest.js\"],\"identifier\":\"afc61675d036e\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"41.2.4.6\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\"],\"ramUsed\":1021.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hacknet.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37990.41000001263,\"pid\":99,\"ramUsage\":5.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///40dd4176-524c-453a-9a60-0abbb12fc355\",\"moduleSequenceNumber\":188859}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/phase1/backdoor.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37985.61000001267,\"pid\":100,\"ramUsage\":4.35,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///1cb90ffd-61fd-4c75-a24b-b91f146d5a88\",\"moduleSequenceNumber\":188851},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///ac4dca76-67c6-4385-a820-2462333009fb\",\"moduleSequenceNumber\":188847},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///741ba670-13d7-47ef-9f52-615cc26516b1\",\"moduleSequenceNumber\":188853},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///7f7cf451-6fb5-4d33-bcb2-3383632d69f3\",\"moduleSequenceNumber\":188851},{\"filename\":\"/utils/nuke.js\",\"url\":\"blob:file:///906363ba-6e27-432d-ab40-40bfaf1a46d4\",\"moduleSequenceNumber\":188849},{\"filename\":\"/phase1/backdoor.js\",\"url\":\"blob:file:///7aded8ed-c9b9-4a00-b3a9-f228336369a3\",\"moduleSequenceNumber\":188860}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/phase1/programs.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33735.21000006495,\"pid\":117,\"ramUsage\":9.65,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/contracts/start.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28876.410000065505,\"pid\":173,\"ramUsage\":21.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///5c1a2713-cb57-4908-92ca-4a5883717ca5\",\"moduleSequenceNumber\":163494},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///9bc9eb97-5bf2-4355-af42-99468a3a82b9\",\"moduleSequenceNumber\":163498},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///f6c13632-16d1-4a06-b14d-3de6081646e3\",\"moduleSequenceNumber\":163501},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///e8fcaa1c-a929-4bf2-b9cf-abaada686b1d\",\"moduleSequenceNumber\":163503},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///6d1f1283-3ee9-4ad0-95fd-f1ea1a38f8d6\",\"moduleSequenceNumber\":163504},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///12de5895-a641-4872-ad41-f860cc0944f8\",\"moduleSequenceNumber\":163495},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///8eaa7bb6-b77b-453d-94f6-55fb308e5947\",\"moduleSequenceNumber\":163492},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///e2e84e73-3124-4186-a3ae-3bc1628eafab\",\"moduleSequenceNumber\":163500},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///4a0d72fb-3c89-4c8c-8437-0505579c5b90\",\"moduleSequenceNumber\":163497},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///9b72db17-2e41-4db0-a6f1-cc9538f0bb49\",\"moduleSequenceNumber\":163499},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///8a416f93-b2af-4b50-bcf7-104ed0b874df\",\"moduleSequenceNumber\":163493},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///de81829c-38dc-4d69-b498-b3c2da1a656c\",\"moduleSequenceNumber\":163502},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///6566a89d-7789-429a-91ee-b0db243b9080\",\"moduleSequenceNumber\":163496},{\"filename\":\"consts.js\",\"url\":\"blob:file:///9e5d8ddb-66e0-457b-af3c-8b352d44f45e\",\"moduleSequenceNumber\":163507},{\"filename\":\"/contracts/start.js\",\"url\":\"blob:file:///f8fd2df8-08a8-4eed-9979-d854ada7e22b\",\"moduleSequenceNumber\":164356}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,392,0]},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4774.5599999999995,\"onlineMoneyMade\":0,\"onlineRunningTime\":905.0100000000689,\"pid\":180,\"ramUsage\":2.5,\"server\":\"home\",\"threads\":392,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///737eed04-9a1d-49ff-bcc4-f8e6417d9b52\",\"moduleSequenceNumber\":211598}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//GREATEST FACTOR\\nexport function factor(num) {\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\n        if (num % div != 0) {\\n            continue;\\n        }\\n        num = num / div;\\n        div = 1;\\n    }\\n    return num;\\n}\\n\",\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":172830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Array jumping game solver\\nexport function solveJump(data) {\\n    // ns.tprint(JSON.stringify(data))\\n    for (let i = data[0] - 1; i > -1; i--) {\\n        if (i + 1 >= data.length)\\n            return 1;\\n        return solveJump(data.slice(i + 1));\\n    }\\n    return 0;\\n}\\n\",\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":172826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const testData = [\\\"123\\\", 6];\\n    ns.tprint(findMathExpression(testData));\\n}\\nexport function findMathExpression(data) {\\n    const digits = data[0].split(\\\"\\\");\\n    const operators = [\\\"+\\\", \\\"-\\\", \\\"*\\\", \\\"\\\"];\\n    let expressions = [digits[0], \\\"-\\\" + digits[0]].flatMap((d) => operators.map((op) => d + op));\\n    for (let i = 1; i < digits.length - 1; i++) {\\n        expressions = expressions.flatMap((e) => operators.map((op) => e + digits[i] + op));\\n    }\\n    return expressions\\n        .map((e) => e + digits[digits.length - 1])\\n        .filter((e) => {\\n        try {\\n            return eval(e) === data[1];\\n        }\\n        catch (e) {\\n            return false;\\n        }\\n    });\\n}\\n\",\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":172828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//GENERATE IP ADDRESSES\\nexport function generateIps(num) {\\n    num = num.toString();\\n    const length = num.length;\\n    let ips = [];\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length),\\n                ];\\n                let isValid = true;\\n                ip.forEach((seg) => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n                if (isValid)\\n                    ips.push(ip.join(\\\".\\\"));\\n            }\\n        }\\n    }\\n    return ips;\\n}\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\")\\n        return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255)\\n        return false;\\n    return true;\\n}\\n\",\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":172834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export * from \\\"contracts/solvers/totalWaysToSum.js\\\";\\nexport * from \\\"contracts/solvers/arrayJumpingGame.js\\\";\\nexport * from \\\"contracts/solvers/solveSum.js\\\";\\nexport * from \\\"contracts/solvers/mergeOverlap.js\\\";\\nexport * from \\\"contracts/solvers/spiral.js\\\";\\nexport * from \\\"contracts/solvers/factor.js\\\";\\nexport * from \\\"contracts/solvers/generateIps.js\\\";\\nexport * from \\\"contracts/solvers/uniquePaths.js\\\";\\nexport * from \\\"contracts/solvers/triangleSum.js\\\";\\nexport * from \\\"contracts/solvers/stockSolver.js\\\";\\nexport * from \\\"contracts/solvers/sanitizeParentheses.js\\\";\\nexport * from \\\"contracts/solvers/findMathExpressions.js\\\";\\n\",\"filename\":\"/contracts/solvers/index.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":172832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Merge Overlapping Intervals\\nexport function mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\n\",\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":172836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function sanitizeParentheses(data) {\\n    var solution = Sanitize(data);\\n    if (solution == null) {\\n        return '[\\\"\\\"]';\\n    }\\n    else {\\n        return \\\"[\\\" + solution.join(\\\",\\\") + \\\"]\\\";\\n    }\\n}\\nfunction Sanitize_removeOneParth(item) {\\n    var possibleAnswers = [];\\n    for (let i = 0; i < item.length; i++) {\\n        if (item[i].toLowerCase().indexOf(\\\"(\\\") === -1 &&\\n            item[i].toLowerCase().indexOf(\\\")\\\") === -1) {\\n            continue;\\n        }\\n        let possible = item.substring(0, i) + item.substring(i + 1);\\n        possibleAnswers.push(possible);\\n    }\\n    return possibleAnswers;\\n}\\nfunction Sanitize_isValid(item) {\\n    var unclosed = 0;\\n    for (var i = 0; i < item.length; i++) {\\n        if (item[i] == \\\"(\\\") {\\n            unclosed++;\\n        }\\n        else if (item[i] == \\\")\\\") {\\n            unclosed--;\\n        }\\n        if (unclosed < 0) {\\n            return false;\\n        }\\n    }\\n    return unclosed == 0;\\n}\\nfunction Sanitize(data) {\\n    var currentPossible = [data];\\n    for (var i = 0; i < currentPossible.length; i++) {\\n        var newPossible = new Set();\\n        for (var j = 0; j < currentPossible.length; j++) {\\n            let newRemovedPossible = Sanitize_removeOneParth(currentPossible[j]);\\n            for (let item of newRemovedPossible) {\\n                newPossible.add(item);\\n            }\\n        }\\n        var validBoolList = [];\\n        for (const item of newPossible) {\\n            validBoolList.push(Sanitize_isValid(item));\\n        }\\n        if (validBoolList.includes(true)) {\\n            let finalList = [];\\n            newPossible = [...newPossible];\\n            for (var j = 0; j < validBoolList.length; j++) {\\n                if (validBoolList[j]) {\\n                    finalList.push(newPossible[j]);\\n                }\\n            }\\n            finalList = new Set(finalList);\\n            return [...finalList];\\n        }\\n        currentPossible = [...newPossible];\\n    }\\n    return null;\\n}\\n\",\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":172838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function solveSum(data) {\\n    const arrLength = data.length;\\n    let maxSum = -Infinity;\\n    for (let i = 0; i < arrLength; i++) {\\n        const sub = data.slice(0, i + 1);\\n        for (let j = 0; j < sub.length; j++) {\\n            const sub2 = sub.slice(j, sub.length);\\n            // ns.tprint(`i ${i} j ${j} ${JSON.stringify(sub)} ${JSON.stringify(sub2)}`);\\n            const sum = sub2.reduce((prev, cur) => (prev += cur), 0);\\n            if (sum > maxSum)\\n                maxSum = sum;\\n            // ns.tprint(`${sum}: ${sub2}`);\\n        }\\n    }\\n    return maxSum;\\n}\\n\",\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":172840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//SPIRALIZE Matrix\\nexport function spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift() || []);\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat((arr.pop() || []).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\nfunction column(arr, index) {\\n    let res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n\",\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":172842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function maxProfit(arrayData) {\\n    let i, j, k;\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n    // WHY?\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n    let highestProfit = JSON.parse(tempArr);\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) {\\n            // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) {\\n                // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\",\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":172844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Total Ways to Sum\\nexport function totalWaysToSum(data) {\\n    let N = data;\\n    let K = data - 1;\\n    // Initialize a list\\n    let dp = Array.from({ length: N + 1 }, () => 0);\\n    // Update dp[0] to 1\\n    dp[0] = 1;\\n    // Iterate over the range [1, K + 1]\\n    for (let row = 1; row < K + 1; row++) {\\n        // Iterate over the range [1, N + 1]\\n        for (let col = 1; col < N + 1; col++) {\\n            // If col is greater\\n            // than or equal to row\\n            if (col >= row)\\n                // Update current\\n                // dp[col] state\\n                dp[col] = dp[col] + dp[col - row];\\n        }\\n    }\\n    // Return the total number of ways\\n    return dp[N];\\n}\\n\",\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":172846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function triangleSum(arrayData) {\\n    let triangle = arrayData;\\n    let nextArray = [];\\n    let previousArray = triangle[0];\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            }\\n            else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            }\\n            else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n        }\\n        previousArray = nextArray;\\n    }\\n    return Math.min.apply(null, nextArray);\\n}\\n\",\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":172848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//UNIQUE PATHS IN A GRID//UNIQUE PATHS IN A GRID\\nexport function uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\n}\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\nexport function uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n            if (grid[i][j] == 1 &&\\n                (!ignoreFirst || i != 0 || j != 0) &&\\n                (!ignoreLast || i != grid.length - 1 || j != grid[i].length - 1)) {\\n                let newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n    }\\n    return totalPossiblePaths;\\n}\\n\",\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":172850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nimport * as solvers from \\\"contracts/solvers/index.js\\\";\\nconst minuteInterval = 2;\\nfunction getAllServers() {\\n    let data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will automatically complete contracts that it finds on the network.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let failedContracts = [];\\n    let successfulContracts = [];\\n    function refreshLog() {\\n        ns.clearLog();\\n        for (const cnt of failedContracts) {\\n            ns.print(`\\n      =========================\\n        server: ${cnt.server}\\n        filename: ${cnt.contract}\\n        type: ${cnt.type}\\n      =========================\\n        `);\\n        }\\n        for (const cnt of successfulContracts) {\\n            ns.print(`\\n      =========================\\n        server: ${cnt.server}\\n        filename: ${cnt.contract}\\n        type: ${cnt.type}\\n        reward: \\n          ${cnt.reward}\\n      =========================\\n        `);\\n        }\\n        ns.print(`Contracts failed: ${failedContracts.length}`);\\n        ns.print(`Contracts Succeeded: ${successfulContracts.length}`);\\n    }\\n    while (true) {\\n        // await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\n        const contracts = getAllServers().flatMap((server) => {\\n            const onServer = ns.ls(server.hostname, \\\".cct\\\").map((contract) => {\\n                const type = ns.codingcontract.getContractType(contract, server.hostname);\\n                const data = ns.codingcontract.getData(contract, server.hostname);\\n                const reward = solve(type, data, server.hostname, contract, ns);\\n                if (!reward) {\\n                    failedContracts.push({\\n                        server: server.hostname,\\n                        contract,\\n                        type,\\n                    });\\n                    refreshLog();\\n                }\\n                else {\\n                    successfulContracts.push({\\n                        server: server.hostname,\\n                        contract,\\n                        type,\\n                        reward,\\n                    });\\n                    refreshLog();\\n                }\\n                return `${server} - ${contract} - ${type} - ${reward || \\\"FAILED!\\\"}`;\\n            });\\n            return onServer;\\n        });\\n        if (contracts.length > 0)\\n            ns.print(`Found ${contracts.length} contracts`);\\n        await ns.sleep(minuteInterval * 60 * 1000);\\n    }\\n}\\nfunction solve(type, data, server, contract, ns) {\\n    let solution;\\n    ns.print(type);\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = solvers.maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = solvers.maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = solvers.maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = solvers.maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solvers.triangleSum(data);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = solvers.uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = solvers.uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = solvers.generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = solvers.factor(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = solvers.spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = solvers.mergeOverlap(data);\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            solution = solvers.solveSum(data);\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            solution = solvers.solveJump(data);\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            solution = solvers.totalWaysToSum(data);\\n            break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n            solution = solvers.sanitizeParentheses(data);\\n            break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n            solution = solvers.findMathExpression(data);\\n            break;\\n        default:\\n            ns.print(`Unknown contract type: ${type}`);\\n            return \\\"\\\";\\n    }\\n    if (solution != undefined)\\n        ns.print(`Submitting solution: ${solution} to ${type} - ${contract}`);\\n    return solution != undefined\\n        ? ns.codingcontract.attempt(solution, contract, server, {\\n            returnReward: true,\\n        })\\n        : \\\"\\\";\\n}\\n\",\"filename\":\"/contracts/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///aefc3341-a69a-4c1c-b002-a493e9d0aba5\",\"moduleSequenceNumber\":172828},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///ff46930f-fe67-4ef7-a037-299b8fabaea6\",\"moduleSequenceNumber\":172838},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///b827a5be-6b3f-4005-9eb4-3b2dd94bf74c\",\"moduleSequenceNumber\":172844},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///c1fa04aa-f7bb-4842-b686-68d59a5ac89b\",\"moduleSequenceNumber\":172848},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///76dd89b8-c378-4b8f-8cb4-5994952f02c3\",\"moduleSequenceNumber\":172850},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///bb67e4c4-5694-4a9b-b532-5d9692ee9443\",\"moduleSequenceNumber\":172834},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///c3cd801d-8ecd-48eb-8d4d-23c62b62ecdc\",\"moduleSequenceNumber\":172830},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///134c9553-e4ce-4d3d-81ab-665f05584aad\",\"moduleSequenceNumber\":172842},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///a213b1a7-1728-4dc3-a22b-de89f8a4adca\",\"moduleSequenceNumber\":172836},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///13123eff-8e93-4be5-a658-418edabe8644\",\"moduleSequenceNumber\":172840},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///a7f764e7-a229-48bc-ad44-376232aa2dbc\",\"moduleSequenceNumber\":172826},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///6d5fe9ac-23cf-4899-8d6e-a8a8ae95cfa2\",\"moduleSequenceNumber\":172846},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///3cdbc7a0-f61d-469e-b5bc-e96d937d3e0e\",\"moduleSequenceNumber\":172832},{\"filename\":\"consts.js\",\"url\":\"blob:file:///01154974-defa-4a6e-af4b-e10711c37541\",\"moduleSequenceNumber\":172886},{\"filename\":\"/contracts/start.js\",\"url\":\"blob:file:///f8053543-7927-4b8a-bb1f-87d0ece39fc7\",\"moduleSequenceNumber\":211494}],\"dependents\":[],\"ramUsage\":21.9,\"server\":\"home\",\"moduleSequenceNumber\":211494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { copyCmd, ServerTree } from \\\"utils\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"cnct.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d8549aa1-f32b-44ed-af87-6e32d701214c\",\"moduleSequenceNumber\":182781},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///3b42012c-5bc1-4399-93c6-64e6524b21da\",\"moduleSequenceNumber\":188265}],\"dependents\":[],\"ramUsage\":30.9,\"server\":\"home\",\"moduleSequenceNumber\":188265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * This is a list of the keys for data that is stored in localStorage.\\n */\\nexport const keys = {\\n    // The complete list of servers with their data.\\n    serverList: \\\"serverList\\\",\\n    // The total number of ports the user can hack.\\n    hackablePorts: \\\"hackablePorts\\\",\\n    // The players current hacking level.\\n    hackingLevel: \\\"hacking level\\\",\\n    // The factions the player belongs to.\\n    factions: \\\"factions\\\",\\n    // The augmentations that the player has purchased ready for installation.\\n    augmentationsQueued: \\\"augmentationsQueued\\\",\\n    // The augmentations that the player has already installed.\\n    augmentationsInstalled: \\\"augmentationsInstalled\\\",\\n    // The sourceFiles the player has.\\n    sourceFiles: \\\"source files\\\",\\n    // Are we programming?\\n    isProgramming: \\\"Is Programming\\\",\\n};\\nexport const PortHackPrograms = [\\n    \\\"BruteSSH.exe\\\",\\n    \\\"FTPCrack.exe\\\",\\n    \\\"relaySMTP.exe\\\",\\n    \\\"HTTPWorm.exe\\\",\\n    \\\"SQLInject.exe\\\",\\n];\\nexport async function CreateHackPrograms(ns) {\\n    const hackPrograms = [\\n        {\\n            program: \\\"BruteSSH.exe\\\",\\n            hackingLevel: 50,\\n        },\\n        {\\n            program: \\\"FTPCrack.exe\\\",\\n            hackingLevel: 100,\\n        },\\n        {\\n            program: \\\"relaySMTP.exe\\\",\\n            hackingLevel: 250,\\n        },\\n        {\\n            program: \\\"HTTPWorm.exe\\\",\\n            hackingLevel: 500,\\n        },\\n        {\\n            program: \\\"SQLInject.exe\\\",\\n            hackingLevel: 750,\\n        },\\n    ];\\n    const hackingLevel = ns.getHackingLevel();\\n    for (const program of hackPrograms) {\\n        if (ns.fileExists(program.program))\\n            continue;\\n        if (hackingLevel >= program.hackingLevel) {\\n            localStorage.setItem(keys.isProgramming, \\\"true\\\");\\n            ns.createProgram(program.program);\\n            while (ns.isBusy())\\n                await ns.sleep(300);\\n            localStorage.setItem(keys.isProgramming, \\\"false\\\");\\n        }\\n    }\\n}\\nexport const crimes = [\\n    \\\"Heist\\\",\\n    \\\"Assassination\\\",\\n    \\\"Kidnap\\\",\\n    \\\"Grand Theft Auto\\\",\\n    \\\"Homicide\\\",\\n    \\\"Traffick Arms\\\",\\n    \\\"Bond Forgery\\\",\\n    \\\"Deal Drugs\\\",\\n    \\\"Larceny\\\",\\n    \\\"Mug\\\",\\n    \\\"Rob Store\\\",\\n    \\\"Shoplift\\\",\\n];\\n\",\"filename\":\"consts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":89.75,\"server\":\"home\",\"moduleSequenceNumber\":172886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nconst pollingInterval = 6000; // time in ms to wait between polling\\nconst host = \\\"home\\\";\\nfunction getServers() {\\n    let data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nconst setupScripts = [\\n    \\\"/utils/updateStorage.js\\\",\\n    \\\"/hacking/nukeAll.js\\\",\\n];\\n// These are various money scripts in order of preference.\\nconst crimeFocused = [\\n    {\\n        script: \\\"/crime/start.js\\\",\\n        requires: {\\n            strength: 150,\\n            defense: 150,\\n            agility: 150,\\n            dexterity: 150,\\n        },\\n    },\\n    {\\n        script: \\\"/jobs/work.js\\\",\\n        requires: {\\n            strength: 300,\\n            defense: 300,\\n            dexterity: 300,\\n            agility: 300,\\n            charisma: 250,\\n        },\\n        args: [\\n            \\\"--company=MegaCorp\\\",\\n            \\\"--position=Security\\\",\\n            //\\n        ],\\n    },\\n    {\\n        script: \\\"/jobs/work.js\\\",\\n        requires: {\\n            strength: 200,\\n            defense: 200,\\n            dexterity: 200,\\n            agility: 200,\\n            charisma: 150,\\n        },\\n        args: [\\n            \\\"--company=National Security Agency\\\",\\n            \\\"--position=Security\\\",\\n            //\\n        ],\\n    },\\n    {\\n        script: \\\"/jobs/work.js\\\",\\n        requires: {\\n            strength: 175,\\n            defense: 175,\\n            dexterity: 175,\\n            agility: 175,\\n            charisma: 175,\\n            rep: 8000,\\n            company: \\\"Carmichael Security\\\",\\n        },\\n        args: [\\n            \\\"--company=Carmichael Security\\\",\\n            \\\"--position=Agent\\\",\\n            //\\n        ],\\n    },\\n    {\\n        script: \\\"/jobs/work.js\\\",\\n        requires: {\\n            strength: 125,\\n            defense: 125,\\n            dexterity: 125,\\n            agility: 125,\\n            charisma: 75,\\n        },\\n        args: [\\n            \\\"--company=Carmichael Security\\\",\\n            \\\"--position=Security\\\",\\n            //\\n        ],\\n    },\\n    {\\n        script: \\\"/gym/workout.js\\\",\\n        requires: {\\n            strength: 125,\\n            defense: 125,\\n            dexterity: 125,\\n            charisma: 75,\\n        },\\n        args: [\\\"--goal=125\\\", \\\"--stat=agi\\\"],\\n    },\\n    {\\n        script: \\\"/gym/workout.js\\\",\\n        requires: {\\n            strength: 125,\\n            defense: 125,\\n            charisma: 75,\\n        },\\n        args: [\\\"--goal=125\\\", \\\"--stat=dex\\\"],\\n    },\\n    {\\n        script: \\\"/gym/workout.js\\\",\\n        requires: {\\n            strength: 125,\\n            charisma: 75,\\n        },\\n        args: [\\\"--goal=125\\\", \\\"--stat=def\\\"],\\n    },\\n    {\\n        script: \\\"/gym/workout.js\\\",\\n        requires: {\\n            charisma: 75,\\n        },\\n        args: [\\\"--goal=125\\\", \\\"--stat=str\\\"],\\n    },\\n    {\\n        script: \\\"/jobs/work.js\\\",\\n        requires: {},\\n        args: [\\n            \\\"--company=Joe's Guns\\\",\\n            \\\"--position=part-time employee\\\",\\n            //\\n        ],\\n    },\\n];\\n// These are the moneyScripts we will actually use.\\nconst moneyScripts = crimeFocused;\\nconst lightScripts = [\\n    \\\"/hacking/distributedHack.js\\\",\\n    \\\"/hacking/program.js\\\",\\n    //\\n];\\nconst allScripts = [\\n    ...lightScripts,\\n    \\\"/contracts/start.js\\\",\\n    \\\"/story/backdoors.js\\\",\\n    //\\n];\\nconst repScript = \\\"/rep/grind.js\\\";\\nconst learningScript = \\\"/hacking/school.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || ns.getHostname() !== \\\"home\\\") {\\n        ns.tprint(`This is the main conductor script for running all your automation:\\n      hacks, nukes, contracts, crimes, etc. It should be run from your home computer and should always be running on home.`);\\n        ns.tprint(\\\"It requires no arguments so just run it!\\\");\\n        ns.tprint(`It currently uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.`);\\n        ns.tprint(`USAGE: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    const totalRam = (ns.getServerMaxRam(host) - ns.getScriptRam(ns.getScriptName())) * 1e9;\\n    ns.tprint(`You currently have ${ns.nFormat(totalRam, \\\"0.00b\\\")} RAM available for scripts.`);\\n    // Start by killing everything else.\\n    killAll(ns);\\n    // calculate memory required for allScripts\\n    let memory = 0;\\n    for (const script of [\\n        ...setupScripts,\\n        ...moneyScripts.map((s) => s.script),\\n        ...allScripts,\\n        repScript,\\n    ]) {\\n        await ns.sleep(1);\\n        memory += ns.getScriptRam(script);\\n    }\\n    const allScriptMem = memory * 1e9;\\n    ns.tprint(`In order to run all scripts you need ${ns.nFormat(allScriptMem, \\\"0.00b\\\")} of RAM.`);\\n    memory = 0;\\n    for (const script of [\\n        ...setupScripts,\\n        ...moneyScripts.map((s) => s.script),\\n        ...lightScripts,\\n        repScript,\\n    ]) {\\n        await ns.sleep(1);\\n        memory += ns.getScriptRam(script);\\n    }\\n    ns.tprint(`In order to run light scripts you need ${ns.nFormat(memory * 1e9, \\\"0.00b\\\")} of RAM.`);\\n    while (true) {\\n        await ns.sleep(pollingInterval);\\n        // Determine size of home PC.\\n        // Determine what scripts can run.\\n        // Run Appropriate scripts.\\n        // Always start by running setupScripts.\\n        for (const script of setupScripts) {\\n            await ns.sleep(1);\\n            if (!ns.scriptRunning(script, host))\\n                ns.run(script);\\n            while (ns.scriptRunning(script, ns.getHostname()))\\n                await ns.sleep(1);\\n        }\\n        if (totalRam >= allScriptMem) {\\n            for (const script of allScripts) {\\n                if (!ns.scriptRunning(script, host))\\n                    ns.run(script);\\n            }\\n        }\\n        else {\\n            for (const script of lightScripts) {\\n                if (!ns.scriptRunning(script, host))\\n                    ns.run(script);\\n            }\\n        }\\n        ns.clearLog();\\n        // Next check if we have outstanding faction invitations.\\n        for (const faction of ns.checkFactionInvitations()) {\\n            ns.print(`Joining ${faction}`);\\n            ns.joinFaction(faction);\\n        }\\n        ns.print(\\\"All factions joined!\\\");\\n        // // Now we get the augmentations that make crime pay!\\n        // // A good source of income.\\n        // if (\\n        //   !(await GetAugmentations(\\n        //     ns,\\n        //     (aug) =>\\n        //       !!ns.getAugmentationStats(aug.name).crime_money_mult ||\\n        //       !!ns.getAugmentationStats(aug.name).crime_success_mult\\n        //   ))\\n        // )\\n        //   continue;\\n        // ns.print(\\\"Purchased all crime augmentations!\\\");\\n        // // Now for augmentations that improve hacking.\\n        // if (\\n        //   !(await GetAugmentations(ns, (aug) => {\\n        //     let stats = ns.getAugmentationStats(aug.name);\\n        //     return (\\n        //       !!stats.hacking_mult ||\\n        //       !!stats.hacking_exp_mult ||\\n        //       !!stats.hacking_money_mult ||\\n        //       !!stats.hacking_speed_mult ||\\n        //       !!stats.hacking_grow_mult ||\\n        //       !!stats.hacking_chance_mult\\n        //     );\\n        //   }))\\n        // )\\n        //   continue;\\n        // ns.print(\\\"Purchased all hacking augmentations!\\\");\\n        // Now go for broke and install everything else!\\n        if (!(await GetAugmentations(ns)))\\n            continue;\\n        ns.print(\\\"Purchased all available augmentations!\\\");\\n        // check if we have augmentations to install\\n        if (ns.getOwnedAugmentations(true).length -\\n            ns.getOwnedAugmentations(false).length >\\n            0) {\\n            ns.installAugmentations(\\\"/start.js\\\");\\n        }\\n        else {\\n            //nothing to install so just focus on hacking\\n            if (!ns.scriptRunning(learningScript, host))\\n                ns.run(learningScript);\\n        }\\n    }\\n}\\nasync function GetAugmentations(ns, filter = (_) => true) {\\n    await ns.sleep(pollingInterval);\\n    // only do this stuff if we are not busy programming.\\n    if (localStorage.getItem(keys.isProgramming) === \\\"true\\\") {\\n        ns.print(`Waiting for programming to finish before continuing.`);\\n        return false;\\n    }\\n    // if we are taking a class stop\\n    if (ns.scriptRunning(learningScript, host)) {\\n        ns.scriptKill(learningScript, host);\\n        ns.stopAction();\\n    }\\n    // determine if we are part of any factions with uninstalled\\n    // augmentations.\\n    const { factions } = ns.getPlayer();\\n    if (factions.length === 0) {\\n        // We aren't in any factions!\\n        return true;\\n    }\\n    const ownedAugs = ns.getOwnedAugmentations(true);\\n    const neededAugs = factions.flatMap((faction) => {\\n        let augmentations = [];\\n        for (const aug of ns.getAugmentationsFromFaction(faction)) {\\n            if (ownedAugs.includes(aug) || aug.startsWith(\\\"NeuroFlux\\\"))\\n                continue;\\n            augmentations.push(aug);\\n        }\\n        return augmentations.map((name) => {\\n            const price = ns.getAugmentationPrice(name);\\n            const rep = ns.getAugmentationRepReq(name);\\n            const preReqs = ns\\n                .getAugmentationPrereq(name)\\n                .filter((aug) => !ownedAugs.includes(aug));\\n            return {\\n                name,\\n                price,\\n                faction,\\n                rep,\\n                preReqs,\\n            };\\n        });\\n    });\\n    if (neededAugs.length === 0) {\\n        // We don't need anything our factions have to offer!\\n        return true;\\n    }\\n    // find the most expensive augmentation and work to earn it.\\n    let targetAug = {\\n        name: \\\"\\\",\\n        price: 0,\\n        faction: \\\"\\\",\\n        rep: 0,\\n        preReqs: [],\\n    };\\n    for (let aug of neededAugs) {\\n        await ns.sleep(1);\\n        if (aug.price > targetAug.price &&\\n            aug.preReqs.length === 0 &&\\n            filter(aug)) {\\n            targetAug = aug;\\n        }\\n    }\\n    if (targetAug.name === \\\"\\\") {\\n        // none of the augmentations match our filter.\\n        return true;\\n    }\\n    if (targetAug.price > ns.getServerMoneyAvailable(host)) {\\n        // get enough money for augmentation.\\n        ns.print(`\\n        Working to be able to afford ${targetAug.name} from ${targetAug.faction}.\\n        `);\\n        ns.enableLog(\\\"run\\\");\\n        for (const ms of moneyScripts) {\\n            const { requires } = ms;\\n            const { rep, company } = requires;\\n            const { hacking, strength, defense, dexterity, agility, charisma } = ns.getPlayer();\\n            if (company && rep) {\\n                const playerRep = ns.getCompanyRep(company);\\n                if (playerRep < rep)\\n                    continue;\\n            }\\n            if ((!requires.hacking || requires.hacking <= hacking) &&\\n                (!requires.strength || requires.strength <= strength) &&\\n                (!requires.defense || requires.defense <= defense) &&\\n                (!requires.dexterity || requires.dexterity <= dexterity) &&\\n                (!requires.agility || requires.agility <= agility) &&\\n                (!requires.charisma || requires.charisma <= charisma)) {\\n                ns.tail();\\n                // kill any other running moneyScripts\\n                // And stop their coresponding actions.\\n                for (const { script, args } of moneyScripts) {\\n                    if (script === ms.script && args === ms.args)\\n                        continue;\\n                    if (ns.isRunning(script, host, `--goal=${targetAug.price}`, ...(args || []))) {\\n                        ns.kill(script, host, `--goal=${targetAug.price}`, ...(args || []));\\n                        ns.stopAction();\\n                    }\\n                }\\n                // Also kill any repScript that may be running.\\n                if (ns.scriptRunning(repScript, host)) {\\n                    ns.scriptKill(repScript, host);\\n                    ns.stopAction();\\n                }\\n                const script = ms.script;\\n                if (!ns.scriptRunning(script, host))\\n                    ns.run(script, 1, `--goal=${targetAug.price}`, ...(ms.args || []));\\n                break;\\n            }\\n        }\\n        return false;\\n    }\\n    else if (targetAug.rep > ns.getFactionRep(targetAug.faction)) {\\n        ns.tail();\\n        ns.print(`\\n        Working for ${targetAug.faction} until we have ${ns.nFormat(targetAug.rep, \\\"0.00a\\\")} so we can buy ${targetAug.name}\\n        `);\\n        // kill any running moneyScripts\\n        // And stop their coresponding actions.\\n        for (const { script } of moneyScripts) {\\n            if (ns.scriptRunning(script, host)) {\\n                ns.scriptKill(script, host);\\n                ns.stopAction();\\n            }\\n        }\\n        if (!ns.scriptRunning(repScript, host)) {\\n            ns.run(repScript, 1, `--goal=${targetAug.rep}`, targetAug.faction);\\n        }\\n        return false;\\n    }\\n    else {\\n        ns.print(`\\n        Purchasing ${targetAug.name} from ${targetAug.faction} for ${ns.nFormat(targetAug.price, \\\"$0.00a\\\")}\\n        `);\\n        ns.enableLog(\\\"purchaseAugmentation\\\");\\n        ns.purchaseAugmentation(targetAug.faction, targetAug.name);\\n        return false;\\n    }\\n}\\nfunction killAll(ns) {\\n    for (const host of getServers()) {\\n        if (host.hostname === \\\"home\\\") {\\n            for (const ps of ns.ps(host.hostname)) {\\n                if (ps.filename === ns.getScriptName())\\n                    continue;\\n                ns.scriptKill(ps.filename, host.hostname);\\n            }\\n        }\\n        else {\\n            ns.killall(host.hostname);\\n        }\\n    }\\n}\\n\",\"filename\":\"start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///320f9135-3d0b-40bd-93eb-f6e3b4cda065\",\"moduleSequenceNumber\":1127},{\"filename\":\"start.js\",\"url\":\"blob:file:///21982a9e-372f-412a-a35b-155bda7e21c1\",\"moduleSequenceNumber\":1261}],\"dependents\":[],\"ramUsage\":630.7,\"server\":\"home\",\"moduleSequenceNumber\":172888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":48},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"installAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":40},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":40},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getCompanyRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys, PortHackPrograms } from \\\"consts\\\";\\nlet servers = [];\\nfunction recursiveScan(ns, parent = \\\"home\\\", server = \\\"home\\\") {\\n    const children = ns.scan(server);\\n    if (!servers.map((s) => s.hostname).includes(server))\\n        servers.push(ns.getServer(server));\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        recursiveScan(ns, server, child);\\n    }\\n}\\n/**\\n * Get server data and save it to localStorage.\\n */\\nfunction getServers(ns) {\\n    recursiveScan(ns);\\n    localStorage.setItem(keys.serverList, JSON.stringify(servers));\\n}\\n/**\\n * Get the number of ports the user can hack and store it in localStorage.\\n */\\nfunction getPorts(ns) {\\n    // get the ports\\n    let ports = 0;\\n    let programs = PortHackPrograms;\\n    for (const p of programs) {\\n        if (ns.fileExists(p))\\n            ports++;\\n    }\\n    localStorage.setItem(keys.hackablePorts, JSON.stringify(ports));\\n}\\n/**\\n * Get the users installed and purchased augmentations\\n */\\nfunction getAugs(ns) {\\n    let allAugs = ns.getOwnedAugmentations(true);\\n    let installedAugs = ns.getOwnedAugmentations(false);\\n    let queuedAugs = allAugs.filter((a) => !installedAugs.includes(a));\\n    localStorage.setItem(keys.augmentationsQueued, JSON.stringify(queuedAugs));\\n    localStorage.setItem(keys.augmentationsInstalled, JSON.stringify(installedAugs));\\n}\\n/**\\n * Get the factions the player belongs to and store them.\\n */\\nfunction getFactions(ns) {\\n    let factions = ns.getPlayer().factions;\\n    let data = factions.map((f) => ({\\n        name: f,\\n        rep: ns.getFactionRep(f),\\n        favor: ns.getFactionFavor(f),\\n        augs: ns\\n            .getAugmentationsFromFaction(f)\\n            .map((a) => ns.getAugmentationStats(a)),\\n    }));\\n    localStorage.setItem(keys.factions, JSON.stringify(data));\\n}\\n/** Get the source files owned by the player */\\nfunction getSourceFiles(ns) {\\n    let sourceFiles = ns.getOwnedSourceFiles();\\n    localStorage.setItem(keys.sourceFiles, JSON.stringify(sourceFiles));\\n}\\n/**\\n * The main entry point for the program.\\n */\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will update the list of servers on the network as well as some other player data for use in other scripts. It should be run regularly to ensure accurate data in other scripts.\\n\\n      Usage: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    getServers(ns);\\n    getPorts(ns);\\n    getFactions(ns);\\n    getAugs(ns);\\n    getSourceFiles(ns);\\n}\\n\",\"filename\":\"/utils/updateStorage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///7b283da6-b7d4-41e7-9d81-22998241d3e7\",\"moduleSequenceNumber\":163507},{\"filename\":\"/utils/updateStorage.js\",\"url\":\"blob:file:///f88f180a-f6a7-494d-9f48-1be770b8e0e6\",\"moduleSequenceNumber\":164476}],\"dependents\":[],\"ramUsage\":281.4,\"server\":\"home\",\"moduleSequenceNumber\":172882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nfunction getServers() {\\n    const data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nfunction getHackablePorts() {\\n    const data = localStorage.getItem(keys.hackablePorts);\\n    if (!data)\\n        return 0;\\n    return JSON.parse(data);\\n}\\nfunction getNukableServers() {\\n    return getServers().filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= getHackablePorts());\\n}\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will nuke all servers possible.\\n\\n      This script currently uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    nukeAllServers(ns);\\n}\\nfunction nukeAllServers(ns) {\\n    const servers = getNukableServers();\\n    let programs = [\\n        {\\n            name: \\\"BruteSSH.exe\\\",\\n            exec: ns.brutessh,\\n        },\\n        {\\n            name: \\\"FTPCrack.exe\\\",\\n            exec: ns.ftpcrack,\\n        },\\n        {\\n            name: \\\"relaySMTP.exe\\\",\\n            exec: ns.relaysmtp,\\n        },\\n        {\\n            name: \\\"HTTPWorm.exe\\\",\\n            exec: ns.httpworm,\\n        },\\n        {\\n            name: \\\"SQLInject.exe\\\",\\n            exec: ns.sqlinject,\\n        },\\n    ];\\n    for (const host of servers) {\\n        for (const program of programs) {\\n            if (ns.fileExists(program.name))\\n                program.exec(host.hostname);\\n        }\\n        ns.print(`NUKEing ${host.hostname}`);\\n        ns.nuke(host.hostname);\\n    }\\n}\\n\",\"filename\":\"/hacking/nukeAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///9b9901d1-76b5-4ede-a682-840448e032ba\",\"moduleSequenceNumber\":163507},{\"filename\":\"/hacking/nukeAll.js\",\"url\":\"blob:file:///1589b997-3efc-492f-8fbc-4c6f3c1e72d5\",\"moduleSequenceNumber\":163566}],\"dependents\":[],\"ramUsage\":3.4,\"server\":\"home\",\"moduleSequenceNumber\":172864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nfunction getServers() {\\n    const data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nfunction getRichestServer(hackingLevel) {\\n    let servers = getServers();\\n    let richest;\\n    for (const server of servers) {\\n        if ((!richest || richest.moneyMax < server.moneyMax) &&\\n            server.hasAdminRights &&\\n            server.requiredHackingSkill <= hackingLevel) {\\n            richest = server;\\n        }\\n    }\\n    return richest;\\n}\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = getRichestServer(ns.getHackingLevel());\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will generate money by hacking the richest server possible.\\n      It automatically finds the richest server that the user can hack.\\n      If you are seeing this message and didn't use the --help flag then\\n      you either haven't run the /utils/updateServers.ts script since you installed augmentations\\n      or you haven't nuked any servers yet.\\n\\n      This script currently uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    await originalHack(ns, hostname.hostname);\\n}\\nasync function originalHack(ns, hostname) {\\n    while (true) {\\n        if (ns.getServerSecurityLevel(hostname) >\\n            ns.getServerMinSecurityLevel(hostname)) {\\n            await ns.weaken(hostname);\\n        }\\n        else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n            await ns.grow(hostname);\\n        }\\n        else {\\n            await ns.hack(hostname);\\n        }\\n    }\\n}\\n\",\"filename\":\"/hacking/cheapHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///7d3ba7d4-b5b5-4323-a3fb-e96e36249da3\",\"moduleSequenceNumber\":163507},{\"filename\":\"/hacking/cheapHack.js\",\"url\":\"blob:file:///f8941a40-9771-4e74-b848-7226c48d14d1\",\"moduleSequenceNumber\":163643}],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":172862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nconst workTypes = [\\n    \\\"Hacking\\\",\\n    \\\"Field\\\",\\n    \\\"Security\\\",\\n    //\\n];\\nfunction getServers() {\\n    const data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const faction = args._.join(\\\" \\\");\\n    const targetRep = args.goal;\\n    if (args.help || !faction) {\\n        ns.tprint(`\\n      This program will grind reputation from a given faction using every available\\n      system's resources.\\n\\n      Can optionally take a goal reputation to stop.\\n      USAGE: run ${ns.getScriptName()} [--goal=TARGET_REP] FACTION_NAME\\n      `);\\n        return;\\n    }\\n    let servers = getServers();\\n    let { factions } = ns.getPlayer();\\n    if (!factions.includes(faction)) {\\n        ns.tprint(`You are not a member of ${faction}`);\\n    }\\n    for (const server of servers) {\\n        const host = server.hostname;\\n        if (host === \\\"home\\\")\\n            continue;\\n        ns.killall(host);\\n        await ns.scp(\\\"/remote/share.js\\\", host);\\n        ns.exec(\\\"/remote/share.js\\\", host);\\n        await ns.sleep(1);\\n    }\\n    let workType;\\n    if (ns.isBusy())\\n        ns.stopAction();\\n    while (targetRep === 0 ||\\n        ns.getFactionRep(faction) + ns.getPlayer().workRepGained < targetRep) {\\n        await ns.sleep(500);\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(`Working for ${faction} until you have ${ns.nFormat(targetRep, \\\"0.00a\\\")} rep.`);\\n        if (workType) {\\n            ns.print(`Doing ${workType} Work for ${faction}`);\\n        }\\n        if (!ns.isBusy()) {\\n            if (workType) {\\n                ns.workForFaction(faction, workType, false);\\n            }\\n            else if (!ns.workForFaction(faction, \\\"Hacking\\\", false)) {\\n                ns.print(`${faction} does not support hacking - trying Field Work.`);\\n                if (!ns.workForFaction(faction, \\\"Field\\\", false)) {\\n                    ns.print(`${faction} does not support Field Work - trying Security Work.`);\\n                    if (!ns.workForFaction(faction, \\\"Security\\\", false)) {\\n                        ns.print(`What kind of faction is ${faction} that doesn't support anything!?!`);\\n                    }\\n                    else {\\n                        workType = \\\"Security\\\";\\n                        ns.print(`Doing Security Work for ${faction}`);\\n                    }\\n                }\\n                else {\\n                    workType = \\\"Field\\\";\\n                    ns.print(`Doing Field Work for ${faction}`);\\n                }\\n            }\\n            else {\\n                workType = \\\"Hacking\\\";\\n                ns.print(`Doing Hacking Contracts for ${faction}`);\\n            }\\n        }\\n    }\\n    ns.stopAction();\\n}\\nexport function autocomplete() {\\n    let data = localStorage.getItem(keys.factions);\\n    if (!data)\\n        return [];\\n    let factions = JSON.parse(data);\\n    return factions.map((f) => f.name);\\n}\\n\",\"filename\":\"/rep/grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///83e7e932-bcda-4751-bc1f-1d84cd973587\",\"moduleSequenceNumber\":904},{\"filename\":\"/rep/grind.js\",\"url\":\"blob:file:///0245f87d-577b-4766-ae71-f434903684cc\",\"moduleSequenceNumber\":918}],\"dependents\":[],\"ramUsage\":92.5,\"server\":\"home\",\"moduleSequenceNumber\":172876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":172874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { crimes } from \\\"consts\\\";\\n// The time to sample to find how long before we reach our goal.\\n// The larger this number the more time you need to wait for an estimate.\\n// But the more accurate that estimate will be.\\nconst deltaTimeSample = 1 * 60e3;\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const crimeName = args._.join(\\\" \\\");\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    const { help, goal } = args;\\n    if (help) {\\n        ns.tprint(`\\n      This script will generate money by commiting crimes.\\n      You will not be able to do anything else while this is happening.\\n      The log will automatically pop up so you can kill the script at\\n      any time. You may optionally provide a crime name to focus on that particular crime.\\n      Otherwise the best money making crime that can reasonably be accomplished will be chosen.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      You can also provide a 'goal' in cash and crime will stop once that is achieved.\\n      USAGE: run ${ns.getScriptName()} --goal=[CASH_AMOUNT] [CRIME_NAME]\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    ns.tail();\\n    ns.enableLog(\\\"commitCrime\\\");\\n    function getCrimeData(crime) {\\n        const stats = ns.getCrimeStats(crime);\\n        const time = stats.time;\\n        return {\\n            name: crime,\\n            profit: (stats.money / time) * 1000,\\n            hackGrowth: (stats.hacking_exp / time) * 1000,\\n            strGrowth: (stats.strength_exp / time) * 1000,\\n            defGrowth: (stats.defense_exp / time) * 1000,\\n            dexGrowth: (stats.dexterity_exp / time) * 1000,\\n            agiGrowth: (stats.agility_exp / time) * 1000,\\n            chaGrowth: (stats.charisma_exp / time) * 1000,\\n            successChance: ns.getCrimeChance(crime),\\n        };\\n    }\\n    function getAllCrimeData() {\\n        const result = [];\\n        for (const crime of crimes) {\\n            result.push(getCrimeData(crime));\\n        }\\n        return result;\\n    }\\n    function getCommitableCrimes() {\\n        return getAllCrimeData().filter((c) => \\n        // either there is 100% chance of success\\n        c.successChance >= 1 ||\\n            // Or the the attempt takes less than a minute and there is at least a 50%\\n            // success rate.\\n            (ns.getCrimeStats(c.name).time < 60000 && c.successChance > 0.5));\\n    }\\n    let deltaTimeStart = Date.now();\\n    let deltaCashStart = ns.getServerMoneyAvailable(\\\"home\\\");\\n    let deltaTime = 0;\\n    let deltaCash = 0;\\n    let cashPerMs = 0;\\n    function resetTimer() {\\n        deltaTime = Date.now() - deltaTimeStart;\\n        deltaCash = ns.getServerMoneyAvailable(\\\"home\\\") - deltaCashStart;\\n        if (cashPerMs !== 0) {\\n            cashPerMs = (cashPerMs + deltaCash / deltaTime) / 2;\\n        }\\n        else {\\n            cashPerMs = deltaCash / deltaTime;\\n        }\\n        deltaTimeStart = Date.now();\\n        deltaCashStart = ns.getServerMoneyAvailable(\\\"home\\\");\\n    }\\n    function crimeBreakdown(crimeString) {\\n        const crime = getCrimeData(crimeString);\\n        const combatGrowth = crime.strGrowth + crime.defGrowth + crime.dexGrowth + crime.agiGrowth;\\n        if (goal > 0) {\\n            let timeToGoal;\\n            if (Date.now() - deltaTimeStart >= deltaTimeSample) {\\n                resetTimer();\\n            }\\n            if (cashPerMs > 0) {\\n                timeToGoal = (goal - ns.getServerMoneyAvailable(\\\"home\\\")) / cashPerMs;\\n            }\\n            ns.print(`\\nCommiting '${crime.name}' until you have ${ns.nFormat(goal, \\\"$0.00a\\\")}\\n${ns.nFormat(ns.getServerMoneyAvailable(\\\"home\\\") / goal, \\\"0.00%\\\")} complete.\\nEstimated Time to Completion: ${timeToGoal ? ns.tFormat(timeToGoal) : \\\"Calculating...\\\"}\\n      `);\\n        }\\n    }\\n    function mostProfitableCrime() {\\n        const crimes = getCommitableCrimes();\\n        let best;\\n        for (const crime of crimes) {\\n            if (!best || best.profit < crime.profit) {\\n                best = crime;\\n            }\\n        }\\n        return best?.name;\\n    }\\n    const easiestCrime = \\\"Shoplift\\\";\\n    if (crimeName) {\\n        if (crimes.includes(crimeName)) {\\n            if (ns.isBusy())\\n                ns.stopAction();\\n            resetTimer();\\n            while (ns.getServerMoneyAvailable(\\\"home\\\") < goal || !goal) {\\n                ns.tail();\\n                ns.tail(\\\"/start.js\\\");\\n                ns.clearLog();\\n                crimeBreakdown(crimeName);\\n                if (!ns.isBusy())\\n                    ns.commitCrime(crimeName);\\n                await ns.sleep(ns.getCrimeStats(crimeName).time + 3000);\\n            }\\n        }\\n        else\\n            ns.tprint(`${crimeName} is not a crime! You can use autocomplete to enter a crime name.`);\\n    }\\n    else {\\n        const crime = mostProfitableCrime() || easiestCrime;\\n        if (ns.isBusy())\\n            ns.stopAction();\\n        resetTimer();\\n        while (ns.getServerMoneyAvailable(\\\"home\\\") < goal || !goal) {\\n            ns.clearLog();\\n            ns.tail();\\n            crimeBreakdown(crime);\\n            if (!ns.isBusy())\\n                ns.commitCrime(crime);\\n            await ns.sleep(ns.getCrimeStats(crime).time + 3000);\\n        }\\n    }\\n}\\nexport function autocomplete() {\\n    return [...crimes, \\\"--goal\\\"];\\n}\\n\",\"filename\":\"/crime/start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///4f417f94-ff6e-4c60-9120-951e2e6f1a02\",\"moduleSequenceNumber\":1127},{\"filename\":\"/crime/start.js\",\"url\":\"blob:file:///7011739b-0a18-4949-9e48-58ef821e1f4f\",\"moduleSequenceNumber\":1266}],\"dependents\":[],\"ramUsage\":265.8,\"server\":\"home\",\"moduleSequenceNumber\":172852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nconst maxServers = 50;\\nconst remoteHackScript = \\\"/remote/hackLoop.js\\\";\\nfunction getServers() {\\n    const data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nfunction getServerWithMemory(ns, memory) {\\n    let servers = getServers().filter((s) => {\\n        // update host\\n        s = ns.getServer(s.hostname);\\n        // need admin rights on any server.\\n        if (!s.hasAdminRights)\\n            return false;\\n        // Don't hog the home pc\\n        if (s.hostname.includes(\\\"home\\\"))\\n            return false;\\n        const total = s.maxRam;\\n        const used = s.ramUsed;\\n        const free = (total - used) * 1e9;\\n        return free >= memory;\\n    });\\n    return servers[0];\\n}\\nasync function getRichestServers(ns) {\\n    let cutoff = 1;\\n    let servers = getServers().filter((server) => server.hasAdminRights &&\\n        server.requiredHackingSkill <= ns.getHackingLevel() &&\\n        server.moneyMax >= cutoff);\\n    while (servers.length > maxServers) {\\n        cutoff += 1e3;\\n        servers = servers.filter((server) => server.moneyMax >= cutoff);\\n        await ns.sleep(1);\\n    }\\n    return servers;\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const targets = await getRichestServers(ns);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || targets.length === 0) {\\n        ns.tprint(`\\n      This script will generate money by hacking the richest server possible.\\n      It automatically finds the richest server that the user can hack.\\n      If you are seeing this message and didn't use the --help flag then\\n      you either haven't run the /utils/updateServers.ts script since you installed augmentations\\n      or you haven't nuked any servers yet.\\n\\n      This script currently uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    await distributedHack(ns, targets);\\n}\\nasync function distributedHack(ns, targets) {\\n    while (true) {\\n        await ns.sleep(500);\\n        ns.clearLog();\\n        // if (!ns.isBusy()) {\\n        //   ns.universityCourse(\\n        //     \\\"Rothman University\\\",\\n        //     \\\"Study Computer Science\\\",\\n        //     false\\n        //   );\\n        // }\\n        for (const target of targets) {\\n            ns.print(`Hacking ${target.hostname}`);\\n            const memory = ns.getScriptRam(remoteHackScript) * 1e9;\\n            ns.print(`Requires ${ns.nFormat(memory, \\\"0.00b\\\")} of RAM`);\\n            const host = getServerWithMemory(ns, memory);\\n            if (host) {\\n                const updatedHost = ns.getServer(host.hostname);\\n                ns.print(`${host.hostname} found to hack ${target.hostname}`);\\n                await ns.scp(remoteHackScript, host.hostname);\\n                const threads = Math.floor((updatedHost.maxRam - updatedHost.ramUsed) /\\n                    ns.getScriptRam(remoteHackScript));\\n                if (threads === 0)\\n                    continue;\\n                ns.enableLog(\\\"exec\\\");\\n                ns.exec(remoteHackScript, host.hostname, threads, target.hostname);\\n            }\\n            else {\\n                ns.print(`couldn't find a server to hack ${target.hostname}`);\\n            }\\n            await ns.sleep(3000);\\n        }\\n    }\\n}\\n\",\"filename\":\"/hacking/distributedHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///3d969a0f-d319-41bd-84a3-10f0faaa1329\",\"moduleSequenceNumber\":163507},{\"filename\":\"/hacking/distributedHack.js\",\"url\":\"blob:file:///4de3063b-b33d-4d1b-8d5b-656386ef48f0\",\"moduleSequenceNumber\":163642}],\"dependents\":[],\"ramUsage\":5.65,\"server\":\"home\",\"moduleSequenceNumber\":172860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///8bf4c60c-a714-4302-a346-5242b0ff40c5\",\"moduleSequenceNumber\":7259}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"home\",\"moduleSequenceNumber\":172872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { crimes } from \\\"consts\\\";\\n// The time to sample to find how long before we reach our goal.\\n// The larger this number the more time you need to wait for an estimate.\\n// But the more accurate that estimate will be.\\nconst deltaTimeSample = 1 * 60e3;\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const crimeName = args._.join(\\\" \\\");\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    const { help, goal } = args;\\n    if (help) {\\n        ns.tprint(`\\r\\n      This script will generate money by commiting crimes.\\r\\n      You will not be able to do anything else while this is happening.\\r\\n      The log will automatically pop up so you can kill the script at\\r\\n      any time. You may optionally provide a crime name to focus on that particular crime.\\r\\n      Otherwise the best money making crime that can reasonably be accomplished will be chosen.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n\\r\\n      You can also provide a 'goal' in cash and crime will stop once that is achieved.\\r\\n      USAGE: run ${ns.getScriptName()} --goal=[CASH_AMOUNT] [CRIME_NAME]\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    ns.tail();\\n    ns.enableLog(\\\"commitCrime\\\");\\n    function getCrimeData(crime) {\\n        const stats = ns.getCrimeStats(crime);\\n        const time = stats.time;\\n        return {\\n            name: crime,\\n            profit: (stats.money / time) * 1000,\\n            hackGrowth: (stats.hacking_exp / time) * 1000,\\n            strGrowth: (stats.strength_exp / time) * 1000,\\n            defGrowth: (stats.defense_exp / time) * 1000,\\n            dexGrowth: (stats.dexterity_exp / time) * 1000,\\n            agiGrowth: (stats.agility_exp / time) * 1000,\\n            chaGrowth: (stats.charisma_exp / time) * 1000,\\n            successChance: ns.getCrimeChance(crime),\\n        };\\n    }\\n    function getAllCrimeData() {\\n        const result = [];\\n        for (const crime of crimes) {\\n            result.push(getCrimeData(crime));\\n        }\\n        return result;\\n    }\\n    function getCommitableCrimes() {\\n        return getAllCrimeData().filter((c) => \\n        // either there is 100% chance of success\\n        c.successChance >= 1 ||\\n            // Or the the attempt takes less than a minute and there is at least a 50%\\n            // success rate.\\n            (ns.getCrimeStats(c.name).time < 60000 && c.successChance > 0.5));\\n    }\\n    let deltaTimeStart = Date.now();\\n    let deltaCashStart = ns.getServerMoneyAvailable(\\\"home\\\");\\n    let deltaTime = 0;\\n    let deltaCash = 0;\\n    let cashPerMs = 0;\\n    function resetTimer() {\\n        deltaTime = Date.now() - deltaTimeStart;\\n        deltaCash = ns.getServerMoneyAvailable(\\\"home\\\") - deltaCashStart;\\n        if (cashPerMs !== 0) {\\n            cashPerMs = (cashPerMs + deltaCash / deltaTime) / 2;\\n        }\\n        else {\\n            cashPerMs = deltaCash / deltaTime;\\n        }\\n        deltaTimeStart = Date.now();\\n        deltaCashStart = ns.getServerMoneyAvailable(\\\"home\\\");\\n    }\\n    function crimeBreakdown(crimeString) {\\n        const crime = getCrimeData(crimeString);\\n        const combatGrowth = crime.strGrowth + crime.defGrowth + crime.dexGrowth + crime.agiGrowth;\\n        if (goal > 0) {\\n            let timeToGoal;\\n            if (Date.now() - deltaTimeStart >= deltaTimeSample) {\\n                resetTimer();\\n            }\\n            if (cashPerMs > 0) {\\n                timeToGoal = (goal - ns.getServerMoneyAvailable(\\\"home\\\")) / cashPerMs;\\n            }\\n            ns.print(`\\r\\nCommiting '${crime.name}' until you have ${ns.nFormat(goal, \\\"$0.00a\\\")}\\r\\n${ns.nFormat(ns.getServerMoneyAvailable(\\\"home\\\") / goal, \\\"0.00%\\\")} complete.\\r\\nEstimated Time to Completion: ${timeToGoal ? ns.tFormat(timeToGoal) : \\\"Calculating...\\\"}\\r\\n      `);\\n        }\\n    }\\n    function mostProfitableCrime() {\\n        const crimes = getCommitableCrimes();\\n        let best;\\n        for (const crime of crimes) {\\n            if (!best || best.profit < crime.profit) {\\n                best = crime;\\n            }\\n        }\\n        return best?.name;\\n    }\\n    const easiestCrime = \\\"Shoplift\\\";\\n    if (crimeName) {\\n        if (crimes.includes(crimeName)) {\\n            if (ns.isBusy())\\n                ns.stopAction();\\n            resetTimer();\\n            while (ns.getServerMoneyAvailable(\\\"home\\\") < goal || !goal) {\\n                ns.tail();\\n                ns.clearLog();\\n                crimeBreakdown(crimeName);\\n                if (!ns.isBusy())\\n                    ns.commitCrime(crimeName);\\n                await ns.sleep(ns.getCrimeStats(crimeName).time + 3000);\\n            }\\n        }\\n        else\\n            ns.tprint(`${crimeName} is not a crime! You can use autocomplete to enter a crime name.`);\\n    }\\n    else {\\n        const crime = mostProfitableCrime() || easiestCrime;\\n        if (ns.isBusy())\\n            ns.stopAction();\\n        resetTimer();\\n        while (ns.getServerMoneyAvailable(\\\"home\\\") < goal || !goal) {\\n            ns.clearLog();\\n            ns.tail();\\n            crimeBreakdown(crime);\\n            if (!ns.isBusy())\\n                ns.commitCrime(crime);\\n            await ns.sleep(ns.getCrimeStats(crime).time + 3000);\\n        }\\n    }\\n}\\nexport function autocomplete() {\\n    return [...crimes, \\\"--goal\\\"];\\n}\\n\",\"filename\":\"/jobs/start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":265.8,\"server\":\"home\",\"moduleSequenceNumber\":163517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// The time to sample to find how long before we reach our goal.\\n// The larger this number the more time you need to wait for an estimate.\\n// But the more accurate that estimate will be.\\nconst deltaTimeSample = 1 * 60e3;\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    const { help, goal } = args;\\n    if (help) {\\n        ns.tprint(`\\r\\n      This script will generate money by working for Joe's Guns.\\r\\n      You will not be able to do anything else while this is happening.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n\\r\\n      You can also provide a 'goal' in cash and will stop working once that is achieved.\\r\\n      USAGE: run ${ns.getScriptName()} --goal=[CASH_AMOUNT]\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const company = \\\"Joe's Guns\\\";\\n    const position = \\\"part-time employee\\\";\\n    // apply to work at joe's guns if necessary.\\n    const jobs = Object.keys(ns.getPlayer().jobs);\\n    if (!jobs.includes(company))\\n        ns.applyToCompany(company, position);\\n    // work at joes guns on a loop.\\n    while (goal === 0 || ns.getServerMoneyAvailable(\\\"home\\\") < goal) {\\n        await ns.sleep(300);\\n        ns.tail();\\n        ns.clearLog();\\n        ns.enableLog(\\\"workForCompany\\\");\\n        ns.print(`Working at ${company} until we have ${ns.nFormat(goal, \\\"$0.00a\\\")}`);\\n        if (!ns.isBusy())\\n            ns.workForCompany(company, false);\\n    }\\n}\\nexport function autocomplete() {\\n    return [\\\"--goal=\\\"];\\n}\\n\",\"filename\":\"/jobs/joesGuns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/jobs/joesGuns.js\",\"url\":\"blob:file:///4942e989-8691-4518-a397-2c965b789a7e\",\"moduleSequenceNumber\":6891}],\"dependents\":[],\"ramUsage\":106.3,\"server\":\"home\",\"moduleSequenceNumber\":163518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"workForCompany\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nfunction getServers() {\\n    const data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script kills every script everywhere.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    for (const server of getServers()) {\\n        if (server.hostname === ns.getHostname())\\n            continue;\\n        ns.killall(server.hostname);\\n    }\\n    ns.killall(ns.getHostname());\\n}\\n\",\"filename\":\"/utils/killeverything.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///1c3329b5-c70b-4836-8d2f-9bfc42eb8651\",\"moduleSequenceNumber\":2055},{\"filename\":\"/utils/killeverything.js\",\"url\":\"blob:file:///c16e33a1-3b72-47fc-9ed7-b798c4c213db\",\"moduleSequenceNumber\":2058}],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":172880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will have you study computer science with every free moment.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    const school = \\\"Rothman University\\\";\\n    const course = \\\"Study Computer Science\\\";\\n    while (true) {\\n        await ns.sleep(300);\\n        if (!ns.isBusy()) {\\n            ns.universityCourse(school, course, false);\\n        }\\n    }\\n}\\n\",\"filename\":\"/hacking/school.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hacking/school.js\",\"url\":\"blob:file:///448fe044-49fe-4229-af9e-430201fa33ad\",\"moduleSequenceNumber\":224}],\"dependents\":[],\"ramUsage\":41.7,\"server\":\"home\",\"moduleSequenceNumber\":172868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"universityCourse\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PortHackPrograms } from \\\"consts\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script will generate any possible hacking programs.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.sleep(300);\\n        let programCount = 0;\\n        for (const program of PortHackPrograms) {\\n            if (ns.fileExists(program)) {\\n                programCount++;\\n                continue;\\n            }\\n            if (!ns.isBusy())\\n                ns.createProgram(program, false);\\n        }\\n        if (programCount === PortHackPrograms.length)\\n            return;\\n    }\\n}\\n\",\"filename\":\"/hacking/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":89.8,\"server\":\"home\",\"moduleSequenceNumber\":163521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys, CreateHackPrograms, PortHackPrograms } from \\\"consts\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will generate any possible hacking programs.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // simple trick to let others know when I need to program.\\n    localStorage.setItem(keys.isProgramming, \\\"\\\");\\n    while (true) {\\n        await ns.sleep(300);\\n        ns.clearLog();\\n        let count = 0;\\n        await CreateHackPrograms(ns);\\n        for (const program of PortHackPrograms) {\\n            if (ns.fileExists(program))\\n                count++;\\n        }\\n        if (count === PortHackPrograms.length)\\n            return;\\n    }\\n}\\n\",\"filename\":\"/hacking/program.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///8b8c726a-06fc-4ac4-8931-e3e1338cb03f\",\"moduleSequenceNumber\":1127},{\"filename\":\"/hacking/program.js\",\"url\":\"blob:file:///8ec7ccc1-51e1-40db-b857-55b4d39a0d89\",\"moduleSequenceNumber\":1263}],\"dependents\":[],\"ramUsage\":89.85,\"server\":\"home\",\"moduleSequenceNumber\":172866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PortHackPrograms } from \\\"consts\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will purchase any possible hacking programs.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.sleep(300);\\n        if (!ns.getPlayer().tor) {\\n            if (!ns.purchaseTor())\\n                continue;\\n        }\\n        let programCount = 0;\\n        for (const program of PortHackPrograms) {\\n            if (ns.fileExists(program)) {\\n                programCount++;\\n                continue;\\n            }\\n            if (!ns.isBusy())\\n                ns.purchaseProgram(program);\\n        }\\n        if (programCount === PortHackPrograms.length)\\n            return;\\n    }\\n}\\n\",\"filename\":\"/buying/program.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":74.3,\"server\":\"home\",\"moduleSequenceNumber\":172824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GM } from \\\"gameManager/earlyGM\\\";\\nconst FactionData = [\\n    {\\n        faction: \\\"CyberSec\\\",\\n        server: \\\"CSEC\\\",\\n    },\\n    {\\n        faction: \\\"NiteSec\\\",\\n        server: \\\"avmnite-02h\\\",\\n    },\\n    {\\n        faction: \\\"The Black Hand\\\",\\n        server: \\\"I.I.I.I\\\",\\n    },\\n    {\\n        faction: \\\"BitRunners\\\",\\n        server: \\\"run4theh111z\\\",\\n    },\\n    {\\n        faction: \\\"Fulcrum Secret Technologies\\\",\\n        server: \\\"fulcrumassets\\\",\\n    },\\n];\\nexport async function main(ns) {\\n    const gm = new GM(ns);\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script automatically tries to backdoor the main story line servers if you are not a member of their faction.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.sleep(300);\\n        ns.clearLog();\\n        const { factions } = ns.getPlayer();\\n        for (const fd of FactionData) {\\n            if (factions.includes(fd.faction))\\n                continue;\\n            await gm.backdoor(fd.server);\\n        }\\n    }\\n}\\n\",\"filename\":\"/story/backdoors.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/gameManager/earlyGM.js\",\"url\":\"blob:file:///b95ef4c2-d7ef-40bc-9766-8b085c4153a5\",\"moduleSequenceNumber\":1097},{\"filename\":\"/story/backdoors.js\",\"url\":\"blob:file:///f295c76e-afb8-49c5-8c2c-25e2847c9a8f\",\"moduleSequenceNumber\":1265}],\"dependents\":[],\"ramUsage\":243.95,\"server\":\"home\",\"moduleSequenceNumber\":172878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// The time to sample to find how long before we reach our goal.\\n// The larger this number the more time you need to wait for an estimate.\\n// But the more accurate that estimate will be.\\nconst deltaTimeSample = 1 * 60e3;\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    const { help, goal } = args;\\n    if (help) {\\n        ns.tprint(`\\r\\n      This script will generate money by working for MegaCorp.\\r\\n      You will not be able to do anything else while this is happening.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n\\r\\n      You can also provide a 'goal' in cash and will stop working once that is achieved.\\r\\n      USAGE: run ${ns.getScriptName()} --goal=[CASH_AMOUNT]\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const company = \\\"MegaCorp\\\";\\n    const position = \\\"Business\\\";\\n    // apply to work at joe's guns if necessary.\\n    const jobs = Object.keys(ns.getPlayer().jobs);\\n    if (!jobs.includes(company))\\n        ns.applyToCompany(company, position);\\n    // work at joes guns on a loop.\\n    while (goal === 0 || ns.getServerMoneyAvailable(\\\"home\\\") < goal) {\\n        await ns.sleep(300);\\n        ns.tail();\\n        ns.clearLog();\\n        ns.enableLog(\\\"workForCompany\\\");\\n        ns.print(`Working at ${company} until we have ${ns.nFormat(goal, \\\"$0.00a\\\")}`);\\n        if (!ns.isBusy())\\n            ns.workForCompany(company, false);\\n    }\\n}\\nexport function autocomplete() {\\n    return [\\\"--goal=\\\"];\\n}\\n\",\"filename\":\"/jobs/megaCorp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":106.3,\"server\":\"home\",\"moduleSequenceNumber\":163525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"workForCompany\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// The time to sample to find how long before we reach our goal.\\n// The larger this number the more time you need to wait for an estimate.\\n// But the more accurate that estimate will be.\\nconst deltaTimeSample = 1 * 60e3;\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"company\\\", \\\"MegaCorp\\\"],\\n        [\\\"position\\\", \\\"Business\\\"],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    const { help, goal } = args;\\n    if (help) {\\n        ns.tprint(`\\n      This script will generate money by working for the provided company (default MegaCorp)\\n      doing the given job (default Business) until you reach the given goal (default 0=indefinite).\\n      You will not be able to do anything else while this is happening.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      You can also provide a 'goal' in cash and will stop working once that is achieved.\\n      USAGE: run ${ns.getScriptName()} [--goal=CASH_AMOUNT] [--company=\\\"COMPANY_NAME\\\"] [--position=\\\"POSITION_NAME\\\"]\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"workForCompany\\\");\\n    ns.clearLog();\\n    const company = args.company.trim('\\\"');\\n    const position = args.position.trim('\\\"');\\n    // work at joes guns on a loop.\\n    while (goal === 0 || ns.getServerMoneyAvailable(\\\"home\\\") < goal) {\\n        await ns.sleep(300);\\n        ns.tail();\\n        ns.clearLog();\\n        ns.print(`Working at ${company} until we have ${ns.nFormat(goal, \\\"$0.00a\\\")}`);\\n        if (!ns.isBusy()) {\\n            // apply to work or for promotion.\\n            ns.applyToCompany(company, position);\\n            ns.workForCompany(company, false);\\n        }\\n    }\\n}\\nexport function autocomplete() {\\n    return ['--goal=\\\"', '--company=\\\"', '--position=\\\"'];\\n}\\n\",\"filename\":\"/jobs/work.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/jobs/work.js\",\"url\":\"blob:file:///f84e9138-660f-4aa4-99a9-33a6942ce318\",\"moduleSequenceNumber\":46055}],\"dependents\":[],\"ramUsage\":105.8,\"server\":\"home\",\"moduleSequenceNumber\":172870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"workForCompany\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GM } from \\\"gameManager/earlyGM\\\";\\nconst gyms = [\\n    {\\n        gym: \\\"Powerhouse Gym\\\",\\n        server: \\\"powerhouse-fitness\\\",\\n    },\\n    {\\n        gym: \\\"Iron Gym\\\",\\n        server: \\\"iron-gym\\\",\\n    },\\n];\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n        [\\\"stat\\\", \\\"str\\\"],\\n        [\\\"nodebt\\\", false],\\n    ]);\\n    const { goal, stat, nodebt, } = args;\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This scripts works out at the most efficient gym.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      Option            | Description\\n      ==========================\\n      --help              Displays this help message.\\n\\n      --goal=value        Stops when your chosen stat reaches a certain value.\\n\\n      --stat=value        The stat you wish to train (str|def|dex|agi).\\n\\n      --nodebt            Stop working out when you run out of money.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    function statCheck(goal) {\\n        if (stat.toLowerCase().startsWith(\\\"str\\\"))\\n            return ns.getPlayer().strength < goal;\\n        if (stat.toLowerCase().startsWith(\\\"def\\\"))\\n            return ns.getPlayer().defense < goal;\\n        if (stat.toLowerCase().startsWith(\\\"dex\\\"))\\n            return ns.getPlayer().dexterity < goal;\\n        if (stat.toLowerCase().startsWith(\\\"agi\\\"))\\n            return ns.getPlayer().agility < goal;\\n        return true;\\n    }\\n    const gm = new GM(ns);\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.stopAction();\\n    while (goal === 0 || statCheck(goal)) {\\n        await ns.sleep(300);\\n        ns.clearLog();\\n        if (nodebt && ns.getServerMoneyAvailable(\\\"home\\\") <= 0) {\\n            ns.stopAction();\\n            return;\\n        }\\n        for (const g of gyms) {\\n            const { server, gym } = g;\\n            if (await gm.backdoor(server)) {\\n                // now work out here.\\n                if (goal > 0) {\\n                    if (nodebt) {\\n                        ns.print(`Working out at ${gym} until you run out of money or your ${stat} reaches ${goal}`);\\n                    }\\n                    else {\\n                        ns.print(`Working out at ${gym} until your ${stat} reaches ${goal}`);\\n                    }\\n                }\\n                else {\\n                    ns.tail();\\n                    ns.print(`Working out at ${gym} to train your ${stat} until you manually stop this script.`);\\n                }\\n                if (!ns.isBusy())\\n                    ns.gymWorkout(gym, stat, false);\\n            }\\n        }\\n        // check if we are busy.\\n        if (!ns.isBusy()) {\\n            // we couldn't find a gym we could backdoor.\\n            // we should workout at the last gym as it is the cheapest.\\n            const { gym } = gyms[gyms.length - 1];\\n            ns.gymWorkout(gym, stat, false);\\n        }\\n    }\\n}\\nexport function autocomplete() {\\n    return [\\n        \\\"--help\\\",\\n        \\\"--goal=\\\",\\n        \\\"--stat=str\\\",\\n        \\\"--stat=def\\\",\\n        \\\"--stat=dex\\\",\\n        \\\"--stat=agi\\\",\\n        \\\"--nodebt\\\",\\n    ];\\n}\\n\",\"filename\":\"/gym/workout.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/gameManager/earlyGM.js\",\"url\":\"blob:file:///9fc6138a-0815-4710-8d36-0df3fd85b683\",\"moduleSequenceNumber\":1166},{\"filename\":\"/gym/workout.js\",\"url\":\"blob:file:///908e3652-5bf2-43e8-89e3-18dfbb64b36b\",\"moduleSequenceNumber\":1201}],\"dependents\":[],\"ramUsage\":292.05,\"server\":\"home\",\"moduleSequenceNumber\":172856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":32},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function setData(key, data) {\\n    localStorage.setItem(key, JSON.stringify(data));\\n}\\nfunction getData(key) {\\n    JSON.parse(localStorage.getItem(key) || JSON.stringify(undefined));\\n}\\n// The keys for localStorage.\\nconst keys = {\\n    // The complete list of servers with their data.\\n    serverList: \\\"serverList\\\",\\n    // Are we programming?\\n    isProgramming: \\\"Is Programming\\\",\\n};\\nexport async function main(ns) {\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    ns.tprint(`\\n      This file is not meant to be called. It holds the wrapper class for game managed functions.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      `);\\n}\\n/**\\n * This is the main wrapper Game Manager class.\\n * It holds all the data and functionality of common actions in the game.\\n */\\nexport class GM {\\n    /**\\n     * The primary constructor loads basic data for the gm.\\n     */\\n    constructor(ns) {\\n        this._ns = ns;\\n        this.updateStorage();\\n    }\\n    /**\\n     * These are the HackPrograms used to open ports for hacking and executing\\n     * scripts.\\n     *\\n     * It is an array of simple objects holding:\\n     * filename: the name of the file.\\n     * execute: the ns fuction to use the program.\\n     * programmingLevel: the required programmingLevel to create the program.\\n     */\\n    get HackPrograms() {\\n        return [\\n            {\\n                filename: \\\"BruteSSH.exe\\\",\\n                execute: this.ns.brutessh,\\n                programmingLevel: 50,\\n            },\\n            {\\n                filename: \\\"FTPCrack.exe\\\",\\n                execute: this.ns.ftpcrack,\\n                programmingLevel: 100,\\n            },\\n            {\\n                filename: \\\"relaySMTP.exe\\\",\\n                execute: this.ns.relaysmtp,\\n                programmingLevel: 250,\\n            },\\n            {\\n                filename: \\\"HTTPWorm.exe\\\",\\n                execute: this.ns.httpworm,\\n                programmingLevel: 500,\\n            },\\n            {\\n                filename: \\\"SQLInject.exe\\\",\\n                execute: this.ns.sqlinject,\\n                programmingLevel: 750,\\n            },\\n        ];\\n    }\\n    /**\\n     * This function creates hacking programs if it can. Does nothing if it can't\\n     * or if they are already created.\\n     */\\n    async createPrograms() {\\n        // check if we have nothing to program.\\n        if (this.hackablePorts === this.HackPrograms.length)\\n            return;\\n        // otherwise create hack programs.\\n        for (const p of this.HackPrograms) {\\n            if (this.ns.fileExists(p.filename))\\n                continue;\\n            if (p.programmingLevel > this.ns.getHackingLevel())\\n                break;\\n            // here we know we have the programming chops and the file doesn't already\\n            // exist.\\n            this.isProgramming = true;\\n            while (!this.ns.fileExists(p.filename)) {\\n                if (!this.ns.isBusy())\\n                    this.ns.createProgram(p.filename);\\n                await this.ns.sleep(500);\\n            }\\n            this.isProgramming = false;\\n        }\\n    }\\n    /**\\n     * This is the Netscript instance used to create the Game Manager.\\n     */\\n    get ns() {\\n        return this._ns;\\n    }\\n    /**\\n     * The list of all available servers. Used for hacking purposes.\\n     */\\n    get serverList() {\\n        return getData(keys.serverList) || [];\\n    }\\n    set serverList(data) {\\n        setData(keys.serverList, data);\\n    }\\n    /**\\n     * This is simply the count of all our hacking programs.\\n     */\\n    get hackablePorts() {\\n        let count = 0;\\n        for (const p of this.HackPrograms.map((p) => p.filename)) {\\n            if (this.ns.fileExists(p))\\n                count++;\\n        }\\n        return count;\\n    }\\n    /**\\n     * The augmentations that we currently have. This is split into:\\n     * installed: those augmentations we have installed.\\n     * queued: those augmentations we have purchased and have not yet installed.\\n     *\\n     * There is also a helper method:\\n     * includes(aug) -> boolean\\n     * This tests if an augmentation is in either {installed} or {queued} lists.\\n     */\\n    get augmentations() {\\n        let installed = this.ns.getOwnedAugmentations(false);\\n        let queued = this.ns\\n            .getOwnedAugmentations(true)\\n            .filter((a) => !installed.includes(a));\\n        return {\\n            installed,\\n            queued,\\n            includes(value) {\\n                return this.installed.includes(value) || this.queued.includes(value);\\n            },\\n        };\\n    }\\n    /**\\n     * This is a flag to let other operations know if we are working on a program.\\n     */\\n    get isProgramming() {\\n        return getData(keys.isProgramming);\\n    }\\n    set isProgramming(data) {\\n        setData(keys.isProgramming, data);\\n    }\\n    /**\\n     * This updates the stored variables.\\n     * Currently it only updates the serverList.\\n     */\\n    updateStorage() {\\n        // This method will pull data from localStorage and update it if necessary.\\n        // The only data that should be stored are things that take some time to\\n        // calculate - or things that can't be calculated.\\n        //\\n        // Generate serverList if necessary.\\n        this.recursiveScan();\\n    }\\n    /**\\n     * This will return true if the server is nuked.\\n     * If the server is not nuked but can be this will nuke it and return true.\\n     * If the server cannot be nuked this will return false.\\n     *\\n     * TLDR; true = you have root access. false = you can't get root access yet.\\n     */\\n    nuke(host) {\\n        if (this.ns.hasRootAccess(host)) {\\n            // already nuked\\n            return true;\\n        }\\n        if (this.ns.getServerNumPortsRequired(host) > this.hackablePorts) {\\n            // cannot nuke\\n            return false;\\n        }\\n        for (const p of this.HackPrograms) {\\n            if (this.ns.fileExists(p.filename))\\n                p.execute(host);\\n        }\\n        this.ns.nuke(host);\\n        return true;\\n    }\\n    /**\\n     * This will return true if a backdoor is installed.\\n     * If not and a backdoor can be installed this installs it and returns true.\\n     * If we can't backdoor the server yet this returns false.\\n     *\\n     * TLDR; true = this server has the backdoor installed. false = we can't\\n     * install the backdoor yet.\\n     */\\n    async backdoor(host) {\\n        // check if the backdoor is already installed.\\n        if (this.ns.getServer(host).backdoorInstalled)\\n            return true;\\n        // check if we have/can get admin priviledges.\\n        if (!this.nuke(host))\\n            return false;\\n        // We know we have admin priviledges now...\\n        if (this.ns.getServerRequiredHackingLevel(host) > this.ns.getHackingLevel())\\n            // We can't backdoor the server yet.\\n            return false;\\n        await this.connect(host);\\n        await this.ns.installBackdoor();\\n        await this.connect(\\\"home\\\");\\n        return true;\\n    }\\n    /**\\n     * This kills every script on every host - including the script that calls it.\\n     */\\n    killEverything() {\\n        for (const { hostname } of this.serverList) {\\n            this.ns.killall(hostname);\\n        }\\n    }\\n    /**\\n     * This kills every script on every host except the script that calls it.\\n     */\\n    killEverythingElse() {\\n        for (const { hostname } of this.serverList) {\\n            for (const ps of this.ns.ps(hostname)) {\\n                if (this.ns.getScriptName() === ps.filename &&\\n                    this.ns.getHostname() === hostname)\\n                    continue;\\n                this.ns.scriptKill(ps.filename, hostname);\\n            }\\n        }\\n    }\\n    /**\\n     * This connects to any valid server regardless of path.\\n     */\\n    async connect(target) {\\n        // always start from home\\n        this.ns.connect(\\\"home\\\");\\n        // check if our job is done?\\n        if (target === \\\"home\\\")\\n            return true;\\n        let route = [];\\n        if (!this.ns.serverExists(target))\\n            return;\\n        if (!this.find(target, route)) {\\n            this.ns.print(`Could not find server ${target}`);\\n            return false;\\n        }\\n        for (const i of route) {\\n            if (this.ns.serverExists(i))\\n                this.ns.connect(i);\\n            await this.ns.sleep(1);\\n        }\\n        return true;\\n    }\\n    /**\\n     * This is a helper method to find the path to a server.\\n     * Used by connect()\\n     */\\n    find(target, route = [], parent = \\\"\\\", server = \\\"home\\\") {\\n        const children = this.ns.scan(server);\\n        for (let child of children) {\\n            if (parent == child) {\\n                continue;\\n            }\\n            if (child == target) {\\n                route.unshift(child);\\n                route.unshift(server);\\n                return true;\\n            }\\n            if (this.find(target, route, server, child)) {\\n                route.unshift(server);\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    /**\\n     * This is a helper method used to generate the exhaustive server list.\\n     */\\n    recursiveScan(parent = \\\"\\\", server = \\\"home\\\") {\\n        const children = this.ns.scan(server);\\n        if (!this.serverList.map((s) => s.hostname).includes(server))\\n            this.serverList.push(this.ns.getServer(server));\\n        for (const child of children) {\\n            if (parent == child)\\n                continue;\\n            this.recursiveScan(server, child);\\n        }\\n    }\\n}\\n\",\"filename\":\"/gameManager/earlyGM.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":243.45,\"server\":\"home\",\"moduleSequenceNumber\":172858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const scripts = [\\n    \\\"hacknet.js\\\",\\n    \\\"/phase1/cnct.js\\\",\\n    \\\"/phase1/backdoor.js\\\",\\n    \\\"/phase1/programs.js\\\",\\n    \\\"/phase1/basicHack.js\\\",\\n    // `expandServer.js` and `actions/programming.js` is currently failing until we can level up Source File 4\\n    // '/phase1/expandServer.js',\\n    // '/actions/programming.js',\\n];\\nconst maxRam = 32e9;\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will test all phase 1 scripts memory requirements.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let pass = true;\\n    let failedScripts = [];\\n    for (const script of scripts) {\\n        const ram = ns.getScriptRam(script, \\\"home\\\") * 1e9;\\n        if (ram > maxRam) {\\n            pass = false;\\n            failedScripts.push(script);\\n            ns.tprint(`${script} requires ${ns.nFormat(ram, \\\"0.00b\\\")} RAM - that's too much!`);\\n        }\\n        else {\\n            ns.tprint(`${script} only requires ${ns.nFormat(ram, \\\"0.00b\\\")} RAM`);\\n        }\\n    }\\n    if (!pass) {\\n        ns.tprint(`FAIL! You still need to work on these scripts:\\n      ${failedScripts}`);\\n    }\\n    else {\\n        ns.tprint(\\\"SUCCESS!\\\");\\n    }\\n}\\n\",\"filename\":\"/phase1/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/phase1/test.js\",\"url\":\"blob:file:///83cee65f-3940-4ca6-bc91-92cee5032825\",\"moduleSequenceNumber\":202056}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":211254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const allowancePercentage = 0.01;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n            let gain = [0, 0, 0];\\n            let currentCash = ns.getServerMoneyAvailable(\\\"home\\\");\\n            currentCash *= allowancePercentage;\\n            if (ns.hacknet.getPurchaseNodeCost() <= currentCash) {\\n                ns.hacknet.purchaseNode();\\n                continue;\\n            }\\n            const node = ns.hacknet.getNodeStats(i);\\n            if (node.level < 200) {\\n                gain[0] =\\n                    ((node.level + 1) *\\n                        1.6 *\\n                        Math.pow(1.035, node.ram - 1) *\\n                        ((node.cores + 5) / 6)) /\\n                        ns.hacknet.getLevelUpgradeCost(i, 1);\\n            }\\n            else {\\n                gain[0] = 0;\\n            }\\n            if (node.ram < 64) {\\n                gain[1] =\\n                    (node.level *\\n                        1.6 *\\n                        Math.pow(1.035, node.ram * 2 - 1) *\\n                        ((node.cores + 5) / 6)) /\\n                        ns.hacknet.getRamUpgradeCost(i, 1);\\n            }\\n            else {\\n                gain[1] = 0;\\n            }\\n            if (node.cores < 16) {\\n                gain[2] =\\n                    (node.level *\\n                        1.6 *\\n                        Math.pow(1.035, node.ram - 1) *\\n                        ((node.cores + 6) / 6)) /\\n                        ns.hacknet.getCoreUpgradeCost(i, 1);\\n            }\\n            else {\\n                gain[2] = 0;\\n            }\\n            ns.print(`Level Upgrade: ${gain[0]}`);\\n            ns.print(`Ram Upgrade: ${gain[1]}`);\\n            ns.print(`Core Upgrade: ${gain[2]}`);\\n            let topgain = 0;\\n            for (let g of gain) {\\n                if (g > topgain) {\\n                    topgain = g;\\n                }\\n            }\\n            if (topgain === 0) {\\n                ns.print(`All Gains maxed on Node ${i}`);\\n                break;\\n            }\\n            if (topgain === gain[0] &&\\n                ns.hacknet.getLevelUpgradeCost(i, 1) < currentCash) {\\n                ns.print(`Upgrading Level on Node ${i}`);\\n                ns.hacknet.upgradeLevel(i, 1);\\n            }\\n            if (topgain === gain[1] &&\\n                ns.hacknet.getRamUpgradeCost(i, 1) < currentCash) {\\n                ns.print(`Upgrading Ram on Node ${i}`);\\n                ns.hacknet.upgradeRam(i, 1);\\n            }\\n            if (topgain === gain[2] &&\\n                ns.hacknet.getCoreUpgradeCost(i, 1) < currentCash) {\\n                ns.print(`Upgrading Cores on Node ${i}`);\\n                ns.hacknet.upgradeCore(i, 1);\\n            }\\n            else {\\n                ns.print(`Cannot afford upgrades on Node ${i}`);\\n            }\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\\n\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///c9f9aebc-0aea-4108-b82d-3c32b3649506\",\"moduleSequenceNumber\":198226}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":211286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const C = {\\n    keys: {\\n        serverNodes: \\\"ServerNodes\\\",\\n    },\\n    // This is a cheaper alternative to get the serverNodes.\\n    // Requires initialization using `new ServerTree(ns)`\\n    getHomeServerNode() {\\n        return get(C.keys.serverNodes);\\n    },\\n};\\nexport function copyCmd(ns, cmd) {\\n    const terminalInput = document.getElementById(\\\"terminal-input\\\");\\n    if (!terminalInput) {\\n        ns.tprint(\\\"Couldn't get terminal-input field.\\\");\\n        return;\\n    }\\n    terminalInput.value = cmd;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({ target: terminalInput });\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\nexport function runCmd(ns, cmd) {\\n    copyCmd(ns, cmd);\\n    document.dispatchEvent(new KeyboardEvent(\\\"keydown\\\", { keyCode: 13 }));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return branch;\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n        store(C.keys.serverNodes, this.home);\\n    }\\n    // This is a cheaper alternative to get the serverNodes.\\n    // Requires initialization using `new ServerTree(ns)`\\n    static getHomeServerNode() {\\n        return get(C.keys.serverNodes);\\n    }\\n}\\n// localStorage Functions\\nfunction store(key, value) {\\n    localStorage.setItem(key, JSON.stringify(value));\\n}\\nfunction get(key) {\\n    JSON.parse(localStorage.getItem(key) || JSON.stringify(undefined));\\n}\\n\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":30.8,\"server\":\"home\",\"moduleSequenceNumber\":182781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase1/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///fe4988d3-0757-47b4-ba6d-5b057da6b294\",\"moduleSequenceNumber\":188685},{\"filename\":\"/utils/nuke.js\",\"url\":\"blob:file:///21771e9c-4829-44fc-b43c-62e4415a193c\",\"moduleSequenceNumber\":188683},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///e50111ae-3d4c-4972-a8f2-c6f2cbbf91cd\",\"moduleSequenceNumber\":188689},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///775e4adc-e15c-4991-aa11-c34f6efa82ea\",\"moduleSequenceNumber\":188681},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///af64decc-bda2-4247-b1bf-0451ef4bb8ca\",\"moduleSequenceNumber\":188687},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///6c0bf380-2501-4e29-a98b-9708c0161466\",\"moduleSequenceNumber\":188685},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///b162559c-f65e-40b7-9b6d-25d6e57afbda\",\"moduleSequenceNumber\":188681},{\"filename\":\"/utils/index.js\",\"url\":\"blob:file:///108eeb86-cc94-48a0-abc9-12bf6001d5fe\",\"moduleSequenceNumber\":188679},{\"filename\":\"/phase1/cnct.js\",\"url\":\"blob:file:///077ec6da-c3c9-4d06-a013-e6109d0e35cc\",\"moduleSequenceNumber\":188741}],\"dependents\":[],\"ramUsage\":29.3,\"server\":\"home\",\"moduleSequenceNumber\":211244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ProgramData {\\n    constructor(ns) {\\n        this.programs = [\\n            {\\n                filename: \\\"BruteSSH.exe\\\",\\n                hackingLevel: 50,\\n                execute: ns.brutessh,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"FTPCrack.exe\\\",\\n                hackingLevel: 100,\\n                execute: ns.ftpcrack,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"relaySMTP.exe\\\",\\n                hackingLevel: 250,\\n                execute: ns.relaysmtp,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"HTTPWorm.exe\\\",\\n                hackingLevel: 500,\\n                execute: ns.httpworm,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"SQLInject.exe\\\",\\n                hackingLevel: 750,\\n                execute: ns.sqlinject,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n        ];\\n    }\\n    get hackablePorts() {\\n        let total = 0;\\n        for (const p of this.programs) {\\n            if (p.exists)\\n                total++;\\n        }\\n        return total;\\n    }\\n}\\n\",\"filename\":\"/utils/ProgramData.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":211278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function copyCmd(ns, cmd) {\\n    const terminalInput = document.getElementById(\\\"terminal-input\\\");\\n    if (!terminalInput) {\\n        ns.tprint(\\\"Couldn't get terminal-input field.\\\");\\n        return;\\n    }\\n    terminalInput.value = cmd;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({ target: terminalInput });\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\nexport function runCmd(ns, cmd) {\\n    copyCmd(ns, cmd);\\n    document.dispatchEvent(new KeyboardEvent(\\\"keydown\\\", { keyCode: 13 }));\\n}\\n\",\"filename\":\"/utils/terminal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":211282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const keys = {\\n    serverNodes: \\\"ServerNodes\\\",\\n};\\n// localStorage Functions\\nexport function setItem(key, value) {\\n    localStorage.setItem(key, JSON.stringify(value));\\n}\\nexport function getItem(key) {\\n    JSON.parse(localStorage.getItem(key) || JSON.stringify(undefined));\\n}\\n\",\"filename\":\"/utils/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":182523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const keys = {\\n    serverNodes: \\\"ServerNodes\\\",\\n};\\n// localStorage Functions\\nexport function setItem(key, value) {\\n    localStorage.setItem(key, JSON.stringify(value));\\n}\\nexport function getItem(key) {\\n    JSON.parse(localStorage.getItem(key) || JSON.stringify(undefined));\\n}\\n\",\"filename\":\"/utils/localStorage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":211274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setItem, keys } from \\\"utils/localStorage.js\\\";\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return branch;\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n        setItem(keys.serverNodes, this.home);\\n    }\\n}\\n\",\"filename\":\"/utils/ServerTree.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":211280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export * from \\\"utils/localStorage.js\\\";\\nexport * from \\\"utils/ProgramData.js\\\";\\nexport * from \\\"utils/ServerTree.js\\\";\\nexport * from \\\"utils/terminal.js\\\";\\nexport * from \\\"utils/nuke.js\\\";\\n\",\"filename\":\"/utils/index.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":188679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { ServerNode } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script will monitor for servers that need a backdoor installed.\\r\\n      It will also nuke any server that needs it.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    const programs = new ProgramData(ns);\\n    while (true) {\\n        // 30 seconds should be a perfectly reasonable update time.\\n        await ns.sleep(30000);\\n        let servers = new ServerNode(ns);\\n        // find nukable servers.\\n        for (const server of servers\\n            .list()\\n            .filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts)) {\\n            // nuke them.\\n            ns.print(`nuking ${server.hostname}`);\\n            nuke(ns, server.hostname);\\n        }\\n        // clear the log.\\n        ns.clearLog();\\n        let backdoors = servers\\n            .list()\\n            .filter((s) => s.hasAdminRights &&\\n            !s.backdoorInstalled &&\\n            s.requiredHackingSkill < ns.getHackingLevel() &&\\n            s.hostname !== \\\"home\\\");\\n        // show the log if we have servers to backdoor\\n        if (backdoors.length === 0) {\\n            ns.print(\\\"No servers require a backdoor at this time.\\\");\\n            continue;\\n        }\\n        ns.tail();\\n        ns.print(`The following servers need to have the backdoor installed:`);\\n        ns.print(`==========================================================`);\\n        // find backdoorable servers.\\n        for (const server of backdoors) {\\n            // list them.\\n            ns.print(server.hostname);\\n        }\\n        ns.print(`==========================================================`);\\n    }\\n}\\n\",\"filename\":\"/phase1/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///e2e108f6-96c6-4ae9-b80e-8de4ab2bc1b8\",\"moduleSequenceNumber\":195489},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///d3af3b7d-f623-40c4-a969-8872a42ff91a\",\"moduleSequenceNumber\":195485},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///637c3dea-1a97-47f0-8a22-743a38042db7\",\"moduleSequenceNumber\":195491},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///3384ae04-0077-4d96-a246-5e0ebc6c5e84\",\"moduleSequenceNumber\":195489},{\"filename\":\"/utils/nuke.js\",\"url\":\"blob:file:///0a514da2-94c9-4c39-9c5e-5d6b3544e49e\",\"moduleSequenceNumber\":195487},{\"filename\":\"/phase1/backdoor.js\",\"url\":\"blob:file:///9e9549de-7d66-49c5-8ede-459c25ade9b7\",\"moduleSequenceNumber\":198227}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"home\",\"moduleSequenceNumber\":211238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ProgramData } from \\\"utils/ProgramData\\\";\\nexport function nuke(ns, target) {\\n    const programs = new ProgramData(ns);\\n    for (const p of programs.programs) {\\n        if (p.exists)\\n            p.execute(target);\\n    }\\n    ns.nuke(target);\\n}\\n\",\"filename\":\"/utils/nuke.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":211276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///737eed04-9a1d-49ff-bcc4-f8e6417d9b52\",\"moduleSequenceNumber\":211598}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":211598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers, getRunnableServers } from \\\"phase1/cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      Hacks the richest server from every available server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = undefined;\\n    for (const server of getHackableServers(ns)) {\\n        if (!richest || richest.moneyMax < server.moneyMax)\\n            richest = server;\\n    }\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    // copy the hack script to all the servers we have admin priveledges to.\\n    for (const server of getRunnableServers(ns)) {\\n        if (!server || server.hostname === \\\"home\\\")\\n            continue;\\n        ns.killall(server.hostname);\\n        const hackScript = \\\"hack.js\\\";\\n        await ns.scp(hackScript, server.hostname);\\n        // calculate the maximum number of threads.\\n        let maxThreads = Math.floor(server.maxRam / ns.getScriptRam(hackScript, server.hostname));\\n        // hack the richest server\\n        if (maxThreads > 0)\\n            ns.exec(hackScript, server.hostname, maxThreads, richest.hostname);\\n    }\\n}\\n\",\"filename\":\"/phase1/basicHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///2473317d-46f2-4ebf-84e5-c4a3eabe67c5\",\"moduleSequenceNumber\":208017},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///8a287cf4-5980-44a8-a4e8-76e261bdb015\",\"moduleSequenceNumber\":208013},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///c68a9f58-27cf-478f-8469-1c981616ee2b\",\"moduleSequenceNumber\":208019},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///53604636-039e-44f9-a5af-0ccbbac97065\",\"moduleSequenceNumber\":208021},{\"filename\":\"/phase1/cnct.js\",\"url\":\"blob:file:///8188eaec-4f49-4cf7-ad3d-46a9c603aaa8\",\"moduleSequenceNumber\":207989},{\"filename\":\"/phase1/basicHack.js\",\"url\":\"blob:file:///0388c13d-c09d-454f-b2ab-0f0174da7f6f\",\"moduleSequenceNumber\":208739}],\"dependents\":[],\"ramUsage\":6.7,\"server\":\"home\",\"moduleSequenceNumber\":211242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This monitors for programs that need created and creates the program if\\r\\n      you have Source File 4. If not it prompts the user to create the program.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    const data = new ProgramData(ns);\\n    while (true) {\\n        await ns.sleep(30 * 1000);\\n        ns.clearLog();\\n        for (const program of data.programs) {\\n            if (!program.exists && program.hackingLevel <= ns.getHackingLevel()) {\\n                // this program needs created.\\n                if (ns\\n                    .getOwnedSourceFiles()\\n                    .map((s) => s.n)\\n                    .includes(4) ||\\n                    ns.getPlayer().bitNodeN === 4) {\\n                    // we have source file 4 or we are in bitNodeN 4\\n                    if (!ns.scriptRunning(\\\"phase1/actions/programming.js\\\", ns.getHostname()))\\n                        ns.run(\\\"phase1/actions/programming.js\\\", 1, program.filename);\\n                }\\n                else {\\n                    // we don't have access to singularity.\\n                    ns.tail();\\n                    ns.print(`Please create ${program.filename}`);\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase1/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///0fc5d33a-c573-48e1-bb90-bd886ba935d8\",\"moduleSequenceNumber\":203262},{\"filename\":\"/phase1/programs.js\",\"url\":\"blob:file:///62be8b22-6e17-47a7-a23a-6dd2c5a516d5\",\"moduleSequenceNumber\":203563}],\"dependents\":[],\"ramUsage\":9.65,\"server\":\"home\",\"moduleSequenceNumber\":211250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script will run continuously and expand your server for you. It will\\r\\n      only work with Source File 4.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMaxRam(\\\"home\\\") < 1e9) {\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeRamCost()) {\\n            ns.upgradeHomeRam();\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeCoresCost()) {\\n            ns.upgradeHomeCores();\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase1/expandServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":145.85,\"server\":\"home\",\"moduleSequenceNumber\":211246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const programName = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !programName) {\\n        ns.tprint(`\\r\\n      This script will create a program for you.\\r\\n      It requires Source File 4 to work.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} PROGRAM_NAME\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    while (!ns.fileExists(programName)) {\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(`Creating ${programName}`);\\n        await ns.sleep(1);\\n        if (!ns.isBusy() || !ns.getPlayer().workType.includes(\\\"Program\\\"))\\n            ns.createProgram(programName);\\n    }\\n}\\n\",\"filename\":\"/phase1/actions/programming.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":90.3,\"server\":\"home\",\"moduleSequenceNumber\":211240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const programName = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !programName) {\\n        ns.tprint(`\\r\\n      This script will create a program for you.\\r\\n      It requires Source File 4 to work.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} PROGRAM_NAME\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    while (!ns.fileExists(programName)) {\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(`Creating ${programName}`);\\n        await ns.sleep(1);\\n        if (!ns.isBusy() || !ns.getPlayer().workType.includes(\\\"Program\\\"))\\n            ns.createProgram(programName);\\n    }\\n}\\n\",\"filename\":\"/phase2/actions/programming.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":90.3,\"server\":\"home\",\"moduleSequenceNumber\":211256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script will run continuously and expand your server for you. It will\\r\\n      only work with Source File 4.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMaxRam(\\\"home\\\") < 1e9) {\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeRamCost()) {\\n            ns.upgradeHomeRam();\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeCoresCost()) {\\n            ns.upgradeHomeCores();\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase2/expandServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":145.85,\"server\":\"home\",\"moduleSequenceNumber\":211264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { ServerNode } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script will monitor for servers that need a backdoor installed.\\r\\n      It will also nuke any server that needs it.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    const programs = new ProgramData(ns);\\n    while (true) {\\n        // 30 seconds should be a perfectly reasonable update time.\\n        await ns.sleep(30000);\\n        let servers = new ServerNode(ns);\\n        // find nukable servers.\\n        for (const server of servers\\n            .list()\\n            .filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts)) {\\n            // nuke them.\\n            ns.print(`nuking ${server.hostname}`);\\n            nuke(ns, server.hostname);\\n        }\\n        // clear the log.\\n        ns.clearLog();\\n        let backdoors = servers\\n            .list()\\n            .filter((s) => s.hasAdminRights &&\\n            !s.backdoorInstalled &&\\n            s.requiredHackingSkill < ns.getHackingLevel() &&\\n            s.hostname !== \\\"home\\\");\\n        // show the log if we have servers to backdoor\\n        if (backdoors.length === 0) {\\n            ns.print(\\\"No servers require a backdoor at this time.\\\");\\n            continue;\\n        }\\n        ns.tail();\\n        ns.print(`The following servers need to have the backdoor installed:`);\\n        ns.print(`==========================================================`);\\n        // find backdoorable servers.\\n        for (const server of backdoors) {\\n            // list them.\\n            ns.print(server.hostname);\\n        }\\n        ns.print(`==========================================================`);\\n    }\\n}\\n\",\"filename\":\"/phase2/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"home\",\"moduleSequenceNumber\":211258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers, getRunnableServers } from \\\"phase1/cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      Hacks the richest server from every available server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = undefined;\\n    for (const server of getHackableServers(ns)) {\\n        if (!richest || richest.moneyMax < server.moneyMax)\\n            richest = server;\\n    }\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    // copy the hack script to all the servers we have admin priveledges to.\\n    for (const server of getRunnableServers(ns)) {\\n        if (!server || server.hostname === \\\"home\\\")\\n            continue;\\n        ns.killall(server.hostname);\\n        const hackScript = \\\"hack.js\\\";\\n        await ns.scp(hackScript, server.hostname);\\n        // calculate the maximum number of threads.\\n        let maxThreads = Math.floor(server.maxRam / ns.getScriptRam(hackScript, server.hostname));\\n        // hack the richest server\\n        if (maxThreads > 0)\\n            ns.exec(hackScript, server.hostname, maxThreads, richest.hostname);\\n    }\\n}\\n\",\"filename\":\"/phase2/basicHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.7,\"server\":\"home\",\"moduleSequenceNumber\":211260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///b98d4c5d-cfa2-4714-b7a3-0415d293405c\",\"moduleSequenceNumber\":211278},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///1c9ab012-ed82-4a9b-8db5-6bcd678711de\",\"moduleSequenceNumber\":211274},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///5d17c571-048f-45a0-b466-d5ca0460310b\",\"moduleSequenceNumber\":211280},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///d875410b-5822-427f-92ae-591ff5b3ee6e\",\"moduleSequenceNumber\":211282},{\"filename\":\"/phase2/cnct.js\",\"url\":\"blob:file:///1bf66d97-7bac-4781-ae01-7afe3cc86723\",\"moduleSequenceNumber\":258621}],\"dependents\":[],\"ramUsage\":29.3,\"server\":\"home\",\"moduleSequenceNumber\":258621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This monitors for programs that need created and creates the program if\\r\\n      you have Source File 4. If not it prompts the user to create the program.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    const data = new ProgramData(ns);\\n    while (true) {\\n        await ns.sleep(30 * 1000);\\n        ns.clearLog();\\n        for (const program of data.programs) {\\n            if (!program.exists && program.hackingLevel <= ns.getHackingLevel()) {\\n                // this program needs created.\\n                if (ns\\n                    .getOwnedSourceFiles()\\n                    .map((s) => s.n)\\n                    .includes(4) ||\\n                    ns.getPlayer().bitNodeN === 4) {\\n                    // we have source file 4 or we are in bitNodeN 4\\n                    if (!ns.scriptRunning(\\\"phase1/actions/programming.js\\\", ns.getHostname()))\\n                        ns.run(\\\"phase1/actions/programming.js\\\", 1, program.filename);\\n                }\\n                else {\\n                    // we don't have access to singularity.\\n                    ns.tail();\\n                    ns.print(`Please create ${program.filename}`);\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase2/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.65,\"server\":\"home\",\"moduleSequenceNumber\":211268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const scripts = [\\n    \\\"hacknet.js\\\",\\n    \\\"/phase2/cnct.js\\\",\\n    \\\"/phase2/backdoor.js\\\",\\n    \\\"/phase2/programs.js\\\",\\n    \\\"/phase2/basicHack.js\\\",\\n    \\\"/phase2/expandServer.js\\\",\\n    \\\"/actions/programming.js\\\",\\n];\\nconst maxRam = 1e12;\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will test all phase 1 scripts memory requirements.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let pass = true;\\n    let failedScripts = [];\\n    for (const script of scripts) {\\n        const ram = ns.getScriptRam(script, \\\"home\\\") * 1e9;\\n        if (ram > maxRam) {\\n            pass = false;\\n            failedScripts.push(script);\\n            ns.tprint(`${script} requires ${ns.nFormat(ram, \\\"0.00b\\\")} RAM - that's too much!`);\\n        }\\n        else {\\n            ns.tprint(`${script} only requires ${ns.nFormat(ram, \\\"0.00b\\\")} RAM`);\\n        }\\n    }\\n    if (!pass) {\\n        ns.tprint(`FAIL! You still need to work on these scripts:\\n      ${failedScripts}`);\\n    }\\n    else {\\n        ns.tprint(\\\"SUCCESS!\\\");\\n    }\\n}\\n\",\"filename\":\"/phase2/test.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/phase2/test.js\",\"url\":\"blob:file:///82634db5-4448-4f1d-9536-f8004ab15d87\",\"moduleSequenceNumber\":211289}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":211289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":211288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"phase1/cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      Shares all the servers possible.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    // copy the share script to all the servers we have admin priveledges to.\\n    for (const server of getRunnableServers(ns)) {\\n        if (!server || server.hostname === \\\"home\\\")\\n            continue;\\n        ns.killall(server.hostname);\\n        const shareScript = \\\"share.js\\\";\\n        await ns.scp(shareScript, server.hostname);\\n        // calculate the maximum number of threads.\\n        let maxThreads = Math.floor(server.maxRam / ns.getScriptRam(shareScript, server.hostname));\\n        // hack the richest server\\n        if (maxThreads > 0)\\n            ns.exec(shareScript, server.hostname, maxThreads);\\n    }\\n}\\n\",\"filename\":\"/phase1/shareAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///7db7606b-c887-4d55-873a-5dedb01c4f34\",\"moduleSequenceNumber\":208017},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///d02536dc-b7f5-4e76-b7e1-f81c87d7517c\",\"moduleSequenceNumber\":208013},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///8c1fdc0b-7431-466f-a2b9-e4dc0bad31f6\",\"moduleSequenceNumber\":208019},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///77fb067a-7ac2-4fec-8202-3ca3a476814f\",\"moduleSequenceNumber\":208021},{\"filename\":\"/phase1/cnct.js\",\"url\":\"blob:file:///618a1956-0244-4fbb-8150-1029404447d3\",\"moduleSequenceNumber\":207989},{\"filename\":\"/phase1/shareAll.js\",\"url\":\"blob:file:///a144d7f0-d74f-42ee-b15f-9728f5149dca\",\"moduleSequenceNumber\":208028}],\"dependents\":[],\"ramUsage\":6.65,\"server\":\"home\",\"moduleSequenceNumber\":211252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"phase1/cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      Hacks the richest server using the rest of your RAM.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = undefined;\\n    for (const server of getHackableServers(ns)) {\\n        if (!richest || richest.moneyMax < server.moneyMax)\\n            richest = server;\\n    }\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    const hackScript = \\\"hack.js\\\";\\n    // calculate the maximum number of threads.\\n    let maxThreads = Math.floor((ns.getServerMaxRam(ns.getHostname()) -\\n        ns.getServerUsedRam(ns.getHostname()) +\\n        ns.getScriptRam(ns.getScriptName(), ns.getHostname())) /\\n        ns.getScriptRam(hackScript, ns.getHostname()));\\n    // hack the richest server\\n    if (maxThreads > 0)\\n        ns.spawn(hackScript, maxThreads, richest.hostname);\\n    else {\\n        ns.tprint(\\\"ERROR! Cannot spawn hack script. Out of memory.\\\");\\n    }\\n}\\n\",\"filename\":\"/phase1/hackRichest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///1615351e-dbd4-4fdf-9b5b-189f840ead9d\",\"moduleSequenceNumber\":209822},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///3988558a-e4a2-46b4-a833-1a0267be10b6\",\"moduleSequenceNumber\":209818},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///9ace0e54-3f9c-4c7e-8b42-7c0c5ff1eda1\",\"moduleSequenceNumber\":209824},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///5244965e-7ea7-4892-958c-e7349d5e584d\",\"moduleSequenceNumber\":209826},{\"filename\":\"/phase1/cnct.js\",\"url\":\"blob:file:///c1647b5f-f630-423c-91a6-999a767e6c07\",\"moduleSequenceNumber\":209792},{\"filename\":\"/phase1/hackRichest.js\",\"url\":\"blob:file:///04c0524a-5787-4ca1-8fe0-2aa45dacf43b\",\"moduleSequenceNumber\":209833}],\"dependents\":[],\"ramUsage\":6.45,\"server\":\"home\",\"moduleSequenceNumber\":211248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"phase1/cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      Hacks the richest server using the rest of your RAM.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = undefined;\\n    for (const server of getHackableServers(ns)) {\\n        if (!richest || richest.moneyMax < server.moneyMax)\\n            richest = server;\\n    }\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    const hackScript = \\\"hack.js\\\";\\n    // calculate the maximum number of threads.\\n    let maxThreads = Math.floor((ns.getServerMaxRam(ns.getHostname()) -\\n        ns.getServerUsedRam(ns.getHostname()) +\\n        ns.getScriptRam(ns.getScriptName(), ns.getHostname())) /\\n        ns.getScriptRam(hackScript, ns.getHostname()));\\n    // hack the richest server\\n    if (maxThreads > 0)\\n        ns.spawn(hackScript, maxThreads, richest.hostname);\\n    else {\\n        ns.tprint(\\\"ERROR! Cannot spawn hack script. Out of memory.\\\");\\n    }\\n}\\n\",\"filename\":\"/phase2/hackRichest.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///d21f692b-cb3d-4c0c-a4cd-63cdbd499019\",\"moduleSequenceNumber\":211278},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///81a1710e-28d9-42c8-a27c-2ba508d0a787\",\"moduleSequenceNumber\":211274},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///2d4b3b77-8d35-49c5-9dd1-20f5a1994bbf\",\"moduleSequenceNumber\":211280},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///e5adc75a-11d7-4244-a61b-2d100fea663d\",\"moduleSequenceNumber\":211282},{\"filename\":\"/phase1/cnct.js\",\"url\":\"blob:file:///fd5847ff-2f39-4de4-9cbb-ada58c5cd483\",\"moduleSequenceNumber\":211244},{\"filename\":\"/phase2/hackRichest.js\",\"url\":\"blob:file:///734ba8c6-1591-4f0a-9e13-ec351f20b255\",\"moduleSequenceNumber\":211597}],\"dependents\":[],\"ramUsage\":6.45,\"server\":\"home\",\"moduleSequenceNumber\":211597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"phase1/cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      Shares all the servers possible.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    // copy the share script to all the servers we have admin priveledges to.\\n    for (const server of getRunnableServers(ns)) {\\n        if (!server || server.hostname === \\\"home\\\")\\n            continue;\\n        ns.killall(server.hostname);\\n        const shareScript = \\\"share.js\\\";\\n        await ns.scp(shareScript, server.hostname);\\n        // calculate the maximum number of threads.\\n        let maxThreads = Math.floor(server.maxRam / ns.getScriptRam(shareScript, server.hostname));\\n        // hack the richest server\\n        if (maxThreads > 0)\\n            ns.exec(shareScript, server.hostname, maxThreads);\\n    }\\n}\\n\",\"filename\":\"/phase2/shareAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.65,\"server\":\"home\",\"moduleSequenceNumber\":211270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"87.3.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":35749522647,\"moneyMax\":893738066175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1106,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"61.9.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":55076237884,\"moneyMax\":1376905947100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1342,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"54.7.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":29855325752,\"moneyMax\":746383143800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":997,\"serverGrowth\":77}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"5.5.6.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":29788052332,\"moneyMax\":744701308300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":979,\"serverGrowth\":71}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"91.8.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":37963789511,\"moneyMax\":949094737775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1068,\"serverGrowth\":89}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"7.5.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":15012567788,\"moneyMax\":375314194700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1202,\"serverGrowth\":48}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"97.5.4.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":16621539176,\"moneyMax\":415538479400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":963,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"73.7.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":15597831215,\"moneyMax\":389945780375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1215,\"serverGrowth\":91}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"1.2.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":25546532808,\"moneyMax\":638663320200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1126,\"serverGrowth\":93}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"32.7.2.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1519070828,\"moneyMax\":37976770700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":989,\"serverGrowth\":81}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"77.5.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1181,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"45.8.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1062655567,\"moneyMax\":26566389175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1014,\"serverGrowth\":81}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"72.7.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":844575841,\"moneyMax\":21114396025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":863,\"serverGrowth\":65}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"47.9.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":819808935,\"moneyMax\":20495223375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":944,\"serverGrowth\":75}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"81.0.1.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":673992045,\"moneyMax\":16849801125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":72}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"20.2.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":770878672,\"moneyMax\":19271966800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":836,\"serverGrowth\":77}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"62.3.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":900861983,\"moneyMax\":22521549575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":912,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"18.1.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1131442856,\"moneyMax\":28286071400,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":860,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"76.8.1.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":769846018,\"moneyMax\":19246150450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":853,\"serverGrowth\":61}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"80.3.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":668622513,\"moneyMax\":16715562825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":84}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"82.4.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":839705732,\"moneyMax\":20992643300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":884,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"1.4.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":824953713,\"moneyMax\":20623842825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":842,\"serverGrowth\":78}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"53.4.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1136147360,\"moneyMax\":28403684000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":879,\"serverGrowth\":62}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"50.9.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":984533593,\"moneyMax\":24613339825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":946,\"serverGrowth\":61}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"39.1.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":903316327,\"moneyMax\":22582908175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":794,\"serverGrowth\":70}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"44.2.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":719574631,\"moneyMax\":17989365775,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":845,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"24.7.4.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":835674176,\"moneyMax\":20891854400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":791,\"serverGrowth\":74}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"57.4.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1642564247,\"moneyMax\":41064106175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":879,\"serverGrowth\":67}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"92.5.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1506968441,\"moneyMax\":37674211025,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":765,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"51.9.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":1194832510,\"moneyMax\":29870812750,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":840,\"serverGrowth\":76}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"18.7.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1449194389,\"moneyMax\":36229859725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"18.1.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1086347247,\"moneyMax\":27158681175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":794,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"98.2.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":709919733,\"moneyMax\":17747993325,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":660,\"serverGrowth\":60}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"63.8.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":556584369,\"moneyMax\":13914609225,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":520,\"serverGrowth\":50}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"97.8.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":744553452,\"moneyMax\":18613836300,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":597,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"55.9.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":242995207,\"moneyMax\":6074880175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":431,\"serverGrowth\":37}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"18.6.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":227183774,\"moneyMax\":5679594350,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":413,\"serverGrowth\":44}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"79.0.4.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":974156923,\"moneyMax\":24353923075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":749,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"70.5.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":237670242,\"moneyMax\":5941756050,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":437,\"serverGrowth\":51}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"45.4.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":426802742,\"moneyMax\":10670068550,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":618,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"52.8.9.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":435867009,\"moneyMax\":10896675225,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":409,\"serverGrowth\":26}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"19.7.8.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":7.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,171,0]},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1785.239999999999,\"onlineMoneyMade\":0,\"onlineRunningTime\":30305.81000007038,\"pid\":161,\"ramUsage\":2.5,\"server\":\"the-hub\",\"threads\":3,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///f3cdeb29-1579-41a6-9301-268288a330e6\",\"moduleSequenceNumber\":208050}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"the-hub\",\"moduleSequenceNumber\":208050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e72c79e7-a8e7-4658-b232-5eb6fdb10aa4\",\"moduleSequenceNumber\":208745}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"the-hub\",\"moduleSequenceNumber\":208745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":197183684,\"moneyMax\":4929592100,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":316,\"serverGrowth\":48}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"75.2.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":224525311,\"moneyMax\":5613132775,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":398,\"serverGrowth\":55}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"96.6.3.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":424,\"serverGrowth\":55}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"53.2.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":208072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":208753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":77915638,\"moneyMax\":1947890950,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":300,\"serverGrowth\":50}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"33.0.3.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,57,0]},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":595.0800000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":30305.81000007038,\"pid\":154,\"ramUsage\":2.5,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///f6957f87-98d2-4c87-bcb5-ac256d1bd30f\",\"moduleSequenceNumber\":198231}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///f6957f87-98d2-4c87-bcb5-ac256d1bd30f\",\"moduleSequenceNumber\":198231}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"n00dles\",\"moduleSequenceNumber\":198231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"n00dles\",\"moduleSequenceNumber\":207859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1741627,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"55.9.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,342,0]},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3570.479999999998,\"onlineMoneyMade\":0,\"onlineRunningTime\":30305.81000007038,\"pid\":155,\"ramUsage\":2.5,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///55c9996b-4b6a-43ab-a740-4ff80738671d\",\"moduleSequenceNumber\":198233}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///55c9996b-4b6a-43ab-a740-4ff80738671d\",\"moduleSequenceNumber\":198233}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":198233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///b763a0c9-d4cc-4d68-a04f-c4be87c2bcd4\",\"moduleSequenceNumber\":208032}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":208032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":9.549999999999994,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"3.1.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,342,0]},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3570.479999999998,\"onlineMoneyMade\":0,\"onlineRunningTime\":30305.81000007038,\"pid\":156,\"ramUsage\":2.5,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///48c92f87-5fb6-47f8-82c7-e818a620ffba\",\"moduleSequenceNumber\":198235}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///48c92f87-5fb6-47f8-82c7-e818a620ffba\",\"moduleSequenceNumber\":198235}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":198235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///f881d826-e951-428c-8254-1a27f8d921ce\",\"moduleSequenceNumber\":208035}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":208035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"56.9.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,342,0]},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3570.479999999998,\"onlineMoneyMade\":0,\"onlineRunningTime\":30305.81000007038,\"pid\":162,\"ramUsage\":2.5,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b1723459-08d2-4fbf-bbd1-512017880c61\",\"moduleSequenceNumber\":198245}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b1723459-08d2-4fbf-bbd1-512017880c61\",\"moduleSequenceNumber\":198245}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"joesguns\",\"moduleSequenceNumber\":198245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///55986185-998b-4e24-bd21-e9c0b0a04269\",\"moduleSequenceNumber\":208053}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"joesguns\",\"moduleSequenceNumber\":208053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":8.351999999999906,\"minDifficulty\":5,\"moneyAvailable\":2497433,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"81.6.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,684,0]},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7140.959999999996,\"onlineMoneyMade\":0,\"onlineRunningTime\":30305.81000007038,\"pid\":163,\"ramUsage\":2.5,\"server\":\"zer0\",\"threads\":12,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///118f51bb-6750-4aad-8933-e7fa335406ce\",\"moduleSequenceNumber\":198248}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///118f51bb-6750-4aad-8933-e7fa335406ce\",\"moduleSequenceNumber\":198248}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"zer0\",\"moduleSequenceNumber\":198248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///039bedcc-c37a-4fff-967b-44f6bccf5c9e\",\"moduleSequenceNumber\":208056}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"zer0\",\"moduleSequenceNumber\":208056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"75.4.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,342,0]},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3570.479999999998,\"onlineMoneyMade\":0,\"onlineRunningTime\":30305.81000007038,\"pid\":157,\"ramUsage\":2.5,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8bec4342-8388-4033-8336-e9169f2c12d3\",\"moduleSequenceNumber\":198237}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8bec4342-8388-4033-8336-e9169f2c12d3\",\"moduleSequenceNumber\":198237}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"nectar-net\",\"moduleSequenceNumber\":198237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///d3b1d572-b712-44ab-9a4b-5c54527e11f1\",\"moduleSequenceNumber\":208038}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"nectar-net\",\"moduleSequenceNumber\":208038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"12.5.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,684,0]},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7140.959999999996,\"onlineMoneyMade\":0,\"onlineRunningTime\":30305.81000007038,\"pid\":158,\"ramUsage\":2.5,\"server\":\"neo-net\",\"threads\":12,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///3821e4f6-6b87-411c-acf9-84daa9e0e491\",\"moduleSequenceNumber\":198240}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///3821e4f6-6b87-411c-acf9-84daa9e0e491\",\"moduleSequenceNumber\":198240}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"neo-net\",\"moduleSequenceNumber\":198240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///f602cb4f-63dd-4563-9e08-dc33f6800da0\",\"moduleSequenceNumber\":208041}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"neo-net\",\"moduleSequenceNumber\":208041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"27.7.4.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,1425,0]},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14877,\"onlineMoneyMade\":0,\"onlineRunningTime\":30305.81000007038,\"pid\":164,\"ramUsage\":2.5,\"server\":\"silver-helix\",\"threads\":25,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///fa6c1297-816c-4e32-8519-596dc28c77bb\",\"moduleSequenceNumber\":208059}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"silver-helix\",\"moduleSequenceNumber\":208059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///67cd3df2-e8c3-421d-b5f5-7066438ba620\",\"moduleSequenceNumber\":208748}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"silver-helix\",\"moduleSequenceNumber\":208748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":70.76799999999996,\"minDifficulty\":10,\"moneyAvailable\":439514224.6371372,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"94.0.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,342,0]},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3570.479999999998,\"onlineMoneyMade\":0,\"onlineRunningTime\":30305.81000007038,\"pid\":165,\"ramUsage\":2.5,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ed3e5217-95e3-42ec-9845-1e62084ab063\",\"moduleSequenceNumber\":198250}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ed3e5217-95e3-42ec-9845-1e62084ab063\",\"moduleSequenceNumber\":198250}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":198250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///733e8d64-0300-4070-8a0b-4a08af3eb7fc\",\"moduleSequenceNumber\":208062}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":208062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"30.0.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,342,0]},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3570.479999999998,\"onlineMoneyMade\":0,\"onlineRunningTime\":30305.81000007038,\"pid\":166,\"ramUsage\":2.5,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e7cad54b-10f4-4d5e-b57a-e84fc8962762\",\"moduleSequenceNumber\":198252}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e7cad54b-10f4-4d5e-b57a-e84fc8962762\",\"moduleSequenceNumber\":198252}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":198252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///bbf8795b-4dc1-4109-8f0b-e152b4c0a7ea\",\"moduleSequenceNumber\":208065}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":208065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":16.820000000000004,\"minDifficulty\":5,\"moneyAvailable\":5958533.325888473,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"14.0.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,684,0]},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7140.959999999996,\"onlineMoneyMade\":0,\"onlineRunningTime\":30305.81000007038,\"pid\":168,\"ramUsage\":2.5,\"server\":\"phantasy\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///9cbc3af1-68cd-44fe-bff7-adeb463c4a85\",\"moduleSequenceNumber\":208071}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"phantasy\",\"moduleSequenceNumber\":208071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///946d23b1-7ddd-4985-9b4a-1954e649fdfb\",\"moduleSequenceNumber\":208752}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"phantasy\",\"moduleSequenceNumber\":208752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":52.3840000000006,\"minDifficulty\":7,\"moneyAvailable\":457537114.73599726,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"8.6.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,684,0]},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7140.959999999996,\"onlineMoneyMade\":0,\"onlineRunningTime\":30305.81000007038,\"pid\":159,\"ramUsage\":2.5,\"server\":\"max-hardware\",\"threads\":12,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///17ab202d-52b9-49ef-bd6d-d542bfccd41a\",\"moduleSequenceNumber\":198243}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///17ab202d-52b9-49ef-bd6d-d542bfccd41a\",\"moduleSequenceNumber\":198243}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"max-hardware\",\"moduleSequenceNumber\":198243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///033201e6-cf48-48ff-9376-d2e47a712ea2\",\"moduleSequenceNumber\":208044}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"max-hardware\",\"moduleSequenceNumber\":208044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":20.27999999999999,\"minDifficulty\":5,\"moneyAvailable\":21976192.602261204,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"68.2.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,684,0]},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7140.959999999996,\"onlineMoneyMade\":0,\"onlineRunningTime\":30305.81000007038,\"pid\":160,\"ramUsage\":2.5,\"server\":\"omega-net\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///b9636f87-4ebd-4e93-98d7-ac5dcc4e3481\",\"moduleSequenceNumber\":208047}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"omega-net\",\"moduleSequenceNumber\":208047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a6eac904-0c7b-40a6-85ee-90e3b2fd9cdc\",\"moduleSequenceNumber\":208743}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"omega-net\",\"moduleSequenceNumber\":208743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":26.568,\"minDifficulty\":8,\"moneyAvailable\":78553493.17173386,\"moneyMax\":1631467375,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":204,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"11.3.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":208074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":47080228,\"moneyMax\":1177005700,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":225,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"43.5.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":28.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30687.410000071697,\"pid\":152,\"ramUsage\":4.1,\"server\":\"iron-gym\",\"threads\":7,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///efd25c1c-2793-43c6-878d-28517e85b7ed\",\"moduleSequenceNumber\":198257}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"iron-gym\",\"moduleSequenceNumber\":198257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///8c06d63e-7548-4da7-a47f-e4a8bb215aec\",\"moduleSequenceNumber\":208080}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"iron-gym\",\"moduleSequenceNumber\":208080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":31.072000000000006,\"minDifficulty\":10,\"moneyAvailable\":21260314.22242811,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"81.9.4.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":487,\"serverGrowth\":28}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"79.5.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1015,\"serverGrowth\":52}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"64.5.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":737,\"serverGrowth\":58}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"14.6.0.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":526,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"38.4.6.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":350,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"72.0.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":12.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30687.410000071697,\"pid\":151,\"ramUsage\":4.1,\"server\":\"avmnite-02h\",\"threads\":3,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///33f7e370-e61e-4af1-9fa4-fd649877ba19\",\"moduleSequenceNumber\":208078}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":208078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":212,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"24.6.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":519,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"42.4.0.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,171,0]},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1785.239999999999,\"onlineMoneyMade\":0,\"onlineRunningTime\":30305.81000007038,\"pid\":167,\"ramUsage\":2.5,\"server\":\"CSEC\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ad6bea18-7f99-46d7-90e4-32b2b4ba3dab\",\"moduleSequenceNumber\":198255}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ad6bea18-7f99-46d7-90e4-32b2b4ba3dab\",\"moduleSequenceNumber\":198255}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"CSEC\",\"moduleSequenceNumber\":198255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///991c4daf-94fa-4014-9b48-af0d7fb27cff\",\"moduleSequenceNumber\":208068}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"CSEC\",\"moduleSequenceNumber\":208068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":59,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"99.0.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"93.7.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":20025.233140615386,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":14957.640060923017,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":212443.44168697734,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":42.83299999999931}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":6567.266333329199}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":22832.536333352313}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":63084.437774905244}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":11835.12966668017}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"track\":\"run fl1ght.exe\",\"darkweb\":\"home;connect darkweb\",\"killeverything\":\"killall;run advanced/killall.js\",\"listall\":\"run advanced/listall.js\",\"liquidate\":\"run stocks/liquidate.js\",\"nukeall\":\"run advanced/nukeall.js\",\"cnct\":\"run phase2/cnct.js\",\"scn\":\"cls;scan-analyze 10\",\"hackall\":\"killall; run hackGrind.js\",\"expand\":\"killall; run expand.js\",\"repGrind\":\"killall; run repGrind.js\",\"as\":\"run lib/analyze_server.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as NiteSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for The Black Hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":7,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":24,\"MonacoVim\":true,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":627,\"opened\":true}}","VersionSave":"11","AllGangsSave":"","LastExportBonus":"1648031048553","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}