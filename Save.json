{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":5752,\"hp\":58,\"max_hp\":172,\"strength\":2008,\"defense\":1626,\"dexterity\":1042,\"agility\":3170,\"charisma\":839,\"intelligence\":0,\"hacking_chance_mult\":2.3851048876578007,\"hacking_speed_mult\":2.0416201552051088,\"hacking_money_mult\":11.489630222069994,\"hacking_grow_mult\":2.739625,\"hacking_exp\":733244374649.7042,\"strength_exp\":322265.7277284135,\"defense_exp\":317206.1058244225,\"dexterity_exp\":317206.1058244225,\"agility_exp\":317206.1058244225,\"charisma_exp\":1592371.9536639622,\"intelligence_exp\":0,\"hacking_mult\":8.531463749845178,\"strength_mult\":9.755251141971538,\"defense_mult\":7.917305274643566,\"dexterity_mult\":5.0763275344782,\"agility_mult\":15.434258237999998,\"charisma_mult\":3.2652220124160003,\"hacking_exp_mult\":11.865715924279078,\"strength_exp_mult\":3.246677299800001,\"defense_exp_mult\":3.246677299800001,\"dexterity_exp_mult\":3.246677299800001,\"agility_exp_mult\":3.246677299800001,\"charisma_exp_mult\":4.146896741919361,\"company_rep_mult\":2.3161048996800004,\"faction_rep_mult\":1.4846826280000003,\"money\":41824177174123.83,\"city\":\"Chongqing\",\"location\":\"MegaCorp\",\"jobs\":{\"Blade Industries\":\"IT Analyst\",\"ECorp\":\"IT Manager\",\"Bachman & Associates\":\"IT Intern\",\"Clarke Incorporated\":\"IT Manager\",\"Fulcrum Technologies\":\"Systems Administrator\",\"KuaiGong International\":\"Chief Technology Officer\",\"MegaCorp\":\"Chief Financial Officer\"},\"companyName\":\"MegaCorp\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserver-1649423511196\",\"pserver-1649423521647\",\"pserver-1649423539703\",\"pserver-1649423557555\",\"pserver-1649423567018\",\"pserver-1649423575607\",\"pserver-1649423585168\",\"pserver-1649423594590\",\"pserver-1649423612551\",\"pserver-1649423640164\",\"pserver-1649423576685\",\"pserver-1649423603286\",\"pserver-1649423621146\",\"pserver-1649423493616\",\"pserver-1649423568058\",\"pserver-1649423595918\",\"pserver-1649423540769\",\"pserver-1649423549175\",\"pserver-1649423530054\",\"pserver-1649423558564\",\"pserver-1649423501315\",\"pserver-1649423494695\",\"pserver-1649423586206\",\"pserver-1649423630712\",\"pserver-1649423613561\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":392109.80000533577,\"ram\":64,\"totalMoneyGenerated\":11222753781.550356,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":392109.80000533577,\"ram\":64,\"totalMoneyGenerated\":11223291101.288034,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":392109.80000533577,\"ram\":64,\"totalMoneyGenerated\":11223290871.541918,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":392109.80000533577,\"ram\":64,\"totalMoneyGenerated\":11223242953.961658,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":392109.80000533577,\"ram\":64,\"totalMoneyGenerated\":11223242731.789543,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":391777.8000053166,\"ram\":64,\"totalMoneyGenerated\":11222190335.854414,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":391777.8000053166,\"ram\":64,\"totalMoneyGenerated\":11222190154.336857,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":391777.8000053166,\"ram\":64,\"totalMoneyGenerated\":11222202979.713354,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":391777.8000053166,\"ram\":64,\"totalMoneyGenerated\":11222202754.660503,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":391777.8000053166,\"ram\":64,\"totalMoneyGenerated\":11222202124.578947,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":391777.8000053166,\"ram\":64,\"totalMoneyGenerated\":11222201686.416355,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":391231.40000528516,\"ram\":64,\"totalMoneyGenerated\":11221622147.009817,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":387614.4000050771,\"ram\":64,\"totalMoneyGenerated\":11214537056.616009,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":387084.80000504665,\"ram\":64,\"totalMoneyGenerated\":11213391372.280172,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":387084.80000504665,\"ram\":64,\"totalMoneyGenerated\":11213391372.280172,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":387084.80000504665,\"ram\":64,\"totalMoneyGenerated\":11213391372.280172,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":387084.80000504665,\"ram\":64,\"totalMoneyGenerated\":11213391372.280172,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":387084.80000504665,\"ram\":64,\"totalMoneyGenerated\":11213391372.280172,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":387084.80000504665,\"ram\":64,\"totalMoneyGenerated\":11213391372.280172,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":387084.80000504665,\"ram\":64,\"totalMoneyGenerated\":11213391372.280172,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":387075.8000050461,\"ram\":64,\"totalMoneyGenerated\":11213144926.85511,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":387067.2000050456,\"ram\":64,\"totalMoneyGenerated\":11212845207.026634,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":387031.0000050436,\"ram\":64,\"totalMoneyGenerated\":11211892511.935844,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":387003.800005042,\"ram\":64,\"totalMoneyGenerated\":11211099262.06574,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":386741.200005027,\"ram\":64,\"totalMoneyGenerated\":11203511770.436514,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":386473.6000050115,\"ram\":64,\"totalMoneyGenerated\":11195752013.041704,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":385905.40000497823,\"ram\":64,\"totalMoneyGenerated\":11179284079.141247,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":385630.40000496217,\"ram\":64,\"totalMoneyGenerated\":11171321409.775494,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":381732.8000047429,\"ram\":64,\"totalMoneyGenerated\":11058419351.635897,\"name\":\"hacknet-node-28\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":380938.6000046993,\"ram\":64,\"totalMoneyGenerated\":11035419128.223291,\"name\":\"hacknet-node-29\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":380638.0000046834,\"ram\":64,\"totalMoneyGenerated\":11026716762.013807,\"name\":\"hacknet-node-30\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":379269.2000046089,\"ram\":64,\"totalMoneyGenerated\":10987040560.187614,\"name\":\"hacknet-node-31\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":378078.20000454516,\"ram\":64,\"totalMoneyGenerated\":10952555833.918293,\"name\":\"hacknet-node-32\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":375719.8000044154,\"ram\":64,\"totalMoneyGenerated\":10884182963.061102,\"name\":\"hacknet-node-33\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":372340.8000042286,\"ram\":64,\"totalMoneyGenerated\":10786302595.035328,\"name\":\"hacknet-node-34\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":366609.0000038953,\"ram\":64,\"totalMoneyGenerated\":10620240782.94109,\"name\":\"hacknet-node-35\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":358811.60000344523,\"ram\":64,\"totalMoneyGenerated\":10394308923.426853,\"name\":\"hacknet-node-36\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":340947.00000244204,\"ram\":64,\"totalMoneyGenerated\":9876868666.317717,\"name\":\"hacknet-node-37\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":308896.40000163636,\"ram\":64,\"totalMoneyGenerated\":8948296657.693184,\"name\":\"hacknet-node-38\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":236570.60000259482,\"ram\":64,\"totalMoneyGenerated\":6853202119.653789,\"name\":\"hacknet-node-39\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":46674.99999988973,\"ram\":64,\"totalMoneyGenerated\":1351549363.0043235,\"name\":\"hacknet-node-40\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Daedalus\",\"The Covenant\",\"ECorp\",\"MegaCorp\",\"Bachman & Associates\",\"Blade Industries\",\"NWO\",\"Clarke Incorporated\",\"OmniTek Incorporated\",\"Four Sigma\",\"KuaiGong International\",\"Fulcrum Secret Technologies\",\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"Chongqing\",\"Ishima\",\"New Tokyo\",\"Speakers for the Dead\",\"The Dark Army\",\"The Syndicate\",\"Silhouette\",\"Tetrads\",\"Slum Snakes\",\"Netburners\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Hydroflame Left Arm\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface NeuroNet Injector\"},{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"},{\"level\":1,\"name\":\"ECorp HVMind Implant\"},{\"level\":1,\"name\":\"Unstable Circadian Modulator\"},{\"level\":1,\"name\":\"SPTN-97 Gene Modification\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"Graphene Bone Lacings\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Neotra\"},{\"level\":1,\"name\":\"Photosynthetic Cells\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Graphene Bionic Arms Upgrade\"},{\"level\":1,\"name\":\"TITN-41 Gene-Modification Injection\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"},{\"level\":5,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"The Red Pill\"}],\"augmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"OmniTek InfoLoad\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"Xanipher\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Neurotrainer III\"}],\"sourceFiles\":[{\"lvl\":2,\"n\":1}],\"numPeopleKilled\":31,\"karma\":-93,\"crime_money_mult\":1.34971148,\"crime_success_mult\":1.34971148,\"isWorking\":false,\"focus\":false,\"workType\":\"\",\"workCostMult\":18,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":500,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":2.2255148,\"hacknet_node_money_mult\":3.1586702125,\"hacknet_node_purchase_cost_mult\":0.5755859999999999,\"hacknet_node_ram_cost_mult\":0.7524,\"hacknet_node_core_cost_mult\":0.7524,\"hacknet_node_level_cost_mult\":0.63954,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"entropy\":0,\"lastUpdate\":1649815272794,\"lastSave\":1649815269200,\"totalPlaytime\":4789115800,\"playtimeSinceLastAug\":392142200,\"playtimeSinceLastBitnode\":1114991600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-403488,\"codingcontract\":1350000000,\"corporation\":0,\"crime\":1882847.5145999994,\"gang\":0,\"hacking\":3335472435573796.5,\"hacknet\":438752865303.2874,\"hacknet_expenses\":-60928584775842.12,\"hospitalization\":-133198000,\"infiltration\":2062413111.0542097,\"sleeves\":0,\"stock\":56967088429260.086,\"total\":41824176174123.83,\"work\":2369601146.671729,\"servers\":-1559930240000,\"other\":-5310700000,\"augmentations\":-3288565925218620.5}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-403488,\"codingcontract\":8775000000,\"corporation\":0,\"crime\":1882847.5145999994,\"gang\":0,\"hacking\":14284753786177430,\"hacknet\":990663767073.6411,\"hacknet_expenses\":-270986269950247.5,\"hospitalization\":-133198000,\"infiltration\":2062413111.0542097,\"sleeves\":0,\"stock\":225288158592838.6,\"total\":4548854512190718,\"work\":2528633118.1203275,\"servers\":-4035429784857.3784,\"other\":-21173300000,\"augmentations\":-9687148471427964}},\"scriptProdSinceLastAug\":2376909042646579,\"exploits\":[],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1645026146788},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1645028434786},{\"ID\":\"NS2\",\"unlockedOn\":1645044319911},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1645045831181},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1645056200950},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1645056560955},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1645066283086},{\"ID\":\"TOR\",\"unlockedOn\":1645066643085},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1645070003093},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1645097626865},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1645155279886},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1645183682014},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1645190539010},{\"ID\":\"TRAVEL\",\"unlockedOn\":1645202118069},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1645206439756},{\"ID\":\"WORKOUT\",\"unlockedOn\":1645274022801},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1645310391987},{\"ID\":\"NITESEC\",\"unlockedOn\":1645372344826},{\"ID\":\"4S\",\"unlockedOn\":1645407697058},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1645449421121},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1645451161327},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1645492247503},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1645588414067},{\"ID\":\"DONATION\",\"unlockedOn\":1645808344381},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1645842991741},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1646071287225},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1646082477122},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1646132482080},{\"ID\":\"SF1.1\",\"unlockedOn\":1646609210207},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1647371428634},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1648434173382},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1648692192627},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1648692192635},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1648695732622},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1648698912619}],\"terminalCommandHistory\":[\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect aevum-police;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect global-pharm;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect zeus-med;connect zb-def;connect applied-energetics;connect vitalife;connect 4sigma;connect b-and-a;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect zeus-med;connect zb-def;connect applied-energetics;connect vitalife;connect 4sigma;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect zeus-med;connect zb-def;connect applied-energetics;connect vitalife;connect omnitek;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect zeus-med;connect zb-def;connect applied-energetics;connect vitalife;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect zeus-med;connect zb-def;connect applied-energetics;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect zeus-med;connect zb-def;connect microdyne;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect zeus-med;connect zb-def;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect zeus-med;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect solaris;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect taiyang-digital;connect titan-labs;connect helios;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect taiyang-digital;connect titan-labs;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect taiyang-digital;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect infocomm;connect run4theh111z;connect stormtech;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect infocomm;connect run4theh111z;connect fulcrumtech;connect .;connect clarkinc;connect The-Cave;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect infocomm;connect run4theh111z;connect fulcrumtech;connect .;connect clarkinc;connect megacorp;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect infocomm;connect run4theh111z;connect fulcrumtech;connect .;connect clarkinc;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect infocomm;connect run4theh111z;connect fulcrumtech;connect .;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect infocomm;connect run4theh111z;connect fulcrumtech;connect kuai-gong;connect powerhouse-fitness;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect infocomm;connect run4theh111z;connect fulcrumtech;connect kuai-gong;connect nwo;connect fulcrumassets;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect infocomm;connect run4theh111z;connect fulcrumtech;connect kuai-gong;connect nwo;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect infocomm;connect run4theh111z;connect fulcrumtech;connect kuai-gong;connect blade;connect ecorp;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect infocomm;connect run4theh111z;connect fulcrumtech;connect kuai-gong;connect blade;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect infocomm;connect run4theh111z;connect fulcrumtech;connect kuai-gong;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect infocomm;connect run4theh111z;connect fulcrumtech;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect infocomm;connect run4theh111z;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;connect infocomm;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;connect univ-energy;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect unitalife;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect deltaone;connect icarus;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect deltaone;connect defcomm;connect nova-med;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect deltaone;connect defcomm;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;connect deltaone;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect crush-fitness;connect rothman-uni;connect rho-construction;connect galactic-cyber;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect computek;connect I.I.I.I;connect alpha-ent;backdoor;\",\"home;connect n00dles;connect max-hardware;connect phantasy;connect computek;connect syscore;backdoor;\",\"hm\",\"ps\",\"ps home\",\"run augList.js\",\"ps home\",\"kill share.js\",\"run augList.js\",\"killall\",\"run augList.js\",\"run factionWatch.js\",\"run stocks/listall.js\",\"run stocks/liquidate.js\",\"run killShare.js\"],\"identifier\":\"afc61675d036e\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"41.2.4.6\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"fl1ght.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\",\"Formulas.exe\",\"HTTPWorm.exe-84.75%-INC\"],\"ramUsed\":39.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hacknet.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":146869.168,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":127432.6099987244,\"pid\":2,\"ramUsage\":5.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///804a37f9-672a-4dc4-bd83-3b626736e84c\",\"moduleSequenceNumber\":91795}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/contracts/start.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":146869.41999999998,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":127417.60999872463,\"pid\":3,\"ramUsage\":24.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///3e8d72d2-edc6-419d-9ffc-34a858249007\",\"moduleSequenceNumber\":91726},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///d3d3db40-51e5-45e2-bc9d-e7a7e92bfe9a\",\"moduleSequenceNumber\":91730},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///d2860dcf-271b-483c-b2c6-db17c7c6ee10\",\"moduleSequenceNumber\":91733},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///e67e8cc2-e388-4cb1-a39c-ac4b017d003a\",\"moduleSequenceNumber\":91735},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///325c6c18-47c9-4a6d-a0db-a527386c3ad6\",\"moduleSequenceNumber\":91736},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///f51a63f8-5632-4f00-afa5-809d8246a9ae\",\"moduleSequenceNumber\":91727},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///079c09f8-c243-4c89-bf37-541b4ab57dd9\",\"moduleSequenceNumber\":91724},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///260a8e15-bc30-4c39-b940-5f64c853f48b\",\"moduleSequenceNumber\":91732},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///018784c3-cb4a-4f5c-b1bb-57d40dd61c32\",\"moduleSequenceNumber\":91729},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///08a3394a-a73b-4a5a-a1cb-d3e1b453f4d0\",\"moduleSequenceNumber\":91731},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///1eea05ea-b9bb-4a37-808a-fbe236309116\",\"moduleSequenceNumber\":91725},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///7fb92181-d851-4535-aad2-284b53af2205\",\"moduleSequenceNumber\":91734},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///ada4636a-a24a-4ebd-aa24-21f4b0e47b05\",\"moduleSequenceNumber\":91728},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///545ba29b-d9f8-422d-9e16-05eb6a649978\",\"moduleSequenceNumber\":91773},{\"filename\":\"/contracts/start.js\",\"url\":\"blob:file:///94bc26b8-0457-4111-9013-048008c274de\",\"moduleSequenceNumber\":91864}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/phase3/restart.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":146869.056,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236199.0100046221,\"pid\":272943,\"ramUsage\":9.55,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/phase3/restart.js\",\"url\":\"blob:file:///67350436-7d3c-4bfc-a989-705533c37e87\",\"moduleSequenceNumber\":949}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//GREATEST FACTOR\\nexport function factor(num) {\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\n        if (num % div != 0) {\\n            continue;\\n        }\\n        num = num / div;\\n        div = 1;\\n    }\\n    return num;\\n}\\n\",\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":194050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   let data = ns.args\\n//     .join(\\\" \\\")\\n//     .split(\\\" \\\")\\n//     .map((s) => parseInt(s));\\n//   // data = [0, 5, 3, 10, 0, 3, 10, 0, 4, 6, 6, 0, 0, 7, 0, 1, 1];\\n//   ns.tprint(solveJump(data));\\n//   ns.print(solveJump(data));\\n// }\\n//\\n// Array Jumping Game\\n//\\n// You are attempting to solve a Coding Contract. You have 1 tries remaining, after which the contract will self-destruct.\\n//\\n// You are given the following array of integers:\\n//\\n// 0,5,3,10,0,3,10,0,4,6,6,0,0,7,0,1,1 => 0\\n// 7,1,3,0,0,4,1,5,0,4,6,8,0,0,7,6,0,2,5,4,0=> 1\\n//\\n// Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n.\\n//\\n// Assuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\n//\\n// Your answer should be submitted as 1 or 0, representing true and false respectively\\nexport function solveJump(data) {\\n    if (data.length === 0)\\n        return 1;\\n    const maxJump = data[0];\\n    if (maxJump === 0)\\n        return 0;\\n    if (maxJump >= data.length)\\n        return 1;\\n    // find the best jump and solve it.\\n    let bestJump = [1, 1];\\n    for (let i = 1; i <= maxJump; i++) {\\n        const nextMax = data[i];\\n        const jumpValue = nextMax + i + 1;\\n        if (jumpValue >= data.length)\\n            return 1;\\n        if (jumpValue > bestJump[1])\\n            bestJump = [i, jumpValue];\\n    }\\n    return solveJump(data.slice(bestJump[0]));\\n}\\n\",\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///1836554b-f446-47ac-ba4e-005dd07b2609\",\"moduleSequenceNumber\":4479}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":194048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//Find All Valid Math Expressions\\n// You are attempting to solve a Coding Contract. You have 10 tries remaining, after which the contract will self-destruct.\\n// You are given the following string which contains only digits between 0 and 9:\\n// 288074550300\\n// You are also given a target number of 99. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\n// The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\n// [\\\"288074550300\\\", 99]\\n// NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\"1+01\\\" is not a valid expression Examples:\\n// Input: digits = \\\"123\\\", target = 6\\n// Output: [1+2+3, 1*2*3]\\n// Input: digits = \\\"105\\\", target = 5\\n// Output: [1*0+5, 10-5]\\n//\\nexport async function main(ns) {\\n    const testData = [\\\"288074550300\\\", 99];\\n    ns.tprint(await findMathExpression(ns, testData));\\n}\\n// TODO: Fix this as it freezes the ui.\\nexport async function findMathExpression(ns, data) {\\n    const digits = data[0].split(\\\"\\\");\\n    // [1, 2, 3, 4, 5]\\n    const operators = [\\\"+\\\", \\\"-\\\", \\\"*\\\", \\\"\\\"];\\n    // [+, -, *, ]\\n    let expressions = [digits[0], \\\"-\\\" + digits[0]].flatMap((d) => operators.map((op) => d + op));\\n    // [1+, 1-, 1*, 1, -1+, -1-, -1*, -1]\\n    for (let i = 1; i < digits.length - 1; i++) {\\n        await ns.sleep(1);\\n        expressions = expressions.flatMap((e) => operators.map((op) => e + digits[i] + op));\\n        // [1+2+, 1+2-, 1+2*, 1+2, 1-2+, ...]\\n    }\\n    let finalExpressions = [];\\n    for (const e of expressions.map((e) => e + digits[digits.length - 1])) {\\n        await ns.sleep(1);\\n        try {\\n            if (eval(e) === data[1])\\n                finalExpressions.push(e);\\n        }\\n        catch (e) {\\n            continue;\\n        }\\n    }\\n    return finalExpressions;\\n}\\nexport async function _findMathExpression(ns, data) {\\n    const digits = data[0].split(\\\"\\\");\\n    const operators = [\\\"+\\\", \\\"-\\\", \\\"*\\\", \\\"\\\"];\\n    let expressions = [digits[0], \\\"-\\\" + digits[0]].flatMap((d) => operators.map((op) => d + op));\\n    for (let i = 1; i < digits.length - 1; i++) {\\n        await ns.sleep(30);\\n        expressions = expressions.flatMap((e) => operators.map((op) => e + digits[i] + op));\\n    }\\n    return expressions\\n        .map((e) => e + digits[digits.length - 1])\\n        .filter((e) => {\\n        try {\\n            return eval(e) === data[1];\\n        }\\n        catch (e) {\\n            return false;\\n        }\\n    });\\n}\\n\",\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///0583886b-b84e-436a-8694-8cb6b6033e21\",\"moduleSequenceNumber\":394203}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":194052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//GENERATE IP ADDRESSES\\nexport function generateIps(num) {\\n    num = num.toString();\\n    const length = num.length;\\n    let ips = [];\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length),\\n                ];\\n                let isValid = true;\\n                ip.forEach((seg) => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n                if (isValid)\\n                    ips.push(ip.join(\\\".\\\"));\\n            }\\n        }\\n    }\\n    return ips;\\n}\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\")\\n        return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255)\\n        return false;\\n    return true;\\n}\\n\",\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":194054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export * from \\\"contracts/solvers/totalWaysToSum.js\\\";\\nexport * from \\\"contracts/solvers/arrayJumpingGame.js\\\";\\nexport * from \\\"contracts/solvers/solveSum.js\\\";\\nexport * from \\\"contracts/solvers/mergeOverlap.js\\\";\\nexport * from \\\"contracts/solvers/spiral.js\\\";\\nexport * from \\\"contracts/solvers/factor.js\\\";\\nexport * from \\\"contracts/solvers/generateIps.js\\\";\\nexport * from \\\"contracts/solvers/uniquePaths.js\\\";\\nexport * from \\\"contracts/solvers/triangleSum.js\\\";\\nexport * from \\\"contracts/solvers/stockSolver.js\\\";\\nexport * from \\\"contracts/solvers/sanitizeParentheses.js\\\";\\nexport * from \\\"contracts/solvers/findMathExpressions.js\\\";\\n\",\"filename\":\"/contracts/solvers/index.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":194056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Merge Overlapping Intervals\\nexport function mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\n\",\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":194058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   let data = \\\"((a(a)(()(((a)a)))((\\\";\\n//   // data = ns.args[0].toString();\\n//   ns.tprint(sanitizeParentheses(data));\\n//   ns.print(sanitizeParentheses(data));\\n// }\\n// Given a string:\\n//\\n// ie.: '((a(a)(()(((a)a)))((' => [a(a)(()(((a)a))),(aa)(()(((a)a))),(a(a)()(((a)a))),(a(a)(()((a)a))),((aa)()(((a)a))),((aa)(()((a)a))),((a(a))(((a)a))),((a(a)()((a)a))),((a(a)(()(a)a)))]\\n//\\n// remove the minimum number of invalid parentheses in order to validate the\\n// string. If there are multiple ways to validate the string, provide all of the\\n// possible results. The answer should be provided as an array of strings. If it\\n// is impossible to validate the string the result should be an array with only\\n// an empty string.\\nexport function sanitizeParentheses(data) {\\n    var solution = Sanitize(data);\\n    if (solution == null) {\\n        return '[\\\"\\\"]';\\n    }\\n    else {\\n        return \\\"[\\\" + solution.join(\\\",\\\") + \\\"]\\\";\\n    }\\n}\\nfunction Sanitize_removeOneParth(item) {\\n    var possibleAnswers = [];\\n    for (let i = 0; i < item.length; i++) {\\n        if (item[i].toLowerCase().indexOf(\\\"(\\\") === -1 &&\\n            item[i].toLowerCase().indexOf(\\\")\\\") === -1) {\\n            continue;\\n        }\\n        let possible = item.substring(0, i) + item.substring(i + 1);\\n        possibleAnswers.push(possible);\\n    }\\n    return possibleAnswers;\\n}\\nfunction Sanitize_isValid(item) {\\n    var unclosed = 0;\\n    for (var i = 0; i < item.length; i++) {\\n        if (item[i] == \\\"(\\\") {\\n            unclosed++;\\n        }\\n        else if (item[i] == \\\")\\\") {\\n            unclosed--;\\n        }\\n        if (unclosed < 0) {\\n            return false;\\n        }\\n    }\\n    return unclosed == 0;\\n}\\nfunction Sanitize(data) {\\n    var currentPossible = [data];\\n    for (var i = 0; i < currentPossible.length; i++) {\\n        var newPossible = new Set();\\n        for (var j = 0; j < currentPossible.length; j++) {\\n            let newRemovedPossible = Sanitize_removeOneParth(currentPossible[j]);\\n            for (let item of newRemovedPossible) {\\n                newPossible.add(item);\\n            }\\n        }\\n        var validBoolList = [];\\n        for (const item of newPossible) {\\n            validBoolList.push(Sanitize_isValid(item));\\n        }\\n        if (validBoolList.includes(true)) {\\n            let finalList = [];\\n            newPossible = [...newPossible];\\n            for (var j = 0; j < validBoolList.length; j++) {\\n                if (validBoolList[j]) {\\n                    finalList.push(newPossible[j]);\\n                }\\n            }\\n            finalList = new Set(finalList);\\n            return [...finalList];\\n        }\\n        currentPossible = [...newPossible];\\n    }\\n    return null;\\n}\\n\",\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///d744f228-8f91-4660-9d12-d00944b8e4d0\",\"moduleSequenceNumber\":287808}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":194060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function solveSum(data) {\\n    const arrLength = data.length;\\n    let maxSum = -Infinity;\\n    for (let i = 0; i < arrLength; i++) {\\n        const sub = data.slice(0, i + 1);\\n        for (let j = 0; j < sub.length; j++) {\\n            const sub2 = sub.slice(j, sub.length);\\n            // ns.tprint(`i ${i} j ${j} ${JSON.stringify(sub)} ${JSON.stringify(sub2)}`);\\n            const sum = sub2.reduce((prev, cur) => (prev += cur), 0);\\n            if (sum > maxSum)\\n                maxSum = sum;\\n            // ns.tprint(`${sum}: ${sub2}`);\\n        }\\n    }\\n    return maxSum;\\n}\\n\",\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":194062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//SPIRALIZE Matrix\\nexport function spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift() || []);\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat((arr.pop() || []).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\nfunction column(arr, index) {\\n    let res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n\",\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":194064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function maxProfit(arrayData) {\\n    let i, j, k;\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n    // WHY?\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n    let highestProfit = JSON.parse(tempArr);\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) {\\n            // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) {\\n                // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\",\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///3317a863-bbb6-46ab-9102-55587ce847a9\",\"moduleSequenceNumber\":270664}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":194066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   let data = 60;\\n//   // data = ns.args[0] as number;\\n//   ns.tprint(totalWaysToSum(data));\\n//   ns.print(totalWaysToSum(data));\\n// }\\n// Total Ways to Sum\\n// You are attempting to solve a Coding Contract. You have 10 tries remaining,\\n// after which the contract will self-destruct.\\n//\\n// It is possible write four as a sum in exactly four different ways:\\n//     3 + 1\\n//     2 + 2\\n//     2 + 1 + 1\\n//     1 + 1 + 1 + 1\\n//\\n//  How many different ways can the given number be written as a sum of at least\\n//  two positive integers?\\n//\\n//  60 => 966466\\nexport function totalWaysToSum(data) {\\n    let N = data;\\n    let K = data - 1;\\n    // Initialize a list\\n    let dp = Array.from({ length: N + 1 }, () => 0);\\n    // Update dp[0] to 1\\n    dp[0] = 1;\\n    // Iterate over the range [1, K + 1]\\n    for (let row = 1; row < K + 1; row++) {\\n        // Iterate over the range [1, N + 1]\\n        for (let col = 1; col < N + 1; col++) {\\n            // If col is greater\\n            // than or equal to row\\n            if (col >= row)\\n                // Update current\\n                // dp[col] state\\n                dp[col] = dp[col] + dp[col - row];\\n        }\\n    }\\n    // Return the total number of ways\\n    return dp[N];\\n}\\n\",\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///0511a33a-6f45-4133-a371-8392bfc4f2de\",\"moduleSequenceNumber\":288875}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":194068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   const data = [\\n//     [9],\\n//     [3, 3],\\n//     [1, 5, 1],\\n//     [6, 9, 4, 1],\\n//     [8, 9, 1, 4, 3],\\n//     [6, 2, 5, 5, 8, 2],\\n//     [6, 3, 6, 2, 7, 5, 1],\\n//     [9, 8, 2, 4, 5, 2, 3, 7],\\n//   ];\\n//   ns.tprint(triangleSum(data));\\n//   ns.print(triangleSum(data));\\n// }\\n//\\n//Minimum Path Sum in a Triangle\\n// You are attempting to solve a Coding Contract. You have 10 tries remaining, after which the contract will self-destruct.\\n// Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\n// [\\n//          [9],\\n//         [3,3],\\n//        [1,5,1],\\n//       [6,9,4,1],\\n//      [8,9,1,4,3],\\n//     [6,2,5,5,8,2],\\n//    [6,3,6,2,7,5,1],\\n//   [9,8,2,4,5,2,3,7]\\n// ] => 23\\n// Example: If you are given the following triangle:\\n// [\\n//      [2],\\n//     [3,4],\\n//    [6,5,7],\\n//   [4,1,8,3]\\n// ]\\n// The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\n//\\n//\\nexport function triangleSum(arrayData) {\\n    let triangle = arrayData;\\n    let nextArray = [];\\n    let previousArray = triangle[0];\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            }\\n            else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            }\\n            else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n        }\\n        previousArray = nextArray;\\n    }\\n    return Math.min.apply(null, nextArray);\\n}\\n\",\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///e31bc6e0-ce54-4e21-8616-21950cd33e44\",\"moduleSequenceNumber\":6234}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":194070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//UNIQUE PATHS IN A GRID//UNIQUE PATHS IN A GRID\\nexport function uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\n}\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\nexport function uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n            if (grid[i][j] == 1 &&\\n                (!ignoreFirst || i != 0 || j != 0) &&\\n                (!ignoreLast || i != grid.length - 1 || j != grid[i].length - 1)) {\\n                let newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n    }\\n    return totalPossiblePaths;\\n}\\n\",\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":194072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nimport * as solvers from \\\"contracts/solvers/index.js\\\";\\nconst minuteInterval = 2;\\nfunction getAllServers(ns) {\\n    const tree = new ServerTree(ns);\\n    return tree.home.list();\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will automatically complete contracts that it finds on the network.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let failedContracts = [];\\n    let successfulContracts = [];\\n    function refreshLog() {\\n        ns.clearLog();\\n        for (const cnt of failedContracts) {\\n            ns.print(`\\n      =========================\\n        server: ${cnt.server}\\n        filename: ${cnt.contract}\\n        type: ${cnt.type}\\n      =========================\\n        `);\\n        }\\n        for (const cnt of successfulContracts) {\\n            ns.print(`\\n      =========================\\n        server: ${cnt.server}\\n        filename: ${cnt.contract}\\n        type: ${cnt.type}\\n        reward: \\n          ${cnt.reward}\\n      =========================\\n        `);\\n        }\\n        ns.print(`Contracts failed: ${failedContracts.length}`);\\n        ns.print(`Contracts Succeeded: ${successfulContracts.length}`);\\n    }\\n    while (true) {\\n        // await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\n        const contracts = getAllServers(ns).flatMap((server) => {\\n            const onServer = ns.ls(server.hostname, \\\".cct\\\").map((contract) => {\\n                const type = ns.codingcontract.getContractType(contract, server.hostname);\\n                const data = ns.codingcontract.getData(contract, server.hostname);\\n                return {\\n                    type,\\n                    data,\\n                    server,\\n                    contract,\\n                };\\n            });\\n            return onServer;\\n        });\\n        for (const { type, data, server, contract } of contracts) {\\n            const reward = await solve(type, data, server.hostname, contract, ns);\\n            if (!reward) {\\n                failedContracts.push({\\n                    server: server.hostname,\\n                    contract,\\n                    type,\\n                });\\n                refreshLog();\\n            }\\n            else {\\n                successfulContracts.push({\\n                    server: server.hostname,\\n                    contract,\\n                    type,\\n                    reward,\\n                });\\n                refreshLog();\\n            }\\n        }\\n        await ns.sleep(minuteInterval * 60 * 1000);\\n    }\\n}\\nasync function solve(type, data, server, contract, ns) {\\n    let solution;\\n    ns.print(type);\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = solvers.maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = solvers.maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = solvers.maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = solvers.maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solvers.triangleSum(data);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = solvers.uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = solvers.uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = solvers.generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = solvers.factor(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = solvers.spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = solvers.mergeOverlap(data);\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            solution = solvers.solveSum(data);\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            solution = solvers.solveJump(data);\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            solution = solvers.totalWaysToSum(data);\\n            break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n            solution = solvers.sanitizeParentheses(data);\\n            break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n            solution = await solvers.findMathExpression(ns, data);\\n            break;\\n        default:\\n            ns.print(`Unknown contract type: ${type}`);\\n            return \\\"\\\";\\n    }\\n    if (solution != undefined)\\n        ns.print(`Submitting solution: ${solution} to ${type} - ${contract}`);\\n    return solution != undefined\\n        ? ns.codingcontract.attempt(solution, contract, server, {\\n            returnReward: true,\\n        })\\n        : \\\"\\\";\\n}\\n\",\"filename\":\"/contracts/start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///7b164e26-9014-4afb-944a-06d690bca8cd\",\"moduleSequenceNumber\":483},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///858a8950-15f8-44f7-8ed3-650d4e98955d\",\"moduleSequenceNumber\":487},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///8e409122-911d-4368-ab1c-037d721673c5\",\"moduleSequenceNumber\":490},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///0d7944c7-9cb8-4fc8-9084-e60676bbf06c\",\"moduleSequenceNumber\":492},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///a567fb80-3c15-481f-92b8-1b7450973809\",\"moduleSequenceNumber\":493},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///9721a744-9bea-4f68-be01-52d253c09f80\",\"moduleSequenceNumber\":484},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///4dd53a76-1333-4340-9d5d-2e4ff30841f5\",\"moduleSequenceNumber\":481},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///f8c89b2b-b861-4cfa-9eb6-b91051e6a459\",\"moduleSequenceNumber\":489},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///5cc5d54b-41f8-4da0-b750-e07c4e7af4d5\",\"moduleSequenceNumber\":486},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///76416863-de6c-41ba-beec-742a18a701ad\",\"moduleSequenceNumber\":488},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///c606f1b7-58f1-4721-a7d5-594e36e905f8\",\"moduleSequenceNumber\":482},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///a7124d6d-b936-4a50-add6-dc9bda818e62\",\"moduleSequenceNumber\":491},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///c1464ac5-36a6-48d6-be86-ef4a6a4abab5\",\"moduleSequenceNumber\":485},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///27f8d6b6-f025-468a-9170-44a65571c0c9\",\"moduleSequenceNumber\":530},{\"filename\":\"/contracts/start.js\",\"url\":\"blob:file:///b60d01fb-d84e-431f-a049-a3fcba18f5a3\",\"moduleSequenceNumber\":963}],\"dependents\":[],\"ramUsage\":24.1,\"server\":\"home\",\"moduleSequenceNumber\":194076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///733d4a8a-7609-4c70-b7c6-de68e6ff31cd\",\"moduleSequenceNumber\":965}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":194162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nconst minuteInterval = 2;\\nfunction getAllServers(ns) {\\n    const tree = new ServerTree(ns);\\n    return tree.home.list();\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will automatically list contracts that it finds on the network.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let contracts;\\n    function refreshLog() {\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(\\\"Contracts\\\");\\n        ns.print(\\\"=========\\\");\\n        for (const c of contracts)\\n            ns.print(c);\\n        ns.print(\\\"=========\\\");\\n    }\\n    while (true) {\\n        // await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\n        contracts = getAllServers(ns).flatMap((server) => {\\n            const onServer = ns.ls(server.hostname, \\\".cct\\\").map((contract) => {\\n                const type = ns.codingcontract.getContractType(contract, server.hostname);\\n                return `${server.hostname} - ${contract} - ${type}`;\\n            });\\n            return onServer;\\n        });\\n        if (contracts.length > 0)\\n            refreshLog();\\n        await ns.sleep(minuteInterval * 60 * 1000);\\n    }\\n}\\n\",\"filename\":\"/contracts/list.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///bf42c2aa-95a2-4a23-abc1-1ad3de863b18\",\"moduleSequenceNumber\":2692},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///7915c4db-6fa3-49af-9314-ab3dfafb52d6\",\"moduleSequenceNumber\":2700},{\"filename\":\"/contracts/list.js\",\"url\":\"blob:file:///c7836513-5750-4fc4-9afd-ee7b4b9e3752\",\"moduleSequenceNumber\":3022}],\"dependents\":[],\"ramUsage\":9.1,\"server\":\"home\",\"moduleSequenceNumber\":194074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"cnct\\\";\\nconst serverPercent = 0.75;\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      Shares all the servers possible.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // copy the share script to all the servers we have admin priveledges to.\\n    for (const server of getRunnableServers(ns)) {\\n        // if (!server || server.hostname === \\\"home\\\") continue;\\n        if (!server)\\n            continue;\\n        const shareScript = \\\"share.js\\\";\\n        await ns.scp(shareScript, server.hostname);\\n        // calculate the maximum number of threads.\\n        server.ramUsed = ns.getServerUsedRam(server.hostname);\\n        let maxThreads = Math.max(Math.floor((server.maxRam * serverPercent - server.ramUsed) /\\n            ns.getScriptRam(shareScript, server.hostname)), 1);\\n        // run the share script if possible.\\n        ns.exec(shareScript, server.hostname, maxThreads);\\n    }\\n}\\n\",\"filename\":\"shareAll.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///20fe30a9-e2ca-43e9-807b-a16326cb52f0\",\"moduleSequenceNumber\":194120},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///5ec842c8-f470-4c35-be04-46e7dcd3b54d\",\"moduleSequenceNumber\":194124},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///ba3e906b-679f-461f-b878-18b09a42310e\",\"moduleSequenceNumber\":194126},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///33f7882e-326e-45a5-a2c3-563a77a4c231\",\"moduleSequenceNumber\":194138},{\"filename\":\"shareAll.js\",\"url\":\"blob:file:///cee2c00d-21bf-45ac-95e7-6bfa28ba10c0\",\"moduleSequenceNumber\":194655}],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"home\",\"moduleSequenceNumber\":194655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"cnct\\\";\\nimport { kill } from \\\"utils/scriptKilling\\\";\\nconst serverPercent = 1;\\nconst homeSingletons = [\\n    \\\"hacknet.js\\\",\\n    \\\"contracts/start.js\\\",\\n    \\\"backdoor.js\\\",\\n    ///\\n];\\nconst homeReserve = [\\n    \\\"cnct.js\\\",\\n    \\\"bkdr.js\\\",\\n    ///\\n];\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      For sharing and only sharing.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // first kill everything else.\\n    kill(ns, (ps) => ps.filename !== ns.getScriptName());\\n    // run singleton scripts\\n    for (const script of homeSingletons) {\\n        ns.run(script);\\n    }\\n    // copy the share script to all the servers we have admin priveledges to.\\n    for (const server of getRunnableServers(ns)) {\\n        // if (!server || server.hostname === \\\"home\\\") continue;\\n        if (!server)\\n            continue;\\n        const shareScript = \\\"share.js\\\";\\n        await ns.scp(shareScript, server.hostname);\\n        // calculate the maximum number of threads.\\n        server.ramUsed = ns.getServerUsedRam(server.hostname);\\n        let maxThreads = Math.max(Math.floor((server.maxRam * serverPercent - server.ramUsed - getReservedRam(ns)) /\\n            ns.getScriptRam(shareScript, server.hostname)), 1);\\n        // run the share script if possible.\\n        ns.exec(shareScript, server.hostname, maxThreads);\\n    }\\n}\\nfunction getReservedRam(ns) {\\n    if (ns.getHostname() !== \\\"home\\\")\\n        return 0;\\n    return Math.max(...homeReserve.map((script) => ns.getScriptRam(script)));\\n}\\n\",\"filename\":\"shareOnly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///9ac3354a-96b3-4589-ae7f-0cba1f5c22cf\",\"moduleSequenceNumber\":499299},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///0e4d3ded-de78-40c8-8bfe-23d774028b30\",\"moduleSequenceNumber\":499307},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///610f6b6e-23a3-46b2-a0d5-ff1722719941\",\"moduleSequenceNumber\":499305},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///2b741433-9254-43d2-b196-7e39123e3b5a\",\"moduleSequenceNumber\":499303},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///962e1ba4-6253-46bb-8bc9-9279ee951411\",\"moduleSequenceNumber\":499299},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///1be66020-526a-436c-aefa-43c27671f4da\",\"moduleSequenceNumber\":499307},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///6e7b4272-b4a3-4c4a-a838-ef19dd4570b7\",\"moduleSequenceNumber\":499309},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///0d66c765-8fe1-4fbd-aec8-681c7d23b2d8\",\"moduleSequenceNumber\":499317},{\"filename\":\"shareOnly.js\",\"url\":\"blob:file:///e7b6e438-b027-4754-aa64-9c2c33ed62fc\",\"moduleSequenceNumber\":499344}],\"dependents\":[],\"ramUsage\":7.95,\"server\":\"home\",\"moduleSequenceNumber\":194166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hasSourceFile } from \\\"actions/test\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const programName = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !programName) {\\n        ns.tprint(`\\n      This script will create a program for you.\\n      It requires Source File 4 to work.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} PROGRAM_NAME\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    while (!ns.fileExists(programName)) {\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(`Creating ${programName}`);\\n        if (hasSourceFile(ns, 4)) {\\n            if (!ns.isBusy() || !ns.getPlayer().workType.includes(\\\"Program\\\"))\\n                ns.createProgram(programName);\\n        }\\n        else if (!ns.getPlayer().workType.includes(\\\"Program\\\")) {\\n            ns.toast(`please create or purchase ${programName}`);\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\\n\",\"filename\":\"/actions/programming.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":95.3,\"server\":\"home\",\"moduleSequenceNumber\":194032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function hasSourceFile(ns, n) {\\n    return (ns\\n        .getOwnedSourceFiles()\\n        .map((sf) => sf.n)\\n        .includes(n) || ns.getPlayer().bitNodeN === n);\\n}\\n\",\"filename\":\"/actions/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":194030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { kill } from \\\"utils/scriptKilling\\\";\\nimport { prepBatch } from \\\"batching/prepBatch\\\";\\nimport { runSpawner, spawnerName } from \\\"batching/runSpawner\\\";\\nimport { ps } from \\\"ps\\\";\\nconst bufferTime = 3000;\\nconst growMultiplier = 4;\\nconst hackPercent = 0.5;\\nconst analyzeScript = \\\"/analyzeServer.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"exec\\\");\\n    ns.enableLog(\\\"run\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This will continuously batch hack a target from a host.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET\\n      `);\\n        return;\\n    }\\n    // check if this server is already being batched.\\n    if (ps(ns).find((ps) => ps.ps.args.includes(target) &&\\n        ps.ps.filename === spawnerName &&\\n        ps.ps.args.includes(\\\"hack\\\")))\\n        // already hacking\\n        return;\\n    // analyze the server\\n    ns.run(analyzeScript, 1, target, `Batch attack!`);\\n    // now find the required number of threads for each action.\\n    const growThreads = Math.ceil(ns.growthAnalyze(target, growMultiplier));\\n    const hackThreads = Math.ceil(hackPercent / ns.hackAnalyze(target));\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    const hackSecurityDelta = ns.hackAnalyzeSecurity(hackThreads);\\n    let weakenThreads = 0;\\n    let targetDelta = Math.max(growSecurityDelta, hackSecurityDelta);\\n    // pin targetDelta to 100 to prevent infinity\\n    if (targetDelta > 100)\\n        targetDelta = 100;\\n    while (ns.weakenAnalyze(weakenThreads) < targetDelta) {\\n        await ns.sleep(1);\\n        weakenThreads += 1;\\n        ns.clearLog();\\n        ns.print(`Calculating Weaken Threads: ${weakenThreads}`);\\n        ns.print(`${weakenThreads} threads will cut security by ${ns.weakenAnalyze(weakenThreads)}`);\\n        ns.print(`Target security is ${targetDelta}`);\\n    }\\n    // calculate timing\\n    const { hackTime, growTime, weakenTime } = getTiming(ns, target);\\n    // sanity check\\n    if (hackTime > growTime || hackTime > weakenTime || growTime > weakenTime) {\\n        ns.tprint(`Something screwy going on with ${target} timing`);\\n        return;\\n    }\\n    // Prepare the server\\n    await prepBatch(ns, target);\\n    ns.print(\\\"Hacking...\\\");\\n    await runSpawner(ns, \\\"weaken\\\", target, weakenThreads, bufferTime * 3, 1);\\n    await ns.sleep(weakenTime - bufferTime * 2);\\n    await runSpawner(ns, \\\"weaken\\\", target, weakenThreads, bufferTime * 3, 2);\\n    await ns.sleep(weakenTime - growTime - bufferTime);\\n    await runSpawner(ns, \\\"grow\\\", target, growThreads, bufferTime * 3);\\n    await ns.sleep(growTime - hackTime - bufferTime * 2);\\n    await runSpawner(ns, \\\"hack\\\", target, hackThreads, bufferTime * 3);\\n}\\nfunction getTiming(ns, target) {\\n    let hackTime = 1;\\n    let growTime = 1;\\n    let weakenTime = 1;\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n        const server = ns.getServer(target);\\n        server.hackDifficulty = server.minDifficulty;\\n        const player = ns.getPlayer();\\n        hackTime = ns.formulas.hacking.hackTime(server, player);\\n        growTime = ns.formulas.hacking.growTime(server, player);\\n        weakenTime = ns.formulas.hacking.weakenTime(server, player);\\n    }\\n    else {\\n        hackTime = ns.getHackTime(target);\\n        growTime = ns.getGrowTime(target);\\n        weakenTime = ns.getWeakenTime(target);\\n    }\\n    return { hackTime, growTime, weakenTime };\\n}\\nexport async function prepareServer(ns, target) {\\n    // now find the required number of threads for each action.\\n    const growThreads = Math.ceil(ns.growthAnalyze(target, growMultiplier));\\n    const hackThreads = Math.ceil(hackPercent / ns.hackAnalyze(target));\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    const hackSecurityDelta = ns.hackAnalyzeSecurity(hackThreads);\\n    let weakenThreads = 0;\\n    let targetDelta = Math.max(growSecurityDelta, hackSecurityDelta);\\n    // pin targetDelta to 100 to prevent infinity\\n    if (targetDelta > 100)\\n        targetDelta = 100;\\n    while (ns.weakenAnalyze(weakenThreads) < targetDelta) {\\n        await ns.sleep(1);\\n        weakenThreads += 1;\\n        // ns.clearLog();\\n        // ns.print(`Calculating Weaken Threads: ${weakenThreads}`);\\n        // ns.print(\\n        //   `${weakenThreads} threads will cut security by ${ns.weakenAnalyze(\\n        //     weakenThreads\\n        //   )}`\\n        // );\\n        // ns.print(`Target security is ${targetDelta}`);\\n    }\\n    // ns.print(`Preparing ${target} for hacking...`);\\n    // ns.print(\\\"Growing...\\\");\\n    await killMsg(ns, \\\"hack\\\", target);\\n    ns.run(spawnerName, 1, \\\"grow\\\", target, growThreads, bufferTime);\\n    ns.run(spawnerName, 1, \\\"weaken\\\", target, weakenThreads, bufferTime);\\n    while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n        await ns.sleep(bufferTime);\\n    }\\n    // ns.kill(growPid);\\n    await killMsg(ns, \\\"grow\\\", target);\\n    // ns.print(\\\"Weakening...\\\");\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n        await ns.sleep(bufferTime);\\n    }\\n    // ns.kill(weakenPid);\\n    await killMsg(ns, \\\"weaken\\\", target);\\n}\\nasync function killMsg(ns, cmd, target) {\\n    kill(ns, (ps) => {\\n        if (ps.filename === spawnerName &&\\n            ps.args.includes(cmd) &&\\n            ps.args.includes(target))\\n            return true;\\n        if (ps.filename.includes(cmd) && ps.args.includes(target))\\n            return true;\\n        return false;\\n    });\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\n\",\"filename\":\"/batching/batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///6567ac83-84c7-48b3-8b2e-5897d6078002\",\"moduleSequenceNumber\":194124},{\"filename\":\"ps.js\",\"url\":\"blob:file:///4e7e4d28-0b1c-47a6-aa4d-20dfb658bdc7\",\"moduleSequenceNumber\":194154},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///218407c2-88d8-4868-bbc4-edbecb1e7572\",\"moduleSequenceNumber\":194120},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///4318a54e-8329-4c0b-8c5a-fbbedeabcf3a\",\"moduleSequenceNumber\":194124},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///aa08e87e-ef5a-4d8b-86da-85519746c4a0\",\"moduleSequenceNumber\":194126},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///1a2bd783-c52f-420f-b91c-65fe5ad03f0d\",\"moduleSequenceNumber\":194138},{\"filename\":\"/batching/runSpawner.js\",\"url\":\"blob:file:///1a63b641-16a2-4653-820f-04b099c03315\",\"moduleSequenceNumber\":194042},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///853c8940-9937-4fa1-83f5-4043d66c043c\",\"moduleSequenceNumber\":194120},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///107e7d70-5308-4eb1-9e85-2262da68af2f\",\"moduleSequenceNumber\":194124},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///2a7deeec-6d4a-46cf-97f5-c8f1083a5a13\",\"moduleSequenceNumber\":194126},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///84e059bf-fb1e-4eeb-92ff-2ed330ebdb98\",\"moduleSequenceNumber\":194138},{\"filename\":\"/batching/runSpawner.js\",\"url\":\"blob:file:///e131f565-32ff-4602-979d-b6ec8f8cd106\",\"moduleSequenceNumber\":194042},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///fab85894-ecd2-4fc7-8bd4-ad0dbf72f05c\",\"moduleSequenceNumber\":194124},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///431aa67b-f618-4a38-806f-48100677bf45\",\"moduleSequenceNumber\":194122},{\"filename\":\"/batching/prepBatch.js\",\"url\":\"blob:file:///80b19c59-d89e-409b-a483-9c8ac6d8eff3\",\"moduleSequenceNumber\":194040},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///3996f8cf-cf3e-4656-b9b1-b3fe1cfee524\",\"moduleSequenceNumber\":194124},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///a786c748-bf11-4468-b300-d5f3b839f27d\",\"moduleSequenceNumber\":194122},{\"filename\":\"/batching/batch.js\",\"url\":\"blob:file:///2be7bb2c-0349-444c-9601-1e02e0b8f74f\",\"moduleSequenceNumber\":194653}],\"dependents\":[],\"ramUsage\":13.9,\"server\":\"home\",\"moduleSequenceNumber\":194653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///60adf678-bade-475c-bacc-697619a719cd\",\"moduleSequenceNumber\":93111}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":194036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a825912f-72aa-4e02-b4ae-840e4cff84fa\",\"moduleSequenceNumber\":133459}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":194038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { kill } from \\\"utils/scriptKilling\\\";\\nimport { runSpawner, spawnerName } from \\\"batching/runSpawner\\\";\\nconst bufferTime = 3000;\\nconst growMultiplier = 4;\\nconst analyzeScript = \\\"/analyzeServer.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"exec\\\");\\n    ns.enableLog(\\\"run\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This will continuously prepare a server untill it's money is at maximum and it's security is at minimum.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET\\n      `);\\n        return;\\n    }\\n    // analyze the server\\n    ns.run(analyzeScript, 1, target, `Batch attack!`);\\n    await prepBatch(ns, target);\\n}\\nexport async function prepBatch(ns, target) {\\n    // now find the required number of threads for each action.\\n    const growThreads = Math.ceil(ns.growthAnalyze(target, growMultiplier));\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    let weakenThreads = 0;\\n    let targetDelta = growSecurityDelta;\\n    // pin targetDelta to 100 to prevent infinity\\n    if (targetDelta > 100)\\n        targetDelta = 100;\\n    while (ns.weakenAnalyze(weakenThreads) < targetDelta) {\\n        await ns.sleep(1);\\n        weakenThreads += 1;\\n        ns.clearLog();\\n        ns.print(`Calculating Weaken Threads: ${weakenThreads}`);\\n        ns.print(`${weakenThreads} threads will cut security by ${ns.weakenAnalyze(weakenThreads)}`);\\n        ns.print(`Target security is ${targetDelta}`);\\n    }\\n    // calculate timing\\n    const { hackTime, growTime, weakenTime } = getTiming(ns, target);\\n    // sanity check\\n    if (hackTime > growTime || hackTime > weakenTime || growTime > weakenTime) {\\n        ns.tprint(`Something screwy going on with ${target} timing`);\\n        return;\\n    }\\n    ns.print(\\\"Preparing...\\\");\\n    await runSpawner(ns, \\\"weaken\\\", target, weakenThreads, bufferTime);\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\n        await ns.sleep(bufferTime);\\n    await runSpawner(ns, \\\"grow\\\", target, growThreads, bufferTime);\\n    while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\n        await ns.sleep(bufferTime);\\n    kill(ns, (ps) => (ps.filename === spawnerName && ps.args.includes(target)) ||\\n        (ps.filename.includes(\\\"grow\\\") && ps.args.includes(target)) ||\\n        (ps.filename.includes(\\\"weaken\\\") && ps.args.includes(target)));\\n}\\nfunction getTiming(ns, target) {\\n    let hackTime = 1;\\n    let growTime = 1;\\n    let weakenTime = 1;\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n        const server = ns.getServer(target);\\n        server.hackDifficulty = server.minDifficulty;\\n        const player = ns.getPlayer();\\n        hackTime = ns.formulas.hacking.hackTime(server, player);\\n        growTime = ns.formulas.hacking.growTime(server, player);\\n        weakenTime = ns.formulas.hacking.weakenTime(server, player);\\n    }\\n    else {\\n        hackTime = ns.getHackTime(target);\\n        growTime = ns.getGrowTime(target);\\n        weakenTime = ns.getWeakenTime(target);\\n    }\\n    return { hackTime, growTime, weakenTime };\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\n\",\"filename\":\"/batching/prepBatch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///8cc604b9-2a9e-44e0-9d86-ec0871433895\",\"moduleSequenceNumber\":504917},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///eea4fc07-acb9-417d-b23b-5827a47f46d2\",\"moduleSequenceNumber\":504921},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///75bd69e8-3ab5-4e9a-9d4a-547d793cd901\",\"moduleSequenceNumber\":504920},{\"filename\":\"/batching/prepBatch.js\",\"url\":\"blob:file:///5ceee9e0-e861-46fe-9f50-6c09d403e55b\",\"moduleSequenceNumber\":504941}],\"dependents\":[],\"ramUsage\":11.9,\"server\":\"home\",\"moduleSequenceNumber\":194040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///d26d39ba-4059-404e-90be-bcc12bada9c7\",\"moduleSequenceNumber\":710624}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":194044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9e93bf1e-1959-4473-9ae3-72b52baedaa2\",\"moduleSequenceNumber\":93251}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":194046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { ServerNode } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will monitor for servers that need a backdoor installed.\\n      It will also nuke any server that needs it.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    const programs = new ProgramData(ns);\\n    while (true) {\\n        // 30 seconds should be a perfectly reasonable update time.\\n        await ns.sleep(30000);\\n        let servers = new ServerNode(ns);\\n        // find nukable servers.\\n        for (const server of servers\\n            .list()\\n            .filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts)) {\\n            // nuke them.\\n            ns.print(`nuking ${server.hostname}`);\\n            nuke(ns, server.hostname);\\n        }\\n        // clear the log.\\n        ns.clearLog();\\n        let backdoors = servers\\n            .list()\\n            .filter((s) => s.hasAdminRights &&\\n            !s.backdoorInstalled &&\\n            s.requiredHackingSkill < ns.getHackingLevel() &&\\n            s.hostname !== \\\"home\\\");\\n        // show the log if we have servers to backdoor\\n        if (backdoors.length === 0) {\\n            ns.print(\\\"No servers require a backdoor at this time.\\\");\\n            continue;\\n        }\\n        ns.tail();\\n        ns.print(`The following servers need to have the backdoor installed:`);\\n        ns.print(`==========================================================`);\\n        // find backdoorable servers.\\n        for (const server of backdoors) {\\n            // list them.\\n            ns.print(server.hostname);\\n        }\\n        ns.print(`==========================================================`);\\n    }\\n}\\n\",\"filename\":\"/phase1/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"home\",\"moduleSequenceNumber\":194078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    ns.tail();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      Hacks the richest server from every available server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = getHackableServers(ns)[0];\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    // prepare the target server\\n    if (!ns.isRunning(\\\"batching/prepBatch.js\\\", \\\"home\\\", richest.hostname))\\n        ns.run(\\\"batching/prepBatch.js\\\", 1, richest.hostname);\\n    while (ns.isRunning(\\\"batching/prepBatch.js\\\", \\\"home\\\", richest.hostname)) {\\n        serverStatus(ns, richest.hostname);\\n        await ns.sleep(1);\\n    }\\n    ns.spawn(\\\"batching/batch.js\\\", 1, richest.hostname);\\n}\\nfunction serverStatus(ns, host) {\\n    const currentSecurity = ns.getServerSecurityLevel(host);\\n    const minSecurity = ns.getServerMinSecurityLevel(host);\\n    const currentCash = ns.getServerMoneyAvailable(host);\\n    const maxCash = ns.getServerMaxMoney(host);\\n    ns.print(`${host}:\\n  Cash: ${ns.nFormat(currentCash, \\\"$0.000a\\\")}/${ns.nFormat(maxCash, \\\"$0.000a\\\")}(${ns.nFormat(currentCash / maxCash, \\\"0.0%\\\")})\\n  Security: ${minSecurity} / ${currentSecurity} (${ns.nFormat(minSecurity / currentSecurity, \\\"0.0%\\\")})\\n  `);\\n}\\n\",\"filename\":\"/phase1/basicHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///d93e1ec8-c257-4313-b06c-db13f954459e\",\"moduleSequenceNumber\":504919},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///cb70f6c0-da0a-4ffd-84d3-0ff17f76a394\",\"moduleSequenceNumber\":504917},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///9a187fd9-2f90-4ffa-98ef-10f365c75d24\",\"moduleSequenceNumber\":504921},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///ef07864f-fb9c-4edc-b6d3-b06b12321dfd\",\"moduleSequenceNumber\":504922},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///c139520d-2e5b-44cb-8bba-1ad182178401\",\"moduleSequenceNumber\":504926},{\"filename\":\"/phase1/basicHack.js\",\"url\":\"blob:file:///81240f6d-61b3-4dbb-8968-159abd6a0c93\",\"moduleSequenceNumber\":504940}],\"dependents\":[],\"ramUsage\":11.6,\"server\":\"home\",\"moduleSequenceNumber\":194080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      Hacks the richest server using the rest of your RAM.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = getHackableServers(ns)[0];\\n    const hackScript = \\\"hack.js\\\";\\n    // calculate the maximum number of threads.\\n    let maxThreads = Math.floor((ns.getServerMaxRam(ns.getHostname()) -\\n        ns.getServerUsedRam(ns.getHostname()) +\\n        ns.getScriptRam(ns.getScriptName(), ns.getHostname())) /\\n        ns.getScriptRam(hackScript, ns.getHostname()));\\n    // hack the richest server\\n    if (maxThreads > 0)\\n        ns.spawn(hackScript, maxThreads, richest.hostname);\\n    else {\\n        ns.tprint(\\\"ERROR! Cannot spawn hack script. Out of memory.\\\");\\n    }\\n}\\n\",\"filename\":\"/phase1/hackRichest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.25,\"server\":\"home\",\"moduleSequenceNumber\":194082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// timing constants\\nconst seconds = 1000; //milliseconds\\nconst second = seconds;\\nconst minutes = 60 * seconds;\\nconst minute = minutes;\\nconst hours = 60 * minutes;\\nconst hour = hours;\\nconst days = 24 * hours;\\nconst day = days;\\nlet restartDuration = 1 * day;\\nconst scripts = [\\n    \\\"/backdoor.js\\\",\\n    \\\"hacknet.js\\\",\\n    // \\\"/contracts/list.js\\\",\\n    \\\"/contracts/start.js\\\",\\n    \\\"programs.js\\\",\\n    \\\"purchase.js\\\",\\n    \\\"/stocks/start.js\\\",\\n    \\\"/phase1/basicHack.js\\\",\\n];\\nconst restartScripts = [\\\"/phase1/basicHack.js\\\"];\\nconst singularityScripts = [\\n    \\\"/expandServer.js\\\",\\n    //\\n];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This is a simple script that restarts the automated scripts periodically.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    for (const script of scripts) {\\n        ns.run(script);\\n        // This delay is to keep the scripts from colliding.\\n        await ns.sleep(5000);\\n    }\\n    while (true) {\\n        for (const script of restartScripts) {\\n            ns.run(script);\\n            // This delay is to keep the scripts from colliding.\\n            await ns.sleep(5000);\\n        }\\n        if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n            restartDuration = 30 * minutes;\\n        }\\n        if (ns.getOwnedSourceFiles().filter((sf) => sf.n === 4).length > 0 ||\\n            ns.getPlayer().bitNodeN === 4)\\n            for (const script of singularityScripts) {\\n                ns.run(script);\\n            }\\n        const restartTime = Date.now() + restartDuration;\\n        while (true) {\\n            ns.clearLog();\\n            ns.tail();\\n            ns.print(`\\n      Hack Profit     : ${ns.nFormat(ns.getScriptIncome()[0], \\\"$0.0a\\\")} / sec.\\n      Hack XP         : ${ns.nFormat(ns.getScriptExpGain(), \\\"0.0a\\\")} / sec.\\n      Home RAM        : ${ns.nFormat(ns.getServerMaxRam(\\\"home\\\") * 1e9, \\\"0.0b\\\")}\\n      Servers Owned   : ${ns.getPurchasedServers().length}\\n      Total RAM       : ${ns.nFormat(getTotalRam(ns) * 1e9, \\\"0.0b\\\")}\\n`);\\n            ns.print(`Restart in ${ns.tFormat(restartTime - Date.now())}`);\\n            await ns.sleep(second);\\n            if (Date.now() >= restartTime)\\n                break;\\n            if (getTotalRam(ns) > 1e6)\\n                ns.spawn(\\\"phase2/restart.js\\\");\\n        }\\n    }\\n}\\nfunction getTotalRam(ns) {\\n    let total = ns.getServerMaxRam(\\\"home\\\");\\n    if (ns.getPurchasedServers().length === 0)\\n        return total;\\n    for (const host of ns.getPurchasedServers()) {\\n        total += ns.getServerMaxRam(host);\\n    }\\n    return total;\\n}\\n\",\"filename\":\"/phase1/restart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/phase1/restart.js\",\"url\":\"blob:file:///d2eeb7ab-32e1-4e06-86cd-35a3494279f5\",\"moduleSequenceNumber\":504938}],\"dependents\":[],\"ramUsage\":12.8,\"server\":\"home\",\"moduleSequenceNumber\":194084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const scripts = [\\n    \\\"hacknet.js\\\",\\n    \\\"shareAll.js\\\",\\n    \\\"/contracts/list.js\\\",\\n    \\\"cnct.js\\\",\\n    \\\"backdoor.js\\\",\\n    \\\"programs.js\\\",\\n    \\\"/phase1/basicHack.js\\\",\\n    \\\"/stocks/start.js\\\",\\n    // `expandServer.js` and `actions/programming.js` is currently failing until we can level up Source File 4\\n    // '/expandServer.js',\\n    // '/actions/programming.js',\\n];\\nconst maxRam = 32e9;\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will test all phase 1 scripts memory requirements.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let pass = true;\\n    let failedScripts = [];\\n    for (const script of scripts) {\\n        const ram = ns.getScriptRam(script, \\\"home\\\") * 1e9;\\n        if (ram > maxRam) {\\n            pass = false;\\n            failedScripts.push(script);\\n            ns.tprint(`${script} requires ${ns.nFormat(ram, \\\"0.00b\\\")} RAM - that's too much!`);\\n        }\\n        else {\\n            ns.tprint(`${script} only requires ${ns.nFormat(ram, \\\"0.00b\\\")} RAM`);\\n        }\\n    }\\n    if (!pass) {\\n        ns.tprint(`FAIL! You still need to work on these scripts:\\n      ${failedScripts}`);\\n    }\\n    else {\\n        ns.tprint(\\\"SUCCESS!\\\");\\n    }\\n}\\n\",\"filename\":\"/phase1/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":194086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { ServerNode } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will monitor for servers that need a backdoor installed.\\n      It will also nuke any server that needs it.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    const programs = new ProgramData(ns);\\n    while (true) {\\n        // 30 seconds should be a perfectly reasonable update time.\\n        await ns.sleep(30000);\\n        let ownedServers = ns.getPurchasedServers();\\n        let servers = new ServerNode(ns);\\n        // find nukable servers.\\n        for (const server of servers\\n            .list()\\n            .filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts)) {\\n            // nuke them.\\n            ns.print(`nuking ${server.hostname}`);\\n            nuke(ns, server.hostname);\\n        }\\n        // clear the log.\\n        ns.clearLog();\\n        let backdoors = servers\\n            .list()\\n            .filter((s) => s.hasAdminRights &&\\n            !s.backdoorInstalled &&\\n            s.requiredHackingSkill < ns.getHackingLevel() &&\\n            s.hostname !== \\\"home\\\" &&\\n            !ownedServers.includes(s.hostname));\\n        // show the log if we have servers to backdoor\\n        if (backdoors.length === 0) {\\n            ns.print(\\\"No servers require a backdoor at this time.\\\");\\n            continue;\\n        }\\n        ns.tail();\\n        ns.print(`The following servers need to have the backdoor installed:`);\\n        ns.print(`==========================================================`);\\n        // find backdoorable servers.\\n        for (const server of backdoors) {\\n            // list them.\\n            ns.print(server.hostname);\\n        }\\n        ns.print(`==========================================================`);\\n    }\\n}\\n\",\"filename\":\"/phase2/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":194088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\n// - batchHack.js: This is your bread and butter batching script. It will calculate\\n//   the richest server that can be effectively hacked with the memory you have\\n//   available. Copy 'batch.js' to the source server and start a batch based\\n//   attack on the target server.\\nconst batchScript = \\\"/batching/batch.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will start your batch hacking.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // Find the richest server that we have enough memory to effectively\\n    // batch.\\n    const targetServer = await getTargetServer(ns);\\n    // start batching!\\n    if (!targetServer) {\\n        ns.tprint(\\\"Can't batch yet!\\\");\\n        return;\\n    }\\n    ns.tprint(`Hacking ${targetServer.hostname}`);\\n    ns.spawn(batchScript, 1, targetServer.hostname);\\n}\\nasync function getTargetServer(ns) {\\n    return getHackableServers(ns)[0];\\n}\\n\",\"filename\":\"/phase2/batchHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///bf3aca55-44b6-4393-b7b7-c166554d9092\",\"moduleSequenceNumber\":147119},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///2926b6a2-54f4-4fdc-9e75-a8f10c813779\",\"moduleSequenceNumber\":147123},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///efa1d18d-1f87-495a-aba0-60c9a8421af5\",\"moduleSequenceNumber\":147125},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///6472e971-a7cd-43af-8927-cb33be58fa03\",\"moduleSequenceNumber\":147135},{\"filename\":\"/phase2/batchHack.js\",\"url\":\"blob:file:///7dfdb126-61bc-46f9-9393-8647bfe60552\",\"moduleSequenceNumber\":147477}],\"dependents\":[],\"ramUsage\":10.1,\"server\":\"home\",\"moduleSequenceNumber\":194090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will run continuously and expand your server for you. It will\\n      only work with Source File 4.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMaxRam(\\\"home\\\") < 1e9) {\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeRamCost()) {\\n            ns.upgradeHomeRam();\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeCoresCost()) {\\n            ns.upgradeHomeCores();\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase2/expandServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":145.85,\"server\":\"home\",\"moduleSequenceNumber\":194092,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      Hacks the richest server using the rest of your RAM.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = undefined;\\n    for (const server of getHackableServers(ns)) {\\n        if (!richest || richest.moneyMax < server.moneyMax)\\n            richest = server;\\n    }\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    const hackScript = \\\"hack.js\\\";\\n    // calculate the maximum number of threads.\\n    let maxThreads = Math.floor((ns.getServerMaxRam(ns.getHostname()) -\\n        ns.getServerUsedRam(ns.getHostname()) +\\n        ns.getScriptRam(ns.getScriptName(), ns.getHostname())) /\\n        ns.getScriptRam(hackScript, ns.getHostname()));\\n    // hack the richest server\\n    if (maxThreads > 0)\\n        ns.spawn(hackScript, maxThreads, richest.hostname);\\n    else {\\n        ns.tprint(\\\"ERROR! Cannot spawn hack script. Out of memory.\\\");\\n    }\\n}\\n\",\"filename\":\"/phase2/hackRichest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.25,\"server\":\"home\",\"moduleSequenceNumber\":194094,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMinRam } from \\\"purchase\\\";\\n// timing constants\\nconst seconds = 1000; //milliseconds\\nconst second = seconds;\\nconst minutes = 60 * seconds;\\nconst minute = minutes;\\nconst hours = 60 * minutes;\\nconst hour = hours;\\nconst days = 24 * hours;\\nconst day = days;\\nlet restartDuration = 1 * day;\\nconst scripts = [\\n    \\\"backdoor.js\\\",\\n    \\\"hacknet.js\\\",\\n    \\\"/contracts/start.js\\\",\\n    \\\"programs.js\\\",\\n    \\\"purchase.js\\\",\\n    \\\"/stocks/start.js\\\",\\n    // \\\"shareAll.js\\\",\\n];\\nconst restartScripts = [\\n    \\\"/phase2/batchHack.js\\\",\\n    //\\n];\\nconst singularityScripts = [\\n    \\\"/expandServer.js\\\",\\n    //\\n];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This is a simple script that restarts the automated scripts periodically.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    for (const script of scripts) {\\n        ns.run(script);\\n        // This delay is to keep the scripts from colliding.\\n        await ns.sleep(5000);\\n    }\\n    while (true) {\\n        for (const script of restartScripts) {\\n            ns.run(script);\\n            // This delay is to keep the scripts from colliding.\\n            await ns.sleep(5000);\\n        }\\n        let hasFormulas = ns.fileExists(\\\"Formulas.exe\\\");\\n        if (hasFormulas) {\\n            restartDuration = 30 * minutes;\\n        }\\n        if (ns.getOwnedSourceFiles().filter((sf) => sf.n === 4).length > 0 ||\\n            ns.getPlayer().bitNodeN === 4)\\n            for (const script of singularityScripts) {\\n                ns.run(script);\\n            }\\n        const restartTime = Date.now() + restartDuration;\\n        while (true) {\\n            ns.clearLog();\\n            ns.tail();\\n            ns.print(`\\n      Hack Profit  : ${ns.nFormat(ns.getScriptIncome()[0], \\\"$0.000a\\\")} / sec.\\n      Hack XP      : ${ns.nFormat(ns.getScriptExpGain(), \\\"0.000a\\\")} / sec.\\n`);\\n            ns.print(`Restart in ${ns.tFormat(restartTime - Date.now())}`);\\n            await ns.sleep(second);\\n            if (Date.now() >= restartTime)\\n                break;\\n            if (!hasFormulas && ns.fileExists(\\\"Formulas.exe\\\")) {\\n                restartDuration = 30 * minutes;\\n                break;\\n            }\\n            if (getMinRam(ns) >= ns.getPurchasedServerMaxRam())\\n                ns.spawn(\\\"phase3/restart.js\\\");\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase2/restart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"purchase.js\",\"url\":\"blob:file:///b333e4ed-a5b5-4a5e-bf39-1202e4b36390\",\"moduleSequenceNumber\":147151},{\"filename\":\"/phase2/restart.js\",\"url\":\"blob:file:///db00a7a6-801e-43c0-9d6a-9e81e3afe084\",\"moduleSequenceNumber\":147474}],\"dependents\":[],\"ramUsage\":12.9,\"server\":\"home\",\"moduleSequenceNumber\":194096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { ServerNode } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will monitor for servers that need a backdoor installed.\\n      It will also nuke any server that needs it.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    const programs = new ProgramData(ns);\\n    while (true) {\\n        // 30 seconds should be a perfectly reasonable update time.\\n        await ns.sleep(30000);\\n        let servers = new ServerNode(ns);\\n        // find nukable servers.\\n        for (const server of servers\\n            .list()\\n            .filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts)) {\\n            // nuke them.\\n            ns.print(`nuking ${server.hostname}`);\\n            nuke(ns, server.hostname);\\n        }\\n        // clear the log.\\n        ns.clearLog();\\n        let backdoors = servers\\n            .list()\\n            .filter((s) => s.hasAdminRights &&\\n            !s.backdoorInstalled &&\\n            s.requiredHackingSkill < ns.getHackingLevel() &&\\n            s.hostname !== \\\"home\\\" &&\\n            !ns.getPurchasedServers().includes(s.hostname));\\n        // show the log if we have servers to backdoor\\n        if (backdoors.length === 0) {\\n            ns.print(\\\"No servers require a backdoor at this time.\\\");\\n            continue;\\n        }\\n        ns.tail();\\n        ns.print(`The following servers need to have the backdoor installed:`);\\n        ns.print(`==========================================================`);\\n        // find backdoorable servers.\\n        for (const server of backdoors) {\\n            // list them.\\n            ns.print(server.hostname);\\n        }\\n        ns.print(`==========================================================`);\\n    }\\n}\\n\",\"filename\":\"/phase3/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":194098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\n// - batchHack.js: This is your bread and butter batching script. It will calculate\\n//   the richest server that can be effectively hacked with the memory you have\\n//   available. Copy 'batch.js' to the source server and start a batch based\\n//   attack on the target server.\\nconst batchScript = \\\"/batching/batch.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will start your batch hacking.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // Find the richest server that we have enough memory to effectively\\n    // batch.\\n    const targetServers = getTargetServers(ns);\\n    // start batching!\\n    if (!targetServers || targetServers.length === 0) {\\n        ns.tprint(\\\"Can't batch yet!\\\");\\n        return;\\n    }\\n    for (const targetServer of targetServers) {\\n        ns.tprint(`Hacking ${targetServer.hostname}`);\\n        ns.run(batchScript, 1, targetServer.hostname);\\n        while (ns.scriptRunning(batchScript, ns.getHostname()))\\n            await ns.sleep(1);\\n    }\\n}\\nfunction getTargetServers(ns) {\\n    const numServers = ns.getPurchasedServers().length + 1;\\n    // const numServers = 1;\\n    return getHackableServers(ns).slice(0, numServers);\\n}\\n\",\"filename\":\"/phase3/batchHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///af87ef28-c706-46e7-b399-b0a02e0d4cc0\",\"moduleSequenceNumber\":194120},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///e061e46c-ff50-4774-9bdb-4d515bbd3ac7\",\"moduleSequenceNumber\":194124},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///c037cf93-f4d2-4dd8-ab90-8086777c169e\",\"moduleSequenceNumber\":194126},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///08348053-a50d-4de9-9267-bd6bf030c787\",\"moduleSequenceNumber\":194138},{\"filename\":\"/phase3/batchHack.js\",\"url\":\"blob:file:///b440ab86-d472-4844-ab09-b75dfeafe6c6\",\"moduleSequenceNumber\":194171}],\"dependents\":[],\"ramUsage\":10.15,\"server\":\"home\",\"moduleSequenceNumber\":194171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will run continuously and expand your server for you. It will\\n      only work with Source File 4.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMaxRam(\\\"home\\\") < 1e9) {\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeRamCost()) {\\n            ns.upgradeHomeRam();\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeCoresCost()) {\\n            ns.upgradeHomeCores();\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase3/expandServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":145.85,\"server\":\"home\",\"moduleSequenceNumber\":194102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      Hacks the richest server using the rest of your RAM.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = undefined;\\n    for (const server of getHackableServers(ns)) {\\n        if (!richest || richest.moneyMax < server.moneyMax)\\n            richest = server;\\n    }\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    const hackScript = \\\"hack.js\\\";\\n    // calculate the maximum number of threads.\\n    let maxThreads = Math.floor((ns.getServerMaxRam(ns.getHostname()) -\\n        ns.getServerUsedRam(ns.getHostname()) +\\n        ns.getScriptRam(ns.getScriptName(), ns.getHostname())) /\\n        ns.getScriptRam(hackScript, ns.getHostname()));\\n    // hack the richest server\\n    if (maxThreads > 0)\\n        ns.spawn(hackScript, maxThreads, richest.hostname);\\n    else {\\n        ns.tprint(\\\"ERROR! Cannot spawn hack script. Out of memory.\\\");\\n    }\\n}\\n\",\"filename\":\"/phase3/hackRichest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.25,\"server\":\"home\",\"moduleSequenceNumber\":194104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// timing constants\\nconst seconds = 1000; //milliseconds\\nconst second = seconds;\\nconst minute = 60 * seconds;\\nconst minutes = minute;\\nconst hour = 60 * minutes;\\nconst hours = hour;\\nconst days = 24 * hours;\\nconst day = days;\\nlet restartDuration = 1 * day;\\nrestartDuration = 30 * minutes;\\nconst scripts = [\\n    \\\"hacknet.js\\\",\\n    \\\"backdoor.js\\\",\\n    \\\"/phase3/batchHack.js\\\",\\n    \\\"/contracts/start.js\\\",\\n    \\\"programs.js\\\",\\n    \\\"/stocks/start.js\\\",\\n    \\\"shareAll.js\\\",\\n];\\nconst restartScripts = [\\n    \\\"/phase3/batchHack.js\\\",\\n    //\\n];\\nconst singularityScripts = [\\n    \\\"expandServer.js\\\",\\n    //\\n];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This is a simple script that restarts the automated scripts periodically.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    for (const script of scripts) {\\n        ns.run(script);\\n        // This delay is to keep the scripts from colliding.\\n        await ns.sleep(5000);\\n    }\\n    while (true) {\\n        for (const script of restartScripts) {\\n            ns.run(script);\\n            // This delay is to keep the scripts from colliding.\\n            await ns.sleep(5000);\\n        }\\n        let hasFormulas = ns.fileExists(\\\"Formulas.exe\\\");\\n        if (hasFormulas) {\\n            restartDuration = 30 * minutes;\\n        }\\n        if (ns.getOwnedSourceFiles().filter((sf) => sf.n === 4).length > 0 ||\\n            ns.getPlayer().bitNodeN === 4)\\n            for (const script of singularityScripts) {\\n                ns.scriptKill(script, ns.getHostname());\\n                ns.run(script);\\n            }\\n        const restartTime = Date.now() + restartDuration;\\n        while (true) {\\n            ns.clearLog();\\n            ns.tail();\\n            ns.print(`\\n      Hack Profit  : ${ns.nFormat(ns.getScriptIncome()[0], \\\"$0.000a\\\")} / sec.\\n      Hack XP      : ${ns.nFormat(ns.getScriptExpGain(), \\\"0.000a\\\")} / sec.\\n`);\\n            ns.print(`Restart in ${ns.tFormat(restartTime - Date.now())}`);\\n            await ns.sleep(second);\\n            if (Date.now() >= restartTime)\\n                break;\\n            if (!hasFormulas && ns.fileExists(\\\"Formulas.exe\\\")) {\\n                restartDuration = 30 * minutes;\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase3/restart.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/phase3/restart.js\",\"url\":\"blob:file:///880881b9-968e-4064-9bb2-5e542218a068\",\"moduleSequenceNumber\":194169}],\"dependents\":[],\"ramUsage\":9.55,\"server\":\"home\",\"moduleSequenceNumber\":194169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getFolio(ns) {\\n    const symbols = ns.stock.getSymbols();\\n    let folio = [];\\n    for (const sym of symbols) {\\n        const [shares] = ns.stock.getPosition(sym);\\n        if (shares > 0) {\\n            folio.push({ sym, shares });\\n        }\\n    }\\n    return folio;\\n}\\n\",\"filename\":\"/stocks/folio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":194108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolio } from \\\"stocks/folio\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.tail();\\n    ns.print(\\\"Liquidating assets.\\\");\\n    await liquidate(ns);\\n}\\nasync function liquidate(ns) {\\n    let folio = getFolio(ns);\\n    let total = 0;\\n    while (folio.length > 0) {\\n        ns.scriptKill(\\\"/stocks/start.js\\\", \\\"home\\\");\\n        await ns.sleep(1);\\n        ns.clearLog();\\n        for (const stock of folio) {\\n            const forecast = ns.stock.getForecast(stock.sym);\\n            if (forecast < 0.5) {\\n                // SELL!\\n                const sellPrice = ns.stock.sell(stock.sym, stock.shares);\\n                total += sellPrice;\\n                ns.print(`\\n          ${stock.sym} sold for ${sellPrice}\\n          `);\\n            }\\n            else {\\n                ns.print(`\\n          Waiting for ${stock.sym} to stop growing.\\n          `);\\n            }\\n        }\\n        folio = getFolio(ns);\\n    }\\n    ns.print(`All stocks sold for a total of ${total}`);\\n}\\n\",\"filename\":\"/stocks/liquidate.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stocks/folio.js\",\"url\":\"blob:file:///fdad4506-09db-43b8-9708-8728348b88e6\",\"moduleSequenceNumber\":179419},{\"filename\":\"/stocks/liquidate.js\",\"url\":\"blob:file:///5921c454-01e5-42c8-bc1f-e54120daea43\",\"moduleSequenceNumber\":179480}],\"dependents\":[],\"ramUsage\":11.6,\"server\":\"home\",\"moduleSequenceNumber\":194110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// % of money to use in buying stocks\\n// const budget = 1;\\n// % at which to buy or sell stocks\\n// const buyAt = 60;\\n// Profit amount to sell the stock at.\\n// const sellAt = 10000000;\\n// TODO short stocks\\n// const shortAt = 40;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let stocks = ns.stock.getSymbols();\\n    for (let stock of stocks.sort((a, b) => ns.stock.getAskPrice(b) - ns.stock.getAskPrice(a))) {\\n        // let increaseChance = ns.stock.getForecast(stock) * 100;\\n        let askPrice = ns.stock.getAskPrice(stock);\\n        ns.tprint(`${stock} - ${ns.nFormat(askPrice, \\\"$0.0a\\\")}`);\\n    }\\n}\\n\",\"filename\":\"/stocks/listall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stocks/listall.js\",\"url\":\"blob:file:///34f64aa2-2484-4d52-be96-3d36e948ea09\",\"moduleSequenceNumber\":449024}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":194112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolio } from \\\"stocks/folio\\\";\\n// % of money to use in buying stocks\\nconst budget = 0.9;\\n// % at which to buy or sell stocks\\nconst buyAt = 0.6;\\nconst sellBellow = 0.5;\\n// const stockToWatch = \\\"MGCP\\\"; // Megacorp\\n// TODO short stocks\\n// const shortAt = 40;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    try {\\n        if (!ns.stock.purchase4SMarketData() ||\\n            !ns.stock.purchase4SMarketDataTixApi()) {\\n            ns.tprint(\\\"You need 4S Maket Data Api access to effectively trade stocks!\\\");\\n            return;\\n        }\\n    }\\n    catch (error) {\\n        ns.tprint(\\\"You need 4S Maket Data Api access to effectively trade stocks!\\\");\\n        return;\\n    }\\n    while (true) {\\n        await manageStock(ns);\\n        if (getFolio(ns).length > 0)\\n            ns.tail();\\n        showFolio(ns);\\n        await ns.sleep(1);\\n    }\\n}\\n/** @param {NS} ns **/\\nasync function manageStock(ns) {\\n    // let stock = stockToWatch;\\n    let folio = getFolio(ns);\\n    if (folio.length > 0) {\\n        // we have a stock - get it and monitor if it is increasing/decreasing\\n        for (const { sym, shares } of folio) {\\n            if (ns.stock.getPosition(sym)[0] > 0) {\\n                // we have stock in the long position\\n                let increaseChance = ns.stock.getForecast(sym);\\n                if (increaseChance <= sellBellow) {\\n                    let total = ns.stock.sell(sym, shares);\\n                    // ns.tail();\\n                    ns.print(`Sold:\\n          shares    : ${ns.nFormat(shares, \\\"0.00a\\\")} \\n          stock     : ${sym}\\n          total     : ${ns.nFormat(total * shares, \\\"$0.000a\\\")} \\n          increase%   : ${increaseChance.toLocaleString(undefined, {\\n                        style: \\\"percent\\\",\\n                    })}\\n            `);\\n                }\\n                else {\\n                    await ns.sleep(1);\\n                }\\n            }\\n        }\\n    }\\n    // buy any stocks that are increasing that we can offord\\n    for (const sym of ns.stock.getSymbols()) {\\n        let increaseChance = ns.stock.getForecast(sym);\\n        if (increaseChance >= buyAt) {\\n            buyStock(ns, sym);\\n        }\\n    }\\n}\\nfunction buyStock(ns, sym) {\\n    let cashAvailable = ns.getServerMoneyAvailable(\\\"home\\\") * budget;\\n    let stockCost = ns.stock.getBidPrice(sym);\\n    let maxShares = ns.stock.getMaxShares(sym);\\n    let [ownedShares] = ns.stock.getPosition(sym);\\n    if (cashAvailable >= maxShares * stockCost &&\\n        ownedShares < ns.stock.getMaxShares(sym)) {\\n        ns.stock.buy(sym, maxShares - ownedShares);\\n        let increaseChance = ns.stock.getForecast(sym);\\n        ns.print(`Bought:\\n        shares      : ${ns.nFormat(maxShares, \\\"0.0a\\\")}\\n        stock       : ${sym} \\n        total       : ${ns.nFormat(stockCost * maxShares, \\\"$0.0a\\\")}\\n        increase%   : ${ns.nFormat(increaseChance, \\\"0.0%\\\")}\\n        `);\\n    }\\n}\\nfunction showFolio(ns) {\\n    ns.clearLog();\\n    for (const { sym, shares } of getFolio(ns)) {\\n        let [_, avgPrice] = ns.stock.getPosition(sym);\\n        let invested = shares * avgPrice;\\n        let currentWorth = ns.stock.getBidPrice(sym) * shares;\\n        ns.print(`${sym}:\\n      shares          : ${ns.nFormat(shares, \\\"0.0a\\\")}\\n      invested        : ${ns.nFormat(invested, \\\"$0.0a\\\")}\\n      worth           : ${ns.nFormat(currentWorth, \\\"$0.0a\\\")}\\n      profit          : ${ns.nFormat(currentWorth - invested, \\\"$0.0a\\\")}(${ns.nFormat((currentWorth - invested) / invested, \\\"0.0%\\\")})\\n      `);\\n    }\\n}\\nexport function getBestStock(ns) {\\n    let best = [\\\"\\\", 0];\\n    for (const stock of ns.stock.getSymbols()) {\\n        let increaseChance = ns.stock.getForecast(stock);\\n        if (increaseChance > best[1]) {\\n            best = [stock, increaseChance];\\n        }\\n    }\\n    return best[0];\\n}\\n\",\"filename\":\"/stocks/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/stocks/folio.js\",\"url\":\"blob:file:///55347c79-96c1-4a35-9bc4-5346db9d3115\",\"moduleSequenceNumber\":194108},{\"filename\":\"/stocks/start.js\",\"url\":\"blob:file:///e3a4c981-c536-4dda-b4bb-d4d215fc0772\",\"moduleSequenceNumber\":194654}],\"dependents\":[],\"ramUsage\":22.2,\"server\":\"home\",\"moduleSequenceNumber\":194654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketData\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketDataTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const keys = {\\n    serverNodes: \\\"ServerNodes\\\",\\n};\\n// localStorage Functions\\nexport function setItem(key, value) {\\n    localStorage.setItem(key, JSON.stringify(value));\\n}\\nexport function getItem(key) {\\n    JSON.parse(localStorage.getItem(key) || JSON.stringify(undefined));\\n}\\n\",\"filename\":\"/utils/localStorage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":194116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ProgramData } from \\\"utils/ProgramData\\\";\\nexport function nuke(ns, target) {\\n    const programs = new ProgramData(ns);\\n    for (const p of programs.programs) {\\n        if (p.exists)\\n            p.execute(target);\\n    }\\n    ns.nuke(target);\\n}\\n\",\"filename\":\"/utils/nuke.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":194118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ProgramData {\\n    constructor(ns) {\\n        this.programs = [\\n            {\\n                filename: \\\"BruteSSH.exe\\\",\\n                hackingLevel: 50,\\n                execute: ns.brutessh,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"FTPCrack.exe\\\",\\n                hackingLevel: 100,\\n                execute: ns.ftpcrack,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"relaySMTP.exe\\\",\\n                hackingLevel: 250,\\n                execute: ns.relaysmtp,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"HTTPWorm.exe\\\",\\n                hackingLevel: 500,\\n                execute: ns.httpworm,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"SQLInject.exe\\\",\\n                hackingLevel: 750,\\n                execute: ns.sqlinject,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n        ];\\n    }\\n    get hackablePorts() {\\n        let total = 0;\\n        for (const p of this.programs) {\\n            if (p.exists)\\n                total++;\\n        }\\n        return total;\\n    }\\n}\\n\",\"filename\":\"/utils/ProgramData.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":194120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\n// ONLY USE FOR TESTING\\nexport async function main(ns) {\\n    ns.tprint(`This script doesn't do anything right now. Call a function from it if you want to use it.`);\\n}\\nexport function kill(ns, predicate) {\\n    const tree = new ServerTree(ns);\\n    const processes = [];\\n    for (const server of tree.home.list()) {\\n        for (const ps of ns.ps(server.hostname)) {\\n            processes.push([ps, server.hostname]);\\n        }\\n    }\\n    for (const [ps, server] of processes) {\\n        if (predicate(ps, server))\\n            ns.kill(ps.pid);\\n    }\\n}\\n\",\"filename\":\"/utils/scriptKilling.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.5,\"server\":\"home\",\"moduleSequenceNumber\":194122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/utils/ServerTree.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":194124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function copyCmd(ns, cmd) {\\n    const terminalInput = document.getElementById(\\\"terminal-input\\\");\\n    if (!terminalInput) {\\n        ns.print(\\\"Couldn't get terminal-input field.\\\");\\n        return;\\n    }\\n    terminalInput.value = cmd;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({ target: terminalInput });\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\nexport function runCmd(ns, cmd) {\\n    copyCmd(ns, cmd);\\n    document.dispatchEvent(new KeyboardEvent(\\\"keydown\\\", { keyCode: 13 }));\\n}\\n\",\"filename\":\"/utils/terminal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":194126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const server = ns.args[0];\\n    if (args.help || !server) {\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    const msg = ns.args[1];\\n    const loop = ns.args[2];\\n    if (loop)\\n        await analyzeServerLoop(ns, server, msg);\\n    else\\n        analyzeServer(ns, server, msg);\\n}\\nexport function analyzeServer(ns, server, msg = \\\"\\\") {\\n    const ram = [ns.getServerMaxRam(server), ns.getServerUsedRam(server)];\\n    const money = ns.getServerMoneyAvailable(server);\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    const minSec = ns.getServerMinSecurityLevel(server);\\n    const sec = ns.getServerSecurityLevel(server);\\n    if (msg)\\n        ns.tprint(msg);\\n    ns.tprint(`    Hack Profit  : ${ns.nFormat(ns.getScriptIncome()[0], \\\"$0.000a\\\")} / sec.\\n    Hack XP      : ${ns.nFormat(ns.getScriptExpGain(), \\\"0.000a\\\")} / sec.`);\\n    ns.tprint(`\\n\\n${server}:\\n    RAM          : ${ram[1]} / ${ram[0]} (${(ram[1] / ram[0]) * 100}%)\\n    $            : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${((money / maxMoney) * 100).toFixed(2)}%)\\n    security     : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth       : ${ns.getServerGrowth(server)}\\n    hack time    : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time    : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time  : ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2      : ${ns.growthAnalyze(server, 2).toFixed(2)} threads\\n    grow x3      : ${ns.growthAnalyze(server, 3).toFixed(2)} threads\\n    grow x4      : ${ns.growthAnalyze(server, 4).toFixed(2)} threads\\n    hack 10%     : ${(0.1 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%     : ${(0.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%     : ${(0.5 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance   : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\\nexport async function analyzeServerLoop(ns, server, msg = \\\"\\\") {\\n    while (true) {\\n        await ns.sleep(1000);\\n        ns.clearLog();\\n        ns.tail();\\n        const ram = [ns.getServerMaxRam(server), ns.getServerUsedRam(server)];\\n        const money = ns.getServerMoneyAvailable(server);\\n        const maxMoney = ns.getServerMaxMoney(server);\\n        const minSec = ns.getServerMinSecurityLevel(server);\\n        const sec = ns.getServerSecurityLevel(server);\\n        if (msg)\\n            ns.print(msg);\\n        ns.print(`    Hack Profit  : ${ns.nFormat(ns.getScriptIncome()[0], \\\"$0.000a\\\")} / sec.\\n    Hack XP      : ${ns.nFormat(ns.getScriptExpGain(), \\\"0.000a\\\")} / sec.`);\\n        ns.print(`\\n\\n${server}:\\n    RAM          : ${ram[1]} / ${ram[0]} (${(ram[1] / ram[0]) * 100}%)\\n    $            : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${((money / maxMoney) * 100).toFixed(2)}%)\\n    security     : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth       : ${ns.getServerGrowth(server)}\\n    hack time    : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time    : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time  : ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2      : ${ns.growthAnalyze(server, 2).toFixed(2)} threads\\n    grow x3      : ${ns.growthAnalyze(server, 3).toFixed(2)} threads\\n    grow x4      : ${ns.growthAnalyze(server, 4).toFixed(2)} threads\\n    hack 10%     : ${(0.1 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%     : ${(0.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%     : ${(0.5 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance   : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n    }\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\n\",\"filename\":\"analyzeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"analyzeServer.js\",\"url\":\"blob:file:///467939c1-6fa0-4411-b2ec-616c422fe1d3\",\"moduleSequenceNumber\":193921}],\"dependents\":[],\"ramUsage\":5.55,\"server\":\"home\",\"moduleSequenceNumber\":194128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nimport { bkdr } from \\\"bkdr\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will monitor for servers that need a backdoor installed.\\n      It will also nuke any server that needs it.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    const programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    let allServers = tree.home.filter((s) => s.hostname !== \\\"home\\\" && !ns.getPurchasedServers().includes(s.hostname));\\n    while (true) {\\n        await ns.sleep(1);\\n        ns.clearLog();\\n        // find nukable servers.\\n        for (const server of allServers.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts)) {\\n            // nuke them.\\n            ns.print(`nuking ${server.hostname}`);\\n            nuke(ns, server.hostname);\\n        }\\n        // clear the log.\\n        ns.clearLog();\\n        const serversBackdoored = allServers.filter((s) => s.backdoorInstalled);\\n        ns.print(`\\n      ==========================================================\\n      ${serversBackdoored.length} of ${allServers.length} servers\\n      have been backdoored.\\n      ==========================================================\\n      `);\\n        if (serversBackdoored.length === allServers.length) {\\n            ns.clearLog();\\n            ns.print(`\\n        ALL SERVERS HAVE BEEN BACKDOORED\\n        `);\\n            return;\\n        }\\n        let backdoors = allServers.filter((s) => s.hasAdminRights &&\\n            !s.backdoorInstalled &&\\n            s.requiredHackingSkill < ns.getHackingLevel());\\n        // show the log if we have servers to backdoor\\n        if (backdoors.length === 0) {\\n            ns.print(\\\"No servers require a backdoor at this time.\\\");\\n            continue;\\n        }\\n        if (ns\\n            .getOwnedSourceFiles()\\n            .map((sf) => sf.n)\\n            .includes(4) ||\\n            ns.getPlayer().bitNodeN === 4) {\\n            await bn4(ns, backdoors);\\n        }\\n        else\\n            await noBn4(ns, backdoors);\\n    }\\n}\\nasync function noBn4(ns, backdoors) {\\n    ns.tail();\\n    ns.print(`Backdoor the following servers:`);\\n    ns.print(`===============================`);\\n    // find backdoorable servers.\\n    for (const server of backdoors) {\\n        // list them.\\n        ns.print(server.hostname);\\n        await bkdr(ns, server.hostname);\\n    }\\n    ns.print(`===============================`);\\n}\\nasync function bn4(ns, backdoors) {\\n    const tree = new ServerTree(ns);\\n    for (const host of backdoors) {\\n        const path = tree.home.find(host.hostname);\\n        // go to the target\\n        for (const host of path) {\\n            // ns.connect(host);\\n        }\\n        // await ns.installBackdoor();\\n        // return home\\n        for (const host of path.reverse()) {\\n            // ns.connect(host);\\n        }\\n    }\\n}\\n\",\"filename\":\"backdoor.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///88e801dd-30a6-4420-85a5-120018b31194\",\"moduleSequenceNumber\":194124},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///8722e2df-8a25-413f-9d6a-7e046c06c539\",\"moduleSequenceNumber\":194126},{\"filename\":\"bkdr.js\",\"url\":\"blob:file:///009598fd-57ca-4ba9-b1c4-2c9aed3fe9ac\",\"moduleSequenceNumber\":194134},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///02f0c7c4-504c-4b0f-ae64-a4b2ca158b46\",\"moduleSequenceNumber\":194120},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///de59ea93-5837-4ad1-a240-a6e02bc3eee8\",\"moduleSequenceNumber\":194124},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///06f87b8d-e289-4100-a06e-841ff1fa046f\",\"moduleSequenceNumber\":194120},{\"filename\":\"/utils/nuke.js\",\"url\":\"blob:file:///10a5c0fa-34a4-4b9b-86eb-393d50cc40bc\",\"moduleSequenceNumber\":194118},{\"filename\":\"backdoor.js\",\"url\":\"blob:file:///5e12fbcd-1205-4c28-b5d2-f305a2df7cf2\",\"moduleSequenceNumber\":194170}],\"dependents\":[],\"ramUsage\":37.1,\"server\":\"home\",\"moduleSequenceNumber\":194170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerTree } from \\\"utils/ServerTree\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    await bkdr(ns, target);\\n}\\nexport async function bkdr(ns, target) {\\n    let tree = new ServerTree(ns);\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\") + \\\"backdoor;\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"bkdr.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///4274e9b9-66ae-4980-88be-870fe6538d47\",\"moduleSequenceNumber\":201666},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///a5dfd133-5a48-4de1-926e-2ab4e4750fbb\",\"moduleSequenceNumber\":201668},{\"filename\":\"bkdr.js\",\"url\":\"blob:file:///a0465842-7cf3-4d50-ae41-a6b27b686375\",\"moduleSequenceNumber\":202178}],\"dependents\":[],\"ramUsage\":28.9,\"server\":\"home\",\"moduleSequenceNumber\":194134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack sorted by the amount of money\\n// we can make off them.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerTree(ns);\\n    return tree.home\\n        .filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() &&\\n        s.hasAdminRights &&\\n        s.hostname !== \\\"home\\\" &&\\n        !ns.getPurchasedServers().includes(s.hostname) &&\\n        s.moneyMax > 0\\n    // &&\\n    //   s.moneyAvailable > 0 // Exclude dead servers.\\n    )\\n        .sort((a, b) => {\\n        const formulas = ns.fileExists(\\\"Formulas.exe\\\");\\n        if (formulas) {\\n            a.hackDifficulty = a.minDifficulty;\\n            b.hackDifficulty = b.minDifficulty;\\n            const player = ns.getPlayer();\\n            const aValue = (a.moneyMax * ns.formulas.hacking.hackChance(a, player)) /\\n                ns.formulas.hacking.hackTime(a, player);\\n            const bValue = (b.moneyMax * ns.formulas.hacking.hackChance(b, player)) /\\n                ns.formulas.hacking.hackTime(b, player);\\n            return bValue - aValue;\\n        }\\n        else {\\n            const aValue = (a.moneyMax * ns.hackAnalyzeChance(a.hostname)) /\\n                ns.getHackTime(a.hostname);\\n            const bValue = (b.moneyMax * ns.hackAnalyzeChance(b.hostname)) /\\n                ns.getHackTime(b.hostname);\\n            return bValue - aValue;\\n        }\\n    });\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\n\",\"filename\":\"cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.1,\"server\":\"home\",\"moduleSequenceNumber\":194138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will run continuously and expand your server for you. It will\\n      only work with Source File 4.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMaxRam(\\\"home\\\") < 1e9) {\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeRamCost()) {\\n            ns.upgradeHomeRam();\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeCoresCost()) {\\n            ns.upgradeHomeCores();\\n        }\\n    }\\n}\\n\",\"filename\":\"expandServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":145.85,\"server\":\"home\",\"moduleSequenceNumber\":194140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":194144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":194146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const allowancePercentage = 0.01;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    // buy our first node if needed.\\n    if (ns.hacknet.numNodes() === 0)\\n        ns.hacknet.purchaseNode();\\n    while (true) {\\n        ns.disableLog(\\\"ALL\\\");\\n        ns.clearLog();\\n        for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n            let gain = [0, 0, 0];\\n            let currentCash = ns.getServerMoneyAvailable(\\\"home\\\");\\n            currentCash *= allowancePercentage;\\n            if (ns.hacknet.getPurchaseNodeCost() <= currentCash) {\\n                ns.hacknet.purchaseNode();\\n                continue;\\n            }\\n            else {\\n                ns.print(`Cannot afford a new node with ${ns.nFormat(currentCash, \\\"$0.00a\\\")}`);\\n            }\\n            const node = ns.hacknet.getNodeStats(i);\\n            if (node.level < 200) {\\n                gain[0] =\\n                    ((node.level + 1) *\\n                        1.6 *\\n                        Math.pow(1.035, node.ram - 1) *\\n                        ((node.cores + 5) / 6)) /\\n                        ns.hacknet.getLevelUpgradeCost(i, 1);\\n            }\\n            else {\\n                gain[0] = 0;\\n            }\\n            if (node.ram < 64) {\\n                gain[1] =\\n                    (node.level *\\n                        1.6 *\\n                        Math.pow(1.035, node.ram * 2 - 1) *\\n                        ((node.cores + 5) / 6)) /\\n                        ns.hacknet.getRamUpgradeCost(i, 1);\\n            }\\n            else {\\n                gain[1] = 0;\\n            }\\n            if (node.cores < 16) {\\n                gain[2] =\\n                    (node.level *\\n                        1.6 *\\n                        Math.pow(1.035, node.ram - 1) *\\n                        ((node.cores + 6) / 6)) /\\n                        ns.hacknet.getCoreUpgradeCost(i, 1);\\n            }\\n            else {\\n                gain[2] = 0;\\n            }\\n            // ns.print(`Level Upgrade: ${gain[0]}`);\\n            // ns.print(`Ram Upgrade: ${gain[1]}`);\\n            // ns.print(`Core Upgrade: ${gain[2]}`);\\n            let topgain = 0;\\n            for (let g of gain) {\\n                if (g > topgain) {\\n                    topgain = g;\\n                }\\n            }\\n            if (topgain === 0) {\\n                ns.print(`All Gains maxed on Node ${i}`);\\n                continue;\\n            }\\n            if (topgain === gain[0] &&\\n                ns.hacknet.getLevelUpgradeCost(i, 1) < currentCash) {\\n                ns.print(`Upgrading Level on Node ${i}`);\\n                ns.hacknet.upgradeLevel(i, 1);\\n            }\\n            if (topgain === gain[1] &&\\n                ns.hacknet.getRamUpgradeCost(i, 1) < currentCash) {\\n                ns.print(`Upgrading Ram on Node ${i}`);\\n                ns.hacknet.upgradeRam(i, 1);\\n            }\\n            if (topgain === gain[2] &&\\n                ns.hacknet.getCoreUpgradeCost(i, 1) < currentCash) {\\n                ns.print(`Upgrading Cores on Node ${i}`);\\n                ns.hacknet.upgradeCore(i, 1);\\n            }\\n            else {\\n                ns.print(`Cannot afford to upgrade Node ${i} with ${ns.nFormat(currentCash, \\\"$0.00a\\\")}`);\\n            }\\n        }\\n        await ns.sleep(1);\\n    }\\n}\\n\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///de332f6b-75d8-4240-8322-a24195b7e0a9\",\"moduleSequenceNumber\":962}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":194148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This monitors for programs that need created and creates the program if\\n      you have Source File 4. If not it prompts the user to create the program.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    const data = new ProgramData(ns);\\n    while (true) {\\n        await ns.sleep(30 * 1000);\\n        ns.clearLog();\\n        let neededPrograms = [];\\n        for (const program of data.programs) {\\n            if (!program.exists)\\n                neededPrograms.push(program.filename);\\n            else\\n                continue;\\n            if (program.hackingLevel <= ns.getHackingLevel()) {\\n                // this program needs created.\\n                if (!ns.scriptRunning(\\\"/actions/programming.js\\\", ns.getHostname()))\\n                    ns.run(\\\"/actions/programming.js\\\", 1, program.filename);\\n            }\\n        }\\n        if (neededPrograms.length === 0)\\n            return;\\n        else {\\n            ns.print(`Need these programs:\\n        ${neededPrograms.join(\\\"\\\\n\\\")}`);\\n        }\\n    }\\n}\\n\",\"filename\":\"programs.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///f3a7d12f-acb8-4109-b74f-d59867f483a8\",\"moduleSequenceNumber\":194120},{\"filename\":\"programs.js\",\"url\":\"blob:file:///4900f4ab-cde3-4eef-9a74-84a4eb52a65f\",\"moduleSequenceNumber\":194652}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":194652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const budgetPercent = 1;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(`\\n      This will purchase the largest possible servers.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\n        await ns.sleep(1000);\\n        ns.clearLog();\\n        ns.tail();\\n        const ram = await calculateRam(ns);\\n        const price = ns.getPurchasedServerCost(ram);\\n        const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\n        if (moneyAvailable > price) {\\n            const serverName = `pserver-${Date.now()}`;\\n            ns.print(`Buying server ${serverName} for ${ns.nFormat(price, \\\"$0.000a\\\")}`);\\n            ns.purchaseServer(`pserver-${Date.now()}`, ram);\\n        }\\n        else {\\n            ns.print(`You need ${ns.nFormat(price, \\\"$0.000a\\\")} to purchase a server with ${ns.nFormat(ram * 1e9, \\\"0.000b\\\")} of RAM`);\\n        }\\n    }\\n    ns.clearLog();\\n    ns.print(\\\"All servers have been purchased! Working on upgrades.\\\");\\n    while (getMinRam(ns) < ns.getPurchasedServerMaxRam()) {\\n        await ns.sleep(1000);\\n        ns.clearLog();\\n        ns.tail();\\n        const ram = await calculateRam(ns);\\n        const price = ns.getPurchasedServerCost(ram);\\n        const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\n        const serverName = ns\\n            .getPurchasedServers()\\n            .sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b))[0];\\n        if (moneyAvailable > price) {\\n            // find the server with the least amount of ram.\\n            ns.print(`Upgrading server ${serverName} from ${ns.nFormat(ns.getServerMaxRam(serverName) * 1e9, \\\"0.000b\\\")} to ${ns.nFormat(ram * 1e9, \\\"0.000b\\\")} of RAM for ${ns.nFormat(price, \\\"$0.000a\\\")}`);\\n            ns.enableLog(\\\"deleteServer\\\");\\n            ns.enableLog(\\\"purchaseServer\\\");\\n            ns.killall(serverName);\\n            ns.deleteServer(serverName);\\n            ns.purchaseServer(serverName, ram);\\n        }\\n        else {\\n            ns.print(`You need ${ns.nFormat(price, \\\"$0.000a\\\")} to upgrade ${serverName} from ${ns.nFormat(ns.getServerMaxRam(serverName) * 1e9, \\\"0.000b\\\")} to ${ns.nFormat(ram * 1e9, \\\"0.000b\\\")} of RAM`);\\n        }\\n    }\\n    ns.clearLog();\\n    ns.print(\\\"All servers have been Upgraded!\\\");\\n}\\nasync function calculateRam(ns) {\\n    // get budget\\n    const budget = ns.getServerMoneyAvailable(\\\"home\\\") * budgetPercent;\\n    for (let ram = ns.getPurchasedServerMaxRam(); ram >= getMinRam(ns); ram /= 2)\\n        if (ns.getPurchasedServerCost(ram) <= budget)\\n            return ram;\\n    return getMinRam(ns) * 2;\\n}\\nexport function getMinRam(ns) {\\n    if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n        return ns.getServerMaxRam(\\\"home\\\");\\n    const serverName = ns\\n        .getPurchasedServers()\\n        .sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b))[0];\\n    return ns.getServerMaxRam(serverName) || ns.getServerMaxRam(\\\"home\\\");\\n}\\n\",\"filename\":\"purchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"purchase.js\",\"url\":\"blob:file:///ed761706-1d65-4db7-8227-a5cc8c5db5f7\",\"moduleSequenceNumber\":147476}],\"dependents\":[],\"ramUsage\":9.35,\"server\":\"home\",\"moduleSequenceNumber\":194156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMinRam } from \\\"purchase\\\";\\nimport { kill } from \\\"utils/scriptKilling\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This is a script that will detect which phase you are in and restart your hacking scripts.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // kill all scripts to start.\\n    kill(ns, (ps) => ps.filename !== ns.getScriptName());\\n    const homeRAM = ns.getServerMaxRam(\\\"home\\\") * 1e9;\\n    const minRAM = getMinRam(ns) * 1e9;\\n    const totalRAM = getTotalRam(ns) * 1e9;\\n    const purchasedServerMaxRAM = ns.getPurchasedServerMaxRam() * 1e9;\\n    ns.tprint(`\\n    Home RAM: ${ns.nFormat(homeRAM, \\\"0.0b\\\")}\\n    Min RAM: ${ns.nFormat(minRAM, \\\"0.0b\\\")}\\n    Total RAM: ${ns.nFormat(totalRAM, \\\"0.0b\\\")}\\n    Purchased Server MAX RAM: ${ns.nFormat(purchasedServerMaxRAM, \\\"0.0b\\\")}\\n    `);\\n    // just run phase1 and if you are ready for phase2/3 it should automatically\\n    // elevate.\\n    ns.spawn(\\\"/phase1/restart.js\\\");\\n}\\nfunction getTotalRam(ns) {\\n    let total = ns.getServerMaxRam(\\\"home\\\");\\n    if (ns.getPurchasedServers().length === 0)\\n        return total;\\n    for (const ram of ns.getPurchasedServers().map((s) => ns.getServerMaxRam(s)))\\n        total += ram;\\n    return total;\\n}\\n\",\"filename\":\"restart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///24870c28-d28f-490c-a983-3bb0996baf9b\",\"moduleSequenceNumber\":91773},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///fff42ece-446b-442a-bd47-db0a84f789f7\",\"moduleSequenceNumber\":91772},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///acb1bc3d-5a21-46ee-8c9e-dd88d22c7835\",\"moduleSequenceNumber\":91866},{\"filename\":\"restart.js\",\"url\":\"blob:file:///11b58bff-76b3-4a21-b08f-b64ac6ca111f\",\"moduleSequenceNumber\":121910}],\"dependents\":[],\"ramUsage\":9,\"server\":\"home\",\"moduleSequenceNumber\":194158,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script analyzes hackable server wealth/health.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    await ns.sleep(1000);\\n    ns.clearLog();\\n    ns.tail();\\n    const tree = new ServerTree(ns);\\n    for (const server of tree.home\\n        .filter((s) => s.hasAdminRights &&\\n        s.requiredHackingSkill <= ns.getHackingLevel() &&\\n        s.hostname !== \\\"home\\\" &&\\n        !ns.getPurchasedServers().includes(s.hostname) &&\\n        s.moneyMax > 0)\\n        .sort((a, b) => {\\n        const maxMoneyA = ns.getServerMaxMoney(a.hostname);\\n        const maxMoneyB = ns.getServerMaxMoney(b.hostname);\\n        // const availableRam =\\n        //   (ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) * 1e9;\\n        let hackChanceA = 0;\\n        let hackChanceB = 0;\\n        let hackTimeA = 1;\\n        let hackTimeB = 1;\\n        if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n            a.hackDifficulty = a.minDifficulty;\\n            b.hackDifficulty = b.minDifficulty;\\n            hackChanceA = ns.formulas.hacking.hackChance(a, ns.getPlayer());\\n            hackChanceB = ns.formulas.hacking.hackChance(b, ns.getPlayer());\\n            hackTimeA = ns.formulas.hacking.hackTime(a, ns.getPlayer());\\n            hackTimeB = ns.formulas.hacking.hackTime(b, ns.getPlayer());\\n        }\\n        else {\\n            hackChanceA = ns.hackAnalyzeChance(a.hostname);\\n            hackChanceB = ns.hackAnalyzeChance(b.hostname);\\n        }\\n        const valueA = (maxMoneyA * hackChanceA) / hackTimeA;\\n        const valueB = (maxMoneyB * hackChanceB) / hackTimeB;\\n        return valueB - valueA;\\n    })) {\\n        analyzeServer(ns, server.hostname);\\n    }\\n}\\nfunction analyzeServer(ns, server, msg = \\\"\\\") {\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    // const availableRam =\\n    //   (ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) * 1e9;\\n    let hackChance = 0;\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n        const testServer = ns.getServer(server);\\n        testServer.hackDifficulty = testServer.minDifficulty;\\n        hackChance = ns.formulas.hacking.hackChance(testServer, ns.getPlayer());\\n    }\\n    else {\\n        hackChance = ns.hackAnalyzeChance(server);\\n    }\\n    if (msg)\\n        ns.print(msg);\\n    const value = maxMoney * hackChance;\\n    ns.print(`${server}:\\n      ${ns.nFormat(value, \\\"$0.000a\\\")}`);\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\n\",\"filename\":\"serverWealth.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///f28fd9a3-278c-4cb0-8c8c-3823d1470661\",\"moduleSequenceNumber\":530763},{\"filename\":\"serverWealth.js\",\"url\":\"blob:file:///996e7bc3-b9ba-4d9d-a966-ff3d13340a96\",\"moduleSequenceNumber\":532224}],\"dependents\":[],\"ramUsage\":7.8,\"server\":\"home\",\"moduleSequenceNumber\":194160,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":194168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { kill } from \\\"utils/scriptKilling\\\";\\nexport async function main(ns) {\\n    kill(ns, (ps) => ps.filename === \\\"share.js\\\");\\n}\\n\",\"filename\":\"killShare.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///336a0e08-d06a-4029-92ec-d43d3a634ce0\",\"moduleSequenceNumber\":194124},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///59eec802-316b-4003-9490-fd666774882e\",\"moduleSequenceNumber\":194122},{\"filename\":\"killShare.js\",\"url\":\"blob:file:///083b0994-fa35-45a3-9a1e-ef75c2815966\",\"moduleSequenceNumber\":194656}],\"dependents\":[],\"ramUsage\":4.5,\"server\":\"home\",\"moduleSequenceNumber\":194656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"cnct\\\";\\nexport const spawnerName = \\\"/batching/spawner.js\\\";\\nexport async function runSpawner(ns, cmd, target, threads, bufferTime, index = 0) {\\n    let host = getRunnableServers(ns)[0];\\n    await ns.scp(spawnerName, \\\"home\\\", host.hostname);\\n    if (!ns.exec(spawnerName, host.hostname, 1, cmd, target, threads, bufferTime, index))\\n        ns.tprint(`ERROR! unable to run spawner on host: ${host.hostname}`);\\n}\\n\",\"filename\":\"/batching/runSpawner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":194042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const files = ns.ls(\\\"home\\\", \\\".js\\\");\\n    ns.tprint(`Removing the following files:`);\\n    for (const file of files) {\\n        ns.tprint(`   ${file}`);\\n        ns.rm(file);\\n    }\\n}\\n\",\"filename\":\"clean.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"clean.js\",\"url\":\"blob:file:///5f60decc-df23-453d-a0da-6c3ba2325243\",\"moduleSequenceNumber\":185103}],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":194136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nexport async function main(ns) {\\n    const grep = ns.args.join(\\\" \\\");\\n    for (const proc of ps(ns).filter((p) => p.ps.filename.includes(grep) ||\\n        p.ps.args.includes(grep) ||\\n        p.server.hostname.includes(grep))) {\\n        const { ps, server } = proc;\\n        const memory = ps.threads * ns.getScriptRam(ps.filename, server.hostname);\\n        ns.tprint(`${ps.filename}:\\r\\n      ${ps.args} @ ${server.hostname}\\r\\n      Memory: ${ns.nFormat(memory * 1e9, \\\"0.0b\\\")}`);\\n    }\\n}\\n// Returns a list of { ps, server }'s. Containing every running process.'\\nexport function ps(ns) {\\n    let processes = [];\\n    const tree = new ServerTree(ns);\\n    for (const server of tree.home.list()) {\\n        for (const ps of ns.ps(server.hostname)) {\\n            processes.push({\\n                ps,\\n                server,\\n            });\\n        }\\n    }\\n    return processes;\\n}\\nexport function autocomplete(data) {\\n    return [...data.servers, ...data.scripts];\\n}\\n\",\"filename\":\"ps.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///bd0982d8-1ba7-4c35-b29b-08cbb5d81c6a\",\"moduleSequenceNumber\":1004883},{\"filename\":\"ps.js\",\"url\":\"blob:file:///db891048-a0e8-4961-a812-b44b706c810f\",\"moduleSequenceNumber\":1004926}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":194154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      List the top 5 most expensive augmentations from your factions.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} \\r\\n      `);\\n        return;\\n    }\\n    const { factions } = ns.getPlayer();\\n    let augs = [];\\n    for (const faction of factions) {\\n        for (const aug of ns.getAugmentationsFromFaction(faction)) {\\n            augs.push({ aug, faction, price: ns.getAugmentationPrice(aug) });\\n        }\\n    }\\n    augs = augs.sort((a, b) => b.price - a.price).slice(undefined, 5);\\n    ns.tprint(\\\"Most Expensive Augmentations:\\\");\\n    ns.tprint(\\\"=============================\\\");\\n    for (const aug of augs) {\\n        ns.tprint(`(${aug.aug})\\r\\n      ${aug.faction}\\r\\n      ${ns.nFormat(aug.price, \\\"$0.0a\\\")}`);\\n    }\\n}\\n\",\"filename\":\"augList.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"augList.js\",\"url\":\"blob:file:///9ec6b228-62d8-489e-8e43-1c528a6cac9d\",\"moduleSequenceNumber\":1005406}],\"dependents\":[],\"ramUsage\":122.2,\"server\":\"home\",\"moduleSequenceNumber\":194130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":40}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const factions = [\\n    {\\n        faction: \\\"Daedalus\\\",\\n        rep: 2310000,\\n    },\\n    {\\n        faction: \\\"ECorp\\\",\\n        rep: 1500000,\\n    },\\n    {\\n        faction: \\\"Speakers for the Dead\\\",\\n        rep: 362500,\\n    },\\n    {\\n        faction: \\\"The Covenant\\\",\\n        rep: 1250000,\\n    },\\n    {\\n        faction: \\\"Blade Industries\\\",\\n        rep: 562500,\\n    },\\n    {\\n        faction: \\\"The Syndicate\\\",\\n        rep: 875000,\\n    },\\n    {\\n        faction: \\\"KuaiGong International\\\",\\n        rep: 562500,\\n    },\\n    {\\n        faction: \\\"Bachman & Associates\\\",\\n        rep: 375000,\\n    },\\n    {\\n        faction: \\\"Clarke Incorporated\\\",\\n        rep: 437500,\\n    },\\n    {\\n        faction: \\\"Slum Snakes\\\",\\n        rep: 22500,\\n    },\\n    {\\n        faction: \\\"Silhouette\\\",\\n        rep: 62500,\\n    },\\n];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    while (true) {\\n        await ns.sleep(1);\\n        ns.clearLog();\\n        ns.tail();\\n        const filtered = factions.filter((g) => ns.getFactionRep(g.faction) < g.rep);\\n        if (filtered.length === 0)\\n            return;\\n        for (const goal of filtered) {\\n            let current = ns.getFactionRep(goal.faction);\\n            let needed = goal.rep - current;\\n            ns.print(`\\r\\n        ${goal.faction} needs ${ns.nFormat(needed, \\\"0.0a\\\")} rep\\r\\n        `);\\n        }\\n    }\\n}\\n\",\"filename\":\"factionWatch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"factionWatch.js\",\"url\":\"blob:file:///726ef688-abe2-4915-92c5-c930fa298540\",\"moduleSequenceNumber\":406499}],\"dependents\":[],\"ramUsage\":17.6,\"server\":\"home\",\"moduleSequenceNumber\":194142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":16}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserver-1649423511196\",\"pserver-1649423521647\",\"pserver-1649423539703\",\"pserver-1649423557555\",\"pserver-1649423567018\",\"pserver-1649423575607\",\"pserver-1649423585168\",\"pserver-1649423594590\",\"pserver-1649423612551\",\"pserver-1649423640164\",\"pserver-1649423576685\",\"pserver-1649423603286\",\"pserver-1649423621146\",\"pserver-1649423493616\",\"pserver-1649423568058\",\"pserver-1649423595918\",\"pserver-1649423540769\",\"pserver-1649423549175\",\"pserver-1649423530054\",\"pserver-1649423558564\",\"pserver-1649423501315\",\"pserver-1649423494695\",\"pserver-1649423586206\",\"pserver-1649423630712\",\"pserver-1649423613561\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.196,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-591789-FulcrumTechnologies.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[198,25,50,170,96,9,29,10,171,152,59,125,103,134,14,147,117,46,178,141,94,65,183,171,164,68,186,192,104,75,102],\"reward\":{\"name\":\"Fulcrum Technologies\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"53.5.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"ecorp\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"ecorp\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"ecorp\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"ecorp\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":33.37599999999999,\"minDifficulty\":33,\"moneyAvailable\":0,\"moneyMax\":1594818921875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1374,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-291810-NWO.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[179,98,90,75,68,180,20,151,1,160,36,117,57,110,21,198,14,98,63,71,200,41,46]],\"reward\":{\"name\":\"NWO\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"59.2.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"megacorp\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"megacorp\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"megacorp\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"megacorp\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":39.833999999999996,\"minDifficulty\":33,\"moneyAvailable\":0,\"moneyMax\":1230989147575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1102,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-323728.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()(()\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-730569.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[3,3,45,4,27,47,34,41,12],[37,26,1,49,18,45,45,40,29],[16,33,43,2,3,44,33,21,29],[2,46,33,27,26,44,22,7,7],[24,41,27,29,18,38,21,47,19],[44,15,48,36,18,42,31,38,5],[19,35,34,10,4,22,1,43,25],[12,42,14,11,4,26,18,31,27]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-994700.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[10,37,1,89,63,140,165,46,14,86,110,191,74,7,58],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"24.2.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"b-and-a\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"b-and-a\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"b-and-a\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"b-and-a\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":82,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":0,\"moneyMax\":383127146200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1003,\"serverGrowth\":69}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"87.8.1.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"blade\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d214ae01-e800-442f-af29-2fc1e1b230b6\",\"moduleSequenceNumber\":134556}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"blade\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"blade\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///aef9879b-cedd-4d9e-8304-56b847902f51\",\"moduleSequenceNumber\":966}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"blade\",\"moduleSequenceNumber\":966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":90,\"hackDifficulty\":37.32,\"minDifficulty\":30,\"moneyAvailable\":117149.76478945132,\"moneyMax\":382276286050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1058,\"serverGrowth\":83}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"35.6.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nwo\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nwo\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nwo\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"nwo\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":0,\"moneyMax\":637465170925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":982,\"serverGrowth\":80}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-551407.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,4,0,0,4,7,0,8],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"40.0.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"clarkinc\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"clarkinc\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"clarkinc\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"clarkinc\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\".\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":61,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":0,\"moneyMax\":491366710450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1217,\"serverGrowth\":49}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-528940-TheBlackHand.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[75,52,38,58,103,110,63,90,49,129,128,51,22,17,80,167,197,83,178,129,140],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"5.0.5.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6ada35c0-60a1-4e5a-a7a7-07e745b206aa\",\"moduleSequenceNumber\":135296}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnitek\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///e6c634ce-481c-4e2f-aff0-408a829b6a01\",\"moduleSequenceNumber\":134551}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnitek\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///90e3f7de-b396-470e-865a-8034683069cb\",\"moduleSequenceNumber\":137841}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omnitek\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///0bbcc4b9-9034-4918-b61c-1ee20ef300c0\",\"moduleSequenceNumber\":967}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"omnitek\",\"moduleSequenceNumber\":967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":98,\"hackDifficulty\":46.571999999999996,\"minDifficulty\":33,\"moneyAvailable\":3153391.1819911567,\"moneyMax\":358228981875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":930,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-704994.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[72,62,184,4,110,140,47,95,100,62,111,105,98,46,167,73,89,82,144,164,198,29,176,36,66,128,184]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"19.7.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"4sigma\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"4sigma\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"4sigma\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"4sigma\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":61,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":0,\"moneyMax\":591668970350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1226,\"serverGrowth\":76}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-18974-TheSyndicate.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[103,126,12,146,38,84,21,93,165,28,131,139,104,65,92,113,173,88,174,129,156,81,76,71,43,113,85,15,57,56,17,99,73,63,119,104,103,14,43,152,132,135,46],\"reward\":{\"name\":\"The Syndicate\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"74.7.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":96,\"hackDifficulty\":39.017999999999994,\"minDifficulty\":32,\"moneyAvailable\":0,\"moneyMax\":639365416575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1227,\"serverGrowth\":96}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"77.6.5.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///cc79ac5f-1b5e-4d87-9b17-0109bd407695\",\"moduleSequenceNumber\":134932}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///e4639021-96ef-4c26-aac7-0f814a5d08e4\",\"moduleSequenceNumber\":134550}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///1672abf0-0206-4a3b-b578-0b2a32a758c6\",\"moduleSequenceNumber\":137477}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///fc10d509-042e-43c3-a5cb-187fe83be200\",\"moduleSequenceNumber\":968}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":968,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":86,\"hackDifficulty\":29.22,\"minDifficulty\":29,\"moneyAvailable\":0,\"moneyMax\":40914976350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1027,\"serverGrowth\":88}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-247491.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":416780441,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"19.9.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1367,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"15.2.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"stormtech\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"stormtech\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"stormtech\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"stormtech\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1184598920,\"moneyMax\":29614973000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1020,\"serverGrowth\":80}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"18.0.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"defcomm\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"defcomm\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"defcomm\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"defcomm\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":841490650,\"moneyMax\":21037266250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":872,\"serverGrowth\":59}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-553687-ClarkeIncorporated.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((())a)a((()()(a\",\"reward\":{\"name\":\"Clarke Incorporated\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-848807.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,8],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"66.9.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"infocomm\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"infocomm\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"infocomm\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"infocomm\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"univ-energy\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":885085368,\"moneyMax\":22127134200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":882,\"serverGrowth\":42}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-849823-ECorp.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[19,47,32,38,27],[33,9,39,27,9],[32,21,43,35,12],[38,41,26,25,38],[34,10,30,39,34],[40,42,33,22,40],[1,44,29,33,17],[25,45,45,47,50]],\"reward\":{\"name\":\"ECorp\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-347327-BladeIndustries.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-4,-10,-2,-3,5,-6,2,-8,2,3,3,-8,-8,-8,-10,-4,8,1,10,-7,-9,6,-1,5,-10,-4,-3,10,-2,7,-7,-2,9,1,-1,8,-8,-5,7,3],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-963297-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[22,29,100,64,86,28,187,46,60,120],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-166587-BladeIndustries.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,4],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"1.0.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"helios\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7aed0f99-c162-4c20-a49e-28cbacf2dfc8\",\"moduleSequenceNumber\":134557}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"helios\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"helios\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///2c6d2703-e309-4c56-ab68-2d360c73560a\",\"moduleSequenceNumber\":969}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"helios\",\"moduleSequenceNumber\":969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":652135347,\"moneyMax\":16303383675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":833,\"serverGrowth\":77}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"60.7.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"vitalife\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2e71a89b-a2c0-49d5-bfb8-d9dafc1cd7c8\",\"moduleSequenceNumber\":134567}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"vitalife\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"vitalife\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///5df03ae5-7edd-43df-8b5b-6b39958b5bb1\",\"moduleSequenceNumber\":970}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"vitalife\",\"moduleSequenceNumber\":970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":794380321,\"moneyMax\":19859508025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":865,\"serverGrowth\":69}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-138767.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[155,180,58,39,65,167,90,123,47,100,131,82,44,171,28,118,197,153,198,156,98,66,164,21,35,142,93,162,60,36,132,57,119,102,79,167,34,72,8,114,61,153,105,132,92,149,48],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"64.5.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"icarus\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"icarus\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"icarus\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"icarus\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":934741968,\"moneyMax\":23368549200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":92}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-973405-ClarkeIncorporated.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"9008\",20],\"reward\":{\"name\":\"Clarke Incorporated\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"46.1.1.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///236f2daf-86f4-4ed3-96d7-97881076fdb3\",\"moduleSequenceNumber\":137113}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"univ-energy\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///f334e7c1-0772-4b85-a871-8b040b528237\",\"moduleSequenceNumber\":134552}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"univ-energy\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///09e4a75c-0dc3-4168-97f0-03cbc887855c\",\"moduleSequenceNumber\":135660}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"univ-energy\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///02b4e0f9-1b24-459a-8fef-6408f8710c21\",\"moduleSequenceNumber\":971}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"univ-energy\",\"moduleSequenceNumber\":971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":82,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":0,\"moneyMax\":27544222800,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":819,\"serverGrowth\":81}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"59.4.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"titan-labs\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///4496cc34-3058-4aea-9a3b-deb87317c5b3\",\"moduleSequenceNumber\":134566}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"titan-labs\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"titan-labs\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///3d322e8f-adb3-4c38-9f93-c9f18e54fcb4\",\"moduleSequenceNumber\":972}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"titan-labs\",\"moduleSequenceNumber\":972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":798839970,\"moneyMax\":19970999250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":806,\"serverGrowth\":65}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"25.8.6.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"microdyne\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///b1b1b2a4-b3e1-409c-a2a4-e4a3790cc432\",\"moduleSequenceNumber\":134559}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"microdyne\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"microdyne\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///70bd1b5e-cb12-44f8-805f-733f785d3577\",\"moduleSequenceNumber\":973}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"microdyne\",\"moduleSequenceNumber\":973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":573612247,\"moneyMax\":14340306175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":75}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"57.1.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":881249220,\"moneyMax\":22031230500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":943,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-776044-ClarkeIncorporated.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")()((a))(\",\"reward\":{\"name\":\"Clarke Incorporated\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"13.8.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":55,\"hackDifficulty\":18.055999999999997,\"minDifficulty\":18,\"moneyAvailable\":819115659.5750093,\"moneyMax\":20103888100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":852,\"serverGrowth\":88}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-836358.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[8,164,163,185,86,125,66,105,126,129,83,54,38,69,61,114,138,137,82,30,120,40,199,51,101,177,191,181,184,70,177,111,106,74,85,151,86,88,140,14]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-349949-FulcrumTechnologies.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[4,172,129,130,25,78,3,33,200,18,76,48,99],\"reward\":{\"name\":\"Fulcrum Technologies\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"41.2.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aerocorp\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aerocorp\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"aerocorp\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"aerocorp\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":81,\"hackDifficulty\":47.17399999999998,\"minDifficulty\":27,\"moneyAvailable\":0,\"moneyMax\":28454118525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":903,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-234524-ECorp.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[16,40,35,172,100,181,111,181,180,89,140,189,62,16,83,127,118,92,181,52,25,193,3,12,60,14,23,198,98,33,146,173,52,190,168,171,140,103,115,109,37,50,172,44,149,61,119,141,144,66]],\"reward\":{\"name\":\"ECorp\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-361506-ECorp.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[6,6],[6,5,1],[1,4,7,2],[6,3,3,5,9],[3,4,3,3,7,1],[2,4,8,8,6,1,5],[3,4,7,2,9,3,2,6],[1,5,2,4,6,3,5,9,8],[9,9,2,2,8,5,2,6,5,2]],\"reward\":{\"name\":\"ECorp\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-393218.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[4,9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"98.6.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnia\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///6616db07-f769-413c-b5df-77287dca2610\",\"moduleSequenceNumber\":134563}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnia\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omnia\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///970c6d49-2b53-4255-bb30-8bd40a047b50\",\"moduleSequenceNumber\":974}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"omnia\",\"moduleSequenceNumber\":974,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":945838440,\"moneyMax\":23645961000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":933,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-933952.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,1,0,0],[0,0,0,1,0,0],[1,0,0,0,0,0],[1,0,0,0,0,0],[0,0,0,1,0,0],[0,0,0,0,0,0],[1,0,0,0,1,0],[0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-520132.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[87,114,192,109,155,93,149,57,178,164,175,187,98,98,34,71,49,34,74,149],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"80.9.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-def\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-def\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zb-def\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"zb-def\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":56,\"hackDifficulty\":24.252,\"minDifficulty\":19,\"moneyAvailable\":880316920.6837765,\"moneyMax\":25254344450,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":804,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"38.1.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":73,\"hackDifficulty\":24.064,\"minDifficulty\":24,\"moneyAvailable\":0,\"moneyMax\":20352168325,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":782,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-900557.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,0,1,0,8,9,2,6,0,2,1,0],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-712785.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,1,0,0,0,0,1,0,0,0],[0,1,0,0,0,1,0,0,1,0,0,0],[0,0,0,1,0,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,1,0,0,0,0,1,0,0,0],[1,0,1,1,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-581742.cct\",\"type\":\"Total Ways to Sum\",\"data\":78,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"54.4.8.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"solaris\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d626118a-286f-4334-9dbd-2e675aa9e22e\",\"moduleSequenceNumber\":134558}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"solaris\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"solaris\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///f76715b8-1a05-4925-8109-2fdaede04891\",\"moduleSequenceNumber\":975}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"solaris\",\"moduleSequenceNumber\":975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":70,\"hackDifficulty\":23.016,\"minDifficulty\":23,\"moneyAvailable\":113459.89736198033,\"moneyMax\":20646582325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":765,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"27.7.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"deltaone\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"deltaone\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"deltaone\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"deltaone\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":84,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":0,\"moneyMax\":40483524000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":886,\"serverGrowth\":52}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-468933.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[3,156,168,42,139,170,176,173,39,167,13,31,129,43,107,175,96,92,119,117,20,130,53,94,72,152,199,60,118,187,103,78,61,74,79,60,114,71,3,86,177,6,17,147,134,81,71],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-117433-Bachman&Associates.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a(()()(()(a\",\"reward\":{\"name\":\"Bachman & Associates\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"28.2.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"global-pharm\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///52a9f56d-a482-420c-9a9d-187613c32167\",\"moduleSequenceNumber\":134560}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"global-pharm\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"global-pharm\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///def68492-7fd1-4717-8176-e00929ca5472\",\"moduleSequenceNumber\":976}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"global-pharm\",\"moduleSequenceNumber\":976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":79,\"hackDifficulty\":51.206,\"minDifficulty\":26,\"moneyAvailable\":0,\"moneyMax\":43370678625,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":830,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-199486.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,2,5,0,6,8,3,0,1,0],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-943499.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[30,40,55,121,27,93,1,191,120,93,96,37,8,142,32,20,123,144,147,87,154,154],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-81100-CyberSec.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[11,4,29,31,30,29],[7,2,19,31,31,17],[34,15,31,15,25,3],[24,10,50,13,23,27]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"64.9.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nova-med\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nova-med\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nova-med\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"nova-med\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":65,\"hackDifficulty\":22.204000000000004,\"minDifficulty\":22,\"moneyAvailable\":0,\"moneyMax\":28036468750,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":826,\"serverGrowth\":77}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"82.5.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zeus-med\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zeus-med\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zeus-med\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"zeus-med\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":90,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":0,\"moneyMax\":36437036225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":821,\"serverGrowth\":78}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-561695-Chongqing.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"111101010101110010111010001101010011\",\"reward\":{\"name\":\"Chongqing\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"45.2.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"unitalife\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2486c596-4fa0-4cb1-8808-4b1229da0f79\",\"moduleSequenceNumber\":134562}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"unitalife\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"unitalife\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///be3e7ce5-ed0a-4227-99e2-d3cb5003e532\",\"moduleSequenceNumber\":977}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"unitalife\",\"moduleSequenceNumber\":977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":80,\"hackDifficulty\":34.366,\"minDifficulty\":27,\"moneyAvailable\":109600.83778762269,\"moneyMax\":26552379125,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":805,\"serverGrowth\":74}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"26.5.6.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2d9fda3f-ff66-4faa-8cfc-cdb4fec9b079\",\"moduleSequenceNumber\":134554}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///2b2bbaf8-6108-4a1c-ab15-639965558423\",\"moduleSequenceNumber\":978}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":63,\"hackDifficulty\":21.05,\"minDifficulty\":21,\"moneyAvailable\":0,\"moneyMax\":19338836650,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":708,\"serverGrowth\":55}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-255806.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"977559520121\",-62],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"56.7.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///59878f08-3159-4bf4-81d8-175dae2dc4c0\",\"moduleSequenceNumber\":92013}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rho-construction\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///ae81d66e-b097-403d-afe6-433ce5b216ea\",\"moduleSequenceNumber\":92313}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"rho-construction\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///1895230e-4b91-4590-a5a5-674f53a78cf5\",\"moduleSequenceNumber\":92454}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rho-construction\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///baa10912-0b5a-41e9-a3f8-b5655df2615a\",\"moduleSequenceNumber\":132018}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"rho-construction\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///c128c3d2-896e-4d0e-a402-d12315999949\",\"moduleSequenceNumber\":979}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"rho-construction\",\"moduleSequenceNumber\":979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":40,\"hackDifficulty\":13.028,\"minDifficulty\":13,\"moneyAvailable\":14309993983.508512,\"moneyMax\":16362503275,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":501,\"serverGrowth\":55}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"10.6.7.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///74130ab0-7c85-4846-8050-6e164c3ab323\",\"moduleSequenceNumber\":134555}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///f739c450-f5d9-493f-a782-54e5039938e6\",\"moduleSequenceNumber\":980}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":980,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":57,\"hackDifficulty\":19.056,\"minDifficulty\":19,\"moneyAvailable\":29025592,\"moneyMax\":16053089200,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":582,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-196944-NewTokyo.cct\",\"type\":\"Total Ways to Sum\",\"data\":23,\"reward\":{\"name\":\"New Tokyo\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"40.7.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aevum-police\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///999d9630-dec3-4dc5-a8c0-46d2433ea2e6\",\"moduleSequenceNumber\":134568}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aevum-police\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"aevum-police\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///13bb73f5-6558-4495-ba31-1b0aa8edbc7e\",\"moduleSequenceNumber\":981}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"aevum-police\",\"moduleSequenceNumber\":981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":333249738,\"moneyMax\":8331243450,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":407,\"serverGrowth\":44}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"72.3.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4047f89d-bac7-424b-8893-108461e3df46\",\"moduleSequenceNumber\":92018}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9d0a030e-f5bd-4497-a80a-1e6bd1af59ef\",\"moduleSequenceNumber\":92457}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///6743417b-cdb1-4737-9447-0d6b48c7f3ac\",\"moduleSequenceNumber\":92894}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///ef7a3bd8-048f-487a-bc57-2c4ef6b932f8\",\"moduleSequenceNumber\":130575}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///6a493735-86ff-46f2-b506-541bca316fa1\",\"moduleSequenceNumber\":982}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":216415090,\"moneyMax\":5410377250,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":423,\"serverGrowth\":42}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-765747-FulcrumTechnologies.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":903415524,\"reward\":{\"name\":\"Fulcrum Technologies\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-906524-KuaiGongInternational.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[2,7],[5,5,8],[1,8,4,4],[8,1,2,7,5],[4,7,6,1,6,2],[2,6,1,4,9,2,2]],\"reward\":{\"name\":\"KuaiGong International\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"78.8.7.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-institute\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///4f72133e-af74-43d2-9ea3-7ab17e0606d2\",\"moduleSequenceNumber\":134561}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-institute\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zb-institute\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///ce4851ad-220d-4f8f-9de0-2dac0fc61841\",\"moduleSequenceNumber\":983}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"zb-institute\",\"moduleSequenceNumber\":983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":67,\"hackDifficulty\":22.124000000000002,\"minDifficulty\":22,\"moneyAvailable\":0,\"moneyMax\":24607011575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":730,\"serverGrowth\":84}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"75.0.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e7d42e3-28e2-44ee-8165-20466e00df1b\",\"moduleSequenceNumber\":92026}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"summit-uni\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2e4dc8c6-8faf-43c8-a0b2-db6e8395de5a\",\"moduleSequenceNumber\":92465}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"summit-uni\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"summit-uni\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///4b23d861-f43a-4baa-8d0d-2143d0d30cae\",\"moduleSequenceNumber\":984}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"summit-uni\",\"moduleSequenceNumber\":984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":211526644,\"moneyMax\":5288166100,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":457,\"serverGrowth\":49}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-473610-NWO.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[4,-1,-7,2,-8,-2,0,-5,-4,-8,5,-6,3,7,-3,7,-6,4,2,4,7,-1,8,8,9,5],\"reward\":{\"name\":\"NWO\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"68.5.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"syscore\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"syscore\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"syscore\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"syscore\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":545841309,\"moneyMax\":13646032725,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":645,\"serverGrowth\":62}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"1.5.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e60a23e2-fdbb-42db-b9c2-042fa2d847da\",\"moduleSequenceNumber\":92020}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"catalyst\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///f9a530fb-de01-4149-a891-2cc62be83821\",\"moduleSequenceNumber\":92459}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"catalyst\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///99fa9ee5-1866-4790-a273-b2807a55da4c\",\"moduleSequenceNumber\":129131}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"catalyst\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///20577ff7-8117-4aa6-9add-de20fbbf0035\",\"moduleSequenceNumber\":985}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"catalyst\",\"moduleSequenceNumber\":985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":353159246,\"moneyMax\":8828981150,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":424,\"serverGrowth\":39}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-588556.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[7,6],[5,5,9],[9,8,9,4],[9,7,4,5,8],[9,5,5,8,9,1],[1,9,3,2,8,4,1],[2,2,5,8,1,3,5,5]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"34.2.8.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b44a200d-c22c-498b-ae27-a3095dfd4195\",\"moduleSequenceNumber\":92015}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"the-hub\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ee069376-7a9a-44e8-aafc-cd37e6f0c40c\",\"moduleSequenceNumber\":92453}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"the-hub\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///ca9ad910-1a7b-4ebc-ad59-c573d187f62b\",\"moduleSequenceNumber\":131657}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"the-hub\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///7add589b-b3e9-4d2c-82e0-75f404a3feb5\",\"moduleSequenceNumber\":986}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"the-hub\",\"moduleSequenceNumber\":986,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":169969017,\"moneyMax\":4249225425,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":292,\"serverGrowth\":45}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"99.3.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"computek\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"computek\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"computek\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"computek\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":226653916,\"moneyMax\":5666347900,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":382,\"serverGrowth\":45}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"87.9.2.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a6b0cf26-4c4f-4c2c-a9a0-9378b88b8daa\",\"moduleSequenceNumber\":92011}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"netlink\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///581a0a1b-ea95-4e50-91ee-4e5888445e19\",\"moduleSequenceNumber\":92474}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"netlink\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///f6e63703-2bad-4441-93f0-8937b144b0fe\",\"moduleSequenceNumber\":92897}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"netlink\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"netlink\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///307b1552-fd1d-45ce-b859-93df8c74bf42\",\"moduleSequenceNumber\":987}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"netlink\",\"moduleSequenceNumber\":987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":383,\"serverGrowth\":55}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"58.6.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":81888761,\"moneyMax\":2047219025,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":255,\"serverGrowth\":54}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"79.9.1.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///78efffff-1a61-4d34-a4be-0ec30738edd4\",\"moduleSequenceNumber\":92034}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///dd959f22-d44a-4ce9-8928-6038f27b12cd\",\"moduleSequenceNumber\":92473}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"n00dles\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"n00dles\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"83.4.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///501a0f2d-f230-4dc4-9b1c-f83d8640f271\",\"moduleSequenceNumber\":92027}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///57ec9aff-8d04-422d-9264-354df91b63da\",\"moduleSequenceNumber\":92466}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///0a333dac-b0ae-4195-b9ca-5854706aada0\",\"moduleSequenceNumber\":988}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"97.9.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6f91e79d-64cf-4bac-abb7-d96a119d2333\",\"moduleSequenceNumber\":92028}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0af1af5b-90d6-4013-9eca-11b5a9b0fa56\",\"moduleSequenceNumber\":92467}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///0a96a807-2e8c-4980-929d-3264a9d649b7\",\"moduleSequenceNumber\":989}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-604860.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":551633533,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"10.0.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b4381d8b-6251-4204-8fbc-98f47d3987bf\",\"moduleSequenceNumber\":92029}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///05a97f9d-ce03-431d-bf36-447218db5ba7\",\"moduleSequenceNumber\":92468}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///16f30024-c631-4d4b-9212-4409ee1516d5\",\"moduleSequenceNumber\":93110}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"joesguns\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"joesguns\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///b05eedd0-b38d-4967-9784-d2a7ddd8a6c3\",\"moduleSequenceNumber\":990}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"joesguns\",\"moduleSequenceNumber\":990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-440057-Bachman&Associates.cct\",\"type\":\"Total Ways to Sum\",\"data\":28,\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"80.0.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///42d90c12-9047-4c01-acd4-f28343af0f5c\",\"moduleSequenceNumber\":92021}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zer0\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7dc55392-1999-45a5-846b-09566285eb3a\",\"moduleSequenceNumber\":92460}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zer0\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///15efc70e-d092-4d97-80c4-8a11e2a1a50d\",\"moduleSequenceNumber\":93250}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zer0\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///1834f1c7-14e9-4123-bf38-0ea2ed85ecf8\",\"moduleSequenceNumber\":991}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"zer0\",\"moduleSequenceNumber\":991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-785743-BladeIndustries.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[30,43,25,25,11,2,24,22,10,1]],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"26.6.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9c6978d0-13c2-435b-9977-cb66755fbcbb\",\"moduleSequenceNumber\":92032}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nectar-net\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///47e0767d-0f35-4fca-9588-a670daa3e7b0\",\"moduleSequenceNumber\":92471}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nectar-net\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nectar-net\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///85d5cb97-000b-4456-8024-817a34e71e8b\",\"moduleSequenceNumber\":992}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"nectar-net\",\"moduleSequenceNumber\":992,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-688746.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"221655348568\",10],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-13322-TheBlackHand.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())(a(\",\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"95.7.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d34c00b8-5cfe-445e-af64-7ade94376065\",\"moduleSequenceNumber\":92023}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"neo-net\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///5d4e5d43-1aca-463a-9a37-956115ad93b1\",\"moduleSequenceNumber\":92462}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"neo-net\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///dbf1d090-6a65-4a12-bdf1-6923750aa7db\",\"moduleSequenceNumber\":129493}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"neo-net\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///a957d15f-7ee8-41d6-9cce-07dcf5558e9e\",\"moduleSequenceNumber\":993}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"neo-net\",\"moduleSequenceNumber\":993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"11.7.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///80241536-a63d-44f3-a644-40f6c42cda27\",\"moduleSequenceNumber\":92014}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"silver-helix\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///735f29a6-2b61-4ec8-8625-6458e7fcbf5d\",\"moduleSequenceNumber\":92452}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"silver-helix\",\"moduleSequenceNumber\":764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///614aef11-a528-411b-9062-5ba250372a15\",\"moduleSequenceNumber\":130214}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"silver-helix\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///8f8dc84e-61c4-488a-a68a-6c5bb06662ed\",\"moduleSequenceNumber\":994}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"silver-helix\",\"moduleSequenceNumber\":994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"91.2.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5cf04c08-5b96-453c-b919-7abff08ed272\",\"moduleSequenceNumber\":92030}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///4c9f17a5-b603-40f4-bf89-ece59fa89cbf\",\"moduleSequenceNumber\":92469}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///8d1b5a1c-68aa-46fa-8611-bb679716ecb9\",\"moduleSequenceNumber\":995}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"77.1.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///37386241-4ef7-407f-b5ed-83ebc5d3620e\",\"moduleSequenceNumber\":92031}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///90539b87-ee93-4e80-a516-5e60424006a5\",\"moduleSequenceNumber\":92470}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///066b1ea9-bbd9-40c2-a271-7c45dc5808c8\",\"moduleSequenceNumber\":996}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"0.2.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///c0d48dc8-b577-40fe-8bb3-8a999c783370\",\"moduleSequenceNumber\":92017}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"phantasy\",\"moduleSequenceNumber\":775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3b912737-c5d7-46d7-af17-fe9783dc3719\",\"moduleSequenceNumber\":92456}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"phantasy\",\"moduleSequenceNumber\":776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///33c044da-13b0-4034-bcb2-c33fa9e8e570\",\"moduleSequenceNumber\":93285}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"phantasy\",\"moduleSequenceNumber\":777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///6d6fe52a-1d85-4de3-bd1f-44ec3ec11e02\",\"moduleSequenceNumber\":997}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"phantasy\",\"moduleSequenceNumber\":997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\",\"computek\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"46.4.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///04a5aba7-58a5-4c1f-a660-e3fc2293b80e\",\"moduleSequenceNumber\":92016}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"max-hardware\",\"moduleSequenceNumber\":779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///bceb7e4a-d79c-481f-9d68-c92452ef3a8e\",\"moduleSequenceNumber\":92455}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"max-hardware\",\"moduleSequenceNumber\":780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f1130c0b-bd0f-412f-9321-bae67e3ee876\",\"moduleSequenceNumber\":94414}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"max-hardware\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///8ca841e9-31d0-4957-af67-d435c3603a3c\",\"moduleSequenceNumber\":998}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"max-hardware\",\"moduleSequenceNumber\":998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"n00dles\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-229422-TheDarkArmy.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,4],\"reward\":{\"name\":\"The Dark Army\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"73.3.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///82f403ad-2fe8-48bf-93ee-88d9ad76c593\",\"moduleSequenceNumber\":92022}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omega-net\",\"moduleSequenceNumber\":783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a3a161eb-6b4b-4caf-b196-4dac9c8f462a\",\"moduleSequenceNumber\":92461}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omega-net\",\"moduleSequenceNumber\":784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5e8c459a-ee73-4493-a5c2-17e691f39b8e\",\"moduleSequenceNumber\":129492}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omega-net\",\"moduleSequenceNumber\":785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///dc684470-f6fe-463a-abcb-09465981a3fa\",\"moduleSequenceNumber\":999}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"omega-net\",\"moduleSequenceNumber\":999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nectar-net\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":29,\"hackDifficulty\":29,\"minDifficulty\":10,\"moneyAvailable\":69255243,\"moneyMax\":1731381075,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":182,\"serverGrowth\":36}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"6.2.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":49967788,\"moneyMax\":1249194700,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":239,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-540047.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"183107191147\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-963823-BladeIndustries.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[127,177,155,11,114,97,140,71,53,87,146,155,100,173,52,143,50,175,156,54,107,67,199,111,54,95,44,110,143,49,127,149,138,21,25,6,37],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-393046.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[190,52,120,38,170,183,109,76,127,98,78,5,112,135,119,154,128,110],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-881352.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[113,194,125,116,34,100,130,156,33,50,87,80,49,115,57,86,157,41,61,65,49,92,92,17,163,28,128,50,43,150,100,15,62,16,16],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"28.2.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3afd6e5e-aa86-4644-a0a7-9468d1404533\",\"moduleSequenceNumber\":92024}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d72a2b7d-d083-46fd-8f2c-e93b4384c0b8\",\"moduleSequenceNumber\":92463}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f64d311a-f373-4d3b-a2cc-f39ed2a9312f\",\"moduleSequenceNumber\":94051}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"iron-gym\",\"moduleSequenceNumber\":793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///12b4f0b0-6fed-4ed6-9b34-d3b8903c743b\",\"moduleSequenceNumber\":1000}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"94.5.2.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///cea12df4-ccd3-4a50-8c2e-f1763ef101f6\",\"moduleSequenceNumber\":91872}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///76882af4-c839-4068-90db-685988f064d6\",\"moduleSequenceNumber\":92012}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3b53a63a-5202-470c-a397-59c531c906a0\",\"moduleSequenceNumber\":92475}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a8c83b70-55ee-4a2a-81a6-92cda6bd2d22\",\"moduleSequenceNumber\":93277}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///b3d10d42-a05f-4d1d-834c-3c8a81733bb1\",\"moduleSequenceNumber\":1001}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":507,\"serverGrowth\":39}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"72.9.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d8cabfe9-c26e-4e14-8c3f-4a093a2bfc93\",\"moduleSequenceNumber\":134564}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///e5c5665c-4a6d-4faf-8d07-efd7c167ceae\",\"moduleSequenceNumber\":1002}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":60,\"hackDifficulty\":36.008,\"minDifficulty\":20,\"moneyAvailable\":2428430.529937409,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":967,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"7.2.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":788,\"serverGrowth\":47}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-756632-Bachman&Associates.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"19311976\",38],\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"87.3.7.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///30639070-34a8-43fc-afea-f66745b05c93\",\"moduleSequenceNumber\":134553}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///c5fb77ff-5a77-4750-9443-34af721291da\",\"moduleSequenceNumber\":1003}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":549,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"0.1.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3fb3487a-5464-4601-9af7-a5943e4f5e9e\",\"moduleSequenceNumber\":92025}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///528bd9b3-b036-42d1-8965-8e75e8575068\",\"moduleSequenceNumber\":92464}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5fcfa8f7-9815-4f60-b476-1775563fa2ac\",\"moduleSequenceNumber\":133460}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///26ba35d5-8381-4bd7-b3fd-9e97bb90f4e0\",\"moduleSequenceNumber\":1004}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"computek\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":356,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-16238.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[1,0,8,7,-8,6,0,-7,9,-2,1,9,-8,-10,2],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"4.3.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///308ebc9b-de54-4f28-8df4-dc2b7bfec4d5\",\"moduleSequenceNumber\":92019}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///54843f59-d8a7-43cb-98cc-49772af83fe0\",\"moduleSequenceNumber\":92458}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///23196fc7-0b57-4381-a279-535ffa3aaa97\",\"moduleSequenceNumber\":130576}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///caecfe5d-4f4b-4330-88f8-74650f9d1143\",\"moduleSequenceNumber\":1005}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":219,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-881461-MegaCorp.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[73,[2,3,4,5,6,7,10,11,15,17]],\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"6.6.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\".\",\"moduleSequenceNumber\":820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///4e950bb6-e7b3-4125-81a2-d3ff70b86c63\",\"moduleSequenceNumber\":134565}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\".\",\"moduleSequenceNumber\":821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\".\",\"moduleSequenceNumber\":822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///626b0522-7bd7-4336-8928-c9dfebe2799d\",\"moduleSequenceNumber\":1006}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\".\",\"moduleSequenceNumber\":1006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":544,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-626735.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2115088128\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"4.7.0.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d7c7e9cd-4b32-4257-86ab-b17dafd20097\",\"moduleSequenceNumber\":92033}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"CSEC\",\"moduleSequenceNumber\":824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ae9fb021-ede4-42e3-8f37-706bae22c80b\",\"moduleSequenceNumber\":92472}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"CSEC\",\"moduleSequenceNumber\":825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"CSEC\",\"moduleSequenceNumber\":826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///bd2b3c65-c391-4ba4-8da6-e9a30e07dc5d\",\"moduleSequenceNumber\":1007}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"CSEC\",\"moduleSequenceNumber\":1007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":57,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-91317-FulcrumTechnologies.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":591605656,\"reward\":{\"name\":\"Fulcrum Technologies\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"1.8.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"The-Cave\",\"moduleSequenceNumber\":828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"The-Cave\",\"moduleSequenceNumber\":829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"The-Cave\",\"moduleSequenceNumber\":830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"The-Cave\",\"moduleSequenceNumber\":831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"55.6.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"58.8.9.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"darkweb\",\"moduleSequenceNumber\":832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"darkweb\",\"moduleSequenceNumber\":833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"darkweb\",\"moduleSequenceNumber\":834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"darkweb\",\"moduleSequenceNumber\":835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423511196\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423511196\",\"httpPortOpen\":false,\"ip\":\"3.1.2.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":47325.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"ecorp\",135,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":844222013.5861007,\"offlineMoneyMade\":0,\"offlineRunningTime\":146870.942,\"onlineExpGained\":1346877871.3944995,\"onlineMoneyMade\":0,\"onlineRunningTime\":235476.8100045827,\"pid\":48,\"ramUsage\":5.8,\"server\":\"pserver-1649423511196\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4fed185e-760e-4641-9e28-9cd915125448\",\"moduleSequenceNumber\":145124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"blade\",147,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":844614783.8362334,\"offlineMoneyMade\":0,\"offlineRunningTime\":146871.13199999998,\"onlineExpGained\":1303328694.580074,\"onlineMoneyMade\":0,\"onlineRunningTime\":227686.81000415626,\"pid\":50,\"ramUsage\":5.8,\"server\":\"pserver-1649423511196\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4fed185e-760e-4641-9e28-9cd915125448\",\"moduleSequenceNumber\":145124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"global-pharm\",1550,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7935949918.119677,\"offlineMoneyMade\":0,\"offlineRunningTime\":146871.217,\"onlineExpGained\":12146434734.97317,\"onlineMoneyMade\":0,\"onlineRunningTime\":225717.81000404755,\"pid\":51,\"ramUsage\":5.8,\"server\":\"pserver-1649423511196\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4fed185e-760e-4641-9e28-9cd915125448\",\"moduleSequenceNumber\":145124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"zeus-med\",156,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":896666412.0883934,\"offlineMoneyMade\":0,\"offlineRunningTime\":146871.353,\"onlineExpGained\":1353692607.1636817,\"onlineMoneyMade\":0,\"onlineRunningTime\":222793.41000387873,\"pid\":52,\"ramUsage\":5.8,\"server\":\"pserver-1649423511196\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4fed185e-760e-4641-9e28-9cd915125448\",\"moduleSequenceNumber\":145124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649814889433],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":383.40999999998763,\"pid\":525004,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649814891556],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":381.40999999998775,\"pid\":525049,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815086793],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":186.20999999999802,\"pid\":527147,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815090988],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":182.00999999999826,\"pid\":527162,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815110356],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":162.60999999999936,\"pid\":527383,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8ddc85a4-19cd-4525-9527-04e099c1fe38\",\"moduleSequenceNumber\":1074}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815114221],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.80999999999958,\"pid\":527441,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815114255],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.80999999999958,\"pid\":527445,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815123317],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":149.6100000000001,\"pid\":527553,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815130207],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":142.6100000000005,\"pid\":527608,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8ddc85a4-19cd-4525-9527-04e099c1fe38\",\"moduleSequenceNumber\":1074}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815156311],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":116.6100000000011,\"pid\":527910,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815157028],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":115.81000000000108,\"pid\":527916,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815187164],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.81000000000067,\"pid\":528294,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815188957],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000064,\"pid\":528299,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8ddc85a4-19cd-4525-9527-04e099c1fe38\",\"moduleSequenceNumber\":1074}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815204492],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.41000000000041,\"pid\":528491,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815209152],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.81000000000036,\"pid\":528523,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815209439],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.41000000000035,\"pid\":528524,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815210916],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.01000000000033,\"pid\":528536,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815212179],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.810000000000315,\"pid\":528552,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":1830,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8ddc85a4-19cd-4525-9527-04e099c1fe38\",\"moduleSequenceNumber\":1074}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815221200],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.81000000000019,\"pid\":528657,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":1346,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8ddc85a4-19cd-4525-9527-04e099c1fe38\",\"moduleSequenceNumber\":1074}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815228854],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.010000000000076,\"pid\":528743,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":2005,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8ddc85a4-19cd-4525-9527-04e099c1fe38\",\"moduleSequenceNumber\":1074}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815230627],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":528765,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":1649,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8ddc85a4-19cd-4525-9527-04e099c1fe38\",\"moduleSequenceNumber\":1074}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815231523],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":528803,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815231608],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.21000000000004,\"pid\":528811,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815235205],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.809999999999995,\"pid\":528825,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815235231],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":528826,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815235239],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":528827,\"ramUsage\":1.8,\"server\":\"pserver-1649423511196\",\"threads\":140,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5af70bd0-dc5b-4bd9-b769-8b7f74d02840\",\"moduleSequenceNumber\":1073}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815235296],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":528830,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":1688,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8ddc85a4-19cd-4525-9527-04e099c1fe38\",\"moduleSequenceNumber\":1074}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815240537],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999993,\"pid\":528907,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815240560],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999993,\"pid\":528909,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815258079],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.809999999999983,\"pid\":529081,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":133,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815258147],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.809999999999983,\"pid\":529085,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":1824,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8ddc85a4-19cd-4525-9527-04e099c1fe38\",\"moduleSequenceNumber\":1074}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815259141],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.809999999999985,\"pid\":529124,\"ramUsage\":1.8,\"server\":\"pserver-1649423511196\",\"threads\":40,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5af70bd0-dc5b-4bd9-b769-8b7f74d02840\",\"moduleSequenceNumber\":1073}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815259208],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.809999999999985,\"pid\":529125,\"ramUsage\":1.8,\"server\":\"pserver-1649423511196\",\"threads\":30,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5af70bd0-dc5b-4bd9-b769-8b7f74d02840\",\"moduleSequenceNumber\":1073}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815259230],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.609999999999985,\"pid\":529126,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815259810],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999987,\"pid\":529127,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":1985,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8ddc85a4-19cd-4525-9527-04e099c1fe38\",\"moduleSequenceNumber\":1074}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815262854],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999996,\"pid\":529137,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815262952],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999996,\"pid\":529138,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815263032],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999996,\"pid\":529139,\"ramUsage\":1.8,\"server\":\"pserver-1649423511196\",\"threads\":140,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5af70bd0-dc5b-4bd9-b769-8b7f74d02840\",\"moduleSequenceNumber\":1073}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815263435],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"pid\":529142,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":1688,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8ddc85a4-19cd-4525-9527-04e099c1fe38\",\"moduleSequenceNumber\":1074}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815267100],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000002,\"pid\":529186,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815267328],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000002,\"pid\":529195,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815267623],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529213,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815267854],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.0100000000000025,\"pid\":529227,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815271615],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":529239,\"ramUsage\":1.8,\"server\":\"pserver-1649423511196\",\"threads\":34,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5af70bd0-dc5b-4bd9-b769-8b7f74d02840\",\"moduleSequenceNumber\":1073}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815271622],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":529240,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815272005],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":529241,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815272228],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":529243,\"ramUsage\":1.8,\"server\":\"pserver-1649423511196\",\"threads\":140,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5af70bd0-dc5b-4bd9-b769-8b7f74d02840\",\"moduleSequenceNumber\":1073}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815272434],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":529245,\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815272700],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":529248,\"ramUsage\":1.8,\"server\":\"pserver-1649423511196\",\"threads\":69,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5af70bd0-dc5b-4bd9-b769-8b7f74d02840\",\"moduleSequenceNumber\":1073}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815272722],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":529250,\"ramUsage\":1.8,\"server\":\"pserver-1649423511196\",\"threads\":1717,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5af70bd0-dc5b-4bd9-b769-8b7f74d02840\",\"moduleSequenceNumber\":1073}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8ddc85a4-19cd-4525-9527-04e099c1fe38\",\"moduleSequenceNumber\":1074}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"moduleSequenceNumber\":1074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5ca5b3f2-64f9-4881-99cb-263dc7279b21\",\"moduleSequenceNumber\":1072}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423511196\",\"moduleSequenceNumber\":1072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///fb23f0a9-dc63-4eca-a25e-ea252c7d4b36\",\"moduleSequenceNumber\":1012}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423511196\",\"moduleSequenceNumber\":1012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5af70bd0-dc5b-4bd9-b769-8b7f74d02840\",\"moduleSequenceNumber\":1073}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423511196\",\"moduleSequenceNumber\":1073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///397575bb-10a0-41c7-80ae-6e585e181a5d\",\"moduleSequenceNumber\":1009}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423511196\",\"moduleSequenceNumber\":1009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423521647\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423521647\",\"httpPortOpen\":false,\"ip\":\"28.5.2.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":47082.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"ecorp\",1687,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10564546879.019659,\"offlineMoneyMade\":0,\"offlineRunningTime\":146872.561,\"onlineExpGained\":16829675813.804697,\"onlineMoneyMade\":0,\"onlineRunningTime\":235109.41000456252,\"pid\":115,\"ramUsage\":5.8,\"server\":\"pserver-1649423521647\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"omnitek\",668,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2876682667.7390666,\"offlineMoneyMade\":0,\"offlineRunningTime\":146872.678,\"onlineExpGained\":4430778521.082967,\"onlineMoneyMade\":44659076969716.03,\"onlineRunningTime\":226400.61000408544,\"pid\":117,\"ramUsage\":5.8,\"server\":\"pserver-1649423521647\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///73e624cf-6b3a-455d-95e3-b04b97d3458d\",\"moduleSequenceNumber\":154249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"nova-med\",1425,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6150200452.631638,\"offlineMoneyMade\":0,\"offlineRunningTime\":146872.769,\"onlineExpGained\":9336869331.848349,\"onlineMoneyMade\":0,\"onlineRunningTime\":223888.01000394273,\"pid\":118,\"ramUsage\":5.8,\"server\":\"pserver-1649423521647\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///73e624cf-6b3a-455d-95e3-b04b97d3458d\",\"moduleSequenceNumber\":154249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"nova-med\",37,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":123914390.6558516,\"offlineMoneyMade\":0,\"offlineRunningTime\":146872.929,\"onlineExpGained\":186750001.37624347,\"onlineMoneyMade\":6977323622965.815,\"onlineRunningTime\":223839.0100039399,\"pid\":119,\"ramUsage\":5.8,\"server\":\"pserver-1649423521647\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///73e624cf-6b3a-455d-95e3-b04b97d3458d\",\"moduleSequenceNumber\":154249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"unitalife\",146,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":755369343.3481463,\"offlineMoneyMade\":0,\"offlineRunningTime\":146873.05,\"onlineExpGained\":1122872300.0774655,\"onlineMoneyMade\":0,\"onlineRunningTime\":219280.41000367375,\"pid\":120,\"ramUsage\":5.8,\"server\":\"pserver-1649423521647\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///73e624cf-6b3a-455d-95e3-b04b97d3458d\",\"moduleSequenceNumber\":154249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"unitalife\",64,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":236292745.18650198,\"offlineMoneyMade\":0,\"offlineRunningTime\":146873.133,\"onlineExpGained\":352468148.83302826,\"onlineMoneyMade\":5520490890790.952,\"onlineRunningTime\":219093.81000366286,\"pid\":121,\"ramUsage\":5.8,\"server\":\"pserver-1649423521647\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///73e624cf-6b3a-455d-95e3-b04b97d3458d\",\"moduleSequenceNumber\":154249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"applied-energetics\",1711,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8168110197.609787,\"offlineMoneyMade\":0,\"offlineRunningTime\":146873.185,\"onlineExpGained\":12006742674.100548,\"onlineMoneyMade\":0,\"onlineRunningTime\":216777.21000352915,\"pid\":122,\"ramUsage\":5.8,\"server\":\"pserver-1649423521647\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///73e624cf-6b3a-455d-95e3-b04b97d3458d\",\"moduleSequenceNumber\":154249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815064941],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":208.00999999999675,\"pid\":526876,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815100073],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":172.80999999999878,\"pid\":527265,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815101634],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":171.20999999999887,\"pid\":527283,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815102616],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":170.20999999999893,\"pid\":527292,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815140634],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":132.21000000000106,\"pid\":527727,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815175040],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.81000000000084,\"pid\":528124,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815175127],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.81000000000084,\"pid\":528125,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815175198],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.81000000000084,\"pid\":528127,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815190196],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":82.81000000000063,\"pid\":528306,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815190797],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":82.21000000000062,\"pid\":528311,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dafe1fb-ca55-4bf8-9bb2-48d2198d4dee\",\"moduleSequenceNumber\":1140}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815195562],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.41000000000055,\"pid\":528394,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":1355,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dafe1fb-ca55-4bf8-9bb2-48d2198d4dee\",\"moduleSequenceNumber\":1140}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815203599],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.41000000000042,\"pid\":528453,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":1649,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dafe1fb-ca55-4bf8-9bb2-48d2198d4dee\",\"moduleSequenceNumber\":1140}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815203692],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.21000000000042,\"pid\":528455,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815204088],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.81000000000041,\"pid\":528462,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815217190],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.810000000000244,\"pid\":528617,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815217284],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.61000000000024,\"pid\":528622,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":1688,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dafe1fb-ca55-4bf8-9bb2-48d2198d4dee\",\"moduleSequenceNumber\":1140}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815231235],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":528780,\"ramUsage\":1.8,\"server\":\"pserver-1649423521647\",\"threads\":33,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///57e8f79e-ac90-4c62-9a49-2759b6cdc15d\",\"moduleSequenceNumber\":1139}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815231289],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":528784,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815241912],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.009999999999927,\"pid\":528920,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815242039],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.809999999999928,\"pid\":528921,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815242799],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.20999999999993,\"pid\":528922,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815243001],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.00999999999993,\"pid\":528923,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dafe1fb-ca55-4bf8-9bb2-48d2198d4dee\",\"moduleSequenceNumber\":1140}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815246671],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999948,\"pid\":528949,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815246781],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.209999999999948,\"pid\":528950,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815246871],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.00999999999995,\"pid\":528951,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":2005,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dafe1fb-ca55-4bf8-9bb2-48d2198d4dee\",\"moduleSequenceNumber\":1140}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815249071],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.809999999999956,\"pid\":528977,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":133,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815249084],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.809999999999956,\"pid\":528978,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815249118],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.809999999999956,\"pid\":528981,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":1824,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dafe1fb-ca55-4bf8-9bb2-48d2198d4dee\",\"moduleSequenceNumber\":1140}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815249657],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999958,\"pid\":529015,\"ramUsage\":1.8,\"server\":\"pserver-1649423521647\",\"threads\":128,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///57e8f79e-ac90-4c62-9a49-2759b6cdc15d\",\"moduleSequenceNumber\":1139}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815249663],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999958,\"pid\":529016,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815249683],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999958,\"pid\":529019,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815252793],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.20999999999997,\"pid\":529030,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":1933,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dafe1fb-ca55-4bf8-9bb2-48d2198d4dee\",\"moduleSequenceNumber\":1140}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815252865],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.00999999999997,\"pid\":529032,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815254474],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.40999999999997,\"pid\":529044,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815254609],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.40999999999997,\"pid\":529047,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dafe1fb-ca55-4bf8-9bb2-48d2198d4dee\",\"moduleSequenceNumber\":1140}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815258468],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529099,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815258477],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529100,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815258494],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529101,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":155,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815258507],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529102,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815258534],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529104,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815258563],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529107,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815258654],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529114,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815265884],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.010000000000003,\"pid\":529168,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dafe1fb-ca55-4bf8-9bb2-48d2198d4dee\",\"moduleSequenceNumber\":1140}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815266629],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.210000000000003,\"pid\":529180,\"ramUsage\":1.8,\"server\":\"pserver-1649423521647\",\"threads\":62,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///57e8f79e-ac90-4c62-9a49-2759b6cdc15d\",\"moduleSequenceNumber\":1139}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815267142],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000002,\"pid\":529188,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815267478],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":529202,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815267658],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529216,\"ramUsage\":1.8,\"server\":\"pserver-1649423521647\",\"threads\":71,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///57e8f79e-ac90-4c62-9a49-2759b6cdc15d\",\"moduleSequenceNumber\":1139}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815267711],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529220,\"ramUsage\":1.8,\"server\":\"pserver-1649423521647\",\"threads\":28,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///57e8f79e-ac90-4c62-9a49-2759b6cdc15d\",\"moduleSequenceNumber\":1139}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815267826],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529226,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":1355,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dafe1fb-ca55-4bf8-9bb2-48d2198d4dee\",\"moduleSequenceNumber\":1140}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1649815272271],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":529244,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":32,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815272650],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":529247,\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dafe1fb-ca55-4bf8-9bb2-48d2198d4dee\",\"moduleSequenceNumber\":1140}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///72eff77f-1644-415d-9e67-e32416d6830b\",\"moduleSequenceNumber\":1142}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"moduleSequenceNumber\":1142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dafe1fb-ca55-4bf8-9bb2-48d2198d4dee\",\"moduleSequenceNumber\":1140}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423521647\",\"moduleSequenceNumber\":1140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///81953633-6cdf-44b9-8dd2-ff1ec2daecf1\",\"moduleSequenceNumber\":1082}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423521647\",\"moduleSequenceNumber\":1082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///57e8f79e-ac90-4c62-9a49-2759b6cdc15d\",\"moduleSequenceNumber\":1139}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423521647\",\"moduleSequenceNumber\":1139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///fd3b0401-e3de-4c7a-9a98-1d7b48eef6de\",\"moduleSequenceNumber\":1076}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423521647\",\"moduleSequenceNumber\":1076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423539703\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423539703\",\"httpPortOpen\":false,\"ip\":\"57.7.5.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":47158.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"b-and-a\",77,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":272308980.3234766,\"offlineMoneyMade\":0,\"offlineRunningTime\":146874.419,\"onlineExpGained\":424969820.8250818,\"onlineMoneyMade\":73987706654439.77,\"onlineRunningTime\":228413.01000419632,\"pid\":184,\"ramUsage\":5.8,\"server\":\"pserver-1649423539703\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"blade\",1830,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10517177310.700228,\"offlineMoneyMade\":0,\"offlineRunningTime\":146874.462,\"onlineExpGained\":16215992331.022547,\"onlineMoneyMade\":0,\"onlineRunningTime\":227475.41000414468,\"pid\":185,\"ramUsage\":5.8,\"server\":\"pserver-1649423539703\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///f82b8252-a109-46f7-bba0-c370c231530b\",\"moduleSequenceNumber\":201024}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"zb-institute\",1346,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5965764265.717671,\"offlineMoneyMade\":0,\"offlineRunningTime\":146874.508,\"onlineExpGained\":9037455250.371407,\"onlineMoneyMade\":0,\"onlineRunningTime\":223372.21000391257,\"pid\":186,\"ramUsage\":5.8,\"server\":\"pserver-1649423539703\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///f82b8252-a109-46f7-bba0-c370c231530b\",\"moduleSequenceNumber\":201024}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815063347],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":209.60999999999672,\"pid\":526857,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815132373],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.6100000000006,\"pid\":527657,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815140112],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":132.81000000000103,\"pid\":527720,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":1830,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///60fbb06c-3e91-4bbb-95ec-fc09c3b91d38\",\"moduleSequenceNumber\":1193}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815150358],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.61000000000118,\"pid\":527860,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815159304],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":113.61000000000105,\"pid\":527961,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815159383],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":113.61000000000105,\"pid\":527966,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":2485,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///60fbb06c-3e91-4bbb-95ec-fc09c3b91d38\",\"moduleSequenceNumber\":1193}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815177355],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.61000000000081,\"pid\":528170,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815177365],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.61000000000081,\"pid\":528171,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815177381],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.61000000000081,\"pid\":528172,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815177396],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.61000000000081,\"pid\":528173,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815202747],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.21000000000043,\"pid\":528439,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815202829],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.01000000000043,\"pid\":528440,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///60fbb06c-3e91-4bbb-95ec-fc09c3b91d38\",\"moduleSequenceNumber\":1193}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815204205],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.81000000000041,\"pid\":528467,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815204224],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.61000000000041,\"pid\":528469,\"ramUsage\":1.8,\"server\":\"pserver-1649423539703\",\"threads\":376,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6ba50ed4-e75d-453f-93d3-888c54d5f6fd\",\"moduleSequenceNumber\":1190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815204248],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.61000000000041,\"pid\":528471,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815204258],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.61000000000041,\"pid\":528472,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815204376],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.61000000000041,\"pid\":528482,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815204466],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.41000000000041,\"pid\":528489,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815209583],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.41000000000035,\"pid\":528528,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":2088,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///60fbb06c-3e91-4bbb-95ec-fc09c3b91d38\",\"moduleSequenceNumber\":1193}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815212194],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.810000000000315,\"pid\":528553,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":1346,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///60fbb06c-3e91-4bbb-95ec-fc09c3b91d38\",\"moduleSequenceNumber\":1193}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815219153],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.810000000000215,\"pid\":528635,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815219924],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.010000000000204,\"pid\":528640,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815220763],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.21000000000019,\"pid\":528647,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815221660],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.21000000000018,\"pid\":528662,\"ramUsage\":1.8,\"server\":\"pserver-1649423539703\",\"threads\":41,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6ba50ed4-e75d-453f-93d3-888c54d5f6fd\",\"moduleSequenceNumber\":1190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815221704],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.21000000000018,\"pid\":528663,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815222333],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000017,\"pid\":528685,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":155,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815222418],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000017,\"pid\":528692,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815230711],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":528767,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815231046],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":528769,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":133,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815231062],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":528770,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815231085],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":528772,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815231110],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":528774,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815231155],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":528776,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815231211],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":528778,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815231249],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":528781,\"ramUsage\":1.8,\"server\":\"pserver-1649423539703\",\"threads\":376,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6ba50ed4-e75d-453f-93d3-888c54d5f6fd\",\"moduleSequenceNumber\":1190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815231357],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":528790,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815232782],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.21000000000003,\"pid\":528815,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":1985,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///60fbb06c-3e91-4bbb-95ec-fc09c3b91d38\",\"moduleSequenceNumber\":1193}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815239200],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.80999999999995,\"pid\":528864,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":1830,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///60fbb06c-3e91-4bbb-95ec-fc09c3b91d38\",\"moduleSequenceNumber\":1193}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815240296],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.609999999999935,\"pid\":528888,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815240333],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.609999999999935,\"pid\":528891,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815240400],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.609999999999935,\"pid\":528896,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815240469],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999993,\"pid\":528902,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":2485,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///60fbb06c-3e91-4bbb-95ec-fc09c3b91d38\",\"moduleSequenceNumber\":1193}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815263534],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.409999999999998,\"pid\":529143,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///60fbb06c-3e91-4bbb-95ec-fc09c3b91d38\",\"moduleSequenceNumber\":1193}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815263760],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.209999999999999,\"pid\":529152,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":2088,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///60fbb06c-3e91-4bbb-95ec-fc09c3b91d38\",\"moduleSequenceNumber\":1193}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815266706],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.210000000000003,\"pid\":529182,\"ramUsage\":1.8,\"server\":\"pserver-1649423539703\",\"threads\":41,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6ba50ed4-e75d-453f-93d3-888c54d5f6fd\",\"moduleSequenceNumber\":1190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815267113],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000002,\"pid\":529187,\"ramUsage\":1.8,\"server\":\"pserver-1649423539703\",\"threads\":97,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6ba50ed4-e75d-453f-93d3-888c54d5f6fd\",\"moduleSequenceNumber\":1190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815267293],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000002,\"pid\":529192,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815267615],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529212,\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34360f28-7e7d-461a-b856-9cc187424a14\",\"moduleSequenceNumber\":1192}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"moduleSequenceNumber\":1192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///60fbb06c-3e91-4bbb-95ec-fc09c3b91d38\",\"moduleSequenceNumber\":1193}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423539703\",\"moduleSequenceNumber\":1193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6ba50ed4-e75d-453f-93d3-888c54d5f6fd\",\"moduleSequenceNumber\":1190}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423539703\",\"moduleSequenceNumber\":1190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///146853f1-a1c6-4ffa-a07c-57be589a8b38\",\"moduleSequenceNumber\":1143}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423539703\",\"moduleSequenceNumber\":1143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///0e0e3418-88a0-4bf5-91fd-baf17b402c1c\",\"moduleSequenceNumber\":1146}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423539703\",\"moduleSequenceNumber\":1146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423557555\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423557555\",\"httpPortOpen\":false,\"ip\":\"30.5.3.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":49197.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"megacorp\",135,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":845185119.7706666,\"offlineMoneyMade\":0,\"offlineRunningTime\":146875.544,\"onlineExpGained\":1340015933.8083618,\"onlineMoneyMade\":0,\"onlineRunningTime\":233963.61000449944,\"pid\":234,\"ramUsage\":5.8,\"server\":\"pserver-1649423557555\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"clarkinc\",2101,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8580653100.056988,\"offlineMoneyMade\":0,\"offlineRunningTime\":146875.597,\"onlineExpGained\":13487026805.051363,\"onlineMoneyMade\":0,\"onlineRunningTime\":231840.01000438398,\"pid\":235,\"ramUsage\":5.8,\"server\":\"pserver-1649423557555\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///05b4b368-6de1-434c-a929-7ad9bce080fc\",\"moduleSequenceNumber\":161169}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"global-pharm\",62,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":232402948.96131533,\"offlineMoneyMade\":0,\"offlineRunningTime\":146875.657,\"onlineExpGained\":351335686.0918351,\"onlineMoneyMade\":6840174799179.913,\"onlineRunningTime\":225656.21000404414,\"pid\":237,\"ramUsage\":5.8,\"server\":\"pserver-1649423557555\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///05b4b368-6de1-434c-a929-7ad9bce080fc\",\"moduleSequenceNumber\":161169}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"fulcrumtech\",1649,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9098125551.661087,\"offlineMoneyMade\":0,\"offlineRunningTime\":146875.69300000003,\"onlineExpGained\":13652328493.469208,\"onlineMoneyMade\":0,\"onlineRunningTime\":221414.2100037983,\"pid\":238,\"ramUsage\":5.8,\"server\":\"pserver-1649423557555\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///05b4b368-6de1-434c-a929-7ad9bce080fc\",\"moduleSequenceNumber\":161169}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815072494],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":200.4099999999972,\"pid\":526963,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815075423],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":197.60999999999737,\"pid\":527025,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815109081],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":163.8099999999993,\"pid\":527369,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815124821],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":148.0100000000002,\"pid\":527568,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815141052],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":131.81000000000108,\"pid\":527736,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815159418],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":113.41000000000105,\"pid\":527969,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815165341],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.61000000000098,\"pid\":528016,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815166119],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":106.81000000000097,\"pid\":528021,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815168307],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.61000000000094,\"pid\":528064,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815168315],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.61000000000094,\"pid\":528065,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815168357],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.61000000000094,\"pid\":528067,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815168427],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.41000000000093,\"pid\":528073,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815168434],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.41000000000093,\"pid\":528074,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815177555],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.4100000000008,\"pid\":528187,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815182057],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.81000000000074,\"pid\":528209,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815182132],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.81000000000074,\"pid\":528211,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815182153],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.81000000000074,\"pid\":528212,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815182433],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.41000000000074,\"pid\":528216,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":2088,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///949b8757-ce4e-40f3-9803-7b73b18ab8e4\",\"moduleSequenceNumber\":1251}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815186208],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.81000000000068,\"pid\":528261,\"ramUsage\":1.8,\"server\":\"pserver-1649423557555\",\"threads\":376,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///837ffdb2-f114-4f55-8853-3456abb48820\",\"moduleSequenceNumber\":1249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815195289],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.61000000000055,\"pid\":528372,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815195368],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.61000000000055,\"pid\":528378,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815199205],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.81000000000049,\"pid\":528410,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815200229],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.61000000000047,\"pid\":528420,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815202487],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.41000000000044,\"pid\":528436,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815202583],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.41000000000044,\"pid\":528437,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815202683],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.21000000000043,\"pid\":528438,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":1550,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///949b8757-ce4e-40f3-9803-7b73b18ab8e4\",\"moduleSequenceNumber\":1251}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815204302],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.61000000000041,\"pid\":528476,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815204390],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.61000000000041,\"pid\":528483,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815204476],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.41000000000041,\"pid\":528490,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815208278],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.61000000000037,\"pid\":528518,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":1688,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///949b8757-ce4e-40f3-9803-7b73b18ab8e4\",\"moduleSequenceNumber\":1251}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815211496],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.41000000000032,\"pid\":528540,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815211755],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.21000000000032,\"pid\":528543,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815211835],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.01000000000032,\"pid\":528544,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///949b8757-ce4e-40f3-9803-7b73b18ab8e4\",\"moduleSequenceNumber\":1251}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815213581],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.410000000000295,\"pid\":528602,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":1355,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///949b8757-ce4e-40f3-9803-7b73b18ab8e4\",\"moduleSequenceNumber\":1251}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815222202],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000017,\"pid\":528674,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815222307],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000017,\"pid\":528683,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815222372],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000017,\"pid\":528688,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815222451],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000017,\"pid\":528694,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":2485,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///949b8757-ce4e-40f3-9803-7b73b18ab8e4\",\"moduleSequenceNumber\":1251}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815240091],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.80999999999994,\"pid\":528876,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815240102],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.80999999999994,\"pid\":528877,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":1824,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///949b8757-ce4e-40f3-9803-7b73b18ab8e4\",\"moduleSequenceNumber\":1251}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815245600],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.40999999999994,\"pid\":528943,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///949b8757-ce4e-40f3-9803-7b73b18ab8e4\",\"moduleSequenceNumber\":1251}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815256435],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.40999999999998,\"pid\":529059,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":155,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815256533],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.40999999999998,\"pid\":529060,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815256632],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.20999999999998,\"pid\":529061,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815256731],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.20999999999998,\"pid\":529062,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":1550,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///949b8757-ce4e-40f3-9803-7b73b18ab8e4\",\"moduleSequenceNumber\":1251}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815257081],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.80999999999998,\"pid\":529065,\"ramUsage\":1.8,\"server\":\"pserver-1649423557555\",\"threads\":668,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///837ffdb2-f114-4f55-8853-3456abb48820\",\"moduleSequenceNumber\":1249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815257095],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.80999999999998,\"pid\":529066,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":1425,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///949b8757-ce4e-40f3-9803-7b73b18ab8e4\",\"moduleSequenceNumber\":1251}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815257114],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.80999999999998,\"pid\":529067,\"ramUsage\":1.8,\"server\":\"pserver-1649423557555\",\"threads\":37,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///837ffdb2-f114-4f55-8853-3456abb48820\",\"moduleSequenceNumber\":1249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815257122],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.80999999999998,\"pid\":529068,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815257200],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.80999999999998,\"pid\":529071,\"ramUsage\":1.8,\"server\":\"pserver-1649423557555\",\"threads\":77,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///837ffdb2-f114-4f55-8853-3456abb48820\",\"moduleSequenceNumber\":1249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815257616],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.40999999999998,\"pid\":529076,\"ramUsage\":1.8,\"server\":\"pserver-1649423557555\",\"threads\":62,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///837ffdb2-f114-4f55-8853-3456abb48820\",\"moduleSequenceNumber\":1249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815257697],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.209999999999981,\"pid\":529078,\"ramUsage\":1.8,\"server\":\"pserver-1649423557555\",\"threads\":41,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///837ffdb2-f114-4f55-8853-3456abb48820\",\"moduleSequenceNumber\":1249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815257734],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.209999999999981,\"pid\":529079,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815258116],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.809999999999983,\"pid\":529084,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815258588],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529109,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815258635],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529112,\"ramUsage\":1.8,\"server\":\"pserver-1649423557555\",\"threads\":71,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///837ffdb2-f114-4f55-8853-3456abb48820\",\"moduleSequenceNumber\":1249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815258725],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999983,\"pid\":529119,\"ramUsage\":1.8,\"server\":\"pserver-1649423557555\",\"threads\":128,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///837ffdb2-f114-4f55-8853-3456abb48820\",\"moduleSequenceNumber\":1249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815266124],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000003,\"pid\":529171,\"ramUsage\":1.8,\"server\":\"pserver-1649423557555\",\"threads\":37,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///837ffdb2-f114-4f55-8853-3456abb48820\",\"moduleSequenceNumber\":1249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815266135],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000003,\"pid\":529172,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815266596],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000003,\"pid\":529178,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815266614],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.210000000000003,\"pid\":529179,\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"threads\":2101,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///949b8757-ce4e-40f3-9803-7b73b18ab8e4\",\"moduleSequenceNumber\":1251}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///21824cf6-9c71-4436-a2b5-e1b95f9af5e6\",\"moduleSequenceNumber\":1250}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"moduleSequenceNumber\":1250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///949b8757-ce4e-40f3-9803-7b73b18ab8e4\",\"moduleSequenceNumber\":1251}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423557555\",\"moduleSequenceNumber\":1251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///837ffdb2-f114-4f55-8853-3456abb48820\",\"moduleSequenceNumber\":1249}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423557555\",\"moduleSequenceNumber\":1249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///ad199d75-fd9e-4ec7-8c4a-b1da2c74f752\",\"moduleSequenceNumber\":1198}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423557555\",\"moduleSequenceNumber\":1198,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///79b6b07e-d9cf-4727-8b44-b08d31268260\",\"moduleSequenceNumber\":1196}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423557555\",\"moduleSequenceNumber\":1196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423567018\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423567018\",\"httpPortOpen\":false,\"ip\":\"33.2.7.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":47943.74999999999,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"4sigma\",41,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":124951992.51665893,\"offlineMoneyMade\":0,\"offlineRunningTime\":146876.853,\"onlineExpGained\":196443865.6038666,\"onlineMoneyMade\":111380451722241.89,\"onlineRunningTime\":232626.41000442664,\"pid\":292,\"ramUsage\":5.8,\"server\":\"pserver-1649423567018\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"deltaone\",219,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1183209939.655251,\"offlineMoneyMade\":0,\"offlineRunningTime\":146876.952,\"onlineExpGained\":1801376049.5760508,\"onlineMoneyMade\":0,\"onlineRunningTime\":224630.81000398623,\"pid\":294,\"ramUsage\":5.8,\"server\":\"pserver-1649423567018\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///495f5e20-971b-4a34-b470-48e5ae3346aa\",\"moduleSequenceNumber\":169660}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"zb-institute\",38,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":126620653.22073776,\"offlineMoneyMade\":0,\"offlineRunningTime\":146876.99599999998,\"onlineExpGained\":192565931.9038564,\"onlineMoneyMade\":3592832028985.2544,\"onlineRunningTime\":223330.4100039101,\"pid\":295,\"ramUsage\":5.8,\"server\":\"pserver-1649423567018\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///495f5e20-971b-4a34-b470-48e5ae3346aa\",\"moduleSequenceNumber\":169660}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"alpha-ent\",133,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":513028624.99839723,\"offlineMoneyMade\":0,\"offlineRunningTime\":146877.046,\"onlineExpGained\":773570720.4425206,\"onlineMoneyMade\":0,\"onlineRunningTime\":222322.01000385114,\"pid\":296,\"ramUsage\":5.8,\"server\":\"pserver-1649423567018\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///495f5e20-971b-4a34-b470-48e5ae3346aa\",\"moduleSequenceNumber\":169660}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"fulcrumtech\",132,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":727828844.9544256,\"offlineMoneyMade\":0,\"offlineRunningTime\":146877.095,\"onlineExpGained\":1092036655.2678986,\"onlineMoneyMade\":0,\"onlineRunningTime\":221443.0100038,\"pid\":297,\"ramUsage\":5.8,\"server\":\"pserver-1649423567018\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///495f5e20-971b-4a34-b470-48e5ae3346aa\",\"moduleSequenceNumber\":169660}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"fulcrumtech\",97,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":366155995.6277855,\"offlineMoneyMade\":0,\"offlineRunningTime\":146877.137,\"onlineExpGained\":551119712.1650404,\"onlineMoneyMade\":11978062163488.723,\"onlineRunningTime\":221331.81000379354,\"pid\":298,\"ramUsage\":5.8,\"server\":\"pserver-1649423567018\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///495f5e20-971b-4a34-b470-48e5ae3346aa\",\"moduleSequenceNumber\":169660}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"univ-energy\",137,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":724524184.7232388,\"offlineMoneyMade\":0,\"offlineRunningTime\":146877.181,\"onlineExpGained\":1080119613.0035818,\"onlineMoneyMade\":0,\"onlineRunningTime\":219930.41000371173,\"pid\":299,\"ramUsage\":5.8,\"server\":\"pserver-1649423567018\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///495f5e20-971b-4a34-b470-48e5ae3346aa\",\"moduleSequenceNumber\":169660}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"unitalife\",1824,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9442161508.773544,\"offlineMoneyMade\":0,\"offlineRunningTime\":146877.224,\"onlineExpGained\":14028212844.805698,\"onlineMoneyMade\":0,\"onlineRunningTime\":219151.21000366626,\"pid\":300,\"ramUsage\":5.8,\"server\":\"pserver-1649423567018\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///495f5e20-971b-4a34-b470-48e5ae3346aa\",\"moduleSequenceNumber\":169660}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"solaris\",136,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":625814290.7241213,\"offlineMoneyMade\":0,\"offlineRunningTime\":146877.271,\"onlineExpGained\":927614967.5025742,\"onlineMoneyMade\":0,\"onlineRunningTime\":218629.0100036359,\"pid\":301,\"ramUsage\":5.8,\"server\":\"pserver-1649423567018\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///495f5e20-971b-4a34-b470-48e5ae3346aa\",\"moduleSequenceNumber\":169660}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815035862],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":237.00999999999516,\"pid\":526606,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815100984],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":172.00999999999883,\"pid\":527273,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815110257],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":162.60999999999936,\"pid\":527382,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815141389],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":131.6100000000011,\"pid\":527761,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815154134],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.81000000000112,\"pid\":527889,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815154206],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.81000000000112,\"pid\":527893,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815168280],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.61000000000094,\"pid\":528062,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815172784],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":100.21000000000087,\"pid\":528103,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a84f8d53-91c8-400b-aa84-89c8ccfeee85\",\"moduleSequenceNumber\":1311}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815191394],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.61000000000061,\"pid\":528318,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815192008],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.0100000000006,\"pid\":528322,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":1947,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a84f8d53-91c8-400b-aa84-89c8ccfeee85\",\"moduleSequenceNumber\":1311}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815204040],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.81000000000041,\"pid\":528458,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815204063],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.81000000000041,\"pid\":528460,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815204075],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.81000000000041,\"pid\":528461,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":1824,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a84f8d53-91c8-400b-aa84-89c8ccfeee85\",\"moduleSequenceNumber\":1311}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815204435],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.41000000000041,\"pid\":528486,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":2485,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a84f8d53-91c8-400b-aa84-89c8ccfeee85\",\"moduleSequenceNumber\":1311}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815222573],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000017,\"pid\":528704,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815222589],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000017,\"pid\":528706,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":1355,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a84f8d53-91c8-400b-aa84-89c8ccfeee85\",\"moduleSequenceNumber\":1311}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815225033],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.81000000000013,\"pid\":528716,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":2726,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a84f8d53-91c8-400b-aa84-89c8ccfeee85\",\"moduleSequenceNumber\":1311}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815247133],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.80999999999995,\"pid\":528954,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":1313,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a84f8d53-91c8-400b-aa84-89c8ccfeee85\",\"moduleSequenceNumber\":1311}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815248686],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999955,\"pid\":528974,\"ramUsage\":1.8,\"server\":\"pserver-1649423567018\",\"threads\":41,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///10eea479-5a91-4eb8-9061-84c46e1f60f9\",\"moduleSequenceNumber\":1306}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815249617],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999958,\"pid\":529011,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815249630],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999958,\"pid\":529013,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815249669],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999958,\"pid\":529017,\"ramUsage\":1.8,\"server\":\"pserver-1649423567018\",\"threads\":47,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///10eea479-5a91-4eb8-9061-84c46e1f60f9\",\"moduleSequenceNumber\":1306}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815249677],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.209999999999958,\"pid\":529018,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":1355,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a84f8d53-91c8-400b-aa84-89c8ccfeee85\",\"moduleSequenceNumber\":1311}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815256794],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.20999999999998,\"pid\":529063,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815256876],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.00999999999998,\"pid\":529064,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a84f8d53-91c8-400b-aa84-89c8ccfeee85\",\"moduleSequenceNumber\":1311}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815258065],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.809999999999983,\"pid\":529080,\"ramUsage\":1.8,\"server\":\"pserver-1649423567018\",\"threads\":38,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///10eea479-5a91-4eb8-9061-84c46e1f60f9\",\"moduleSequenceNumber\":1306}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815258092],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.809999999999983,\"pid\":529082,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815258277],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999983,\"pid\":529088,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815258629],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529111,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":133,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815258732],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999983,\"pid\":529120,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815262385],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999994,\"pid\":529135,\"ramUsage\":1.8,\"server\":\"pserver-1649423567018\",\"threads\":34,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///10eea479-5a91-4eb8-9061-84c46e1f60f9\",\"moduleSequenceNumber\":1306}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815262450],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999994,\"pid\":529136,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1649815263106],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999996,\"pid\":529140,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":32,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815263238],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":529141,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815263581],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.409999999999998,\"pid\":529147,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815263610],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.409999999999998,\"pid\":529149,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":1055,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a84f8d53-91c8-400b-aa84-89c8ccfeee85\",\"moduleSequenceNumber\":1311}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815266092],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000003,\"pid\":529169,\"ramUsage\":1.8,\"server\":\"pserver-1649423567018\",\"threads\":668,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///10eea479-5a91-4eb8-9061-84c46e1f60f9\",\"moduleSequenceNumber\":1306}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815266110],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000003,\"pid\":529170,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":1425,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a84f8d53-91c8-400b-aa84-89c8ccfeee85\",\"moduleSequenceNumber\":1311}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815267072],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000002,\"pid\":529184,\"ramUsage\":1.8,\"server\":\"pserver-1649423567018\",\"threads\":38,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///10eea479-5a91-4eb8-9061-84c46e1f60f9\",\"moduleSequenceNumber\":1306}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815267086],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000002,\"pid\":529185,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":133,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815267205],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000002,\"pid\":529190,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815267529],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":529206,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815267818],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529225,\"ramUsage\":1.8,\"server\":\"pserver-1649423567018\",\"threads\":47,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///10eea479-5a91-4eb8-9061-84c46e1f60f9\",\"moduleSequenceNumber\":1306}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815270442],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":529236,\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"threads\":2726,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a84f8d53-91c8-400b-aa84-89c8ccfeee85\",\"moduleSequenceNumber\":1311}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a533f7ba-4b8d-4939-8f1b-058d5c1e2def\",\"moduleSequenceNumber\":1309}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"moduleSequenceNumber\":1309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a84f8d53-91c8-400b-aa84-89c8ccfeee85\",\"moduleSequenceNumber\":1311}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423567018\",\"moduleSequenceNumber\":1311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///10eea479-5a91-4eb8-9061-84c46e1f60f9\",\"moduleSequenceNumber\":1306}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423567018\",\"moduleSequenceNumber\":1306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///482adc04-f9b8-4429-b94a-596dff546dd7\",\"moduleSequenceNumber\":1261}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423567018\",\"moduleSequenceNumber\":1261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///4837d84d-c3d9-48d3-826b-3e3ba4ef8b6f\",\"moduleSequenceNumber\":1253}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423567018\",\"moduleSequenceNumber\":1253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423575607\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423575607\",\"httpPortOpen\":false,\"ip\":\"74.6.8.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":46926.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"megacorp\",1521,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6309422526.384903,\"offlineMoneyMade\":0,\"offlineRunningTime\":146878.378,\"onlineExpGained\":10038205398.955776,\"onlineMoneyMade\":200614056531834.56,\"onlineRunningTime\":233539.01000447632,\"pid\":352,\"ramUsage\":5.8,\"server\":\"pserver-1649423575607\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"omnitek\",135,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":837781098.5975366,\"offlineMoneyMade\":0,\"offlineRunningTime\":146878.447,\"onlineExpGained\":1286305497.76594,\"onlineMoneyMade\":0,\"onlineRunningTime\":226522.01000409218,\"pid\":354,\"ramUsage\":5.8,\"server\":\"pserver-1649423575607\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///34759601-eede-4765-897a-e7bdcd39e5cd\",\"moduleSequenceNumber\":164104}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"rho-construction\",32,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":92165975.65793648,\"offlineMoneyMade\":0,\"offlineRunningTime\":146878.492,\"onlineExpGained\":141551346.17571884,\"onlineMoneyMade\":0,\"onlineRunningTime\":226399.61000408538,\"pid\":355,\"ramUsage\":5.8,\"server\":\"pserver-1649423575607\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///34759601-eede-4765-897a-e7bdcd39e5cd\",\"moduleSequenceNumber\":164104}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"nova-med\",114,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":491751694.92627263,\"offlineMoneyMade\":0,\"offlineRunningTime\":146878.528,\"onlineExpGained\":746858239.8641293,\"onlineMoneyMade\":0,\"onlineRunningTime\":223999.4100039492,\"pid\":356,\"ramUsage\":5.8,\"server\":\"pserver-1649423575607\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///34759601-eede-4765-897a-e7bdcd39e5cd\",\"moduleSequenceNumber\":164104}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"zb-institute\",108,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":478456729.21716046,\"offlineMoneyMade\":0,\"offlineRunningTime\":146878.576,\"onlineExpGained\":724996984.8609031,\"onlineMoneyMade\":0,\"onlineRunningTime\":223470.2100039183,\"pid\":357,\"ramUsage\":5.8,\"server\":\"pserver-1649423575607\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///34759601-eede-4765-897a-e7bdcd39e5cd\",\"moduleSequenceNumber\":164104}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"powerhouse-fitness\",33,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":109033857.91962996,\"offlineMoneyMade\":0,\"offlineRunningTime\":146878.613,\"onlineExpGained\":159868365.82160664,\"onlineMoneyMade\":40569352864534.8,\"onlineRunningTime\":217288.41000355865,\"pid\":358,\"ramUsage\":5.8,\"server\":\"pserver-1649423575607\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///34759601-eede-4765-897a-e7bdcd39e5cd\",\"moduleSequenceNumber\":164104}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815118172],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.8099999999998,\"pid\":527477,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815134957],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":138.01000000000073,\"pid\":527676,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":2726,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///197b6a0a-debb-426d-a46c-b15eb667f8d3\",\"moduleSequenceNumber\":1375}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815140351],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":132.61000000000104,\"pid\":527722,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815150062],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000118,\"pid\":527840,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815150214],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000118,\"pid\":527850,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815185584],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.4100000000007,\"pid\":528245,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":1649,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///197b6a0a-debb-426d-a46c-b15eb667f8d3\",\"moduleSequenceNumber\":1375}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815196169],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.81000000000054,\"pid\":528398,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815201745],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.21000000000045,\"pid\":528430,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815201831],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.01000000000045,\"pid\":528431,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":2005,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///197b6a0a-debb-426d-a46c-b15eb667f8d3\",\"moduleSequenceNumber\":1375}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815204188],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.81000000000041,\"pid\":528466,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815204321],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.61000000000041,\"pid\":528478,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815216710],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.21000000000025,\"pid\":528614,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":1933,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///197b6a0a-debb-426d-a46c-b15eb667f8d3\",\"moduleSequenceNumber\":1375}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815217819],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.01000000000023,\"pid\":528623,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///197b6a0a-debb-426d-a46c-b15eb667f8d3\",\"moduleSequenceNumber\":1375}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815218589],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.410000000000224,\"pid\":528632,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":2088,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///197b6a0a-debb-426d-a46c-b15eb667f8d3\",\"moduleSequenceNumber\":1375}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815222104],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000017,\"pid\":528670,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815222116],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000017,\"pid\":528671,\"ramUsage\":1.8,\"server\":\"pserver-1649423575607\",\"threads\":1521,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///84c65a08-b1e8-41ce-b849-7cf0a8183fa0\",\"moduleSequenceNumber\":1369}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815223773],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.21000000000015,\"pid\":528711,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":1985,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///197b6a0a-debb-426d-a46c-b15eb667f8d3\",\"moduleSequenceNumber\":1375}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815227474],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.410000000000096,\"pid\":528734,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815227550],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.410000000000096,\"pid\":528735,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///197b6a0a-debb-426d-a46c-b15eb667f8d3\",\"moduleSequenceNumber\":1375}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815231380],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":528792,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815231388],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":528793,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815231401],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":528794,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815231413],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":528795,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815231427],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":528796,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815231445],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":528797,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815231545],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":528805,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815232201],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.81000000000004,\"pid\":528814,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815248641],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999955,\"pid\":528973,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":1649,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///197b6a0a-debb-426d-a46c-b15eb667f8d3\",\"moduleSequenceNumber\":1375}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815249427],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999958,\"pid\":528997,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":155,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815250801],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.20999999999996,\"pid\":529023,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":1985,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///197b6a0a-debb-426d-a46c-b15eb667f8d3\",\"moduleSequenceNumber\":1375}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815255267],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.609999999999975,\"pid\":529051,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815255787],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":529054,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815257234],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.60999999999998,\"pid\":529073,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":1346,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///197b6a0a-debb-426d-a46c-b15eb667f8d3\",\"moduleSequenceNumber\":1375}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815267700],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529219,\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d85556a8-a67a-42d4-8e07-fd09f4145e32\",\"moduleSequenceNumber\":1374}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"moduleSequenceNumber\":1374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///197b6a0a-debb-426d-a46c-b15eb667f8d3\",\"moduleSequenceNumber\":1375}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423575607\",\"moduleSequenceNumber\":1375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///84c65a08-b1e8-41ce-b849-7cf0a8183fa0\",\"moduleSequenceNumber\":1369}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423575607\",\"moduleSequenceNumber\":1369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///fb6cffcb-f8ca-4f95-a2c3-f8f66a56f99c\",\"moduleSequenceNumber\":1318}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423575607\",\"moduleSequenceNumber\":1318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///955aac7d-2d95-4f14-b7db-f00ed249c389\",\"moduleSequenceNumber\":1313}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423575607\",\"moduleSequenceNumber\":1313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423585168\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423585168\",\"httpPortOpen\":false,\"ip\":\"7.7.3.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":46693.700000000004,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"kuai-gong\",376,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1524681192.5938997,\"offlineMoneyMade\":0,\"offlineRunningTime\":146879.90899999999,\"onlineExpGained\":2370109387.0865765,\"onlineMoneyMade\":148366196018984.3,\"onlineRunningTime\":229308.81000424572,\"pid\":417,\"ramUsage\":5.8,\"server\":\"pserver-1649423585168\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///dd9faf58-04cd-4efc-a6ab-93b3502c4bee\",\"moduleSequenceNumber\":150680}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"solaris\",42,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":147216742.81496704,\"offlineMoneyMade\":0,\"offlineRunningTime\":146879.956,\"onlineExpGained\":216741777.53029275,\"onlineMoneyMade\":3512712100221.578,\"onlineRunningTime\":218568.01000363237,\"pid\":418,\"ramUsage\":5.8,\"server\":\"pserver-1649423585168\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///dd9faf58-04cd-4efc-a6ab-93b3502c4bee\",\"moduleSequenceNumber\":150680}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815113310],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":159.60999999999953,\"pid\":527410,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815119365],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.60999999999987,\"pid\":527487,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///56cf1437-4276-4818-94c8-b39e6f2d983d\",\"moduleSequenceNumber\":1432}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815143965],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":129.01000000000118,\"pid\":527780,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":2726,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///56cf1437-4276-4818-94c8-b39e6f2d983d\",\"moduleSequenceNumber\":1432}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815148018],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":124.81000000000121,\"pid\":527812,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815148103],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":124.81000000000121,\"pid\":527813,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815151846],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":121.01000000000116,\"pid\":527880,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815151963],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":121.01000000000116,\"pid\":527881,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815152973],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":120.01000000000114,\"pid\":527884,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":2726,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///56cf1437-4276-4818-94c8-b39e6f2d983d\",\"moduleSequenceNumber\":1432}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815158466],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":114.41000000000106,\"pid\":527930,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815167472],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":105.41000000000095,\"pid\":528034,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815167572],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":105.41000000000095,\"pid\":528037,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":1649,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///56cf1437-4276-4818-94c8-b39e6f2d983d\",\"moduleSequenceNumber\":1432}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815173331],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":99.61000000000087,\"pid\":528110,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815173735],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":99.21000000000086,\"pid\":528115,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815174350],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.61000000000085,\"pid\":528120,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815204577],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.41000000000041,\"pid\":528499,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815222267],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000017,\"pid\":528679,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815222277],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000017,\"pid\":528680,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815231471],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":528799,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":133,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815231581],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":528808,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815240524],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999993,\"pid\":528906,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815241794],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.209999999999926,\"pid\":528919,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":1985,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///56cf1437-4276-4818-94c8-b39e6f2d983d\",\"moduleSequenceNumber\":1432}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815245234],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.60999999999994,\"pid\":528938,\"ramUsage\":1.8,\"server\":\"pserver-1649423585168\",\"threads\":1717,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///10957473-c4a4-4f8f-8f54-1f7bb8688239\",\"moduleSequenceNumber\":1433}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815246057],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.809999999999942,\"pid\":528945,\"ramUsage\":1.8,\"server\":\"pserver-1649423585168\",\"threads\":1394,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///10957473-c4a4-4f8f-8f54-1f7bb8688239\",\"moduleSequenceNumber\":1433}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815246478],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.409999999999947,\"pid\":528948,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":1708,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///56cf1437-4276-4818-94c8-b39e6f2d983d\",\"moduleSequenceNumber\":1432}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815250133],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.80999999999996,\"pid\":529020,\"ramUsage\":1.8,\"server\":\"pserver-1649423585168\",\"threads\":40,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///10957473-c4a4-4f8f-8f54-1f7bb8688239\",\"moduleSequenceNumber\":1433}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815250218],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.60999999999996,\"pid\":529022,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815250951],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.009999999999962,\"pid\":529024,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815251046],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.809999999999963,\"pid\":529025,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815252069],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.809999999999967,\"pid\":529028,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":2726,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///56cf1437-4276-4818-94c8-b39e6f2d983d\",\"moduleSequenceNumber\":1432}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815258304],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999983,\"pid\":529091,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815258667],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999983,\"pid\":529115,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815260816],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.209999999999992,\"pid\":529130,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815261080],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999993,\"pid\":529131,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///56cf1437-4276-4818-94c8-b39e6f2d983d\",\"moduleSequenceNumber\":1432}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815263543],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.409999999999998,\"pid\":529144,\"ramUsage\":1.8,\"server\":\"pserver-1649423585168\",\"threads\":69,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///10957473-c4a4-4f8f-8f54-1f7bb8688239\",\"moduleSequenceNumber\":1433}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815263551],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.409999999999998,\"pid\":529145,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815263558],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.409999999999998,\"pid\":529146,\"ramUsage\":1.8,\"server\":\"pserver-1649423585168\",\"threads\":1717,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///10957473-c4a4-4f8f-8f54-1f7bb8688239\",\"moduleSequenceNumber\":1433}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815267311],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000002,\"pid\":529194,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815267602],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529210,\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///54652977-e693-4e4d-840e-d538152afd18\",\"moduleSequenceNumber\":1437}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"moduleSequenceNumber\":1437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///297ba6c9-9e14-43ac-a2f0-82cbc960fe62\",\"moduleSequenceNumber\":1378}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423585168\",\"moduleSequenceNumber\":1378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///56cf1437-4276-4818-94c8-b39e6f2d983d\",\"moduleSequenceNumber\":1432}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423585168\",\"moduleSequenceNumber\":1432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///10957473-c4a4-4f8f-8f54-1f7bb8688239\",\"moduleSequenceNumber\":1433}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423585168\",\"moduleSequenceNumber\":1433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///b942bd34-cd40-4913-9237-c4f3829e699f\",\"moduleSequenceNumber\":1376}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423585168\",\"moduleSequenceNumber\":1376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423594590\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423594590\",\"httpPortOpen\":false,\"ip\":\"84.3.8.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":49467.00000000001,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"blade\",147,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":844506888.8771946,\"offlineMoneyMade\":0,\"offlineRunningTime\":146880.90399999998,\"onlineExpGained\":1302072827.2066457,\"onlineMoneyMade\":0,\"onlineRunningTime\":227510.01000414658,\"pid\":479,\"ramUsage\":5.8,\"server\":\"pserver-1649423594590\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"global-pharm\",124,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":634497785.1421173,\"offlineMoneyMade\":0,\"offlineRunningTime\":146880.94100000002,\"onlineExpGained\":971518353.7365407,\"onlineMoneyMade\":0,\"onlineRunningTime\":225854.81000405515,\"pid\":480,\"ramUsage\":5.8,\"server\":\"pserver-1649423594590\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///e7ce7294-4652-4fbe-8169-ce7cc09c4bb5\",\"moduleSequenceNumber\":208153}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"alpha-ent\",1659,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6400696784.594969,\"offlineMoneyMade\":0,\"offlineRunningTime\":146880.978,\"onlineExpGained\":9648881208.330147,\"onlineMoneyMade\":0,\"onlineRunningTime\":222257.81000384738,\"pid\":481,\"ramUsage\":5.8,\"server\":\"pserver-1649423594590\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///e7ce7294-4652-4fbe-8169-ce7cc09c4bb5\",\"moduleSequenceNumber\":208153}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"applied-energetics\",137,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":653825080.8185495,\"offlineMoneyMade\":0,\"offlineRunningTime\":146881.01299999998,\"onlineExpGained\":960976724.7458283,\"onlineMoneyMade\":0,\"onlineRunningTime\":216793.6100035301,\"pid\":482,\"ramUsage\":5.8,\"server\":\"pserver-1649423594590\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///e7ce7294-4652-4fbe-8169-ce7cc09c4bb5\",\"moduleSequenceNumber\":208153}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815102141],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":170.8099999999989,\"pid\":527285,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815102211],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":170.8099999999989,\"pid\":527286,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815106806],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":166.20999999999916,\"pid\":527360,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815150402],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.41000000000118,\"pid\":527865,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815156331],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":116.6100000000011,\"pid\":527912,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815170943],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":102.0100000000009,\"pid\":528091,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ef811e98-d382-4972-9d5e-aee1ba2f10c8\",\"moduleSequenceNumber\":1495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815194590],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.41000000000057,\"pid\":528349,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":1649,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ef811e98-d382-4972-9d5e-aee1ba2f10c8\",\"moduleSequenceNumber\":1495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815201040],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.81000000000046,\"pid\":528426,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":1947,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ef811e98-d382-4972-9d5e-aee1ba2f10c8\",\"moduleSequenceNumber\":1495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815208183],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.81000000000037,\"pid\":528513,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815208211],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.61000000000037,\"pid\":528514,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815208255],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.61000000000037,\"pid\":528517,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815209460],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.41000000000035,\"pid\":528526,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815210048],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.81000000000034,\"pid\":528530,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":1947,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ef811e98-d382-4972-9d5e-aee1ba2f10c8\",\"moduleSequenceNumber\":1495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815219055],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.810000000000215,\"pid\":528634,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":1947,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ef811e98-d382-4972-9d5e-aee1ba2f10c8\",\"moduleSequenceNumber\":1495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815224781],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.210000000000136,\"pid\":528714,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815225733],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.21000000000012,\"pid\":528718,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":1933,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ef811e98-d382-4972-9d5e-aee1ba2f10c8\",\"moduleSequenceNumber\":1495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815226273],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.61000000000011,\"pid\":528725,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815226827],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.010000000000105,\"pid\":528727,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ef811e98-d382-4972-9d5e-aee1ba2f10c8\",\"moduleSequenceNumber\":1495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815227094],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.8100000000001,\"pid\":528729,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815227115],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.8100000000001,\"pid\":528730,\"ramUsage\":1.8,\"server\":\"pserver-1649423594590\",\"threads\":1717,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///4eff2e90-b640-4419-8d64-6e24a63ce0c4\",\"moduleSequenceNumber\":1498}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815227167],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.8100000000001,\"pid\":528731,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815227452],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.410000000000096,\"pid\":528732,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815227464],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.410000000000096,\"pid\":528733,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":1055,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ef811e98-d382-4972-9d5e-aee1ba2f10c8\",\"moduleSequenceNumber\":1495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815228656],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.21000000000008,\"pid\":528741,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815229116],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000007,\"pid\":528746,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":1313,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ef811e98-d382-4972-9d5e-aee1ba2f10c8\",\"moduleSequenceNumber\":1495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815231095],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":528773,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":1824,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ef811e98-d382-4972-9d5e-aee1ba2f10c8\",\"moduleSequenceNumber\":1495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815236100],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.80999999999998,\"pid\":528833,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815236122],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.80999999999998,\"pid\":528834,\"ramUsage\":1.8,\"server\":\"pserver-1649423594590\",\"threads\":1717,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///4eff2e90-b640-4419-8d64-6e24a63ce0c4\",\"moduleSequenceNumber\":1498}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815237771],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.20999999999996,\"pid\":528846,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815239124],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.80999999999995,\"pid\":528861,\"ramUsage\":1.8,\"server\":\"pserver-1649423594590\",\"threads\":64,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///4eff2e90-b640-4419-8d64-6e24a63ce0c4\",\"moduleSequenceNumber\":1498}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815239156],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.80999999999995,\"pid\":528863,\"ramUsage\":1.8,\"server\":\"pserver-1649423594590\",\"threads\":77,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///4eff2e90-b640-4419-8d64-6e24a63ce0c4\",\"moduleSequenceNumber\":1498}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815239718],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.209999999999944,\"pid\":528871,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815240346],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.609999999999935,\"pid\":528892,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815240420],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999993,\"pid\":528898,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815240511],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999993,\"pid\":528905,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815248224],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999953,\"pid\":528969,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":1346,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ef811e98-d382-4972-9d5e-aee1ba2f10c8\",\"moduleSequenceNumber\":1495}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815267183],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000002,\"pid\":529189,\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"threads\":1824,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ef811e98-d382-4972-9d5e-aee1ba2f10c8\",\"moduleSequenceNumber\":1495}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d2ac9bd6-edd2-42e6-9fd6-c3b0723eb9e6\",\"moduleSequenceNumber\":1499}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"moduleSequenceNumber\":1499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ef811e98-d382-4972-9d5e-aee1ba2f10c8\",\"moduleSequenceNumber\":1495}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423594590\",\"moduleSequenceNumber\":1495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///4eff2e90-b640-4419-8d64-6e24a63ce0c4\",\"moduleSequenceNumber\":1498}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423594590\",\"moduleSequenceNumber\":1498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///54afd660-ba35-4d30-b696-4d115041be21\",\"moduleSequenceNumber\":1438}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423594590\",\"moduleSequenceNumber\":1438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///b5125a82-5480-469b-b05b-bab27e35368d\",\"moduleSequenceNumber\":1442}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423594590\",\"moduleSequenceNumber\":1442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423612551\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423612551\",\"httpPortOpen\":false,\"ip\":\"71.2.9.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":47064.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"galactic-cyber\",85,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":317883891.6127635,\"offlineMoneyMade\":0,\"offlineRunningTime\":146882.08299999998,\"onlineExpGained\":476148338.53840077,\"onlineMoneyMade\":0,\"onlineRunningTime\":220911.41000376895,\"pid\":541,\"ramUsage\":5.8,\"server\":\"pserver-1649423612551\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///280274fa-fdcb-441e-aacf-f3c4b2c7e0bf\",\"moduleSequenceNumber\":247213}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649814907492],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":365.40999999998854,\"pid\":525212,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815085804],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.20999999999796,\"pid\":527129,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815131628],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":141.21000000000058,\"pid\":527623,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815132257],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.6100000000006,\"pid\":527649,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815150185],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.81000000000118,\"pid\":527847,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815159295],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":113.61000000000105,\"pid\":527960,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815172155],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":100.81000000000088,\"pid\":528097,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815172182],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":100.81000000000088,\"pid\":528098,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815172220],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":100.61000000000088,\"pid\":528101,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815177289],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.61000000000081,\"pid\":528166,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815186049],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.81000000000068,\"pid\":528252,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815186233],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.61000000000068,\"pid\":528263,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815186388],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.61000000000068,\"pid\":528276,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815186550],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.41000000000068,\"pid\":528290,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":1355,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///803cd94a-831a-49f7-a706-1f6ebd5012ae\",\"moduleSequenceNumber\":1561}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815192382],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.6100000000006,\"pid\":528325,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815194054],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.81000000000057,\"pid\":528340,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815207017],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.81000000000039,\"pid\":528508,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":2726,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///803cd94a-831a-49f7-a706-1f6ebd5012ae\",\"moduleSequenceNumber\":1561}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815212074],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.810000000000315,\"pid\":528548,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815212611],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.210000000000306,\"pid\":528557,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":1649,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///803cd94a-831a-49f7-a706-1f6ebd5012ae\",\"moduleSequenceNumber\":1561}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815219759],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.21000000000021,\"pid\":528638,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815220506],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.410000000000196,\"pid\":528644,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815220843],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.01000000000019,\"pid\":528648,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///803cd94a-831a-49f7-a706-1f6ebd5012ae\",\"moduleSequenceNumber\":1561}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815229413],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.41000000000007,\"pid\":528747,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":155,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815230209],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":528761,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":1346,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///803cd94a-831a-49f7-a706-1f6ebd5012ae\",\"moduleSequenceNumber\":1561}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815237374],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.609999999999964,\"pid\":528844,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":1708,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///803cd94a-831a-49f7-a706-1f6ebd5012ae\",\"moduleSequenceNumber\":1561}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815245712],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.20999999999994,\"pid\":528944,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":2088,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///803cd94a-831a-49f7-a706-1f6ebd5012ae\",\"moduleSequenceNumber\":1561}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815247526],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.40999999999995,\"pid\":528956,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815247618],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.20999999999995,\"pid\":528957,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815247723],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.20999999999995,\"pid\":528958,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":1550,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///803cd94a-831a-49f7-a706-1f6ebd5012ae\",\"moduleSequenceNumber\":1561}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815248070],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999953,\"pid\":528961,\"ramUsage\":1.8,\"server\":\"pserver-1649423612551\",\"threads\":668,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///d53138b4-e88a-4dac-8a7e-60fc3562a373\",\"moduleSequenceNumber\":1560}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815248085],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999953,\"pid\":528962,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":1425,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///803cd94a-831a-49f7-a706-1f6ebd5012ae\",\"moduleSequenceNumber\":1561}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815249286],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999957,\"pid\":528987,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815249350],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999957,\"pid\":528992,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815249362],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999957,\"pid\":528993,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":1659,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///803cd94a-831a-49f7-a706-1f6ebd5012ae\",\"moduleSequenceNumber\":1561}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815255119],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.809999999999974,\"pid\":529050,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":1947,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///803cd94a-831a-49f7-a706-1f6ebd5012ae\",\"moduleSequenceNumber\":1561}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815258334],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999983,\"pid\":529092,\"ramUsage\":1.8,\"server\":\"pserver-1649423612551\",\"threads\":33,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///d53138b4-e88a-4dac-8a7e-60fc3562a373\",\"moduleSequenceNumber\":1560}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815258351],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999983,\"pid\":529094,\"ramUsage\":1.8,\"server\":\"pserver-1649423612551\",\"threads\":42,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///d53138b4-e88a-4dac-8a7e-60fc3562a373\",\"moduleSequenceNumber\":1560}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815258394],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999983,\"pid\":529095,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815258417],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529097,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":1659,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///803cd94a-831a-49f7-a706-1f6ebd5012ae\",\"moduleSequenceNumber\":1561}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1649815267305],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000002,\"pid\":529193,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":32,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815267484],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":529203,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815267610],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529211,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815267721],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529221,\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///389a0c66-9d66-4b95-853f-5f7ece32a02a\",\"moduleSequenceNumber\":1559}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"moduleSequenceNumber\":1559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///803cd94a-831a-49f7-a706-1f6ebd5012ae\",\"moduleSequenceNumber\":1561}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423612551\",\"moduleSequenceNumber\":1561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///d53138b4-e88a-4dac-8a7e-60fc3562a373\",\"moduleSequenceNumber\":1560}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423612551\",\"moduleSequenceNumber\":1560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///8f2f8579-fc7a-48bd-b900-ca9fd555eb00\",\"moduleSequenceNumber\":1500}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423612551\",\"moduleSequenceNumber\":1500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///e87f169e-b9c6-4a21-8919-63f6a43b4a4b\",\"moduleSequenceNumber\":1501}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423612551\",\"moduleSequenceNumber\":1501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423640164\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423640164\",\"httpPortOpen\":false,\"ip\":\"4.2.4.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":44818.950000000004,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"nova-med\",114,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":491725742.1744385,\"offlineMoneyMade\":0,\"offlineRunningTime\":146883.25699999998,\"onlineExpGained\":746462577.5666337,\"onlineMoneyMade\":0,\"onlineRunningTime\":223905.41000394375,\"pid\":603,\"ramUsage\":5.8,\"server\":\"pserver-1649423640164\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"lexo-corp\",155,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":651084276.9867762,\"offlineMoneyMade\":0,\"offlineRunningTime\":146883.307,\"onlineExpGained\":973563712.4515816,\"onlineMoneyMade\":0,\"onlineRunningTime\":220535.01000374698,\"pid\":604,\"ramUsage\":5.8,\"server\":\"pserver-1649423640164\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///f5e66dda-93f9-4489-8dd4-e2d8fd71dd8a\",\"moduleSequenceNumber\":236716}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815039176],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":233.8099999999953,\"pid\":526618,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815120994],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.00999999999996,\"pid\":527500,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815123229],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":149.6100000000001,\"pid\":527545,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815127185],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":145.81000000000031,\"pid\":527581,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815128086],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":144.81000000000037,\"pid\":527587,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815130001],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":143.01000000000047,\"pid\":527604,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815130090],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":142.81000000000049,\"pid\":527605,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815156194],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":116.8100000000011,\"pid\":527909,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815159271],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":113.61000000000105,\"pid\":527958,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815195505],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.41000000000055,\"pid\":528389,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815197965],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.01000000000052,\"pid\":528403,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///013594a5-3d5a-4f97-88a1-099da3a5ccd9\",\"moduleSequenceNumber\":1638}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815199805],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.21000000000048,\"pid\":528415,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///013594a5-3d5a-4f97-88a1-099da3a5ccd9\",\"moduleSequenceNumber\":1638}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815201137],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.81000000000046,\"pid\":528427,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815201347],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.61000000000045,\"pid\":528428,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":1708,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///013594a5-3d5a-4f97-88a1-099da3a5ccd9\",\"moduleSequenceNumber\":1638}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815221084],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.81000000000019,\"pid\":528652,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815221546],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.41000000000018,\"pid\":528658,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815221557],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.41000000000018,\"pid\":528659,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":2101,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///013594a5-3d5a-4f97-88a1-099da3a5ccd9\",\"moduleSequenceNumber\":1638}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815221618],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.21000000000018,\"pid\":528661,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":1649,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///013594a5-3d5a-4f97-88a1-099da3a5ccd9\",\"moduleSequenceNumber\":1638}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815222407],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000017,\"pid\":528691,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815222515],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000017,\"pid\":528699,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815229849],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.01000000000006,\"pid\":528752,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///013594a5-3d5a-4f97-88a1-099da3a5ccd9\",\"moduleSequenceNumber\":1638}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815230069],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":528754,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":1425,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///013594a5-3d5a-4f97-88a1-099da3a5ccd9\",\"moduleSequenceNumber\":1638}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815232905],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.010000000000026,\"pid\":528816,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815233030],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.810000000000024,\"pid\":528817,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815233788],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.210000000000015,\"pid\":528818,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815233992],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.01000000000001,\"pid\":528819,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///013594a5-3d5a-4f97-88a1-099da3a5ccd9\",\"moduleSequenceNumber\":1638}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815237168],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.80999999999997,\"pid\":528843,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815237663],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.20999999999996,\"pid\":528845,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815237861],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999996,\"pid\":528847,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":2005,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///013594a5-3d5a-4f97-88a1-099da3a5ccd9\",\"moduleSequenceNumber\":1638}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815238612],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.20999999999996,\"pid\":528853,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815238856],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.009999999999955,\"pid\":528856,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///013594a5-3d5a-4f97-88a1-099da3a5ccd9\",\"moduleSequenceNumber\":1638}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815248132],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999953,\"pid\":528965,\"ramUsage\":1.8,\"server\":\"pserver-1649423640164\",\"threads\":64,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///ba7689ee-9e28-4a7b-abb2-dac8ec91a4de\",\"moduleSequenceNumber\":1637}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815248181],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999953,\"pid\":528967,\"ramUsage\":1.8,\"server\":\"pserver-1649423640164\",\"threads\":77,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///ba7689ee-9e28-4a7b-abb2-dac8ec91a4de\",\"moduleSequenceNumber\":1637}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815248207],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999953,\"pid\":528968,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":1830,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///013594a5-3d5a-4f97-88a1-099da3a5ccd9\",\"moduleSequenceNumber\":1638}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815263598],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.409999999999998,\"pid\":529148,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815263629],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.409999999999998,\"pid\":529150,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815264274],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000001,\"pid\":529155,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815264683],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000003,\"pid\":529157,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815265176],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.810000000000004,\"pid\":529162,\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"threads\":1313,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///013594a5-3d5a-4f97-88a1-099da3a5ccd9\",\"moduleSequenceNumber\":1638}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0185f8a-0d26-4c17-ad80-69621998ed1d\",\"moduleSequenceNumber\":1636}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"moduleSequenceNumber\":1636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///013594a5-3d5a-4f97-88a1-099da3a5ccd9\",\"moduleSequenceNumber\":1638}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423640164\",\"moduleSequenceNumber\":1638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///ba7689ee-9e28-4a7b-abb2-dac8ec91a4de\",\"moduleSequenceNumber\":1637}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423640164\",\"moduleSequenceNumber\":1637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///6f9f3682-1963-4db0-880f-69c385010afd\",\"moduleSequenceNumber\":1562}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423640164\",\"moduleSequenceNumber\":1562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///f4d1d7b8-3d86-41a1-aac4-1a4c7fb5dc47\",\"moduleSequenceNumber\":1564}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423640164\",\"moduleSequenceNumber\":1564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423576685\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423576685\",\"httpPortOpen\":false,\"ip\":\"17.8.5.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":48375.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"b-and-a\",161,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":850992869.9203277,\"offlineMoneyMade\":0,\"offlineRunningTime\":146884.489,\"onlineExpGained\":1317635117.0753965,\"onlineMoneyMade\":0,\"onlineRunningTime\":228524.01000420243,\"pid\":680,\"ramUsage\":5.8,\"server\":\"pserver-1649423576685\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"deltaone\",82,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":309207403.92822856,\"offlineMoneyMade\":0,\"offlineRunningTime\":146884.522,\"onlineExpGained\":467959891.03878486,\"onlineMoneyMade\":15864134910947.275,\"onlineRunningTime\":224404.81000397293,\"pid\":681,\"ramUsage\":5.8,\"server\":\"pserver-1649423576685\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///b4539ed2-aed4-43b4-a964-dec1e852ba16\",\"moduleSequenceNumber\":200073}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"univ-energy\",137,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":724591461.833188,\"offlineMoneyMade\":0,\"offlineRunningTime\":146884.566,\"onlineExpGained\":1079446613.327788,\"onlineMoneyMade\":0,\"onlineRunningTime\":219820.01000370525,\"pid\":682,\"ramUsage\":5.8,\"server\":\"pserver-1649423576685\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///b4539ed2-aed4-43b4-a964-dec1e852ba16\",\"moduleSequenceNumber\":200073}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649814993449],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":279.6099999999927,\"pid\":526097,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649814997445],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":275.40999999999286,\"pid\":526142,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815030022],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":243.00999999999482,\"pid\":526514,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815131344],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":141.61000000000055,\"pid\":527618,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815142839],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":130.01000000000113,\"pid\":527776,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815142953],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":130.01000000000113,\"pid\":527777,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815145200],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":127.81000000000125,\"pid\":527789,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815145763],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":127.21000000000124,\"pid\":527791,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a6e1f5c-4a61-462f-bb89-2a291e903c7e\",\"moduleSequenceNumber\":1703}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815146310],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":126.61000000000124,\"pid\":527798,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815146387],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":126.61000000000124,\"pid\":527799,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a6e1f5c-4a61-462f-bb89-2a291e903c7e\",\"moduleSequenceNumber\":1703}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815166034],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":106.81000000000097,\"pid\":528020,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815166234],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":106.61000000000097,\"pid\":528024,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a6e1f5c-4a61-462f-bb89-2a291e903c7e\",\"moduleSequenceNumber\":1703}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815174216],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.61000000000085,\"pid\":528117,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815175242],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.61000000000084,\"pid\":528128,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a6e1f5c-4a61-462f-bb89-2a291e903c7e\",\"moduleSequenceNumber\":1703}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815183202],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.81000000000073,\"pid\":528220,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":1708,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a6e1f5c-4a61-462f-bb89-2a291e903c7e\",\"moduleSequenceNumber\":1703}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815184838],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.0100000000007,\"pid\":528236,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815195280],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.61000000000055,\"pid\":528371,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815195347],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.61000000000055,\"pid\":528377,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815195479],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.41000000000055,\"pid\":528387,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815198010],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.81000000000051,\"pid\":528404,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":2726,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a6e1f5c-4a61-462f-bb89-2a291e903c7e\",\"moduleSequenceNumber\":1703}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815213279],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.6100000000003,\"pid\":528577,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":1659,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a6e1f5c-4a61-462f-bb89-2a291e903c7e\",\"moduleSequenceNumber\":1703}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815221121],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.81000000000019,\"pid\":528654,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":1711,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a6e1f5c-4a61-462f-bb89-2a291e903c7e\",\"moduleSequenceNumber\":1703}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815221186],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.81000000000019,\"pid\":528656,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":1830,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a6e1f5c-4a61-462f-bb89-2a291e903c7e\",\"moduleSequenceNumber\":1703}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815243046],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.80999999999993,\"pid\":528924,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":2726,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a6e1f5c-4a61-462f-bb89-2a291e903c7e\",\"moduleSequenceNumber\":1703}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815254015],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.80999999999997,\"pid\":529040,\"ramUsage\":1.8,\"server\":\"pserver-1649423576685\",\"threads\":69,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///18ac7439-cf21-45ff-b7f6-bcdf5561c945\",\"moduleSequenceNumber\":1702}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815254242],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.60999999999997,\"pid\":529042,\"ramUsage\":1.8,\"server\":\"pserver-1649423576685\",\"threads\":1717,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///18ac7439-cf21-45ff-b7f6-bcdf5561c945\",\"moduleSequenceNumber\":1702}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815258557],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529106,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815258681],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999983,\"pid\":529117,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815258746],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999983,\"pid\":529122,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":1355,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a6e1f5c-4a61-462f-bb89-2a291e903c7e\",\"moduleSequenceNumber\":1703}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815264494],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.410000000000002,\"pid\":529156,\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"threads\":1708,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a6e1f5c-4a61-462f-bb89-2a291e903c7e\",\"moduleSequenceNumber\":1703}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0ab35cd8-fddb-4dee-960d-72d97d487100\",\"moduleSequenceNumber\":1701}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"moduleSequenceNumber\":1701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a6e1f5c-4a61-462f-bb89-2a291e903c7e\",\"moduleSequenceNumber\":1703}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423576685\",\"moduleSequenceNumber\":1703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///18ac7439-cf21-45ff-b7f6-bcdf5561c945\",\"moduleSequenceNumber\":1702}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423576685\",\"moduleSequenceNumber\":1702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///d7679635-749d-4e97-839e-d00b5d596b02\",\"moduleSequenceNumber\":1639}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423576685\",\"moduleSequenceNumber\":1639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///bf020d5d-3d0f-4776-b811-fcd3dac4d77e\",\"moduleSequenceNumber\":1642}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423576685\",\"moduleSequenceNumber\":1642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423603286\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423603286\",\"httpPortOpen\":false,\"ip\":\"59.4.6.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":46181.900000000016,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"ecorp\",135,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":844438059.453183,\"offlineMoneyMade\":0,\"offlineRunningTime\":146886.038,\"onlineExpGained\":1345254054.1031234,\"onlineMoneyMade\":0,\"onlineRunningTime\":235169.21000456583,\"pid\":744,\"ramUsage\":5.8,\"server\":\"pserver-1649423603286\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"clarkinc\",169,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":689907378.7992737,\"offlineMoneyMade\":0,\"offlineRunningTime\":146886.07799999998,\"onlineExpGained\":1084227239.0783842,\"onlineMoneyMade\":0,\"onlineRunningTime\":231868.21000438547,\"pid\":745,\"ramUsage\":5.8,\"server\":\"pserver-1649423603286\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///ea37f93c-928b-4fb7-a3dc-741308e26381\",\"moduleSequenceNumber\":153910}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"global-pharm\",124,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":634665941.798928,\"offlineMoneyMade\":0,\"offlineRunningTime\":146886.139,\"onlineExpGained\":971164788.6260015,\"onlineMoneyMade\":0,\"onlineRunningTime\":225738.81000404872,\"pid\":747,\"ramUsage\":5.8,\"server\":\"pserver-1649423603286\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///ea37f93c-928b-4fb7-a3dc-741308e26381\",\"moduleSequenceNumber\":153910}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"deltaone\",219,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1183194679.7919588,\"offlineMoneyMade\":0,\"offlineRunningTime\":146886.176,\"onlineExpGained\":1799983724.0963523,\"onlineMoneyMade\":0,\"onlineRunningTime\":224499.01000397847,\"pid\":748,\"ramUsage\":5.8,\"server\":\"pserver-1649423603286\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///ea37f93c-928b-4fb7-a3dc-741308e26381\",\"moduleSequenceNumber\":153910}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"zeus-med\",156,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":896612558.2474979,\"offlineMoneyMade\":0,\"offlineRunningTime\":146886.21099999998,\"onlineExpGained\":1352581976.1531684,\"onlineMoneyMade\":0,\"onlineRunningTime\":222665.01000387123,\"pid\":749,\"ramUsage\":5.8,\"server\":\"pserver-1649423603286\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///ea37f93c-928b-4fb7-a3dc-741308e26381\",\"moduleSequenceNumber\":153910}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"aerocorp\",2485,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12997349321.468363,\"offlineMoneyMade\":0,\"offlineRunningTime\":146886.244,\"onlineExpGained\":19193850156.09556,\"onlineMoneyMade\":0,\"onlineRunningTime\":217916.61000359477,\"pid\":750,\"ramUsage\":5.8,\"server\":\"pserver-1649423603286\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///ea37f93c-928b-4fb7-a3dc-741308e26381\",\"moduleSequenceNumber\":153910}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815052248],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":220.80999999999608,\"pid\":526737,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815111967],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":161.00999999999945,\"pid\":527396,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815115814],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":157.00999999999968,\"pid\":527464,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815157227],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":115.61000000000108,\"pid\":527920,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d78a26c3-f593-4a6d-b45b-3c9e8a62b679\",\"moduleSequenceNumber\":1765}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815176668],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.21000000000082,\"pid\":528143,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815177037],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.81000000000081,\"pid\":528148,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815187871],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.01000000000066,\"pid\":528296,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815187992],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.01000000000066,\"pid\":528297,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815189004],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.01000000000064,\"pid\":528300,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":2726,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d78a26c3-f593-4a6d-b45b-3c9e8a62b679\",\"moduleSequenceNumber\":1765}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815193450],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.41000000000058,\"pid\":528332,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815194683],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.21000000000056,\"pid\":528351,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815195033],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.81000000000056,\"pid\":528354,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815195080],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.81000000000056,\"pid\":528358,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815195100],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.81000000000056,\"pid\":528360,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815195196],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.81000000000056,\"pid\":528363,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815195383],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.61000000000055,\"pid\":528379,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815201636],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.21000000000045,\"pid\":528429,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815201909],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.01000000000045,\"pid\":528432,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815203065],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.81000000000043,\"pid\":528444,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815203104],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.81000000000043,\"pid\":528446,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":1711,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d78a26c3-f593-4a6d-b45b-3c9e8a62b679\",\"moduleSequenceNumber\":1765}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815205884],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.0100000000004,\"pid\":528504,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815206007],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.0100000000004,\"pid\":528505,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815207817],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.01000000000037,\"pid\":528512,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815209079],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.81000000000036,\"pid\":528521,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815212698],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.210000000000306,\"pid\":528559,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815213194],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.8100000000003,\"pid\":528570,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815213259],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.6100000000003,\"pid\":528575,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815213311],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.6100000000003,\"pid\":528580,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815213397],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.6100000000003,\"pid\":528587,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815213474],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.410000000000295,\"pid\":528593,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815213589],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.410000000000295,\"pid\":528603,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815222054],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000017,\"pid\":528666,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815222064],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000017,\"pid\":528667,\"ramUsage\":1.8,\"server\":\"pserver-1649423603286\",\"threads\":97,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///3e3ea9b9-d40e-41ee-839c-4b138e317ccc\",\"moduleSequenceNumber\":1766}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815222079],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000017,\"pid\":528668,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815222089],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000017,\"pid\":528669,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":1824,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d78a26c3-f593-4a6d-b45b-3c9e8a62b679\",\"moduleSequenceNumber\":1765}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815224985],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.01000000000013,\"pid\":528715,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d78a26c3-f593-4a6d-b45b-3c9e8a62b679\",\"moduleSequenceNumber\":1765}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815240412],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999993,\"pid\":528897,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815240481],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999993,\"pid\":528903,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":133,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815240611],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999993,\"pid\":528914,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":1355,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d78a26c3-f593-4a6d-b45b-3c9e8a62b679\",\"moduleSequenceNumber\":1765}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815248595],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.409999999999954,\"pid\":528971,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":2101,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d78a26c3-f593-4a6d-b45b-3c9e8a62b679\",\"moduleSequenceNumber\":1765}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815255677],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999976,\"pid\":529053,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815257648],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.209999999999981,\"pid\":529077,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":1649,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d78a26c3-f593-4a6d-b45b-3c9e8a62b679\",\"moduleSequenceNumber\":1765}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815265641],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.2100000000000035,\"pid\":529165,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815265738],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.2100000000000035,\"pid\":529166,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":1550,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d78a26c3-f593-4a6d-b45b-3c9e8a62b679\",\"moduleSequenceNumber\":1765}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815267280],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000002,\"pid\":529191,\"ramUsage\":1.8,\"server\":\"pserver-1649423603286\",\"threads\":1521,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///3e3ea9b9-d40e-41ee-839c-4b138e317ccc\",\"moduleSequenceNumber\":1766}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815268188],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":529228,\"ramUsage\":1.8,\"server\":\"pserver-1649423603286\",\"threads\":40,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///3e3ea9b9-d40e-41ee-839c-4b138e317ccc\",\"moduleSequenceNumber\":1766}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815268215],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":529229,\"ramUsage\":1.8,\"server\":\"pserver-1649423603286\",\"threads\":30,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///3e3ea9b9-d40e-41ee-839c-4b138e317ccc\",\"moduleSequenceNumber\":1766}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815268237],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":529230,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815272216],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":529242,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815272624],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":529246,\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"threads\":1688,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d78a26c3-f593-4a6d-b45b-3c9e8a62b679\",\"moduleSequenceNumber\":1765}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///88fd301e-ad9c-425d-9aca-1ae0905e0d26\",\"moduleSequenceNumber\":1760}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"moduleSequenceNumber\":1760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d78a26c3-f593-4a6d-b45b-3c9e8a62b679\",\"moduleSequenceNumber\":1765}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423603286\",\"moduleSequenceNumber\":1765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///c9b419b5-f3fd-413f-9b97-98d570dffe16\",\"moduleSequenceNumber\":1710}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423603286\",\"moduleSequenceNumber\":1710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///3e3ea9b9-d40e-41ee-839c-4b138e317ccc\",\"moduleSequenceNumber\":1766}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423603286\",\"moduleSequenceNumber\":1766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///d0cf5993-016b-499b-ad99-247656e2b5e2\",\"moduleSequenceNumber\":1706}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423603286\",\"moduleSequenceNumber\":1706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423621146\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423621146\",\"httpPortOpen\":false,\"ip\":\"93.9.3.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":46567.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"alpha-ent\",133,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":513059690.5867064,\"offlineMoneyMade\":0,\"offlineRunningTime\":146887.391,\"onlineExpGained\":773348676.1138576,\"onlineMoneyMade\":0,\"onlineRunningTime\":222266.81000384793,\"pid\":808,\"ramUsage\":5.8,\"server\":\"pserver-1649423621146\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///3c402f1a-8cb8-448e-9830-c5f8bfa2ade1\",\"moduleSequenceNumber\":172650}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"univ-energy\",71,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":271917833.25955105,\"offlineMoneyMade\":0,\"offlineRunningTime\":146887.436,\"onlineExpGained\":404777619.96851087,\"onlineMoneyMade\":5722111697736.293,\"onlineRunningTime\":219740.61000370063,\"pid\":809,\"ramUsage\":5.8,\"server\":\"pserver-1649423621146\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///3c402f1a-8cb8-448e-9830-c5f8bfa2ade1\",\"moduleSequenceNumber\":172650}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815054563],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":218.40999999999622,\"pid\":526758,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815084431],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":188.60999999999788,\"pid\":527088,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8e61ee87-5cc6-417a-b148-0248e9c35407\",\"moduleSequenceNumber\":1808}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815123437],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":149.4100000000001,\"pid\":527563,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815131512],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":141.41000000000057,\"pid\":527621,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":1649,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8e61ee87-5cc6-417a-b148-0248e9c35407\",\"moduleSequenceNumber\":1808}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815140537],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":132.41000000000105,\"pid\":527725,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":1649,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8e61ee87-5cc6-417a-b148-0248e9c35407\",\"moduleSequenceNumber\":1808}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815149645],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":123.21000000000119,\"pid\":527831,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815149997],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":123.01000000000118,\"pid\":527834,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815153762],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":119.21000000000113,\"pid\":527888,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815154771],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.21000000000112,\"pid\":527895,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8e61ee87-5cc6-417a-b148-0248e9c35407\",\"moduleSequenceNumber\":1808}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815155393],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.61000000000111,\"pid\":527903,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8e61ee87-5cc6-417a-b148-0248e9c35407\",\"moduleSequenceNumber\":1808}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815177082],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.81000000000081,\"pid\":528152,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815177447],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.4100000000008,\"pid\":528178,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815182339],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.61000000000074,\"pid\":528214,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815182414],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.41000000000074,\"pid\":528215,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8e61ee87-5cc6-417a-b148-0248e9c35407\",\"moduleSequenceNumber\":1808}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815186402],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.61000000000068,\"pid\":528277,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815186484],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.41000000000068,\"pid\":528285,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815189796],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":83.21000000000063,\"pid\":528304,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815200090],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.81000000000047,\"pid\":528418,\"ramUsage\":1.8,\"server\":\"pserver-1649423621146\",\"threads\":1717,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///2b491e41-cc43-4bd2-9878-7b8de1deb2a3\",\"moduleSequenceNumber\":3028}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815204569],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.41000000000041,\"pid\":528498,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":1355,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8e61ee87-5cc6-417a-b148-0248e9c35407\",\"moduleSequenceNumber\":1808}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815206971],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.01000000000039,\"pid\":528507,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8e61ee87-5cc6-417a-b148-0248e9c35407\",\"moduleSequenceNumber\":1808}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815213562],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.410000000000295,\"pid\":528600,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815218161],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.81000000000023,\"pid\":528627,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815218446],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.410000000000224,\"pid\":528628,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815218458],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.410000000000224,\"pid\":528629,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":1055,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8e61ee87-5cc6-417a-b148-0248e9c35407\",\"moduleSequenceNumber\":1808}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815219649],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.21000000000021,\"pid\":528637,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815220597],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.410000000000196,\"pid\":528645,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815221062],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.81000000000019,\"pid\":528650,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":1425,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8e61ee87-5cc6-417a-b148-0248e9c35407\",\"moduleSequenceNumber\":1808}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815267594],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":529209,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815267758],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529223,\"ramUsage\":1.8,\"server\":\"pserver-1649423621146\",\"threads\":128,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///2b491e41-cc43-4bd2-9878-7b8de1deb2a3\",\"moduleSequenceNumber\":3028}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815268818],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"pid\":529231,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":1985,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8e61ee87-5cc6-417a-b148-0248e9c35407\",\"moduleSequenceNumber\":1808}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815268990],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"pid\":529232,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815269083],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":529233,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815271242],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":529237,\"ramUsage\":1.8,\"server\":\"pserver-1649423621146\",\"threads\":29,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///2b491e41-cc43-4bd2-9878-7b8de1deb2a3\",\"moduleSequenceNumber\":3028}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815271423],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":529238,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":1933,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8e61ee87-5cc6-417a-b148-0248e9c35407\",\"moduleSequenceNumber\":1808}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815272895],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":529253,\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"threads\":1055,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8e61ee87-5cc6-417a-b148-0248e9c35407\",\"moduleSequenceNumber\":1808}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e55a2cd8-59d1-4223-8996-bdba07066f7c\",\"moduleSequenceNumber\":1809}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"moduleSequenceNumber\":1809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8e61ee87-5cc6-417a-b148-0248e9c35407\",\"moduleSequenceNumber\":1808}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423621146\",\"moduleSequenceNumber\":1808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///2b491e41-cc43-4bd2-9878-7b8de1deb2a3\",\"moduleSequenceNumber\":3028}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423621146\",\"moduleSequenceNumber\":3028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///21206c75-4ac9-427b-b664-e42915925823\",\"moduleSequenceNumber\":1769}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423621146\",\"moduleSequenceNumber\":1769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///04f5dae5-42dc-49dc-95dd-722c7021d9fd\",\"moduleSequenceNumber\":1767}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423621146\",\"moduleSequenceNumber\":1767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423493616\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423493616\",\"httpPortOpen\":false,\"ip\":\"45.8.1.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":47795.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"kuai-gong\",135,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":820901597.7557056,\"offlineMoneyMade\":0,\"offlineRunningTime\":146888.579,\"onlineExpGained\":1277155606.9022157,\"onlineMoneyMade\":0,\"onlineRunningTime\":229709.0100042676,\"pid\":851,\"ramUsage\":5.8,\"server\":\"pserver-1649423493616\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"b-and-a\",161,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":851124482.967146,\"offlineMoneyMade\":0,\"offlineRunningTime\":146888.61200000002,\"onlineExpGained\":1318689646.981021,\"onlineMoneyMade\":0,\"onlineRunningTime\":228676.6100042108,\"pid\":852,\"ramUsage\":5.8,\"server\":\"pserver-1649423493616\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///cf2c2c9e-94ab-4d32-8e98-a2f7eabe02f4\",\"moduleSequenceNumber\":190473}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"zb-institute\",108,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":478517443.1899952,\"offlineMoneyMade\":0,\"offlineRunningTime\":146888.64599999998,\"onlineExpGained\":724760164.1561998,\"onlineMoneyMade\":0,\"onlineRunningTime\":223388.01000391346,\"pid\":853,\"ramUsage\":5.8,\"server\":\"pserver-1649423493616\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///cf2c2c9e-94ab-4d32-8e98-a2f7eabe02f4\",\"moduleSequenceNumber\":190473}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"alpha-ent\",28,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":108095114.63456193,\"offlineMoneyMade\":0,\"offlineRunningTime\":146888.707,\"onlineExpGained\":162963842.17602885,\"onlineMoneyMade\":195819272020848,\"onlineRunningTime\":222231.21000384592,\"pid\":854,\"ramUsage\":5.8,\"server\":\"pserver-1649423493616\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///cf2c2c9e-94ab-4d32-8e98-a2f7eabe02f4\",\"moduleSequenceNumber\":190473}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"galactic-cyber\",85,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":317952950.95067996,\"offlineMoneyMade\":0,\"offlineRunningTime\":146888.774,\"onlineExpGained\":476364680.20399034,\"onlineMoneyMade\":0,\"onlineRunningTime\":220988.61000377344,\"pid\":855,\"ramUsage\":5.8,\"server\":\"pserver-1649423493616\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///cf2c2c9e-94ab-4d32-8e98-a2f7eabe02f4\",\"moduleSequenceNumber\":190473}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649814997228],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":275.80999999999284,\"pid\":526135,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2f426cfe-6448-4167-87b7-efed2d67ad9e\",\"moduleSequenceNumber\":1873}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815084320],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":188.60999999999788,\"pid\":527084,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815109733],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":163.20999999999933,\"pid\":527375,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2f426cfe-6448-4167-87b7-efed2d67ad9e\",\"moduleSequenceNumber\":1873}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815162768],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.21000000000102,\"pid\":527992,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815163214],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":109.61000000000101,\"pid\":527997,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815165317],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.61000000000098,\"pid\":528014,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815167662],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":105.21000000000095,\"pid\":528039,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815169858],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":103.01000000000091,\"pid\":528088,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815169976],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":103.01000000000091,\"pid\":528089,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815173426],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":99.41000000000086,\"pid\":528112,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":2088,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2f426cfe-6448-4167-87b7-efed2d67ad9e\",\"moduleSequenceNumber\":1873}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815183330],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.61000000000072,\"pid\":528222,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815183348],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.61000000000072,\"pid\":528223,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":2005,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2f426cfe-6448-4167-87b7-efed2d67ad9e\",\"moduleSequenceNumber\":1873}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815186447],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.41000000000068,\"pid\":528281,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815192872],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.21000000000059,\"pid\":528328,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815195057],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.81000000000056,\"pid\":528356,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815195394],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.61000000000055,\"pid\":528380,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815195412],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.41000000000055,\"pid\":528381,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815195427],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.41000000000055,\"pid\":528382,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":2485,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2f426cfe-6448-4167-87b7-efed2d67ad9e\",\"moduleSequenceNumber\":1873}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815203171],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.81000000000043,\"pid\":528448,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":1830,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2f426cfe-6448-4167-87b7-efed2d67ad9e\",\"moduleSequenceNumber\":1873}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815214182],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.81000000000029,\"pid\":528606,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815214891],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.010000000000275,\"pid\":528608,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815215014],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.81000000000027,\"pid\":528609,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815215979],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.01000000000026,\"pid\":528611,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2f426cfe-6448-4167-87b7-efed2d67ad9e\",\"moduleSequenceNumber\":1873}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815222219],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000017,\"pid\":528675,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815222350],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000017,\"pid\":528686,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815222434],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000017,\"pid\":528693,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815222533],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000017,\"pid\":528701,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815223194],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.81000000000016,\"pid\":528710,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815223898],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.01000000000015,\"pid\":528712,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815224021],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.810000000000144,\"pid\":528713,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815228930],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.010000000000076,\"pid\":528744,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815230668],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.21000000000006,\"pid\":528766,\"ramUsage\":1.8,\"server\":\"pserver-1649423493616\",\"threads\":41,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///0f751fc6-42cd-4f87-b19f-afb6983ca8c9\",\"moduleSequenceNumber\":1849}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815231513],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":528802,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815232114],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.81000000000004,\"pid\":528812,\"ramUsage\":1.8,\"server\":\"pserver-1649423493616\",\"threads\":40,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///0f751fc6-42cd-4f87-b19f-afb6983ca8c9\",\"moduleSequenceNumber\":1849}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815234839],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.01,\"pid\":528824,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815236480],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.409999999999975,\"pid\":528838,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815236605],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.409999999999975,\"pid\":528840,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":2088,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2f426cfe-6448-4167-87b7-efed2d67ad9e\",\"moduleSequenceNumber\":1873}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815239634],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.209999999999944,\"pid\":528869,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":1649,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2f426cfe-6448-4167-87b7-efed2d67ad9e\",\"moduleSequenceNumber\":1873}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815246247],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.809999999999942,\"pid\":528947,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815247868],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.009999999999952,\"pid\":528960,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2f426cfe-6448-4167-87b7-efed2d67ad9e\",\"moduleSequenceNumber\":1873}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815267541],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":529207,\"ramUsage\":1.8,\"server\":\"pserver-1649423493616\",\"threads\":82,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///0f751fc6-42cd-4f87-b19f-afb6983ca8c9\",\"moduleSequenceNumber\":1849}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815267552],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":529208,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815267683],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529217,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1649815267751],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529222,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":400,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2f426cfe-6448-4167-87b7-efed2d67ad9e\",\"moduleSequenceNumber\":1873}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815272708],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":529249,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815272884],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":529252,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815272909],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":529255,\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2f426cfe-6448-4167-87b7-efed2d67ad9e\",\"moduleSequenceNumber\":1873}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///18b972d0-049d-4c3e-92d9-daa4994098ab\",\"moduleSequenceNumber\":1874}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"moduleSequenceNumber\":1874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2f426cfe-6448-4167-87b7-efed2d67ad9e\",\"moduleSequenceNumber\":1873}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423493616\",\"moduleSequenceNumber\":1873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///0f751fc6-42cd-4f87-b19f-afb6983ca8c9\",\"moduleSequenceNumber\":1849}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423493616\",\"moduleSequenceNumber\":1849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///a62e937e-8c2d-4271-831d-0fa9ad8baf54\",\"moduleSequenceNumber\":1810}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423493616\",\"moduleSequenceNumber\":1810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///dec7f5e2-df63-4613-b249-2f5d82ced67a\",\"moduleSequenceNumber\":1815}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423493616\",\"moduleSequenceNumber\":1815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423568058\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423568058\",\"httpPortOpen\":false,\"ip\":\"75.1.0.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":44963.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"rho-construction\",400,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1152273846.8964193,\"offlineMoneyMade\":0,\"offlineRunningTime\":146889.786,\"onlineExpGained\":1769391827.1959426,\"onlineMoneyMade\":0,\"onlineRunningTime\":226362.61000408328,\"pid\":916,\"ramUsage\":5.8,\"server\":\"pserver-1649423568058\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///e91f5de2-5a64-4f50-bfb3-bcfb46d681ed\",\"moduleSequenceNumber\":169663}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"zeus-med\",128,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":505181971.9658076,\"offlineMoneyMade\":0,\"offlineRunningTime\":146889.828,\"onlineExpGained\":766506263.562881,\"onlineMoneyMade\":10764352348438.57,\"onlineRunningTime\":222573.81000386592,\"pid\":917,\"ramUsage\":5.8,\"server\":\"pserver-1649423568058\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///e91f5de2-5a64-4f50-bfb3-bcfb46d681ed\",\"moduleSequenceNumber\":169663}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"applied-energetics\",137,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":653861619.9097505,\"offlineMoneyMade\":0,\"offlineRunningTime\":146889.863,\"onlineExpGained\":961381499.9131528,\"onlineMoneyMade\":0,\"onlineRunningTime\":216885.61000353543,\"pid\":918,\"ramUsage\":5.8,\"server\":\"pserver-1649423568058\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///e91f5de2-5a64-4f50-bfb3-bcfb46d681ed\",\"moduleSequenceNumber\":169663}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"applied-energetics\",47,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":160133003.81388134,\"offlineMoneyMade\":0,\"offlineRunningTime\":146889.902,\"onlineExpGained\":235510675.37944272,\"onlineMoneyMade\":5071468309915.403,\"onlineRunningTime\":216729.61000352638,\"pid\":919,\"ramUsage\":5.8,\"server\":\"pserver-1649423568058\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///e91f5de2-5a64-4f50-bfb3-bcfb46d681ed\",\"moduleSequenceNumber\":169663}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815002474],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":270.4099999999932,\"pid\":526201,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815097799],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":175.20999999999864,\"pid\":527256,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815136755],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.21000000000083,\"pid\":527687,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///48f790de-e4cc-44c5-90d5-22d4e8d1760b\",\"moduleSequenceNumber\":1924}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815141175],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":131.81000000000108,\"pid\":527743,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815141273],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":131.6100000000011,\"pid\":527753,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815141335],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":131.6100000000011,\"pid\":527756,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815159427],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":113.41000000000105,\"pid\":527970,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815174323],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.61000000000085,\"pid\":528118,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815174338],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.61000000000085,\"pid\":528119,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":2005,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///48f790de-e4cc-44c5-90d5-22d4e8d1760b\",\"moduleSequenceNumber\":1924}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815183356],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.61000000000072,\"pid\":528224,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815185677],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.21000000000069,\"pid\":528247,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815186091],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.81000000000068,\"pid\":528256,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815186461],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.41000000000068,\"pid\":528282,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815194164],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.81000000000057,\"pid\":528344,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":1830,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///48f790de-e4cc-44c5-90d5-22d4e8d1760b\",\"moduleSequenceNumber\":1924}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815195250],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.61000000000055,\"pid\":528368,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815195313],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.61000000000055,\"pid\":528374,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815195468],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.41000000000055,\"pid\":528386,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815195569],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.41000000000055,\"pid\":528395,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815198809],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.01000000000049,\"pid\":528408,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815200072],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.81000000000047,\"pid\":528417,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815211590],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.41000000000032,\"pid\":528541,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815211692],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.21000000000032,\"pid\":528542,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":1550,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///48f790de-e4cc-44c5-90d5-22d4e8d1760b\",\"moduleSequenceNumber\":1924}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815213070],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.8100000000003,\"pid\":528564,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815213213],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.6100000000003,\"pid\":528571,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815213268],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.6100000000003,\"pid\":528576,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815213300],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.6100000000003,\"pid\":528579,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815213332],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.6100000000003,\"pid\":528582,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815213427],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.410000000000295,\"pid\":528589,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815213523],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.410000000000295,\"pid\":528597,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815214762],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.21000000000028,\"pid\":528607,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":1985,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///48f790de-e4cc-44c5-90d5-22d4e8d1760b\",\"moduleSequenceNumber\":1924}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815218468],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.410000000000224,\"pid\":528630,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815230194],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":528760,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":1830,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///48f790de-e4cc-44c5-90d5-22d4e8d1760b\",\"moduleSequenceNumber\":1924}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815245226],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.60999999999994,\"pid\":528937,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815245495],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.40999999999994,\"pid\":528942,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815246081],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.809999999999942,\"pid\":528946,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":1947,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///48f790de-e4cc-44c5-90d5-22d4e8d1760b\",\"moduleSequenceNumber\":1924}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815253219],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.60999999999997,\"pid\":529033,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815253246],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.60999999999997,\"pid\":529034,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815253268],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.60999999999997,\"pid\":529035,\"ramUsage\":1.8,\"server\":\"pserver-1649423568058\",\"threads\":140,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///1df24e3d-a5a2-4d54-b6f0-5c85d7f546c0\",\"moduleSequenceNumber\":1923}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1649815253285],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.60999999999997,\"pid\":529036,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":32,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815253295],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.60999999999997,\"pid\":529037,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815253310],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.60999999999997,\"pid\":529038,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":1688,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///48f790de-e4cc-44c5-90d5-22d4e8d1760b\",\"moduleSequenceNumber\":1924}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815254719],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.209999999999972,\"pid\":529048,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":2088,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///48f790de-e4cc-44c5-90d5-22d4e8d1760b\",\"moduleSequenceNumber\":1924}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1649815258289],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999983,\"pid\":529089,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":32,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815258294],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999983,\"pid\":529090,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815258574],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529108,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815258761],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999983,\"pid\":529123,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815264884],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.010000000000003,\"pid\":529159,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":2005,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///48f790de-e4cc-44c5-90d5-22d4e8d1760b\",\"moduleSequenceNumber\":1924}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815267649],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529215,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":133,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815272878],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":529251,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815272902],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":529254,\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0e5770be-78ea-4617-925f-e75f82eabcd6\",\"moduleSequenceNumber\":1920}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"moduleSequenceNumber\":1920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///48f790de-e4cc-44c5-90d5-22d4e8d1760b\",\"moduleSequenceNumber\":1924}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423568058\",\"moduleSequenceNumber\":1924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///1df24e3d-a5a2-4d54-b6f0-5c85d7f546c0\",\"moduleSequenceNumber\":1923}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423568058\",\"moduleSequenceNumber\":1923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///34edab8c-73ed-4495-829e-40d97400a061\",\"moduleSequenceNumber\":1879}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423568058\",\"moduleSequenceNumber\":1879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///58d850bb-fdfb-4570-ad77-f1066cbd09b5\",\"moduleSequenceNumber\":1875}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423568058\",\"moduleSequenceNumber\":1875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423595918\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423595918\",\"httpPortOpen\":false,\"ip\":\"91.8.0.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":44984.44999999999,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"4sigma\",1355,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5535207738.131268,\"offlineMoneyMade\":0,\"offlineRunningTime\":146890.965,\"onlineExpGained\":8732790183.786552,\"onlineMoneyMade\":0,\"onlineRunningTime\":232709.61000443122,\"pid\":965,\"ramUsage\":5.8,\"server\":\"pserver-1649423595918\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4e5fec45-5713-4b32-ae62-df78a301564c\",\"moduleSequenceNumber\":167062}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"clarkinc\",169,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":689783450.7630279,\"offlineMoneyMade\":0,\"offlineRunningTime\":146891.00400000002,\"onlineExpGained\":1084739795.2897365,\"onlineMoneyMade\":0,\"onlineRunningTime\":232017.21000439356,\"pid\":966,\"ramUsage\":5.8,\"server\":\"pserver-1649423595918\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4e5fec45-5713-4b32-ae62-df78a301564c\",\"moduleSequenceNumber\":167062}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"clarkinc\",40,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":126829305.18478951,\"offlineMoneyMade\":0,\"offlineRunningTime\":146891.041,\"onlineExpGained\":198092360.6179567,\"onlineMoneyMade\":244320641179723.12,\"onlineRunningTime\":231760.8100043798,\"pid\":967,\"ramUsage\":5.8,\"server\":\"pserver-1649423595918\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4e5fec45-5713-4b32-ae62-df78a301564c\",\"moduleSequenceNumber\":167062}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"zb-def\",30,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":113938781.19234052,\"offlineMoneyMade\":0,\"offlineRunningTime\":146891.102,\"onlineExpGained\":169240462.980877,\"onlineMoneyMade\":97871737633413.64,\"onlineRunningTime\":225177.81000401778,\"pid\":969,\"ramUsage\":5.8,\"server\":\"pserver-1649423595918\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4e5fec45-5713-4b32-ae62-df78a301564c\",\"moduleSequenceNumber\":167062}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"unitalife\",146,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":755321709.7396355,\"offlineMoneyMade\":0,\"offlineRunningTime\":146891.13,\"onlineExpGained\":1121983581.6861687,\"onlineMoneyMade\":0,\"onlineRunningTime\":219171.81000366746,\"pid\":970,\"ramUsage\":5.8,\"server\":\"pserver-1649423595918\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4e5fec45-5713-4b32-ae62-df78a301564c\",\"moduleSequenceNumber\":167062}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"powerhouse-fitness\",1985,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7992920711.906114,\"offlineMoneyMade\":0,\"offlineRunningTime\":146891.167,\"onlineExpGained\":11777453211.673006,\"onlineMoneyMade\":0,\"onlineRunningTime\":217338.01000356153,\"pid\":971,\"ramUsage\":5.8,\"server\":\"pserver-1649423595918\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4e5fec45-5713-4b32-ae62-df78a301564c\",\"moduleSequenceNumber\":167062}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815026840],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.2099999999946,\"pid\":526502,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815093067],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.80999999999838,\"pid\":527181,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815112167],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":160.80999999999946,\"pid\":527400,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7fb877c5-8889-4a0d-9654-2d93a563ffc3\",\"moduleSequenceNumber\":1990}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815137301],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":135.61000000000087,\"pid\":527694,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815139011],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":133.81000000000097,\"pid\":527708,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815139096],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":133.81000000000097,\"pid\":527709,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815149460],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":123.41000000000119,\"pid\":527826,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815176148],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.81000000000083,\"pid\":528136,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":1830,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7fb877c5-8889-4a0d-9654-2d93a563ffc3\",\"moduleSequenceNumber\":1990}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815213106],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.8100000000003,\"pid\":528567,\"ramUsage\":1.8,\"server\":\"pserver-1649423595918\",\"threads\":1521,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a84968b7-6f65-42d8-99a0-040b02fc6ba1\",\"moduleSequenceNumber\":1997}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815218086],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.81000000000023,\"pid\":528625,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815219846],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.010000000000204,\"pid\":528639,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":2005,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7fb877c5-8889-4a0d-9654-2d93a563ffc3\",\"moduleSequenceNumber\":1990}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815222298],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000017,\"pid\":528682,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815222395],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000017,\"pid\":528690,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815222490],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000017,\"pid\":528697,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815229512],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.41000000000007,\"pid\":528748,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815229604],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.41000000000007,\"pid\":528749,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815229707],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.210000000000065,\"pid\":528750,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":1550,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7fb877c5-8889-4a0d-9654-2d93a563ffc3\",\"moduleSequenceNumber\":1990}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815230554],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":528762,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815230563],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000006,\"pid\":528763,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":2101,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7fb877c5-8889-4a0d-9654-2d93a563ffc3\",\"moduleSequenceNumber\":1990}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815239139],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.80999999999995,\"pid\":528862,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":1711,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7fb877c5-8889-4a0d-9654-2d93a563ffc3\",\"moduleSequenceNumber\":1990}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815249345],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999957,\"pid\":528991,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815249374],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999957,\"pid\":528994,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815249381],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999957,\"pid\":528995,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815249442],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999958,\"pid\":528998,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815255984],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.009999999999977,\"pid\":529056,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815257194],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.80999999999998,\"pid\":529070,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":1711,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7fb877c5-8889-4a0d-9654-2d93a563ffc3\",\"moduleSequenceNumber\":1990}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815257585],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.40999999999998,\"pid\":529074,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815257603],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.40999999999998,\"pid\":529075,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":2101,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7fb877c5-8889-4a0d-9654-2d93a563ffc3\",\"moduleSequenceNumber\":1990}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815262046],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.009999999999994,\"pid\":529133,\"ramUsage\":1.8,\"server\":\"pserver-1649423595918\",\"threads\":29,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a84968b7-6f65-42d8-99a0-040b02fc6ba1\",\"moduleSequenceNumber\":1997}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815262284],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999994,\"pid\":529134,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":1933,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7fb877c5-8889-4a0d-9654-2d93a563ffc3\",\"moduleSequenceNumber\":1990}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815263714],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.209999999999999,\"pid\":529151,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7fb877c5-8889-4a0d-9654-2d93a563ffc3\",\"moduleSequenceNumber\":1990}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815266217],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000003,\"pid\":529174,\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"threads\":1711,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7fb877c5-8889-4a0d-9654-2d93a563ffc3\",\"moduleSequenceNumber\":1990}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e56aaba-e33c-49ad-b1f9-0fc0b48c91d7\",\"moduleSequenceNumber\":1996}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"moduleSequenceNumber\":1996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7fb877c5-8889-4a0d-9654-2d93a563ffc3\",\"moduleSequenceNumber\":1990}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423595918\",\"moduleSequenceNumber\":1990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a84968b7-6f65-42d8-99a0-040b02fc6ba1\",\"moduleSequenceNumber\":1997}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423595918\",\"moduleSequenceNumber\":1997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///32dc2ea7-dfeb-4975-bead-1d7bb95ecfc1\",\"moduleSequenceNumber\":1931}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423595918\",\"moduleSequenceNumber\":1931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///b4165cfb-9bf3-4394-873c-389ca3fe7856\",\"moduleSequenceNumber\":1928}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423595918\",\"moduleSequenceNumber\":1928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423540769\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423540769\",\"httpPortOpen\":false,\"ip\":\"65.3.4.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":46844.75000000002,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"megacorp\",135,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":845288079.088245,\"offlineMoneyMade\":0,\"offlineRunningTime\":146892.095,\"onlineExpGained\":1338654022.5317237,\"onlineMoneyMade\":0,\"onlineRunningTime\":233718.4100044861,\"pid\":1038,\"ramUsage\":5.8,\"server\":\"pserver-1649423540769\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"nwo\",168,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1051891899.4303018,\"offlineMoneyMade\":0,\"offlineRunningTime\":146892.131,\"onlineExpGained\":1646650839.7585065,\"onlineMoneyMade\":0,\"onlineRunningTime\":230974.6100043376,\"pid\":1039,\"ramUsage\":5.8,\"server\":\"pserver-1649423540769\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///24532894-88c3-4750-8524-ebe2381e92e9\",\"moduleSequenceNumber\":162997}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"zb-def\",106,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":402581674.8870547,\"offlineMoneyMade\":0,\"offlineRunningTime\":146892.18099999998,\"onlineExpGained\":614799236.2327881,\"onlineMoneyMade\":0,\"onlineRunningTime\":225232.8100040208,\"pid\":1041,\"ramUsage\":5.8,\"server\":\"pserver-1649423540769\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///24532894-88c3-4750-8524-ebe2381e92e9\",\"moduleSequenceNumber\":162997}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815074024],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":198.8099999999973,\"pid\":526980,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815104598],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":168.40999999999903,\"pid\":527342,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":2485,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8cb1fd5f-1a93-4884-8eb0-cc2efb3b8f52\",\"moduleSequenceNumber\":2065}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815122973],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":150.01000000000008,\"pid\":527522,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815150472],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.41000000000118,\"pid\":527872,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815157111],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":115.81000000000108,\"pid\":527917,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815159004],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":114.01000000000106,\"pid\":527938,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815159022],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":113.81000000000105,\"pid\":527940,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815159052],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":113.81000000000105,\"pid\":527942,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815159067],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":113.81000000000105,\"pid\":527944,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815164324],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":108.610000000001,\"pid\":528006,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815164400],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":108.610000000001,\"pid\":528007,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8cb1fd5f-1a93-4884-8eb0-cc2efb3b8f52\",\"moduleSequenceNumber\":2065}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815176479],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.41000000000082,\"pid\":528138,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815176491],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.41000000000082,\"pid\":528139,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":2101,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8cb1fd5f-1a93-4884-8eb0-cc2efb3b8f52\",\"moduleSequenceNumber\":2065}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815181163],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.81000000000076,\"pid\":528201,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815181227],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.61000000000075,\"pid\":528205,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815181790],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.21000000000075,\"pid\":528207,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8cb1fd5f-1a93-4884-8eb0-cc2efb3b8f52\",\"moduleSequenceNumber\":2065}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815182754],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.21000000000073,\"pid\":528219,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815184205],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.81000000000071,\"pid\":528231,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815184248],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.61000000000071,\"pid\":528232,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8cb1fd5f-1a93-4884-8eb0-cc2efb3b8f52\",\"moduleSequenceNumber\":2065}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815186298],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.61000000000068,\"pid\":528270,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815186322],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.61000000000068,\"pid\":528272,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815186341],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.61000000000068,\"pid\":528273,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815186361],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.61000000000068,\"pid\":528274,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815186371],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.61000000000068,\"pid\":528275,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815196878],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.01000000000053,\"pid\":528400,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815197000],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.01000000000053,\"pid\":528401,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815203188],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.81000000000043,\"pid\":528449,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":1346,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8cb1fd5f-1a93-4884-8eb0-cc2efb3b8f52\",\"moduleSequenceNumber\":2065}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815210146],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.81000000000034,\"pid\":528531,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815210642],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.210000000000335,\"pid\":528533,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815210839],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.01000000000033,\"pid\":528535,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":2005,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8cb1fd5f-1a93-4884-8eb0-cc2efb3b8f52\",\"moduleSequenceNumber\":2065}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815238777],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.20999999999996,\"pid\":528855,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815239216],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.60999999999995,\"pid\":528865,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":1346,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8cb1fd5f-1a93-4884-8eb0-cc2efb3b8f52\",\"moduleSequenceNumber\":2065}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815240219],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.609999999999935,\"pid\":528882,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815240234],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.609999999999935,\"pid\":528883,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815240245],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.609999999999935,\"pid\":528884,\"ramUsage\":1.8,\"server\":\"pserver-1649423540769\",\"threads\":33,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///581e7a66-05a1-46d3-8f5b-88f8187082f3\",\"moduleSequenceNumber\":2070}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815240257],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.609999999999935,\"pid\":528885,\"ramUsage\":1.8,\"server\":\"pserver-1649423540769\",\"threads\":376,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///581e7a66-05a1-46d3-8f5b-88f8187082f3\",\"moduleSequenceNumber\":2070}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815240369],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.609999999999935,\"pid\":528893,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":155,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815240441],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999993,\"pid\":528900,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815241126],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.809999999999924,\"pid\":528916,\"ramUsage\":1.8,\"server\":\"pserver-1649423540769\",\"threads\":40,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///581e7a66-05a1-46d3-8f5b-88f8187082f3\",\"moduleSequenceNumber\":2070}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815241211],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.609999999999925,\"pid\":528918,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815243783],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.209999999999933,\"pid\":528926,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":1933,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8cb1fd5f-1a93-4884-8eb0-cc2efb3b8f52\",\"moduleSequenceNumber\":2065}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815243845],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.009999999999934,\"pid\":528928,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815244212],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.609999999999935,\"pid\":528929,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815244239],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.609999999999935,\"pid\":528930,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815244250],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.609999999999935,\"pid\":528931,\"ramUsage\":1.8,\"server\":\"pserver-1649423540769\",\"threads\":140,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///581e7a66-05a1-46d3-8f5b-88f8187082f3\",\"moduleSequenceNumber\":2070}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815244304],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.609999999999935,\"pid\":528934,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":1688,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8cb1fd5f-1a93-4884-8eb0-cc2efb3b8f52\",\"moduleSequenceNumber\":2065}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815255878],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.009999999999977,\"pid\":529055,\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"threads\":2005,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8cb1fd5f-1a93-4884-8eb0-cc2efb3b8f52\",\"moduleSequenceNumber\":2065}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ac96b705-5b78-4004-884f-d8bae9b13973\",\"moduleSequenceNumber\":2069}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"moduleSequenceNumber\":2069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8cb1fd5f-1a93-4884-8eb0-cc2efb3b8f52\",\"moduleSequenceNumber\":2065}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423540769\",\"moduleSequenceNumber\":2065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///581e7a66-05a1-46d3-8f5b-88f8187082f3\",\"moduleSequenceNumber\":2070}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423540769\",\"moduleSequenceNumber\":2070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///a23f9baa-5f76-49ad-a28e-c5c889fdb254\",\"moduleSequenceNumber\":2001}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423540769\",\"moduleSequenceNumber\":2001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///0b9b5492-a20d-487a-a641-2e6f1c8ca9e6\",\"moduleSequenceNumber\":2000}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423540769\",\"moduleSequenceNumber\":2000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423549175\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423549175\",\"httpPortOpen\":false,\"ip\":\"68.5.6.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":44976.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"omnitek\",1687,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10475645485.01986,\"offlineMoneyMade\":0,\"offlineRunningTime\":146893.071,\"onlineExpGained\":16081837417.161798,\"onlineMoneyMade\":0,\"onlineRunningTime\":226490.0100040904,\"pid\":1112,\"ramUsage\":5.8,\"server\":\"pserver-1649423549175\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///8e84eaa1-4683-44aa-a0c1-50efc67866af\",\"moduleSequenceNumber\":164107}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"deltaone\",2726,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":14735008204.49692,\"offlineMoneyMade\":0,\"offlineRunningTime\":146893.11000000002,\"onlineExpGained\":22417134880.124447,\"onlineMoneyMade\":0,\"onlineRunningTime\":224475.01000397705,\"pid\":1113,\"ramUsage\":5.8,\"server\":\"pserver-1649423549175\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///8e84eaa1-4683-44aa-a0c1-50efc67866af\",\"moduleSequenceNumber\":164107}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"galactic-cyber\",29,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":108598918.7558766,\"offlineMoneyMade\":0,\"offlineRunningTime\":146893.14500000002,\"onlineExpGained\":162682106.77017516,\"onlineMoneyMade\":229671243283279,\"onlineRunningTime\":220858.41000376584,\"pid\":1114,\"ramUsage\":5.8,\"server\":\"pserver-1649423549175\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///8e84eaa1-4683-44aa-a0c1-50efc67866af\",\"moduleSequenceNumber\":164107}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"lexo-corp\",1933,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8120522362.270314,\"offlineMoneyMade\":0,\"offlineRunningTime\":146893.187,\"onlineExpGained\":12136760882.570717,\"onlineMoneyMade\":0,\"onlineRunningTime\":220448.81000374194,\"pid\":1115,\"ramUsage\":5.8,\"server\":\"pserver-1649423549175\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///8e84eaa1-4683-44aa-a0c1-50efc67866af\",\"moduleSequenceNumber\":164107}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"lexo-corp\",34,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":108664842.15814745,\"offlineMoneyMade\":0,\"offlineRunningTime\":146893.21600000001,\"onlineExpGained\":163701018.16972739,\"onlineMoneyMade\":11888842950969.871,\"onlineRunningTime\":220410.61000373974,\"pid\":1116,\"ramUsage\":5.8,\"server\":\"pserver-1649423549175\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///8e84eaa1-4683-44aa-a0c1-50efc67866af\",\"moduleSequenceNumber\":164107}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"solaris\",136,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":625858109.6743975,\"offlineMoneyMade\":0,\"offlineRunningTime\":146893.261,\"onlineExpGained\":927847345.6832354,\"onlineMoneyMade\":0,\"onlineRunningTime\":218715.21000364085,\"pid\":1117,\"ramUsage\":5.8,\"server\":\"pserver-1649423549175\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///8e84eaa1-4683-44aa-a0c1-50efc67866af\",\"moduleSequenceNumber\":164107}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"aerocorp\",199,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1040473136.6338049,\"offlineMoneyMade\":0,\"offlineRunningTime\":146893.294,\"onlineExpGained\":1537052789.158337,\"onlineMoneyMade\":0,\"onlineRunningTime\":218060.8100036031,\"pid\":1118,\"ramUsage\":5.8,\"server\":\"pserver-1649423549175\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///8e84eaa1-4683-44aa-a0c1-50efc67866af\",\"moduleSequenceNumber\":164107}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815055885],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":217.0099999999963,\"pid\":526772,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815064064],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":208.80999999999673,\"pid\":526867,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815085846],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.00999999999797,\"pid\":527130,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815111235],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":161.60999999999942,\"pid\":527390,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815131984],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":141.0100000000006,\"pid\":527626,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815137702],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":135.2100000000009,\"pid\":527699,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815138293],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":134.61000000000092,\"pid\":527702,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815140991],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":132.01000000000107,\"pid\":527730,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815147300],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.61000000000122,\"pid\":527806,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815148220],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":124.61000000000121,\"pid\":527816,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8c977f13-bcfc-40e7-9c43-5956664d1c63\",\"moduleSequenceNumber\":2124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815158128],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":114.81000000000107,\"pid\":527928,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":1830,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8c977f13-bcfc-40e7-9c43-5956664d1c63\",\"moduleSequenceNumber\":2124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815160142],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":112.81000000000104,\"pid\":527982,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815160852],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":112.01000000000104,\"pid\":527984,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815160968],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":112.01000000000104,\"pid\":527985,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815173050],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":99.81000000000087,\"pid\":528105,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815177231],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.61000000000081,\"pid\":528160,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815177314],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.61000000000081,\"pid\":528168,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815178157],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.8100000000008,\"pid\":528190,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815178729],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.21000000000079,\"pid\":528191,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":1985,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8c977f13-bcfc-40e7-9c43-5956664d1c63\",\"moduleSequenceNumber\":2124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815186241],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.61000000000068,\"pid\":528264,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815186562],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.41000000000068,\"pid\":528291,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815211401],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.610000000000326,\"pid\":528539,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":155,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815212055],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.810000000000315,\"pid\":528546,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":1425,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8c977f13-bcfc-40e7-9c43-5956664d1c63\",\"moduleSequenceNumber\":2124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815213444],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.410000000000295,\"pid\":528590,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":2485,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8c977f13-bcfc-40e7-9c43-5956664d1c63\",\"moduleSequenceNumber\":2124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815227597],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.410000000000096,\"pid\":528736,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":2088,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8c977f13-bcfc-40e7-9c43-5956664d1c63\",\"moduleSequenceNumber\":2124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815231319],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":528787,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815231347],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":528789,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":155,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815231503],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":528801,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815231597],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":528810,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":1355,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8c977f13-bcfc-40e7-9c43-5956664d1c63\",\"moduleSequenceNumber\":2124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815235835],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.009999999999984,\"pid\":528831,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8c977f13-bcfc-40e7-9c43-5956664d1c63\",\"moduleSequenceNumber\":2124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815237069],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.80999999999997,\"pid\":528842,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":1947,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8c977f13-bcfc-40e7-9c43-5956664d1c63\",\"moduleSequenceNumber\":2124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815246977],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.00999999999995,\"pid\":528952,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815247428],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.40999999999995,\"pid\":528955,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":155,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815247784],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.20999999999995,\"pid\":528959,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815248113],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999953,\"pid\":528964,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815248175],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999953,\"pid\":528966,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":1711,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8c977f13-bcfc-40e7-9c43-5956664d1c63\",\"moduleSequenceNumber\":2124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815267341],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000002,\"pid\":529196,\"ramUsage\":1.8,\"server\":\"pserver-1649423549175\",\"threads\":33,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///96eb0a02-38d7-456c-865e-02e5e6d81bbf\",\"moduleSequenceNumber\":2117}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815267385],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000002,\"pid\":529197,\"ramUsage\":1.8,\"server\":\"pserver-1649423549175\",\"threads\":376,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///96eb0a02-38d7-456c-865e-02e5e6d81bbf\",\"moduleSequenceNumber\":2117}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815267393],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000002,\"pid\":529198,\"ramUsage\":1.8,\"server\":\"pserver-1649423549175\",\"threads\":42,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///96eb0a02-38d7-456c-865e-02e5e6d81bbf\",\"moduleSequenceNumber\":2117}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815267415],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":529199,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815267427],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":529200,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815267433],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":529201,\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"threads\":1659,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8c977f13-bcfc-40e7-9c43-5956664d1c63\",\"moduleSequenceNumber\":2124}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4eb47ef9-2a08-4a4a-baf8-02b5dd03ad72\",\"moduleSequenceNumber\":2123}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"moduleSequenceNumber\":2123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8c977f13-bcfc-40e7-9c43-5956664d1c63\",\"moduleSequenceNumber\":2124}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423549175\",\"moduleSequenceNumber\":2124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///96eb0a02-38d7-456c-865e-02e5e6d81bbf\",\"moduleSequenceNumber\":2117}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423549175\",\"moduleSequenceNumber\":2117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///268c2bb9-fbff-46f9-b12f-a9d4cf1a0712\",\"moduleSequenceNumber\":2078}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423549175\",\"moduleSequenceNumber\":2078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///d2eea5bb-bc5c-43cd-8312-30a7c645225e\",\"moduleSequenceNumber\":2071}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423549175\",\"moduleSequenceNumber\":2071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423530054\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423530054\",\"httpPortOpen\":false,\"ip\":\"96.9.6.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":48680.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"4sigma\",109,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":445005879.83745915,\"offlineMoneyMade\":0,\"offlineRunningTime\":146894.109,\"onlineExpGained\":702021806.110151,\"onlineMoneyMade\":0,\"onlineRunningTime\":232739.01000443278,\"pid\":1165,\"ramUsage\":5.8,\"server\":\"pserver-1649423530054\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"blade\",140,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":541335027.1329217,\"offlineMoneyMade\":0,\"offlineRunningTime\":146894.165,\"onlineExpGained\":835438360.3676685,\"onlineMoneyMade\":81154436793649.44,\"onlineRunningTime\":227380.41000413947,\"pid\":1167,\"ramUsage\":5.8,\"server\":\"pserver-1649423530054\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///dcf9d5ea-26cd-47fc-bcc2-f957b445c066\",\"moduleSequenceNumber\":168915}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"rho-construction\",32,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":92173604.65007019,\"offlineMoneyMade\":0,\"offlineRunningTime\":146894.20500000002,\"onlineExpGained\":141528564.00114423,\"onlineMoneyMade\":0,\"onlineRunningTime\":226367.61000408357,\"pid\":1168,\"ramUsage\":5.8,\"server\":\"pserver-1649423530054\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///dcf9d5ea-26cd-47fc-bcc2-f957b445c066\",\"moduleSequenceNumber\":168915}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"fulcrumtech\",132,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":727896425.5005256,\"offlineMoneyMade\":0,\"offlineRunningTime\":146894.234,\"onlineExpGained\":1092668177.1471066,\"onlineMoneyMade\":0,\"onlineRunningTime\":221597.01000380903,\"pid\":1169,\"ramUsage\":5.8,\"server\":\"pserver-1649423530054\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///dcf9d5ea-26cd-47fc-bcc2-f957b445c066\",\"moduleSequenceNumber\":168915}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"solaris\",1688,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7770097356.943038,\"offlineMoneyMade\":0,\"offlineRunningTime\":146894.266,\"onlineExpGained\":11515742233.703777,\"onlineMoneyMade\":0,\"onlineRunningTime\":218613.21000363497,\"pid\":1170,\"ramUsage\":5.8,\"server\":\"pserver-1649423530054\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///dcf9d5ea-26cd-47fc-bcc2-f957b445c066\",\"moduleSequenceNumber\":168915}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815066107],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":206.80999999999682,\"pid\":526921,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815103348],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":169.60999999999896,\"pid\":527306,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815136193],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.8100000000008,\"pid\":527685,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815139213],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":133.61000000000098,\"pid\":527712,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///91674f81-c801-49f3-941a-a7c4fcf583a3\",\"moduleSequenceNumber\":2179}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815146713],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":126.21000000000123,\"pid\":527803,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815147321],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.61000000000122,\"pid\":527808,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815150297],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.61000000000118,\"pid\":527857,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815164418],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":108.41000000000099,\"pid\":528008,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":2088,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///91674f81-c801-49f3-941a-a7c4fcf583a3\",\"moduleSequenceNumber\":2179}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815173725],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":99.21000000000086,\"pid\":528114,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":1947,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///91674f81-c801-49f3-941a-a7c4fcf583a3\",\"moduleSequenceNumber\":2179}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815176578],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.41000000000082,\"pid\":528141,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":1649,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///91674f81-c801-49f3-941a-a7c4fcf583a3\",\"moduleSequenceNumber\":2179}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815181188],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.81000000000076,\"pid\":528202,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815182732],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.21000000000073,\"pid\":528218,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":1947,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///91674f81-c801-49f3-941a-a7c4fcf583a3\",\"moduleSequenceNumber\":2179}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815200430],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.41000000000047,\"pid\":528422,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815200501],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.41000000000047,\"pid\":528423,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///91674f81-c801-49f3-941a-a7c4fcf583a3\",\"moduleSequenceNumber\":2179}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815203539],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.41000000000042,\"pid\":528451,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":2101,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///91674f81-c801-49f3-941a-a7c4fcf583a3\",\"moduleSequenceNumber\":2179}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815213412],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.410000000000295,\"pid\":528588,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815222136],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000017,\"pid\":528672,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815225832],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.01000000000012,\"pid\":528720,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815230090],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":528756,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815236459],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.409999999999975,\"pid\":528836,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815236471],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.409999999999975,\"pid\":528837,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":1055,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///91674f81-c801-49f3-941a-a7c4fcf583a3\",\"moduleSequenceNumber\":2179}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815239100],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.80999999999995,\"pid\":528860,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815239679],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.209999999999944,\"pid\":528870,\"ramUsage\":1.8,\"server\":\"pserver-1649423530054\",\"threads\":41,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6584291f-06e7-4d51-89de-7524e44c9654\",\"moduleSequenceNumber\":2183}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815240056],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.80999999999994,\"pid\":528873,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":133,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815240068],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.80999999999994,\"pid\":528874,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815240139],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.80999999999994,\"pid\":528878,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815240157],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.80999999999994,\"pid\":528879,\"ramUsage\":1.8,\"server\":\"pserver-1649423530054\",\"threads\":1521,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6584291f-06e7-4d51-89de-7524e44c9654\",\"moduleSequenceNumber\":2183}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815240174],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.80999999999994,\"pid\":528880,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815240282],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.609999999999935,\"pid\":528887,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815240324],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.609999999999935,\"pid\":528890,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815240376],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.609999999999935,\"pid\":528894,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815240457],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999993,\"pid\":528901,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815240625],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.20999999999993,\"pid\":528915,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815245272],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.60999999999994,\"pid\":528939,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815245466],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.40999999999994,\"pid\":528940,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815245482],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.40999999999994,\"pid\":528941,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":1055,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///91674f81-c801-49f3-941a-a7c4fcf583a3\",\"moduleSequenceNumber\":2179}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815248579],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.409999999999954,\"pid\":528970,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815257142],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.80999999999998,\"pid\":529069,\"ramUsage\":1.8,\"server\":\"pserver-1649423530054\",\"threads\":64,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6584291f-06e7-4d51-89de-7524e44c9654\",\"moduleSequenceNumber\":2183}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815257217],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.60999999999998,\"pid\":529072,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":1830,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///91674f81-c801-49f3-941a-a7c4fcf583a3\",\"moduleSequenceNumber\":2179}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815267769],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529224,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815270117],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"pid\":529234,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815270144],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"pid\":529235,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///91674f81-c801-49f3-941a-a7c4fcf583a3\",\"moduleSequenceNumber\":2179}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815272949],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":529256,\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"threads\":2088,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///91674f81-c801-49f3-941a-a7c4fcf583a3\",\"moduleSequenceNumber\":2179}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8401e512-29d6-4dd3-9dcf-e1dae916421c\",\"moduleSequenceNumber\":2182}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"moduleSequenceNumber\":2182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///91674f81-c801-49f3-941a-a7c4fcf583a3\",\"moduleSequenceNumber\":2179}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423530054\",\"moduleSequenceNumber\":2179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6584291f-06e7-4d51-89de-7524e44c9654\",\"moduleSequenceNumber\":2183}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423530054\",\"moduleSequenceNumber\":2183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///c99ac5c3-c3d4-401d-9d40-cfc27eb8089d\",\"moduleSequenceNumber\":2130}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423530054\",\"moduleSequenceNumber\":2130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///390f9d74-94c1-49bd-84f0-ebed4ad71aa5\",\"moduleSequenceNumber\":2126}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423530054\",\"moduleSequenceNumber\":2126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423558564\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423558564\",\"httpPortOpen\":false,\"ip\":\"71.3.8.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":48319.25000000001,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"megacorp\",1687,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10570486291.141108,\"offlineMoneyMade\":0,\"offlineRunningTime\":146895.148,\"onlineExpGained\":16738690440.302404,\"onlineMoneyMade\":0,\"onlineRunningTime\":233671.2100044835,\"pid\":1224,\"ramUsage\":5.8,\"server\":\"pserver-1649423558564\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"aerocorp\",69,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":251797189.9812121,\"offlineMoneyMade\":0,\"offlineRunningTime\":146895.19999999998,\"onlineExpGained\":368558631.8506731,\"onlineMoneyMade\":12028064003160.404,\"onlineRunningTime\":217852.81000359112,\"pid\":1226,\"ramUsage\":5.8,\"server\":\"pserver-1649423558564\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///b35544a3-ad9d-47ad-a922-557c1cf69d04\",\"moduleSequenceNumber\":163000}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"powerhouse-fitness\",159,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":639937335.4413546,\"offlineMoneyMade\":0,\"offlineRunningTime\":146895.236,\"onlineExpGained\":943026325.4642771,\"onlineMoneyMade\":0,\"onlineRunningTime\":217449.81000356798,\"pid\":1227,\"ramUsage\":5.8,\"server\":\"pserver-1649423558564\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///b35544a3-ad9d-47ad-a922-557c1cf69d04\",\"moduleSequenceNumber\":163000}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815168212],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.61000000000094,\"pid\":528055,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815168220],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.61000000000094,\"pid\":528056,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815168506],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.41000000000093,\"pid\":528080,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815169149],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":103.81000000000093,\"pid\":528086,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815177435],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.4100000000008,\"pid\":528177,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815183224],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.61000000000072,\"pid\":528221,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815184047],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.81000000000071,\"pid\":528228,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815184134],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.81000000000071,\"pid\":528229,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815187740],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.21000000000066,\"pid\":528295,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":1985,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///440bddf2-8aba-44e8-86af-0301f5bf286e\",\"moduleSequenceNumber\":2254}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815190170],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":82.81000000000063,\"pid\":528305,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815190237],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":82.61000000000062,\"pid\":528309,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815191063],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.81000000000061,\"pid\":528313,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815191202],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.81000000000061,\"pid\":528316,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815191470],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000061,\"pid\":528319,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///440bddf2-8aba-44e8-86af-0301f5bf286e\",\"moduleSequenceNumber\":2254}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815203514],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.41000000000042,\"pid\":528450,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815204107],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.81000000000041,\"pid\":528464,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815204359],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.61000000000041,\"pid\":528481,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815204419],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.41000000000041,\"pid\":528485,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815204554],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.41000000000041,\"pid\":528496,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815208812],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.01000000000036,\"pid\":528519,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///440bddf2-8aba-44e8-86af-0301f5bf286e\",\"moduleSequenceNumber\":2254}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815209513],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.41000000000035,\"pid\":528527,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///440bddf2-8aba-44e8-86af-0301f5bf286e\",\"moduleSequenceNumber\":2254}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815213046],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.8100000000003,\"pid\":528562,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815213113],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.8100000000003,\"pid\":528568,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815213232],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.6100000000003,\"pid\":528573,\"ramUsage\":1.8,\"server\":\"pserver-1649423558564\",\"threads\":376,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a5e2500b-bb7f-4731-bb91-991d29557b94\",\"moduleSequenceNumber\":2253}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815213386],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.6100000000003,\"pid\":528586,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815213490],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.410000000000295,\"pid\":528594,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815215774],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.210000000000264,\"pid\":528610,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815216824],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.01000000000025,\"pid\":528616,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815217219],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.61000000000024,\"pid\":528618,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815217263],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.61000000000024,\"pid\":528621,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815218535],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.410000000000224,\"pid\":528631,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///440bddf2-8aba-44e8-86af-0301f5bf286e\",\"moduleSequenceNumber\":2254}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815228161],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.81000000000009,\"pid\":528739,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815228368],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.610000000000085,\"pid\":528740,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":1708,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///440bddf2-8aba-44e8-86af-0301f5bf286e\",\"moduleSequenceNumber\":2254}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815239562],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.40999999999995,\"pid\":528866,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815239570],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.40999999999995,\"pid\":528867,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":2101,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///440bddf2-8aba-44e8-86af-0301f5bf286e\",\"moduleSequenceNumber\":2254}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815254287],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.60999999999997,\"pid\":529043,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815254503],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.40999999999997,\"pid\":529046,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815255488],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.409999999999975,\"pid\":529052,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":1708,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///440bddf2-8aba-44e8-86af-0301f5bf286e\",\"moduleSequenceNumber\":2254}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815256141],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999977,\"pid\":529058,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":1313,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///440bddf2-8aba-44e8-86af-0301f5bf286e\",\"moduleSequenceNumber\":2254}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815258345],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999983,\"pid\":529093,\"ramUsage\":1.8,\"server\":\"pserver-1649423558564\",\"threads\":376,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a5e2500b-bb7f-4731-bb91-991d29557b94\",\"moduleSequenceNumber\":2253}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815258401],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999983,\"pid\":529096,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815258461],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529098,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815258528],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529103,\"ramUsage\":1.8,\"server\":\"pserver-1649423558564\",\"threads\":82,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a5e2500b-bb7f-4731-bb91-991d29557b94\",\"moduleSequenceNumber\":2253}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815258540],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529105,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815258647],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529113,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815258739],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999983,\"pid\":529121,\"ramUsage\":1.8,\"server\":\"pserver-1649423558564\",\"threads\":47,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a5e2500b-bb7f-4731-bb91-991d29557b94\",\"moduleSequenceNumber\":2253}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815259981],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999987,\"pid\":529128,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815260077],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.80999999999999,\"pid\":529129,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815261238],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999993,\"pid\":529132,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":2726,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///440bddf2-8aba-44e8-86af-0301f5bf286e\",\"moduleSequenceNumber\":2254}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815264808],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.010000000000003,\"pid\":529158,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815265443],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000004,\"pid\":529163,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":155,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815266230],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000003,\"pid\":529175,\"ramUsage\":1.8,\"server\":\"pserver-1649423558564\",\"threads\":77,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a5e2500b-bb7f-4731-bb91-991d29557b94\",\"moduleSequenceNumber\":2253}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815266668],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.210000000000003,\"pid\":529181,\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"threads\":1649,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///440bddf2-8aba-44e8-86af-0301f5bf286e\",\"moduleSequenceNumber\":2254}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9095c65c-4497-4b13-802c-e1c9c9a538ea\",\"moduleSequenceNumber\":2249}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"moduleSequenceNumber\":2249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///440bddf2-8aba-44e8-86af-0301f5bf286e\",\"moduleSequenceNumber\":2254}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423558564\",\"moduleSequenceNumber\":2254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a5e2500b-bb7f-4731-bb91-991d29557b94\",\"moduleSequenceNumber\":2253}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423558564\",\"moduleSequenceNumber\":2253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///d334df34-f2b1-4c44-9193-ee09dc72baa4\",\"moduleSequenceNumber\":2187}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423558564\",\"moduleSequenceNumber\":2187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///913e8ad1-dc81-4990-8a61-c5a925e39069\",\"moduleSequenceNumber\":2185}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423558564\",\"moduleSequenceNumber\":2185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423501315\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423501315\",\"httpPortOpen\":false,\"ip\":\"20.0.9.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":49485.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"ecorp\",1717,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7056598468.98053,\"offlineMoneyMade\":0,\"offlineRunningTime\":146896.233,\"onlineExpGained\":11254307486.053457,\"onlineMoneyMade\":387724839266745.25,\"onlineRunningTime\":234943.010004553,\"pid\":1295,\"ramUsage\":5.8,\"server\":\"pserver-1649423501315\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"4sigma\",109,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":445009056.62689394,\"offlineMoneyMade\":0,\"offlineRunningTime\":146896.28399999999,\"onlineExpGained\":702490132.8653939,\"onlineMoneyMade\":0,\"onlineRunningTime\":232895.01000444134,\"pid\":1296,\"ramUsage\":5.8,\"server\":\"pserver-1649423501315\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///00c45228-82d7-43aa-b2a9-5b35a6efedbe\",\"moduleSequenceNumber\":155263}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"zb-def\",106,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":402581118.03810275,\"offlineMoneyMade\":0,\"offlineRunningTime\":146896.36699999997,\"onlineExpGained\":614923755.0556977,\"onlineMoneyMade\":0,\"onlineRunningTime\":225313.21000402526,\"pid\":1298,\"ramUsage\":5.8,\"server\":\"pserver-1649423501315\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///00c45228-82d7-43aa-b2a9-5b35a6efedbe\",\"moduleSequenceNumber\":155263}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"galactic-cyber\",1055,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3947689312.3526735,\"offlineMoneyMade\":0,\"offlineRunningTime\":146896.40899999999,\"onlineExpGained\":5912770432.321542,\"onlineMoneyMade\":0,\"onlineRunningTime\":220897.61000376812,\"pid\":1299,\"ramUsage\":5.8,\"server\":\"pserver-1649423501315\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///00c45228-82d7-43aa-b2a9-5b35a6efedbe\",\"moduleSequenceNumber\":155263}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815032078],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":240.80999999999494,\"pid\":526529,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815033184],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":239.809999999995,\"pid\":526550,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815065280],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":207.60999999999677,\"pid\":526890,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815122338],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":150.61000000000004,\"pid\":527514,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815122401],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":150.61000000000004,\"pid\":527515,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":2101,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///42d562f6-59fc-4c56-9ab4-3580bc187577\",\"moduleSequenceNumber\":2315}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815127748],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":145.21000000000035,\"pid\":527583,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///42d562f6-59fc-4c56-9ab4-3580bc187577\",\"moduleSequenceNumber\":2315}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815167138],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":105.81000000000095,\"pid\":528032,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":1830,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///42d562f6-59fc-4c56-9ab4-3580bc187577\",\"moduleSequenceNumber\":2315}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815177329],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.61000000000081,\"pid\":528169,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815192711],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.21000000000059,\"pid\":528326,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815192795],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.21000000000059,\"pid\":528327,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":2005,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///42d562f6-59fc-4c56-9ab4-3580bc187577\",\"moduleSequenceNumber\":2315}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815193540],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.41000000000058,\"pid\":528333,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815193718],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.41000000000058,\"pid\":528335,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815193778],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.21000000000058,\"pid\":528336,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///42d562f6-59fc-4c56-9ab4-3580bc187577\",\"moduleSequenceNumber\":2315}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815195271],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.61000000000055,\"pid\":528370,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815195330],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.61000000000055,\"pid\":528376,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815195459],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.41000000000055,\"pid\":528385,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815199176],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.81000000000049,\"pid\":528409,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815199243],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.61000000000048,\"pid\":528413,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815199272],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.61000000000048,\"pid\":528414,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":1688,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///42d562f6-59fc-4c56-9ab4-3580bc187577\",\"moduleSequenceNumber\":2315}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815204280],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.61000000000041,\"pid\":528474,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815204343],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.61000000000041,\"pid\":528480,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815204402],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.61000000000041,\"pid\":528484,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815207702],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.21000000000038,\"pid\":528510,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":1933,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///42d562f6-59fc-4c56-9ab4-3580bc187577\",\"moduleSequenceNumber\":2315}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815210752],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.210000000000335,\"pid\":528534,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815213032],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.8100000000003,\"pid\":528561,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":133,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815213096],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.8100000000003,\"pid\":528566,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815213286],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.6100000000003,\"pid\":528578,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815213323],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.6100000000003,\"pid\":528581,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":155,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815213365],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.6100000000003,\"pid\":528585,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815213502],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.410000000000295,\"pid\":528595,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815222506],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000017,\"pid\":528698,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815228765],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.21000000000008,\"pid\":528742,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815230128],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.810000000000066,\"pid\":528758,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":1711,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///42d562f6-59fc-4c56-9ab4-3580bc187577\",\"moduleSequenceNumber\":2315}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815231227],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":528779,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815231274],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":528783,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815231312],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":528786,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815231330],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.61000000000005,\"pid\":528788,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815231459],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.410000000000046,\"pid\":528798,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":2485,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///42d562f6-59fc-4c56-9ab4-3580bc187577\",\"moduleSequenceNumber\":2315}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815240595],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999993,\"pid\":528912,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815258271],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999983,\"pid\":529087,\"ramUsage\":1.8,\"server\":\"pserver-1649423501315\",\"threads\":1521,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///374c9ebb-c62c-4675-a091-f4408b5e698f\",\"moduleSequenceNumber\":2311}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815264143],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.81,\"pid\":529154,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":1947,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///42d562f6-59fc-4c56-9ab4-3580bc187577\",\"moduleSequenceNumber\":2315}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815266199],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000003,\"pid\":529173,\"ramUsage\":1.8,\"server\":\"pserver-1649423501315\",\"threads\":64,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///374c9ebb-c62c-4675-a091-f4408b5e698f\",\"moduleSequenceNumber\":2311}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815266254],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000003,\"pid\":529176,\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"threads\":1830,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///42d562f6-59fc-4c56-9ab4-3580bc187577\",\"moduleSequenceNumber\":2315}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8de17b82-d6dc-4875-abac-fcebb8671ce0\",\"moduleSequenceNumber\":2314}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"moduleSequenceNumber\":2314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///42d562f6-59fc-4c56-9ab4-3580bc187577\",\"moduleSequenceNumber\":2315}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423501315\",\"moduleSequenceNumber\":2315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///9b43c051-0f65-4e12-ad68-082096bf3113\",\"moduleSequenceNumber\":2259}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423501315\",\"moduleSequenceNumber\":2259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///374c9ebb-c62c-4675-a091-f4408b5e698f\",\"moduleSequenceNumber\":2311}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423501315\",\"moduleSequenceNumber\":2311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///be447ce8-efe9-499a-962e-f1571eb283d4\",\"moduleSequenceNumber\":2257}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423501315\",\"moduleSequenceNumber\":2257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423494695\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423494695\",\"httpPortOpen\":false,\"ip\":\"49.0.3.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":46696.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"nwo\",168,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1051837525.726717,\"offlineMoneyMade\":0,\"offlineRunningTime\":146897.44,\"onlineExpGained\":1644956016.8364637,\"onlineMoneyMade\":0,\"onlineRunningTime\":230779.41000432684,\"pid\":1356,\"ramUsage\":5.8,\"server\":\"pserver-1649423494695\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"kuai-gong\",1687,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10276719096.887005,\"offlineMoneyMade\":0,\"offlineRunningTime\":146897.495,\"onlineExpGained\":15970536320.695156,\"onlineMoneyMade\":0,\"onlineRunningTime\":229433.21000425259,\"pid\":1358,\"ramUsage\":5.8,\"server\":\"pserver-1649423494695\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///859efb1b-148f-4b25-b407-6d0e955b8a13\",\"moduleSequenceNumber\":182344}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649814900650],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":372.2099999999882,\"pid\":525153,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815071813],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":201.00999999999718,\"pid\":526954,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815093487],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.4099999999984,\"pid\":527188,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815093550],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.4099999999984,\"pid\":527192,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9d188ecd-e19d-44a8-8e90-b2fa8a6b893c\",\"moduleSequenceNumber\":2372}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815094935],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":178.00999999999848,\"pid\":527233,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815095141],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":177.8099999999985,\"pid\":527241,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815102666],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":170.20999999999893,\"pid\":527296,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9d188ecd-e19d-44a8-8e90-b2fa8a6b893c\",\"moduleSequenceNumber\":2372}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815111152],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":161.8099999999994,\"pid\":527389,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815146030],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":126.81000000000124,\"pid\":527793,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815152927],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":120.01000000000114,\"pid\":527883,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9d188ecd-e19d-44a8-8e90-b2fa8a6b893c\",\"moduleSequenceNumber\":2372}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815178864],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.01000000000079,\"pid\":528192,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815178983],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.01000000000079,\"pid\":528193,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815179996],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93.01000000000077,\"pid\":528196,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":2726,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9d188ecd-e19d-44a8-8e90-b2fa8a6b893c\",\"moduleSequenceNumber\":2372}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815191539],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000061,\"pid\":528320,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":2088,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9d188ecd-e19d-44a8-8e90-b2fa8a6b893c\",\"moduleSequenceNumber\":2372}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815192085],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.8100000000006,\"pid\":528323,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815192299],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.6100000000006,\"pid\":528324,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":1708,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9d188ecd-e19d-44a8-8e90-b2fa8a6b893c\",\"moduleSequenceNumber\":2372}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815212534],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000031,\"pid\":528554,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815212550],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000031,\"pid\":528555,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":2101,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9d188ecd-e19d-44a8-8e90-b2fa8a6b893c\",\"moduleSequenceNumber\":2372}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815213356],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.6100000000003,\"pid\":528584,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815213456],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.410000000000295,\"pid\":528591,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":133,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815216026],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.81000000000026,\"pid\":528612,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":2726,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9d188ecd-e19d-44a8-8e90-b2fa8a6b893c\",\"moduleSequenceNumber\":2372}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815226198],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.810000000000116,\"pid\":528721,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":199,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815226226],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.61000000000011,\"pid\":528722,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815226291],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.61000000000011,\"pid\":528726,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":1688,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9d188ecd-e19d-44a8-8e90-b2fa8a6b893c\",\"moduleSequenceNumber\":2372}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815229769],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.210000000000065,\"pid\":528751,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815235280],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.60999999999999,\"pid\":528829,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815236174],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.80999999999998,\"pid\":528835,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815236557],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.409999999999975,\"pid\":528839,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9d188ecd-e19d-44a8-8e90-b2fa8a6b893c\",\"moduleSequenceNumber\":2372}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815249561],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999958,\"pid\":529009,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815249576],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999958,\"pid\":529010,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",1649815254233],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.60999999999997,\"pid\":529041,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":159,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815254492],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.40999999999997,\"pid\":529045,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":1055,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9d188ecd-e19d-44a8-8e90-b2fa8a6b893c\",\"moduleSequenceNumber\":2372}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1649815258717],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999983,\"pid\":529118,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":400,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9d188ecd-e19d-44a8-8e90-b2fa8a6b893c\",\"moduleSequenceNumber\":2372}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815264995],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.010000000000003,\"pid\":529160,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815265541],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000004,\"pid\":529164,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815265813],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.2100000000000035,\"pid\":529167,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815266743],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.210000000000003,\"pid\":529183,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815267517],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":529205,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":155,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",1649815267690],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529218,\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"threads\":161,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///dd4faaac-2935-4bbd-8797-44dec02d8a72\",\"moduleSequenceNumber\":2370}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"moduleSequenceNumber\":2370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9d188ecd-e19d-44a8-8e90-b2fa8a6b893c\",\"moduleSequenceNumber\":2372}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423494695\",\"moduleSequenceNumber\":2372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///d545cc13-1aed-4b33-a0c8-2600cabd13cb\",\"moduleSequenceNumber\":2367}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423494695\",\"moduleSequenceNumber\":2367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///f6088be6-7e08-44c5-b1f6-7d4d3ee019c5\",\"moduleSequenceNumber\":2318}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423494695\",\"moduleSequenceNumber\":2318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///3098a23b-6bb6-427b-80b8-37547159e686\",\"moduleSequenceNumber\":2317}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423494695\",\"moduleSequenceNumber\":2317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423586206\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423586206\",\"httpPortOpen\":false,\"ip\":\"5.7.8.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":47758.600000000006,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"nwo\",2088,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13083602694.038845,\"offlineMoneyMade\":0,\"offlineRunningTime\":146898.214,\"onlineExpGained\":20463087092.022427,\"onlineMoneyMade\":0,\"onlineRunningTime\":230742.01000432478,\"pid\":1413,\"ramUsage\":5.8,\"server\":\"pserver-1649423586206\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"nwo\",1394,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5831343933.1516075,\"offlineMoneyMade\":0,\"offlineRunningTime\":146898.251,\"onlineExpGained\":9053729111.205814,\"onlineMoneyMade\":146137055251121.1,\"onlineRunningTime\":230637.21000431897,\"pid\":1414,\"ramUsage\":5.8,\"server\":\"pserver-1649423586206\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///51d0560e-cc1e-46e1-9d53-6f3309db7a33\",\"moduleSequenceNumber\":182347}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"zeus-med\",1947,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":11197199139.578526,\"offlineMoneyMade\":0,\"offlineRunningTime\":146898.298,\"onlineExpGained\":16892352733.526182,\"onlineMoneyMade\":0,\"onlineRunningTime\":222641.01000386983,\"pid\":1416,\"ramUsage\":5.8,\"server\":\"pserver-1649423586206\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///51d0560e-cc1e-46e1-9d53-6f3309db7a33\",\"moduleSequenceNumber\":182347}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"powerhouse-fitness\",159,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":639903314.8898596,\"offlineMoneyMade\":0,\"offlineRunningTime\":146898.326,\"onlineExpGained\":942550889.9586238,\"onlineMoneyMade\":0,\"onlineRunningTime\":217355.61000356256,\"pid\":1417,\"ramUsage\":5.8,\"server\":\"pserver-1649423586206\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///51d0560e-cc1e-46e1-9d53-6f3309db7a33\",\"moduleSequenceNumber\":182347}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815104544],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":168.40999999999903,\"pid\":527337,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815104628],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":168.40999999999903,\"pid\":527345,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815114297],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.6099999999996,\"pid\":527449,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815120246],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.60999999999993,\"pid\":527494,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815133832],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":139.0100000000007,\"pid\":527672,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815155317],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.61000000000111,\"pid\":527902,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":168,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815158564],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":114.41000000000106,\"pid\":527933,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":1649,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0ec3da0e-5a49-4387-8c3a-c722a619dd06\",\"moduleSequenceNumber\":2430}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815159199],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":113.81000000000105,\"pid\":527951,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815163777],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":109.210000000001,\"pid\":527999,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0ec3da0e-5a49-4387-8c3a-c722a619dd06\",\"moduleSequenceNumber\":2430}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815186025],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.81000000000068,\"pid\":528250,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815186271],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.61000000000068,\"pid\":528267,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":85,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815191140],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.81000000000061,\"pid\":528315,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",1649815191257],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.61000000000061,\"pid\":528317,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":1055,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0ec3da0e-5a49-4387-8c3a-c722a619dd06\",\"moduleSequenceNumber\":2430}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815194507],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.41000000000057,\"pid\":528346,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815194514],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.41000000000057,\"pid\":528347,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":2101,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0ec3da0e-5a49-4387-8c3a-c722a619dd06\",\"moduleSequenceNumber\":2430}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815205176],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.8100000000004,\"pid\":528502,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815210354],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.61000000000034,\"pid\":528532,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":1708,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0ec3da0e-5a49-4387-8c3a-c722a619dd06\",\"moduleSequenceNumber\":2430}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815219360],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.61000000000021,\"pid\":528636,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":1708,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0ec3da0e-5a49-4387-8c3a-c722a619dd06\",\"moduleSequenceNumber\":2430}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815234040],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.81000000000001,\"pid\":528820,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":2726,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0ec3da0e-5a49-4387-8c3a-c722a619dd06\",\"moduleSequenceNumber\":2430}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815234741],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21,\"pid\":528822,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":1933,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0ec3da0e-5a49-4387-8c3a-c722a619dd06\",\"moduleSequenceNumber\":2430}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815240430],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999993,\"pid\":528899,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815240587],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.40999999999993,\"pid\":528911,\"ramUsage\":1.8,\"server\":\"pserver-1649423586206\",\"threads\":128,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///341270ed-0c7b-4308-9129-d05c619548f7\",\"moduleSequenceNumber\":2427}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815248727],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999955,\"pid\":528975,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815249093],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.809999999999956,\"pid\":528979,\"ramUsage\":1.8,\"server\":\"pserver-1649423586206\",\"threads\":97,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///341270ed-0c7b-4308-9129-d05c619548f7\",\"moduleSequenceNumber\":2427}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815249103],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.809999999999956,\"pid\":528980,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815249257],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999957,\"pid\":528983,\"ramUsage\":1.8,\"server\":\"pserver-1649423586206\",\"threads\":1521,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///341270ed-0c7b-4308-9129-d05c619548f7\",\"moduleSequenceNumber\":2427}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815249449],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999958,\"pid\":528999,\"ramUsage\":1.8,\"server\":\"pserver-1649423586206\",\"threads\":82,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///341270ed-0c7b-4308-9129-d05c619548f7\",\"moduleSequenceNumber\":2427}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815249456],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999958,\"pid\":529000,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815249462],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999958,\"pid\":529001,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815249477],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999958,\"pid\":529002,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815249487],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999958,\"pid\":529003,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":124,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815249498],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999958,\"pid\":529004,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815249522],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999958,\"pid\":529005,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815249538],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999958,\"pid\":529006,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":2485,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0ec3da0e-5a49-4387-8c3a-c722a619dd06\",\"moduleSequenceNumber\":2430}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815264111],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.81,\"pid\":529153,\"ramUsage\":1.8,\"server\":\"pserver-1649423586206\",\"threads\":1394,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///341270ed-0c7b-4308-9129-d05c619548f7\",\"moduleSequenceNumber\":2427}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815267505],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000002,\"pid\":529204,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815267639],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":529214,\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"threads\":2485,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0ec3da0e-5a49-4387-8c3a-c722a619dd06\",\"moduleSequenceNumber\":2430}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7bb8f08d-4830-4283-ba00-a8c19c653d16\",\"moduleSequenceNumber\":2425}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"moduleSequenceNumber\":2425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0ec3da0e-5a49-4387-8c3a-c722a619dd06\",\"moduleSequenceNumber\":2430}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423586206\",\"moduleSequenceNumber\":2430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///341270ed-0c7b-4308-9129-d05c619548f7\",\"moduleSequenceNumber\":2427}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423586206\",\"moduleSequenceNumber\":2427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///e5732efd-1dfb-4ef4-b4e9-5f5dbb21591f\",\"moduleSequenceNumber\":2377}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423586206\",\"moduleSequenceNumber\":2377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///e8aeebac-b94b-4a78-87ef-492a5250df2c\",\"moduleSequenceNumber\":2375}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423586206\",\"moduleSequenceNumber\":2375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423630712\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423630712\",\"httpPortOpen\":false,\"ip\":\"82.8.4.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":48609.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"univ-energy\",1708,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9038017666.77673,\"offlineMoneyMade\":0,\"offlineRunningTime\":146899.366,\"onlineExpGained\":13466016781.090902,\"onlineMoneyMade\":0,\"onlineRunningTime\":219799.41000370408,\"pid\":1472,\"ramUsage\":5.8,\"server\":\"pserver-1649423630712\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///45a4eaad-7c25-41fb-afbe-ff7a8f7ab48c\",\"moduleSequenceNumber\":155318}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"aerocorp\",199,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1040643664.9072776,\"offlineMoneyMade\":0,\"offlineRunningTime\":146899.395,\"onlineExpGained\":1536279234.6595159,\"onlineMoneyMade\":0,\"onlineRunningTime\":217939.8100035961,\"pid\":1473,\"ramUsage\":5.8,\"server\":\"pserver-1649423630712\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///45a4eaad-7c25-41fb-afbe-ff7a8f7ab48c\",\"moduleSequenceNumber\":155318}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649814890004],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":383.00999999998766,\"pid\":525008,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///20ff53fb-b641-43fa-adf2-26a3b4060a4e\",\"moduleSequenceNumber\":2485}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815118741],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999984,\"pid\":527479,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///20ff53fb-b641-43fa-adf2-26a3b4060a4e\",\"moduleSequenceNumber\":2485}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815123246],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":149.6100000000001,\"pid\":527546,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3d089983-9d71-4dbe-ba7a-00a62f37de58\",\"moduleSequenceNumber\":2482}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815129284],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":143.61000000000044,\"pid\":527598,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3d089983-9d71-4dbe-ba7a-00a62f37de58\",\"moduleSequenceNumber\":2482}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815149120],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":123.8100000000012,\"pid\":527824,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":1830,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///20ff53fb-b641-43fa-adf2-26a3b4060a4e\",\"moduleSequenceNumber\":2485}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815168031],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.81000000000094,\"pid\":528044,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3d089983-9d71-4dbe-ba7a-00a62f37de58\",\"moduleSequenceNumber\":2482}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815174196],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.81000000000085,\"pid\":528116,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":1708,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///20ff53fb-b641-43fa-adf2-26a3b4060a4e\",\"moduleSequenceNumber\":2485}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815177018],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.81000000000081,\"pid\":528146,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3d089983-9d71-4dbe-ba7a-00a62f37de58\",\"moduleSequenceNumber\":2482}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815177223],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.61000000000081,\"pid\":528159,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3d089983-9d71-4dbe-ba7a-00a62f37de58\",\"moduleSequenceNumber\":2482}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815179950],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93.01000000000077,\"pid\":528195,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///20ff53fb-b641-43fa-adf2-26a3b4060a4e\",\"moduleSequenceNumber\":2485}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815185155],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.8100000000007,\"pid\":528240,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":1830,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///20ff53fb-b641-43fa-adf2-26a3b4060a4e\",\"moduleSequenceNumber\":2485}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815185485],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.4100000000007,\"pid\":528242,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3d089983-9d71-4dbe-ba7a-00a62f37de58\",\"moduleSequenceNumber\":2482}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815185499],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.4100000000007,\"pid\":528243,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":2101,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///20ff53fb-b641-43fa-adf2-26a3b4060a4e\",\"moduleSequenceNumber\":2485}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815212114],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.810000000000315,\"pid\":528550,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":1711,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///20ff53fb-b641-43fa-adf2-26a3b4060a4e\",\"moduleSequenceNumber\":2485}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815220407],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.6100000000002,\"pid\":528643,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":155,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3d089983-9d71-4dbe-ba7a-00a62f37de58\",\"moduleSequenceNumber\":2482}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815220699],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.21000000000019,\"pid\":528646,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":1550,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///20ff53fb-b641-43fa-adf2-26a3b4060a4e\",\"moduleSequenceNumber\":2485}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815237940],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.00999999999996,\"pid\":528848,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3d089983-9d71-4dbe-ba7a-00a62f37de58\",\"moduleSequenceNumber\":2482}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815238123],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.80999999999996,\"pid\":528850,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":1313,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///20ff53fb-b641-43fa-adf2-26a3b4060a4e\",\"moduleSequenceNumber\":2485}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",1649815238421],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.40999999999996,\"pid\":528851,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":155,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3d089983-9d71-4dbe-ba7a-00a62f37de58\",\"moduleSequenceNumber\":2482}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815238518],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.40999999999996,\"pid\":528852,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3d089983-9d71-4dbe-ba7a-00a62f37de58\",\"moduleSequenceNumber\":2482}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",1649815238715],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.20999999999996,\"pid\":528854,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":1550,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///20ff53fb-b641-43fa-adf2-26a3b4060a4e\",\"moduleSequenceNumber\":2485}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815240308],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.609999999999935,\"pid\":528889,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":1659,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///20ff53fb-b641-43fa-adf2-26a3b4060a4e\",\"moduleSequenceNumber\":2485}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815244288],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.609999999999935,\"pid\":528933,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3d089983-9d71-4dbe-ba7a-00a62f37de58\",\"moduleSequenceNumber\":2482}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815244843],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.009999999999938,\"pid\":528935,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///20ff53fb-b641-43fa-adf2-26a3b4060a4e\",\"moduleSequenceNumber\":2485}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815255105],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.809999999999974,\"pid\":529049,\"ramUsage\":1.8,\"server\":\"pserver-1649423630712\",\"threads\":1394,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///efa40f0f-3c9b-48d5-9940-550265a97f01\",\"moduleSequenceNumber\":2484}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",1649815266266],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000003,\"pid\":529177,\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"threads\":1346,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///20ff53fb-b641-43fa-adf2-26a3b4060a4e\",\"moduleSequenceNumber\":2485}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3d089983-9d71-4dbe-ba7a-00a62f37de58\",\"moduleSequenceNumber\":2482}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"moduleSequenceNumber\":2482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///20ff53fb-b641-43fa-adf2-26a3b4060a4e\",\"moduleSequenceNumber\":2485}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423630712\",\"moduleSequenceNumber\":2485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///efa40f0f-3c9b-48d5-9940-550265a97f01\",\"moduleSequenceNumber\":2484}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423630712\",\"moduleSequenceNumber\":2484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///e55402d1-a1d0-44ce-95f5-7e4eb7d902dd\",\"moduleSequenceNumber\":2433}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423630712\",\"moduleSequenceNumber\":2433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///e8261c17-ae7e-4ba9-8495-5418acce7cf2\",\"moduleSequenceNumber\":2431}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423630712\",\"moduleSequenceNumber\":2431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1649423613561\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1649423613561\",\"httpPortOpen\":false,\"ip\":\"13.5.6.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":48771.450000000004,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"kuai-gong\",135,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":821022288.2161756,\"offlineMoneyMade\":0,\"offlineRunningTime\":146900.366,\"onlineExpGained\":1275983997.977569,\"onlineMoneyMade\":0,\"onlineRunningTime\":229477.81000425506,\"pid\":1527,\"ramUsage\":5.8,\"server\":\"pserver-1649423613561\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"b-and-a\",2005,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10605588319.029856,\"offlineMoneyMade\":0,\"offlineRunningTime\":146900.40899999999,\"onlineExpGained\":16421534320.334463,\"onlineMoneyMade\":0,\"onlineRunningTime\":228494.61000420083,\"pid\":1528,\"ramUsage\":5.8,\"server\":\"pserver-1649423613561\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///58e687dd-35bd-470e-bc03-14a0c6b5efbc\",\"moduleSequenceNumber\":192364}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"omnitek\",135,9000,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":837713504.1040969,\"offlineMoneyMade\":0,\"offlineRunningTime\":146900.44900000002,\"onlineExpGained\":1287032106.746279,\"onlineMoneyMade\":0,\"onlineRunningTime\":226691.0100041015,\"pid\":1529,\"ramUsage\":5.8,\"server\":\"pserver-1649423613561\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///58e687dd-35bd-470e-bc03-14a0c6b5efbc\",\"moduleSequenceNumber\":192364}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"rho-construction\",14,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":40344997.73839241,\"offlineMoneyMade\":0,\"offlineRunningTime\":146900.48200000002,\"onlineExpGained\":61951140.15501645,\"onlineMoneyMade\":213391025832684,\"onlineRunningTime\":226348.4100040825,\"pid\":1530,\"ramUsage\":5.8,\"server\":\"pserver-1649423613561\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///58e687dd-35bd-470e-bc03-14a0c6b5efbc\",\"moduleSequenceNumber\":192364}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"zb-def\",1313,9000,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4987958258.34682,\"offlineMoneyMade\":0,\"offlineRunningTime\":146900.50900000002,\"onlineExpGained\":7617549883.719662,\"onlineMoneyMade\":0,\"onlineRunningTime\":225219.01000402006,\"pid\":1531,\"ramUsage\":5.8,\"server\":\"pserver-1649423613561\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///58e687dd-35bd-470e-bc03-14a0c6b5efbc\",\"moduleSequenceNumber\":192364}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"lexo-corp\",155,9000,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":651095594.7930666,\"offlineMoneyMade\":0,\"offlineRunningTime\":146900.551,\"onlineExpGained\":973120652.5518273,\"onlineMoneyMade\":0,\"onlineRunningTime\":220461.41000374267,\"pid\":1532,\"ramUsage\":5.8,\"server\":\"pserver-1649423613561\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///58e687dd-35bd-470e-bc03-14a0c6b5efbc\",\"moduleSequenceNumber\":192364}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649814898472],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":374.4099999999881,\"pid\":525108,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649814899016],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":374.0099999999881,\"pid\":525112,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///57be7da8-da76-40c3-b5b8-4bb22bf9d103\",\"moduleSequenceNumber\":2547}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815056924],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":216.00999999999635,\"pid\":526817,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815121190],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":151.80999999999997,\"pid\":527504,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///57be7da8-da76-40c3-b5b8-4bb22bf9d103\",\"moduleSequenceNumber\":2547}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815132046],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.8100000000006,\"pid\":527632,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815132159],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.8100000000006,\"pid\":527639,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815132326],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.6100000000006,\"pid\":527652,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815138312],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":134.61000000000092,\"pid\":527704,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815168011],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.81000000000094,\"pid\":528042,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":132,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815168075],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.81000000000094,\"pid\":528048,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815168238],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.61000000000094,\"pid\":528058,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",1649815168374],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.61000000000094,\"pid\":528068,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":219,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815168388],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":104.61000000000094,\"pid\":528069,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":156,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815173123],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":99.81000000000087,\"pid\":528107,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815173407],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":99.61000000000087,\"pid\":528111,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///57be7da8-da76-40c3-b5b8-4bb22bf9d103\",\"moduleSequenceNumber\":2547}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815175831],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000083,\"pid\":528132,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":146,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815177053],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.81000000000081,\"pid\":528149,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":1824,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///57be7da8-da76-40c3-b5b8-4bb22bf9d103\",\"moduleSequenceNumber\":2547}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",1649815195241],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.61000000000055,\"pid\":528367,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":147,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",1649815195534],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.41000000000055,\"pid\":528392,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":137,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",1649815200146],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.81000000000047,\"pid\":528419,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":109,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",1649815200572],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.41000000000047,\"pid\":528424,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":2088,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///57be7da8-da76-40c3-b5b8-4bb22bf9d103\",\"moduleSequenceNumber\":2547}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",1649815213082],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.8100000000003,\"pid\":528565,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":1824,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///57be7da8-da76-40c3-b5b8-4bb22bf9d103\",\"moduleSequenceNumber\":2547}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815222323],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000017,\"pid\":528684,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",1649815222381],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000017,\"pid\":528689,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",1649815222597],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000017,\"pid\":528707,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":169,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",1649815228062],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.81000000000009,\"pid\":528738,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":1947,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///57be7da8-da76-40c3-b5b8-4bb22bf9d103\",\"moduleSequenceNumber\":2547}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815231135],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000005,\"pid\":528775,\"ramUsage\":1.8,\"server\":\"pserver-1649423613561\",\"threads\":1521,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///9121a175-803f-495d-a0ff-84b7edfc4db7\",\"moduleSequenceNumber\":2544}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815239062],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.80999999999995,\"pid\":528857,\"ramUsage\":1.8,\"server\":\"pserver-1649423613561\",\"threads\":668,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///9121a175-803f-495d-a0ff-84b7edfc4db7\",\"moduleSequenceNumber\":2544}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815239078],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.80999999999995,\"pid\":528858,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":1425,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///57be7da8-da76-40c3-b5b8-4bb22bf9d103\",\"moduleSequenceNumber\":2547}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815249183],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.809999999999956,\"pid\":528982,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815249265],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999957,\"pid\":528984,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":135,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1649815249271],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999957,\"pid\":528985,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":32,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815249278],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999957,\"pid\":528986,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",1649815249328],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999957,\"pid\":528989,\"ramUsage\":1.8,\"server\":\"pserver-1649423613561\",\"threads\":376,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///9121a175-803f-495d-a0ff-84b7edfc4db7\",\"moduleSequenceNumber\":2544}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",1649815249415],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999957,\"pid\":528996,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":114,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",1649815249549],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999958,\"pid\":529007,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":133,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1649815249556],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.409999999999958,\"pid\":529008,\"ramUsage\":1.8,\"server\":\"pserver-1649423613561\",\"threads\":71,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///9121a175-803f-495d-a0ff-84b7edfc4db7\",\"moduleSequenceNumber\":2544}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",1649815251808],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999965,\"pid\":529026,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":106,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1649815252009],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.809999999999967,\"pid\":529027,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///57be7da8-da76-40c3-b5b8-4bb22bf9d103\",\"moduleSequenceNumber\":2547}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",1649815253850],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.00999999999997,\"pid\":529039,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":1687,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///57be7da8-da76-40c3-b5b8-4bb22bf9d103\",\"moduleSequenceNumber\":2547}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1649815258106],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.809999999999983,\"pid\":529083,\"ramUsage\":1.8,\"server\":\"pserver-1649423613561\",\"threads\":97,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///9121a175-803f-495d-a0ff-84b7edfc4db7\",\"moduleSequenceNumber\":2544}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",1649815258198],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.809999999999983,\"pid\":529086,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":136,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",1649815258622],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":529110,\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"threads\":2485,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///57be7da8-da76-40c3-b5b8-4bb22bf9d103\",\"moduleSequenceNumber\":2547}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8826b1f7-066f-4132-9b61-b412697a9b03\",\"moduleSequenceNumber\":2546}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"moduleSequenceNumber\":2546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///57be7da8-da76-40c3-b5b8-4bb22bf9d103\",\"moduleSequenceNumber\":2547}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1649423613561\",\"moduleSequenceNumber\":2547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///9121a175-803f-495d-a0ff-84b7edfc4db7\",\"moduleSequenceNumber\":2544}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1649423613561\",\"moduleSequenceNumber\":2544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///a1a74c7a-ef36-4021-a147-c89639ee4661\",\"moduleSequenceNumber\":2486}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1649423613561\",\"moduleSequenceNumber\":2486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///8c8f9de1-a920-441e-b1fb-7dd198a2bbb6\",\"moduleSequenceNumber\":2492}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"pserver-1649423613561\",\"moduleSequenceNumber\":2492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":522076.67686162103,\"favor\":0.008,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1122543.770136174,\"favor\":134.9182,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":322371.9436613894,\"favor\":0.008,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":270795.1361333815,\"favor\":0.008,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":122.5835,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":255062.3043744006,\"favor\":77.9605,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":112.9299,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":114.8226,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":4031857.3601803165,\"favor\":0.008,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":257285.98992397208,\"favor\":0.008,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":94.8874,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":106.7466,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":3834201.5769781154}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"The Covenant\",\"playerReputation\":1389715.2737604592}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"ECorp\",\"playerReputation\":1612519.4787727902}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":224.8652,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":10419420.042649798}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Bachman & Associates\",\"playerReputation\":401419.92119565984}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Blade Industries\",\"playerReputation\":597459.822231606}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":201.4796,\"isBanned\":false,\"isMember\":true,\"name\":\"NWO\",\"playerReputation\":9666670.707746355}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Clarke Incorporated\",\"playerReputation\":472608.1707191502}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":177.7145,\"isBanned\":false,\"isMember\":true,\"name\":\"OmniTek Incorporated\",\"playerReputation\":8901630.702825543}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":11.7903,\"isBanned\":false,\"isMember\":true,\"name\":\"Four Sigma\",\"playerReputation\":792096.4504198874}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"KuaiGong International\",\"playerReputation\":590711.3885300216}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":3027393.64490292}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":255.1105,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":11283033.802360043}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":231.9548,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":10664770.965278858}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":241.5078,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":10952210.463541338}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":130.8128,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Chongqing\",\"playerReputation\":414422.6675746563}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Ishima\",\"playerReputation\":436914.65332345397}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"New Tokyo\",\"playerReputation\":411536.2575332814}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":148.8329,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":83.5967,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Speakers for the Dead\",\"playerReputation\":475695.1596683037}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"The Dark Army\",\"playerReputation\":522738.8588836708}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"The Syndicate\",\"playerReputation\":366450.9673301991}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Silhouette\",\"playerReputation\":307538.8061794314}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":424365.816437313}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":366623.7620081997}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":236.9557,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":10806783.959268998}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":422672.53398769314}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":235.9412,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":10774141.125282416}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"darkweb\":\"home;connect darkweb\",\"liquidate\":\"run stocks/liquidate.js\",\"cnct\":\"run cnct.js\",\"scn\":\"cls;scan-analyze 10\",\"bkdr\":\"run bkdr.js\",\"hm\":\"home\",\"scn3\":\"cls; scan-analyze 3\",\"restart\":\"killall; run restart.js\",\"flight\":\"run fl1ght.exe\",\"ps\":\"run ps.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as NiteSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for The Black Hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":34607.708831954646,\"lastPrice\":34545.581811286494,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":true,\"otlkMag\":18.51402787470739,\"otlkMagForecast\":67.77360221661841,\"cap\":42305384,\"spreadPerc\":0.4,\"shareTxForMovement\":40186,\"shareTxUntilMovement\":40186,\"totalShares\":88400000,\"maxShares\":17700000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":14481.212152836655,\"lastPrice\":14506.015119692607,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.4,\"b\":true,\"otlkMag\":12.540088148760383,\"otlkMagForecast\":61.956959081191435,\"cap\":669610874,\"spreadPerc\":0.5,\"shareTxForMovement\":86834,\"shareTxUntilMovement\":72808,\"totalShares\":71600000,\"maxShares\":14300000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":2092.9967344530514,\"lastPrice\":2086.3857664301695,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":8.118305814199628,\"otlkMagForecast\":59.344318615943635,\"cap\":445127587,\"spreadPerc\":0.2,\"shareTxForMovement\":45273,\"shareTxUntilMovement\":45273,\"totalShares\":76300000,\"maxShares\":15300000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":89678.16200890514,\"lastPrice\":89429.2581039968,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":11.649361012791045,\"otlkMagForecast\":38.790699479922864,\"cap\":159119159,\"spreadPerc\":0.2,\"shareTxForMovement\":88913,\"shareTxUntilMovement\":88913,\"totalShares\":98500000,\"maxShares\":19700000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":12283.940172567969,\"lastPrice\":12316.02548355998,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":15.09439433582505,\"otlkMagForecast\":35.279106350736306,\"cap\":303059438,\"spreadPerc\":0.3,\"shareTxForMovement\":34487,\"shareTxUntilMovement\":34487,\"totalShares\":42100000,\"maxShares\":8400000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":6877.056710211518,\"lastPrice\":6906.503728846707,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":false,\"otlkMag\":18.577460047088714,\"otlkMagForecast\":32.39407508775137,\"cap\":1218071821,\"spreadPerc\":0.8,\"shareTxForMovement\":48486,\"shareTxUntilMovement\":48486,\"totalShares\":34500000,\"maxShares\":6900000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":377459.02681020286,\"lastPrice\":378784.3518207698,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":false,\"otlkMag\":13.69829955737847,\"otlkMagForecast\":37.95531783009299,\"cap\":355660440,\"spreadPerc\":0.2,\"shareTxForMovement\":75400,\"shareTxUntilMovement\":75400,\"totalShares\":86700000,\"maxShares\":17300000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":229.46946752935602,\"lastPrice\":228.2186331908596,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.28,\"b\":true,\"otlkMag\":21.035841560553344,\"otlkMagForecast\":72.51899438877211,\"cap\":580108361,\"spreadPerc\":1,\"shareTxForMovement\":61092,\"shareTxUntilMovement\":61092,\"totalShares\":62600000,\"maxShares\":12500000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":28531.539766679045,\"lastPrice\":28632.940717615013,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":true,\"otlkMag\":9.601494084662528,\"otlkMagForecast\":59.7457920364753,\"cap\":464892103,\"spreadPerc\":0.9,\"shareTxForMovement\":68233,\"shareTxUntilMovement\":68233,\"totalShares\":52800000,\"maxShares\":10600000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":17884.611701804908,\"lastPrice\":17831.16554303219,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":11.355526047904721,\"otlkMagForecast\":39.294861693725665,\"cap\":206457594,\"spreadPerc\":0.3,\"shareTxForMovement\":39951,\"shareTxUntilMovement\":39951,\"totalShares\":58400000,\"maxShares\":11700000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":42824.12575257498,\"lastPrice\":42935.98118116139,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":14.283920627617546,\"otlkMagForecast\":63.32393933244145,\"cap\":295578703,\"spreadPerc\":0.2,\"shareTxForMovement\":48016,\"shareTxUntilMovement\":48016,\"totalShares\":57800000,\"maxShares\":11600000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":5183.003444165011,\"lastPrice\":5199.87028766112,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":9.687289693459817,\"otlkMagForecast\":40.92922332146274,\"cap\":164364426,\"spreadPerc\":0.9,\"shareTxForMovement\":38346,\"shareTxUntilMovement\":38346,\"totalShares\":83400000,\"maxShares\":16700000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":10658.716279592118,\"lastPrice\":10630.04056845311,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":5.102116027247029,\"otlkMagForecast\":54.129504059577904,\"cap\":288864039,\"spreadPerc\":0.7,\"shareTxForMovement\":92163,\"shareTxUntilMovement\":92163,\"totalShares\":60700000,\"maxShares\":12100000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":67680.95976388987,\"lastPrice\":67837.45423331106,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":false,\"otlkMag\":5.0989695687546455,\"otlkMagForecast\":44.407927005822934,\"cap\":200255216,\"spreadPerc\":0.3,\"shareTxForMovement\":82329,\"shareTxUntilMovement\":82329,\"totalShares\":52100000,\"maxShares\":10400000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":8258.093066492926,\"lastPrice\":8280.723791762035,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":13.217112923201125,\"otlkMagForecast\":39.8837363127608,\"cap\":69417416,\"spreadPerc\":1,\"shareTxForMovement\":87682,\"shareTxUntilMovement\":87682,\"totalShares\":59300000,\"maxShares\":11900000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":72125.31463702617,\"lastPrice\":71912.84626296134,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":8.935152753509714,\"otlkMagForecast\":56.1741130181253,\"cap\":40131296,\"spreadPerc\":0.5,\"shareTxForMovement\":77089,\"shareTxUntilMovement\":77089,\"totalShares\":63900000,\"maxShares\":12800000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":62132.06363618417,\"lastPrice\":62339.57845073501,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":6.070897903697537,\"otlkMagForecast\":58.17733313291212,\"cap\":102826509,\"spreadPerc\":0.7,\"shareTxForMovement\":48067,\"shareTxUntilMovement\":48067,\"totalShares\":43400000,\"maxShares\":8700000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":4015.075935084178,\"lastPrice\":4004.7870243099183,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":8.861940965366072,\"otlkMagForecast\":41.29119406057505,\"cap\":604914756,\"spreadPerc\":0.8,\"shareTxForMovement\":84263,\"shareTxUntilMovement\":84263,\"totalShares\":25400000,\"maxShares\":5100000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":10542.911386810238,\"lastPrice\":10576.317888698686,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":14.718311093330605,\"otlkMagForecast\":35.53281238894074,\"cap\":42748548,\"spreadPerc\":0.5,\"shareTxForMovement\":86450,\"shareTxUntilMovement\":86450,\"totalShares\":37700000,\"maxShares\":7500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":5185.74616450998,\"lastPrice\":5132.996351701784,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.4,\"b\":true,\"otlkMag\":7.826779313965148,\"otlkMagForecast\":56.34951776785621,\"cap\":147605418,\"spreadPerc\":0.9,\"shareTxForMovement\":14746,\"shareTxUntilMovement\":14746,\"totalShares\":66500000,\"maxShares\":13300000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":39983.265408490646,\"lastPrice\":39785.64892778981,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.16,\"b\":true,\"otlkMag\":8.070688188654362,\"otlkMagForecast\":57.88866866680112,\"cap\":119881943,\"spreadPerc\":1.1,\"shareTxForMovement\":96149,\"shareTxUntilMovement\":96149,\"totalShares\":38700000,\"maxShares\":7700000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2758.2453561324455,\"lastPrice\":2751.764793311814,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":1.1275078643959913,\"otlkMagForecast\":50.89576661491748,\"cap\":91232865,\"spreadPerc\":1,\"shareTxForMovement\":96264,\"shareTxUntilMovement\":96264,\"totalShares\":30800000,\"maxShares\":6200000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":41279.550418904364,\"lastPrice\":41618.92156327415,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.92,\"b\":false,\"otlkMag\":10.31210720673956,\"otlkMagForecast\":38.577960745326685,\"cap\":49531498,\"spreadPerc\":1.4,\"shareTxForMovement\":71932,\"shareTxUntilMovement\":71932,\"totalShares\":41500000,\"maxShares\":8300000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":5529.010065022913,\"lastPrice\":5567.836717996485,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.64,\"b\":true,\"otlkMag\":5.396345890948852,\"otlkMagForecast\":52.73779154406342,\"cap\":79730113,\"spreadPerc\":0.5,\"shareTxForMovement\":52125,\"shareTxUntilMovement\":52125,\"totalShares\":44600000,\"maxShares\":8900000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":7466.109379166369,\"lastPrice\":7434.276389472554,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":true,\"otlkMag\":5.758360201861251,\"otlkMagForecast\":55.26845486098799,\"cap\":21866567,\"spreadPerc\":0.9,\"shareTxForMovement\":102455,\"shareTxUntilMovement\":102455,\"totalShares\":49700000,\"maxShares\":9900000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":991.9314789897592,\"lastPrice\":1004.0364919387318,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.85,\"b\":false,\"otlkMag\":31.420262493938452,\"otlkMagForecast\":21.40153358129072,\"cap\":42861003,\"spreadPerc\":1.5,\"shareTxForMovement\":42661,\"shareTxUntilMovement\":42661,\"totalShares\":23300000,\"maxShares\":4700000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":5373.286952211863,\"lastPrice\":5397.445346139021,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.05,\"b\":false,\"otlkMag\":6.026771272412017,\"otlkMagForecast\":45.76991551697146,\"cap\":115011528,\"spreadPerc\":1.3,\"shareTxForMovement\":33315,\"shareTxUntilMovement\":33315,\"totalShares\":12200000,\"maxShares\":2400000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2738.3002547675005,\"lastPrice\":2746.742389689556,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":9.185134010451515,\"otlkMagForecast\":58.39107345232797,\"cap\":15466826,\"spreadPerc\":0.9,\"shareTxForMovement\":146813,\"shareTxUntilMovement\":146813,\"totalShares\":17800000,\"maxShares\":3600000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":28535.331581244605,\"lastPrice\":28749.15718039611,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.75,\"b\":false,\"otlkMag\":6.059630429807233,\"otlkMagForecast\":42.96004392642937,\"cap\":51493973,\"spreadPerc\":0.8,\"shareTxForMovement\":60587,\"shareTxUntilMovement\":60587,\"totalShares\":9100000,\"maxShares\":1800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":89.3549163673876,\"lastPrice\":88.30750779764925,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.77,\"b\":true,\"otlkMag\":5.3240174867376275,\"otlkMagForecast\":47.71526134707454,\"cap\":3045749,\"spreadPerc\":1.4,\"shareTxForMovement\":34684,\"shareTxUntilMovement\":34684,\"totalShares\":62700000,\"maxShares\":12500000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":673.8039682466982,\"lastPrice\":678.0740285197719,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.48,\"b\":true,\"otlkMag\":10.706098980679565,\"otlkMagForecast\":61.722450201331,\"cap\":22858248,\"spreadPerc\":1.4,\"shareTxForMovement\":69447,\"shareTxUntilMovement\":69447,\"totalShares\":82200000,\"maxShares\":16400000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":68233.52628589643,\"lastPrice\":68452.65425060064,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":7.516609045747998,\"otlkMagForecast\":41.023643847543326,\"cap\":528721911,\"spreadPerc\":0.9,\"shareTxForMovement\":122256,\"shareTxUntilMovement\":122256,\"totalShares\":14600000,\"maxShares\":2900000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":14655.054546194056,\"lastPrice\":14615.003154361777,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":11.946859658602053,\"otlkMagForecast\":37.98601769217505,\"cap\":336649076,\"spreadPerc\":0.4,\"shareTxForMovement\":189578,\"shareTxUntilMovement\":189578,\"totalShares\":25800000,\"maxShares\":5200000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":615421,\"lastUpdate\":1649815269444,\"ticksUntilCycle\":7}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":7,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":24,\"MonacoVim\":true,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-34,\"y\":101,\"opened\":true}}","VersionSave":"13","AllGangsSave":"","LastExportBonus":"1649815273130","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}