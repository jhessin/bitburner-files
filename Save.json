{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":394,\"hp\":11,\"max_hp\":11,\"strength\":19,\"defense\":19,\"dexterity\":19,\"agility\":19,\"charisma\":31,\"intelligence\":77,\"hacking_chance_mult\":1.3824,\"hacking_speed_mult\":1.3824,\"hacking_money_mult\":1.3824,\"hacking_grow_mult\":1.3824,\"hacking_exp\":3846520.1617927467,\"strength_exp\":290.7443200001249,\"defense_exp\":290.7443200001249,\"dexterity_exp\":293.3043200001249,\"agility_exp\":293.3043200001249,\"charisma_exp\":581.4886400002498,\"intelligence_exp\":5222.529600000004,\"hacking_mult\":1.3824,\"strength_mult\":1.28,\"defense_mult\":1.28,\"dexterity_mult\":1.28,\"agility_mult\":1.28,\"charisma_mult\":1.28,\"hacking_exp_mult\":1.3824,\"strength_exp_mult\":1.28,\"defense_exp_mult\":1.28,\"dexterity_exp_mult\":1.28,\"agility_exp_mult\":1.28,\"charisma_exp_mult\":1.28,\"company_rep_mult\":1.28,\"faction_rep_mult\":1.28,\"money\":80480522.80631033,\"city\":\"Aevum\",\"location\":\"Joe's Guns\",\"jobs\":{\"Joe's Guns\":\"Employee\"},\"companyName\":\"Joe's Guns\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserver-1651245042057\",\"pserver-1651245042924\",\"pserver-1651248145833\",\"pserver-1651249521417\",\"pserver-1651249941664\",\"pserver-1651250449430\",\"pserver-1651250818827\",\"pserver-1651251296520\",\"pserver-1651251669740\",\"pserver-1651252026049\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":197,\"moneyGainRatePerSecond\":82.40993314852926,\"onlineTimeSeconds\":7163.199999995687,\"ram\":32,\"totalMoneyGenerated\":484798.54200856225,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":197,\"moneyGainRatePerSecond\":82.40993314852926,\"onlineTimeSeconds\":7163.199999995687,\"ram\":32,\"totalMoneyGenerated\":480632.79890134954,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":197,\"moneyGainRatePerSecond\":82.40993314852926,\"onlineTimeSeconds\":7163.199999995687,\"ram\":32,\"totalMoneyGenerated\":480298.0365999618,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":197,\"moneyGainRatePerSecond\":82.40993314852926,\"onlineTimeSeconds\":7163.199999995687,\"ram\":32,\"totalMoneyGenerated\":479415.28667608753,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":197,\"moneyGainRatePerSecond\":82.40993314852926,\"onlineTimeSeconds\":7163.199999995687,\"ram\":32,\"totalMoneyGenerated\":478071.16881013545,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":197,\"moneyGainRatePerSecond\":82.40993314852926,\"onlineTimeSeconds\":7163.199999995687,\"ram\":32,\"totalMoneyGenerated\":477379.2834937872,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":197,\"moneyGainRatePerSecond\":82.40993314852926,\"onlineTimeSeconds\":7163.199999995687,\"ram\":32,\"totalMoneyGenerated\":477393.38120827073,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":197,\"moneyGainRatePerSecond\":82.40993314852926,\"onlineTimeSeconds\":7163.199999995687,\"ram\":32,\"totalMoneyGenerated\":455996.7896110925,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":197,\"moneyGainRatePerSecond\":82.40993314852926,\"onlineTimeSeconds\":7161.999999995688,\"ram\":32,\"totalMoneyGenerated\":454107.78828670405,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":197,\"moneyGainRatePerSecond\":82.40993314852926,\"onlineTimeSeconds\":7161.999999995688,\"ram\":32,\"totalMoneyGenerated\":452696.83785451844,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":197,\"moneyGainRatePerSecond\":82.40993314852926,\"onlineTimeSeconds\":7161.999999995688,\"ram\":32,\"totalMoneyGenerated\":452661.0087402679,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":197,\"moneyGainRatePerSecond\":82.40993314852926,\"onlineTimeSeconds\":7161.999999995688,\"ram\":32,\"totalMoneyGenerated\":452007.5441087012,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":197,\"moneyGainRatePerSecond\":82.40993314852926,\"onlineTimeSeconds\":7161.999999995688,\"ram\":32,\"totalMoneyGenerated\":451585.5578927334,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":197,\"moneyGainRatePerSecond\":82.40993314852926,\"onlineTimeSeconds\":7161.999999995688,\"ram\":32,\"totalMoneyGenerated\":444073.2761116379,\"name\":\"hacknet-node-13\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"The Black Hand\",\"NiteSec\",\"Aevum\",\"Sector-12\",\"Netburners\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":1,\"n\":5},{\"lvl\":1,\"n\":4}],\"numPeopleKilled\":0,\"karma\":-0.1,\"crime_money_mult\":1.28,\"crime_success_mult\":1.28,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"Sector-12\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.10368000000000001,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.3265906744866168,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":8737.901568003952,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":24558.902225864233,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":19741800,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.28,\"hacknet_node_money_mult\":1.28,\"hacknet_node_purchase_cost_mult\":0.72,\"hacknet_node_ram_cost_mult\":0.72,\"hacknet_node_core_cost_mult\":0.72,\"hacknet_node_level_cost_mult\":0.72,\"hasWseAccount\":true,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"entropy\":0,\"lastUpdate\":1651252203989,\"lastSave\":1651252184009,\"totalPlaytime\":6226044200,\"playtimeSinceLastAug\":68873000,\"playtimeSinceLastBitnode\":68873000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":750000000,\"corporation\":0,\"crime\":3840,\"gang\":0,\"hacking\":1767827657,\"hacknet\":6521117.300325167,\"hacknet_expenses\":-334904478.4220434,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-200000000,\"total\":80479516.80631033,\"work\":72326.14399999722,\"servers\":-1628640945.2149615,\"other\":-280400000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":750000000,\"corporation\":0,\"crime\":3840,\"gang\":0,\"hacking\":1767827657,\"hacknet\":6521117.300325167,\"hacknet_expenses\":-334904478.4220434,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-200000000,\"total\":80479516.80631033,\"work\":72326.14399999722,\"servers\":-1628640945.2149615,\"other\":-280400000,\"augmentations\":0}},\"scriptProdSinceLastAug\":1767827657,\"exploits\":[],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1645026146788},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1645028434786},{\"ID\":\"NS2\",\"unlockedOn\":1645044319911},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1645045831181},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1645056200950},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1645056560955},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1645066283086},{\"ID\":\"TOR\",\"unlockedOn\":1645066643085},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1645070003093},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1645097626865},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1645155279886},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1645183682014},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1645190539010},{\"ID\":\"TRAVEL\",\"unlockedOn\":1645202118069},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1645206439756},{\"ID\":\"WORKOUT\",\"unlockedOn\":1645274022801},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1645310391987},{\"ID\":\"NITESEC\",\"unlockedOn\":1645372344826},{\"ID\":\"4S\",\"unlockedOn\":1645407697058},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1645449421121},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1645451161327},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1645492247503},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1645588414067},{\"ID\":\"DONATION\",\"unlockedOn\":1645808344381},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1645842991741},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1646071287225},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1646082477122},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1646132482080},{\"ID\":\"SF1.1\",\"unlockedOn\":1646609210207},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1647371428634},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1648434173382},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1648692192627},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1648692192635},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1648695732622},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1648698912619},{\"ID\":\"CHALLENGE_BN1\",\"unlockedOn\":1649818533991},{\"ID\":\"SF5.1\",\"unlockedOn\":1650366868790},{\"ID\":\"SF4.1\",\"unlockedOn\":1651174604724}],\"terminalCommandHistory\":[\"restart\",\"hm\",\"hm; vim test.js\",\"hm; run test.js\",\"vim test.js\",\"run test.js\",\"restart\",\"mem phase1/batch.js\",\"mem\",\"free\",\"mem phase1/batch.js\",\"cls; mem phase1/batch.js\",\"cls; mem phase1/batch.js; mem batching/spawner.js\",\"restart\",\"ls\",\"run b1t_flum3.exe\",\"ls\",\"run clean.js\",\"ls\",\"restart\",\"vim phase1/nuke.js\",\"ls phase1\",\"restart\",\"run phase1/test.js\",\"restart\",\"run phase1/test.js\",\"mem phase1/monitor.js\",\"run phase1/test.js\",\"run phase1/monitor.js harakiri-sushi\",\"restart\",\"scan-analyze\",\"bkdr CSEC\",\"killall\",\"bkdr CSEC\",\"home;connect hong-fang-tea;connect CSEC;backdoor;\",\"hm\",\"run phase1/test.js\",\"mem phase1/actions/augmentations.js\",\"restart\",\"run phase1/cheapHack.js\",\"ps\",\"restart\",\"killall\",\"restart\",\"run phase1/restart.js\",\"restart\",\"run phase1/test.js\",\"hm\",\"hm; mem phase1/actions/factionHunt.js\",\"mem backdoor.js\"],\"identifier\":\"afc61675d036e\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"41.2.4.6\",\"isConnectedTo\":true,\"maxRam\":512,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":284.65000000000003,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/phase2/restart.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7164.209999995686,\"pid\":8985,\"ramUsage\":183.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/contracts/start.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7163.209999995687,\"pid\":8986,\"ramUsage\":24.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"backdoor.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7163.209999995687,\"pid\":8988,\"ramUsage\":42.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"factionWatch.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7163.209999995687,\"pid\":8989,\"ramUsage\":24.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"nuker.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7162.009999995688,\"pid\":8990,\"ramUsage\":4.3,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"phantasy\",708,null,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":334214.55359999853,\"onlineMoneyMade\":1298755903,\"onlineRunningTime\":7039.209999995794,\"pid\":9055,\"ramUsage\":5.85,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///f8712714-b16f-4862-8fab-c6a7f30020f9\",\"moduleSequenceNumber\":216264}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const files = ns.ls(\\\"home\\\", \\\".js\\\");\\n    ns.tprint(`Removing the following files:`);\\n    for (const file of files) {\\n        ns.tprint(`   ${file}`);\\n        ns.rm(file);\\n    }\\n}\\n\",\"filename\":\"clean.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"clean.js\",\"url\":\"blob:file:///dc95ce2f-e37b-458c-865c-ebdc394af57f\",\"moduleSequenceNumber\":38224}],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":270354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { commitCrime } from \\\"actions/crime\\\";\\nimport { getFactionRepGoal, workForFaction } from \\\"actions/factionWork\\\";\\nimport { etaCalculator } from \\\"utils/etaCalculator\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      ENTER YOUR SCRIPT DESCRIPTION HERE!\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n}\\nexport function priciestAug(ns, cap = getMaxPrice(ns)) {\\n    const owned = ns.singularity.getOwnedAugmentations(true);\\n    let allAugs = [];\\n    for (const faction of ns.getPlayer().factions) {\\n        for (const aug of ns.singularity\\n            .getAugmentationsFromFaction(faction)\\n            .filter((a) => {\\n            if (owned.includes(a))\\n                return false;\\n            for (const prereq of ns.singularity.getAugmentationPrereq(a)) {\\n                if (!owned.includes(prereq))\\n                    return false;\\n            }\\n            if (ns.singularity.getAugmentationPrice(a) > cap)\\n                return false;\\n            return true;\\n        })) {\\n            allAugs.push(aug);\\n        }\\n    }\\n    return allAugs.sort((a, b) => ns.singularity.getAugmentationPrice(b) -\\n        ns.singularity.getAugmentationPrice(a))[0];\\n}\\nexport async function farmRep(ns) {\\n    for (const faction of ns.getPlayer().factions) {\\n        if (!ns.singularity.isBusy() &&\\n            ns.singularity.getFactionRep(faction) < getFactionRepGoal(ns, faction)) {\\n            await workForFaction(ns, faction);\\n        }\\n    }\\n}\\nexport async function purchasePricey(ns) {\\n    const targetAug = priciestAug(ns);\\n    if (!targetAug)\\n        return false;\\n    ns.print(`target aug : ${targetAug}`);\\n    ns.print(`rep needed : ${ns.nFormat(ns.singularity.getAugmentationRepReq(targetAug), \\\"0.000a\\\")}`);\\n    for (const faction of ns\\n        .getPlayer()\\n        .factions.sort((a, b) => ns.singularity.getFactionRep(b) - ns.singularity.getFactionRep(a))) {\\n        if (ns.singularity.getAugmentationsFromFaction(faction).includes(targetAug)) {\\n            if (ns.singularity.getAugmentationRepReq(targetAug) >\\n                ns.singularity.getFactionRep(faction)) {\\n                ns.print(`Need rep with ${faction}.`);\\n                if (ns.singularity.isBusy() &&\\n                    ns.getPlayer().workType.includes(\\\"Faction\\\") &&\\n                    ns.getPlayer().currentWorkFactionName === faction) {\\n                    const totalRep = ns.singularity.getFactionRep(faction) +\\n                        ns.getPlayer().workRepGained;\\n                    const goal = ns.singularity.getAugmentationRepReq(targetAug);\\n                    const ETA = ((goal - totalRep) / ns.getPlayer().workRepGainRate) * 200;\\n                    ns.print(`ETA   : ${ns.tFormat(ETA)}`);\\n                    ns.print(`ETA   : ${etaCalculator(ns, ETA)}`);\\n                    if (totalRep >= goal)\\n                        ns.singularity.stopAction();\\n                }\\n                else if (!ns.singularity.isBusy() ||\\n                    // If we are working for a company stop for this.\\n                    ns.getPlayer().workType.toLowerCase().includes(\\\"company\\\"))\\n                    await workForFaction(ns, faction);\\n            }\\n            else if (ns.getServerMoneyAvailable(\\\"home\\\") >=\\n                ns.singularity.getAugmentationPrice(targetAug)) {\\n                ns.print(`Purchasing ${targetAug} from ${faction}`);\\n                ns.singularity.purchaseAugmentation(faction, targetAug);\\n            }\\n            else {\\n                const price = ns.singularity.getAugmentationPrice(targetAug);\\n                // ns.print(`Commiting crime to afford ${targetAug} from ${faction}`);\\n                ns.print(`Need ${ns.nFormat(price, \\\"$0.0a\\\")} to purchase ${targetAug}`);\\n                await commitCrime(ns);\\n            }\\n            break;\\n        }\\n    }\\n    return true;\\n}\\nfunction getMaxPrice(ns) {\\n    // this is the minimum max price. If we have more in our bank we will use that\\n    // instead.\\n    let min = 10000000000;\\n    if (ns.singularity.getOwnedAugmentations(true).length -\\n        ns.singularity.getOwnedAugmentations(false).length ===\\n        0)\\n        min = Infinity;\\n    return Math.max(ns.getServerMoneyAvailable(\\\"home\\\"), min);\\n}\\n\",\"filename\":\"/actions/augmentations.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":56.3,\"server\":\"home\",\"moduleSequenceNumber\":270230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { commitCrime } from \\\"actions/crime\\\";\\n// TODO: Sort and prioritize these.\\nconst companyPositions = [\\n    \\\"business\\\",\\n    \\\"business consultant\\\",\\n    \\\"software\\\",\\n    \\\"software consultant\\\",\\n    \\\"it\\\",\\n    \\\"agent\\\",\\n    \\\"security engineer\\\",\\n    \\\"security\\\",\\n    \\\"network engineer\\\",\\n    \\\"employee\\\",\\n    \\\"part-time employee\\\",\\n    \\\"waiter\\\",\\n    \\\"part-time waiter\\\",\\n];\\nconst factionCompanies = [\\n    {\\n        name: \\\"MegaCorp\\\",\\n        repGoal: 200000,\\n        city: \\\"Sector-12\\\",\\n    },\\n    {\\n        name: \\\"Four Sigma\\\",\\n        repGoal: 200000,\\n        city: \\\"Sector-12\\\",\\n    },\\n    {\\n        name: \\\"Blade Industries\\\",\\n        repGoal: 200000,\\n        city: \\\"Sector-12\\\",\\n    },\\n    {\\n        name: \\\"ECorp\\\",\\n        repGoal: 200000,\\n        city: \\\"Aevum\\\",\\n    },\\n    {\\n        name: \\\"Bachman & Associates\\\",\\n        repGoal: 200000,\\n        city: \\\"Aevum\\\",\\n    },\\n    {\\n        name: \\\"Clarke Incorporated\\\",\\n        repGoal: 200000,\\n        city: \\\"Aevum\\\",\\n    },\\n    {\\n        name: \\\"Fulcrum Technologies\\\",\\n        factionName: \\\"Fulcrum Secret Technologies\\\",\\n        repGoal: 250000,\\n        city: \\\"Aevum\\\",\\n    },\\n    {\\n        name: \\\"KuaiGong International\\\",\\n        repGoal: 200000,\\n        city: \\\"Chongqing\\\",\\n    },\\n    {\\n        name: \\\"NWO\\\",\\n        repGoal: 200000,\\n        city: \\\"Volhaven\\\",\\n    },\\n    {\\n        name: \\\"OmniTek Incorporated\\\",\\n        repGoal: 200000,\\n        city: \\\"Volhaven\\\",\\n    },\\n];\\n// Starts working for a company if possible. Returns true if successful. Cancels\\n// any other action.\\nexport async function workForCompany(ns, company, preferedPosition = undefined) {\\n    // first check if we are already working for that company.\\n    if (ns.singularity.isBusy() &&\\n        ns.getPlayer().workType.toLowerCase().includes(\\\"company\\\") &&\\n        ns.getPlayer().companyName.toLowerCase().includes(company.toLowerCase()))\\n        return true;\\n    // apply to the company\\n    if (preferedPosition) {\\n        ns.singularity.applyToCompany(company, preferedPosition);\\n    }\\n    else\\n        for (const position of companyPositions) {\\n            if (ns.singularity.applyToCompany(company, position))\\n                break;\\n        }\\n    return ns.singularity.workForCompany(company);\\n}\\nexport async function companyWork(ns) {\\n    // work for faction companies if possible/needed.\\n    for (const company of factionCompanies) {\\n        // first check if we are already invited/joined the company/faction\\n        if (ns.singularity\\n            .checkFactionInvitations()\\n            .concat(ns.getPlayer().factions)\\n            .includes(company.factionName || company.name))\\n            continue;\\n        // Now we know we need this faction invitation - check if we are already\\n        // working for it.\\n        if (ns.singularity.isBusy() &&\\n            ns.getPlayer().workType.toLowerCase().includes(\\\"company\\\") &&\\n            ns.getPlayer().companyName === company.name) {\\n            // we are working for the company should we finish?\\n            if (ns.singularity.getCompanyRep(company.name) +\\n                ns.getPlayer().workRepGained * 0.5 >=\\n                company.repGoal)\\n                ns.singularity.stopAction();\\n        }\\n        else if (await workForCompany(ns, company.name))\\n            return;\\n    }\\n    // if we still aren't busy start a life of crime\\n    if (!ns.singularity.isBusy())\\n        await commitCrime(ns);\\n}\\n\",\"filename\":\"/actions/companyWork.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":32.7,\"server\":\"home\",\"moduleSequenceNumber\":270236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { commitCrime } from \\\"actions/crime\\\";\\nimport { workForCompany } from \\\"actions/companyWork\\\";\\n// This class is for each faction in the game. It should hold everything we\\n// need to join the faction along with a method to test if the faction is\\n// needed.\\nexport class FactionData {\\n    constructor(ns, name, req) {\\n        this.ns = ns;\\n        this.name = name;\\n        this.requirements = req;\\n    }\\n    get needed() {\\n        if (this.ns.getPlayer().factions.includes(this.name))\\n            return false;\\n        if (this.ns.singularity\\n            .getAugmentationsFromFaction(this.name)\\n            .filter((aug) => !this.ns.singularity.getOwnedAugmentations(true).includes(aug)).length === 0)\\n            return false;\\n        return true;\\n    }\\n    get augs() {\\n        return this.ns.singularity.getAugmentationsFromFaction(this.name);\\n    }\\n    get neededAugs() {\\n        return this.augs.filter((aug) => !this.ns.singularity.getOwnedAugmentations(true).includes(aug));\\n    }\\n    get canJoin() {\\n        const ns = this.ns;\\n        const req = this.requirements;\\n        const player = this.ns.getPlayer();\\n        if (req.hackLevel && req.hackLevel > player.hacking)\\n            return false;\\n        if (req.strLevel && req.strLevel > player.strength)\\n            return false;\\n        if (req.defLevel && req.defLevel > player.defense)\\n            return false;\\n        if (req.dexLevel && req.dexLevel > player.dexterity)\\n            return false;\\n        if (req.agiLevel && req.agiLevel > player.agility)\\n            return false;\\n        if (req.chaLevel && req.chaLevel > player.charisma)\\n            return false;\\n        if (req.cashReq && req.cashReq > ns.getServerMoneyAvailable(\\\"home\\\"))\\n            return false;\\n        if (req.companyName &&\\n            req.companyRep &&\\n            req.companyRep > ns.singularity.getCompanyRep(req.companyName))\\n            return false;\\n        if (req.backdoorServer &&\\n            !ns.getServer(req.backdoorServer).backdoorInstalled)\\n            return false;\\n        function getHacknetStats() {\\n            let levels = 0;\\n            let ram = 0;\\n            let cores = 0;\\n            for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n                const node = ns.hacknet.getNodeStats(i);\\n                levels += node.level;\\n                ram += node.ram;\\n                cores += node.cores;\\n            }\\n            return {\\n                levels,\\n                cores,\\n                ram,\\n            };\\n        }\\n        const hacknetStats = getHacknetStats();\\n        if (req.hacknetLevels && req.hacknetLevels > hacknetStats.levels)\\n            return false;\\n        if (req.hacknetRAM && req.hacknetRAM > hacknetStats.ram)\\n            return false;\\n        if (req.hacknetCores && req.hacknetCores > hacknetStats.cores)\\n            return false;\\n        if (req.lockouts.length > 0) {\\n            for (const faction of player.factions) {\\n                if (req.lockouts.includes(faction))\\n                    return false;\\n            }\\n        }\\n        // TODO: figure out how to see karma?\\n        if (req.chiefOfCompanyReq) {\\n            // TODO: figure out how to check company positions.\\n        }\\n        if (req.peopleKilled && player.numPeopleKilled < req.peopleKilled)\\n            return false;\\n        if (req.augsReq &&\\n            req.augsReq > ns.singularity.getOwnedAugmentations(false).length)\\n            return false;\\n        // if nothing fails - success! - we can travel if we want.\\n        // TODO: also need to check Karma and the CEO/CFO/CSO positions\\n        return true;\\n    }\\n    async workToJoin() {\\n        if (!this.needed)\\n            return;\\n        const req = this.requirements;\\n        if (this.canJoin && req.locations.length > 0) {\\n            if (req.locations.includes(this.ns.getPlayer().location)) {\\n                // check other requirements\\n                if (req.chiefOfCompanyReq) {\\n                    await workForCompany(this.ns, \\\"MegaCorp\\\", \\\"business\\\");\\n                    return;\\n                }\\n                else {\\n                    await commitCrime(this.ns);\\n                    return;\\n                }\\n            }\\n        }\\n        // CHECK EVERYTHING HERE.\\n        // not much can be done if we need augs\\n        if (req.augsReq &&\\n            req.augsReq > this.ns.singularity.getOwnedAugmentations(false).length)\\n            return;\\n        const player = this.ns.getPlayer();\\n        if (req.strLevel && req.strLevel > player.strength)\\n            gym(this.ns, \\\"strength\\\");\\n        else if (req.defLevel && req.defLevel > player.defense)\\n            gym(this.ns, \\\"defense\\\");\\n        else if (req.dexLevel && req.dexLevel > player.dexterity)\\n            gym(this.ns, \\\"dexterity\\\");\\n        else if (req.agiLevel && req.agiLevel > player.agility)\\n            gym(this.ns, \\\"agility\\\");\\n        else if (req.chaLevel && req.chaLevel > player.charisma)\\n            university(this.ns, \\\"charisma\\\");\\n        else if (req.hackLevel && req.hackLevel > player.hacking)\\n            university(this.ns, \\\"hacking\\\");\\n        else if (req.companyName &&\\n            req.companyRep &&\\n            req.companyRep > this.ns.singularity.getCompanyRep(req.companyName)) {\\n            if (this.ns.singularity.isBusy() &&\\n                player.workType.includes(\\\"Company\\\") &&\\n                player.companyName === req.companyName &&\\n                req.companyRep <=\\n                    this.ns.singularity.getCompanyRep(req.companyName) +\\n                        player.workRepGained / 2)\\n                this.ns.singularity.stopAction();\\n            else\\n                await workForCompany(this.ns, req.companyName);\\n        }\\n        else if (req.peopleKilled && req.peopleKilled > player.numPeopleKilled)\\n            await commitCrime(this.ns, \\\"homicide\\\");\\n        else if (req.cashReq &&\\n            req.cashReq > this.ns.getServerMoneyAvailable(\\\"home\\\"))\\n            await commitCrime(this.ns);\\n    }\\n}\\nfunction gym(ns, stat) {\\n    const statGains = {\\n        strength: ns.getPlayer().workStrExpGainRate,\\n        defense: ns.getPlayer().workDefExpGainRate,\\n        dexterity: ns.getPlayer().workDexExpGainRate,\\n        agility: ns.getPlayer().workAgiExpGainRate,\\n    };\\n    if (ns.singularity.isBusy() && statGains[stat] > 0)\\n        return;\\n    ns.singularity.gymWorkout(\\\"Powerhouse Gym\\\", stat);\\n}\\nfunction university(ns, stat) {\\n    const statGains = {\\n        hacking: ns.getPlayer().workHackExpGainRate,\\n        charisma: ns.getPlayer().workChaExpGainRate,\\n    };\\n    if (ns.singularity.isBusy() && statGains[stat] > 0)\\n        return;\\n    ns.singularity.universityCourse(\\\"Rothman University\\\", stat === \\\"hacking\\\" ? \\\"algorithms\\\" : \\\"leadership\\\");\\n}\\nfunction getAllFactions(ns) {\\n    return [\\n        // Early Game\\n        new FactionData(ns, \\\"CyberSec\\\", {\\n            locations: [],\\n            lockouts: [],\\n            backdoorServer: \\\"CSEC\\\",\\n        }),\\n        new FactionData(ns, \\\"Tian Di Hui\\\", {\\n            locations: [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"],\\n            lockouts: [],\\n            hackLevel: 50,\\n            cashReq: 1000000,\\n        }),\\n        new FactionData(ns, \\\"Netburners\\\", {\\n            locations: [],\\n            lockouts: [],\\n            hackLevel: 80,\\n            hacknetLevels: 100,\\n            hacknetRAM: 8,\\n            hacknetCores: 4,\\n        }),\\n        // City Factions\\n        new FactionData(ns, \\\"Sector-12\\\", {\\n            locations: [\\\"Sector-12\\\"],\\n            lockouts: [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"],\\n            cashReq: 15000000,\\n        }),\\n        new FactionData(ns, \\\"Aevum\\\", {\\n            locations: [\\\"Aevum\\\"],\\n            lockouts: [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"],\\n            cashReq: 40000000,\\n        }),\\n        new FactionData(ns, \\\"Chongqing\\\", {\\n            locations: [\\\"Chongqing\\\"],\\n            lockouts: [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Volhaven\\\"],\\n            cashReq: 20000000,\\n        }),\\n        new FactionData(ns, \\\"New Tokyo\\\", {\\n            locations: [\\\"New Tokyo\\\"],\\n            lockouts: [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Volhaven\\\"],\\n            cashReq: 20000000,\\n        }),\\n        new FactionData(ns, \\\"Ishima\\\", {\\n            locations: [\\\"Ishima\\\"],\\n            lockouts: [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Volhaven\\\"],\\n            cashReq: 30000000,\\n        }),\\n        new FactionData(ns, \\\"Volhaven\\\", {\\n            locations: [\\\"Volhaven\\\"],\\n            lockouts: [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"],\\n            cashReq: 50000000,\\n        }),\\n        // Hacking Groups\\n        new FactionData(ns, \\\"NiteSec\\\", {\\n            locations: [],\\n            lockouts: [],\\n            backdoorServer: \\\"avmnite-02h\\\",\\n        }),\\n        new FactionData(ns, \\\"The Black Hand\\\", {\\n            locations: [],\\n            lockouts: [],\\n            backdoorServer: \\\"I.I.I.I\\\",\\n        }),\\n        new FactionData(ns, \\\"BitRunners\\\", {\\n            locations: [],\\n            lockouts: [],\\n            backdoorServer: \\\"run4theh111z\\\",\\n        }),\\n        // Corporations\\n        new FactionData(ns, \\\"MegaCorp\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"MegaCorp\\\",\\n            companyRep: 200000,\\n        }),\\n        new FactionData(ns, \\\"Four Sigma\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"Four Sigma\\\",\\n            companyRep: 200000,\\n        }),\\n        new FactionData(ns, \\\"Blade Industries\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"Blade Industries\\\",\\n            companyRep: 200000,\\n        }),\\n        new FactionData(ns, \\\"ECorp\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"ECorp\\\",\\n            companyRep: 200000,\\n        }),\\n        new FactionData(ns, \\\"Bachman & Associates\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"Bachman & Associates\\\",\\n            companyRep: 200000,\\n        }),\\n        new FactionData(ns, \\\"Clarke Incorporated\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"Clarke Incorporated\\\",\\n            companyRep: 200000,\\n        }),\\n        new FactionData(ns, \\\"Fulcrum Secret Technologies\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"Fulcrum Technologies\\\",\\n            companyRep: 250000,\\n            backdoorServer: \\\"fulcrumassets\\\",\\n        }),\\n        new FactionData(ns, \\\"KuaiGong International\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"KuaiGong International\\\",\\n            companyRep: 200000,\\n        }),\\n        new FactionData(ns, \\\"NWO\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"NWO\\\",\\n            companyRep: 200000,\\n        }),\\n        new FactionData(ns, \\\"OmniTek Incorporated\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"OmniTek Incorporated\\\",\\n            companyRep: 200000,\\n        }),\\n        // Criminal Organizations\\n        new FactionData(ns, \\\"Slum Snakes\\\", {\\n            locations: [],\\n            lockouts: [],\\n            cashReq: 1000000,\\n            karmaReq: -9,\\n            strLevel: 30,\\n            defLevel: 30,\\n            dexLevel: 30,\\n            agiLevel: 30,\\n        }),\\n        new FactionData(ns, \\\"Tetrads\\\", {\\n            locations: [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"],\\n            lockouts: [],\\n            karmaReq: -18,\\n            strLevel: 75,\\n            defLevel: 75,\\n            dexLevel: 75,\\n            agiLevel: 75,\\n        }),\\n        new FactionData(ns, \\\"Silhouette\\\", {\\n            locations: [],\\n            lockouts: [],\\n            karmaReq: -22,\\n            cashReq: 15000000,\\n            chiefOfCompanyReq: true,\\n        }),\\n        new FactionData(ns, \\\"Speakers for the Dead\\\", {\\n            locations: [],\\n            lockouts: [],\\n            hackLevel: 100,\\n            strLevel: 300,\\n            defLevel: 300,\\n            dexLevel: 300,\\n            agiLevel: 300,\\n            peopleKilled: 30,\\n            karmaReq: -45,\\n        }),\\n        new FactionData(ns, \\\"The Dark Army\\\", {\\n            locations: [\\\"Chongqing\\\"],\\n            lockouts: [],\\n            hackLevel: 300,\\n            strLevel: 300,\\n            defLevel: 300,\\n            dexLevel: 300,\\n            agiLevel: 300,\\n            peopleKilled: 5,\\n            karmaReq: -45,\\n        }),\\n        new FactionData(ns, \\\"The Syndicate\\\", {\\n            locations: [\\\"Aevum\\\", \\\"Sector-12\\\"],\\n            lockouts: [],\\n            hackLevel: 200,\\n            strLevel: 200,\\n            defLevel: 200,\\n            dexLevel: 200,\\n            agiLevel: 200,\\n            cashReq: 10000000,\\n            karmaReq: -90,\\n        }),\\n        // Endgame Factions\\n        new FactionData(ns, \\\"Daedalus\\\", {\\n            locations: [],\\n            lockouts: [],\\n            augsReq: 30,\\n            cashReq: 100000000000,\\n            hackLevel: 2500,\\n        }),\\n        new FactionData(ns, \\\"The Covenant\\\", {\\n            locations: [],\\n            lockouts: [],\\n            augsReq: 20,\\n            cashReq: 75000000000,\\n            hackLevel: 850,\\n            strLevel: 850,\\n            defLevel: 850,\\n            dexLevel: 850,\\n            agiLevel: 850,\\n        }),\\n        new FactionData(ns, \\\"Illuminati\\\", {\\n            locations: [],\\n            lockouts: [],\\n            augsReq: 30,\\n            cashReq: 150000000000,\\n            hackLevel: 1500,\\n            strLevel: 1200,\\n            defLevel: 1200,\\n            dexLevel: 1200,\\n            agiLevel: 1200,\\n        }),\\n    ];\\n}\\nexport function getNeededFactions(ns) {\\n    return getAllFactions(ns).filter((faction) => faction.needed);\\n}\\nfunction getAllAugs(ns) {\\n    const allAugs = getAllFactions(ns).flatMap((f) => f.augs);\\n    return Array.from(new Set(allAugs));\\n}\\nexport function getUninstalledAugs(ns) {\\n    return getAllAugs(ns).filter((aug) => !ns.singularity.getOwnedAugmentations(false).includes(aug));\\n}\\n\",\"filename\":\"/actions/factionHunt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":49.7,\"server\":\"home\",\"moduleSequenceNumber\":270234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { shareAll } from \\\"shareAll\\\";\\nconst workTypes = [\\\"Hacking Contracts\\\", \\\"Field Work\\\", \\\"Security Work\\\"];\\nexport async function main(ns) {\\n    // Work for the given faction using the most expedient method (usually hacking)\\n    const faction = ns.args[0];\\n    if (!ns.singularity.isBusy())\\n        await workForFaction(ns, faction);\\n}\\nexport async function workForFaction(ns, faction) {\\n    const goal = getFactionRepGoal(ns, faction);\\n    await shareAll(ns);\\n    if (ns.singularity.isBusy() &&\\n        ns.getPlayer().workType.toLowerCase().includes(\\\"faction\\\") &&\\n        ns.getPlayer().currentWorkFactionName === faction) {\\n        ns.print(`Max Rep : ${ns.nFormat(goal, \\\"0.000a\\\")}`);\\n        if (ns.singularity.getFactionRep(faction) + ns.getPlayer().workRepGained >=\\n            goal) {\\n            ns.singularity.stopAction();\\n        }\\n        return;\\n    }\\n    for (const workType of workTypes) {\\n        if (ns.singularity.workForFaction(faction, workType))\\n            return;\\n    }\\n    ns.toast(`ERROR! ${faction} does not offer any work!`);\\n}\\nexport function getFactionRepGoal(ns, faction) {\\n    const owned = ns.singularity.getOwnedAugmentations(true);\\n    let highestRep = 0;\\n    for (const aug of ns.singularity\\n        .getAugmentationsFromFaction(faction)\\n        .filter((a) => !owned.includes(a))) {\\n        const rep = ns.singularity.getAugmentationRepReq(aug);\\n        if (rep > highestRep)\\n            highestRep = rep;\\n    }\\n    return highestRep;\\n}\\n\",\"filename\":\"/actions/factionWork.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":24.7,\"server\":\"home\",\"moduleSequenceNumber\":270238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    await commitCrime(ns, ns.args[0] || \\\"homicide\\\", ns.args[1] || 0);\\n}\\nconst crimes = [\\n    \\\"heist\\\",\\n    \\\"assassinate\\\",\\n    \\\"kidnap\\\",\\n    \\\"grand theft auto\\\",\\n    \\\"homicide\\\",\\n    \\\"traffick illegal arms\\\",\\n    \\\"bond forgery\\\",\\n    \\\"deal drugs\\\",\\n    \\\"larceny\\\",\\n    \\\"mug\\\",\\n    \\\"rob store\\\",\\n    \\\"shoplift\\\",\\n    //\\n];\\nexport async function commitCrime(ns, crime = undefined, goal = 0) {\\n    if (!crime)\\n        crime = getBestCrime(ns);\\n    while (true) {\\n        ns.disableLog(\\\"ALL\\\");\\n        ns.enableLog(\\\"commitCrime\\\");\\n        ns.tail();\\n        if (!ns.singularity.isBusy()) {\\n            ns.singularity.commitCrime(crime);\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= goal)\\n            return;\\n        await ns.sleep(1);\\n    }\\n}\\nfunction getBestCrime(ns) {\\n    return crimes.sort((a, b) => crimeCashValue(ns, b) - crimeCashValue(ns, a))[0];\\n}\\n// This gives the cash value of a crime taking in to account the chance of\\n// success as well as the time taken.\\nfunction crimeCashValue(ns, crime) {\\n    const chance = ns.singularity.getCrimeChance(crime);\\n    const stats = ns.singularity.getCrimeStats(crime);\\n    const cash = ns.getBitNodeMultipliers().CrimeMoney * stats.money;\\n    return (cash * chance) / stats.time ** 2 + 1 / stats.time ** 2;\\n}\\n\",\"filename\":\"/actions/crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.2,\"server\":\"home\",\"moduleSequenceNumber\":270232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const programName = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !programName) {\\n        ns.tprint(`\\n      This script will create a program for you.\\n      It requires Source File 4 to work.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} PROGRAM_NAME\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    while (!ns.fileExists(programName)) {\\n        ns.clearLog();\\n        await createProgram(ns, programName);\\n        await ns.sleep(1);\\n    }\\n}\\nexport async function createProgram(ns, programName) {\\n    ns.tail();\\n    if (ns.fileExists(programName) &&\\n        ns.singularity.isBusy() &&\\n        ns.getPlayer().workType.toLowerCase().includes(\\\"program\\\") &&\\n        ns.getPlayer().createProgramName === programName) {\\n        ns.singularity.stopAction();\\n        return;\\n    }\\n    if (ns.singularity.purchaseTor() &&\\n        ns.singularity.purchaseProgram(programName))\\n        return;\\n    if (!ns.singularity.isBusy() ||\\n        !ns.getPlayer().workType.toLowerCase().includes(\\\"program\\\")) {\\n        // ns.toast(ns.getPlayer().workType);\\n        ns.singularity.createProgram(programName);\\n    }\\n}\\n\",\"filename\":\"/actions/programming.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.8,\"server\":\"home\",\"moduleSequenceNumber\":270242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function hasSourceFile(ns, n) {\\n    return (ns\\n        .getOwnedSourceFiles()\\n        .map((sf) => sf.n)\\n        .includes(n) || ns.getPlayer().bitNodeN === n);\\n}\\n\",\"filename\":\"/actions/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":270240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"cnct\\\";\\nimport { kill } from \\\"utils/scriptKilling\\\";\\nimport { prepBatch } from \\\"batching/prepBatch\\\";\\nimport { runSpawner, spawnerName } from \\\"batching/runSpawner\\\";\\nimport { ps } from \\\"ps\\\";\\nimport { expandServer } from \\\"expandServer\\\";\\nimport { purchaseServers, upgradeServers } from \\\"purchase\\\";\\nconst minBufferTime = 60;\\nlet bufferTime = minBufferTime;\\nconst growMultiplier = 4;\\nconst hackPercent = 0.5;\\nconst runningScripts = [\\n    \\\"/batching/hack.js\\\",\\n    \\\"/batching/grow.js\\\",\\n    \\\"/batching/weaken.js\\\",\\n    spawnerName,\\n];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"exec\\\");\\n    ns.enableLog(\\\"run\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This will continuously batch hack a target from a host.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET\\n      `);\\n        return;\\n    }\\n    await batch(ns, target);\\n}\\nexport async function batch(ns, target) {\\n    // first prep the server\\n    await prepBatch(ns, target);\\n    // now find the required number of threads for each action.\\n    const growThreads = Math.ceil(ns.growthAnalyze(target, growMultiplier));\\n    const hackThreads = Math.ceil(hackPercent / ns.hackAnalyze(target));\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    const hackSecurityDelta = ns.hackAnalyzeSecurity(hackThreads);\\n    let weakenThreads = 0;\\n    let targetDelta = Math.max(growSecurityDelta, hackSecurityDelta);\\n    // pin targetDelta to 100 to prevent infinity\\n    if (targetDelta > 100)\\n        targetDelta = 100;\\n    const maxThreads = Math.max(hackThreads, weakenThreads, growThreads);\\n    const reserveRam = Math.max(...runningScripts.map((script) => ns.getScriptRam(script) * maxThreads));\\n    const scriptCount = Math.floor(totalRAM(ns) / reserveRam);\\n    // calculate timing\\n    const { hackTime, growTime, weakenTime } = getTiming(ns, target);\\n    const maxTime = Math.max(hackTime, growTime, weakenTime);\\n    bufferTime = maxTime / scriptCount;\\n    if (bufferTime < minBufferTime)\\n        bufferTime = minBufferTime;\\n    // check if this server is already being batched.\\n    if (ps(ns).find((ps) => ps.ps.filename === spawnerName &&\\n        ps.ps.args.includes(\\\"hack\\\") &&\\n        ps.ps.args.includes(target)\\n    // &&\\n    //   ps.ps.args.includes(bufferTime)\\n    ))\\n        // already hacking\\n        return;\\n    // otherwise kill any batching that is going on.\\n    kill(ns, (ps) => ps.filename === spawnerName ||\\n        (ps.filename.includes(\\\"batch.js\\\") && !ps.args.includes(target)));\\n    while (ns.weakenAnalyze(weakenThreads) < targetDelta) {\\n        await ns.sleep(1);\\n        weakenThreads += 1;\\n        ns.clearLog();\\n        ns.print(`Calculating Weaken Threads: ${weakenThreads}`);\\n        ns.print(`${weakenThreads} threads will cut security by ${ns.weakenAnalyze(weakenThreads)}`);\\n        ns.print(`Target security is ${targetDelta}`);\\n    }\\n    // sanity check\\n    if (hackTime > growTime || hackTime > weakenTime || growTime > weakenTime) {\\n        ns.tprint(`Something screwy going on with ${target} timing`);\\n        return;\\n    }\\n    ns.toast(`Hacking ${target}`);\\n    await runSpawner(ns, \\\"weaken\\\", target, weakenThreads, bufferTime, 1);\\n    ns.toast(`Weaken 1 on ${target}`);\\n    await ns.sleep(weakenTime - (bufferTime * 2) / 3);\\n    await runSpawner(ns, \\\"weaken\\\", target, weakenThreads, bufferTime, 2);\\n    ns.toast(`Weaken 2 on ${target}..`);\\n    await ns.sleep(weakenTime - growTime - bufferTime / 3);\\n    await runSpawner(ns, \\\"grow\\\", target, growThreads, bufferTime);\\n    ns.toast(`Grow on ${target}..`);\\n    await ns.sleep(growTime - hackTime - (bufferTime * 2) / 3);\\n    await runSpawner(ns, \\\"hack\\\", target, hackThreads, bufferTime);\\n    ns.toast(`HACKING ${target}!`);\\n}\\nfunction getTiming(ns, target) {\\n    let hackTime = 1;\\n    let growTime = 1;\\n    let weakenTime = 1;\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n        const server = ns.getServer(target);\\n        server.hackDifficulty = server.minDifficulty;\\n        const player = ns.getPlayer();\\n        hackTime = ns.formulas.hacking.hackTime(server, player);\\n        growTime = ns.formulas.hacking.growTime(server, player);\\n        weakenTime = ns.formulas.hacking.weakenTime(server, player);\\n    }\\n    else {\\n        hackTime = ns.getHackTime(target);\\n        growTime = ns.getGrowTime(target);\\n        weakenTime = ns.getWeakenTime(target);\\n    }\\n    return { hackTime, growTime, weakenTime };\\n}\\nexport async function prepareServer(ns, target) {\\n    // now find the required number of threads for each action.\\n    const growThreads = Math.ceil(ns.growthAnalyze(target, growMultiplier));\\n    const hackThreads = Math.ceil(hackPercent / ns.hackAnalyze(target));\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    const hackSecurityDelta = ns.hackAnalyzeSecurity(hackThreads);\\n    let weakenThreads = 0;\\n    let targetDelta = Math.max(growSecurityDelta, hackSecurityDelta);\\n    // pin targetDelta to 100 to prevent infinity\\n    if (targetDelta > 100)\\n        targetDelta = 100;\\n    while (ns.weakenAnalyze(weakenThreads) < targetDelta) {\\n        await ns.sleep(1);\\n        weakenThreads += 1;\\n        // ns.clearLog();\\n        // ns.print(`Calculating Weaken Threads: ${weakenThreads}`);\\n        // ns.print(\\n        //   `${weakenThreads} threads will cut security by ${ns.weakenAnalyze(\\n        //     weakenThreads\\n        //   )}`\\n        // );\\n        // ns.print(`Target security is ${targetDelta}`);\\n    }\\n    // ns.print(`Preparing ${target} for hacking...`);\\n    // ns.print(\\\"Growing...\\\");\\n    await killMsg(ns, \\\"hack\\\", target);\\n    ns.run(spawnerName, 1, \\\"grow\\\", target, growThreads, bufferTime);\\n    ns.run(spawnerName, 1, \\\"weaken\\\", target, weakenThreads, bufferTime);\\n    while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n        expandServer(ns);\\n        if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n            await purchaseServers(ns);\\n        else\\n            await upgradeServers(ns);\\n        await ns.sleep(1);\\n    }\\n    // ns.kill(growPid);\\n    await killMsg(ns, \\\"grow\\\", target);\\n    // ns.print(\\\"Weakening...\\\");\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n        expandServer(ns);\\n        if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n            await purchaseServers(ns);\\n        else\\n            await upgradeServers(ns);\\n        await ns.sleep(1);\\n    }\\n    // ns.kill(weakenPid);\\n    await killMsg(ns, \\\"weaken\\\", target);\\n}\\nasync function killMsg(ns, cmd, target) {\\n    kill(ns, (ps) => {\\n        if (ps.filename === spawnerName &&\\n            ps.args.includes(cmd) &&\\n            ps.args.includes(target))\\n            return true;\\n        if (ps.filename.includes(cmd) && ps.args.includes(target))\\n            return true;\\n        return false;\\n    });\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\nfunction totalRAM(ns) {\\n    let total = 0;\\n    for (const { hostname } of getRunnableServers(ns)) {\\n        total += hostname ? ns.getServerMaxRam(hostname) : 0;\\n    }\\n    return total - ns.getServerUsedRam(\\\"home\\\");\\n}\\n\",\"filename\":\"/batching/batch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"purchase.js\",\"url\":\"blob:file:///83253400-2f92-4db3-ac54-bb031a79023f\",\"moduleSequenceNumber\":245463},{\"filename\":\"expandServer.js\",\"url\":\"blob:file:///6c21073b-89fc-413a-b1a5-b1cd54e29cf8\",\"moduleSequenceNumber\":245441},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///dc3a5d90-ebeb-4089-acca-767e68f5b2ec\",\"moduleSequenceNumber\":245427},{\"filename\":\"ps.js\",\"url\":\"blob:file:///726448e0-8837-4a7e-9898-d50d1ebffe67\",\"moduleSequenceNumber\":245461},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///6e235677-9e8d-462d-b80e-c1be8148a8d7\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///40d0a93a-da75-4629-bbcc-69abbaf79e16\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///42e8deff-986c-4fe3-ad4c-3f374f1fd133\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///5b75de19-e187-47e2-bf1d-a5d6fd68793f\",\"moduleSequenceNumber\":245439},{\"filename\":\"/batching/runSpawner.js\",\"url\":\"blob:file:///a6f6c4d3-95e6-4a94-b9ec-95174f7ee870\",\"moduleSequenceNumber\":245337},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///9c7ca67f-efff-4a7c-b731-5b648dc26bae\",\"moduleSequenceNumber\":245427},{\"filename\":\"ps.js\",\"url\":\"blob:file:///905ed5e3-8b65-4532-b4f8-dec63cf26707\",\"moduleSequenceNumber\":245461},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///0de31806-1ba1-49e8-abdf-5d953e68aa1e\",\"moduleSequenceNumber\":245463},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///66865f88-5b2d-472b-a855-112763fb7606\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///2d4668d8-4f24-4faa-922a-d4fcfc23500c\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///527ebc6c-81b6-413d-b09a-dce2df072f30\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///c1071796-109f-429f-b168-fb8444fedd0b\",\"moduleSequenceNumber\":245439},{\"filename\":\"/batching/runSpawner.js\",\"url\":\"blob:file:///ee9cab84-56e8-4496-9b47-54ffe6ff11ac\",\"moduleSequenceNumber\":245337},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///61a3f019-5683-41c8-b20f-e33bdcd9a0b7\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///3b4a7083-358b-44a3-8a90-ca567e6db728\",\"moduleSequenceNumber\":245425},{\"filename\":\"/batching/prepBatch.js\",\"url\":\"blob:file:///b3b4924e-3cee-4764-9b2c-b4e26886d028\",\"moduleSequenceNumber\":245335},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///947c2f7e-15ea-4751-9436-2c34261eb634\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///92b44e15-d312-45b4-8b61-fa869dcf1c10\",\"moduleSequenceNumber\":245425},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///52bcf08e-52bc-4434-9978-27f81900fcae\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///3442c377-5c3e-463a-b9ef-09ef7588a1db\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///4d2a07b9-5746-4148-b9b3-4d16513a6846\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///a9cf18d2-775f-4a6f-84df-92d3ddf3bbb4\",\"moduleSequenceNumber\":245439},{\"filename\":\"/batching/batch.js\",\"url\":\"blob:file:///b5bd7cb1-b536-418f-88a5-0367745fc262\",\"moduleSequenceNumber\":256963}],\"dependents\":[],\"ramUsage\":31.1,\"server\":\"home\",\"moduleSequenceNumber\":270244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":270246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":270248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { kill } from \\\"utils/scriptKilling\\\";\\nimport { runSpawner, spawnerName } from \\\"batching/runSpawner\\\";\\nimport { purchaseServers, upgradeServers } from \\\"purchase\\\";\\nimport { ps } from \\\"ps\\\";\\nconst bufferTime = 3000;\\nconst growMultiplier = 4;\\nconst analyzeScript = \\\"/analyzeServer.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"exec\\\");\\n    ns.enableLog(\\\"run\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This will continuously prepare a server untill it's money is at maximum and it's security is at minimum.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET\\n      `);\\n        return;\\n    }\\n    // analyze the server\\n    ns.run(analyzeScript, 1, target, `Batch attack!`);\\n    await prepBatch(ns, target);\\n}\\nexport async function prepBatch(ns, target) {\\n    if (ps(ns).find((proc) => (proc.ps.filename === spawnerName &&\\n        proc.ps.args.includes(\\\"hack\\\") &&\\n        proc.ps.args.includes(target)) ||\\n        (proc.ps.filename === \\\"hack.js\\\" && proc.ps.args.includes(target))))\\n        return;\\n    kill(ns, (proc) => proc.filename === spawnerName);\\n    // now find the required number of threads for each action.\\n    const growThreads = Math.ceil(ns.growthAnalyze(target, growMultiplier));\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    let weakenThreads = 0;\\n    let targetDelta = growSecurityDelta;\\n    // pin targetDelta to 100 to prevent infinity\\n    if (targetDelta > 100)\\n        targetDelta = 100;\\n    while (ns.weakenAnalyze(weakenThreads) < targetDelta) {\\n        if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n            await purchaseServers(ns);\\n        else\\n            await upgradeServers(ns);\\n        await ns.sleep(1);\\n        weakenThreads += 1;\\n        ns.clearLog();\\n        ns.print(`Calculating Weaken Threads: ${weakenThreads}`);\\n        ns.print(`${weakenThreads} threads will cut security by ${ns.weakenAnalyze(weakenThreads)}`);\\n        ns.print(`Target security is ${targetDelta}`);\\n    }\\n    ns.clearLog();\\n    // calculate timing\\n    const { hackTime, growTime, weakenTime } = getTiming(ns, target);\\n    // sanity check\\n    if (hackTime > growTime || hackTime > weakenTime || growTime > weakenTime) {\\n        ns.tprint(`Something screwy going on with ${target} timing`);\\n        return;\\n    }\\n    ns.toast(`Preparing ${target}`);\\n    await runSpawner(ns, \\\"weaken\\\", target, weakenThreads, bufferTime);\\n    ns.clearLog();\\n    ns.toast(`Weakening ${target}`);\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n        ns.clearLog();\\n        if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n            await purchaseServers(ns);\\n        else\\n            await upgradeServers(ns);\\n        await ns.sleep(1);\\n    }\\n    ns.clearLog();\\n    await runSpawner(ns, \\\"grow\\\", target, growThreads, bufferTime);\\n    ns.clearLog();\\n    ns.toast(`Growing ${target}`);\\n    while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n        ns.clearLog();\\n        if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n            await purchaseServers(ns);\\n        else\\n            await upgradeServers(ns);\\n        await ns.sleep(1);\\n    }\\n    ns.clearLog();\\n    kill(ns, (ps) => ps.filename === spawnerName);\\n}\\nfunction getTiming(ns, target) {\\n    let hackTime = 1;\\n    let growTime = 1;\\n    let weakenTime = 1;\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n        const server = ns.getServer(target);\\n        server.hackDifficulty = server.minDifficulty;\\n        const player = ns.getPlayer();\\n        hackTime = ns.formulas.hacking.hackTime(server, player);\\n        growTime = ns.formulas.hacking.growTime(server, player);\\n        weakenTime = ns.formulas.hacking.weakenTime(server, player);\\n    }\\n    else {\\n        hackTime = ns.getHackTime(target);\\n        growTime = ns.getGrowTime(target);\\n        weakenTime = ns.getWeakenTime(target);\\n    }\\n    return { hackTime, growTime, weakenTime };\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\n\",\"filename\":\"/batching/prepBatch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":20.05,\"server\":\"home\",\"moduleSequenceNumber\":270250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"cnct\\\";\\nexport const spawnerName = \\\"/batching/spawner.js\\\";\\nconst killScripts = [\\n    \\\"/batching/weaken.js\\\",\\n    \\\"/batching/grow.js\\\",\\n    \\\"/batching/hack.js\\\",\\n];\\nexport async function runSpawner(ns, cmd, target, threads, bufferTime, index = 0) {\\n    let host = getRunnableServers(ns)[0];\\n    await ns.scp(spawnerName, \\\"home\\\", host.hostname);\\n    for (const script of killScripts) {\\n        ns.scriptKill(script, host.hostname);\\n    }\\n    if (!ns.exec(spawnerName, host.hostname, 1, cmd, target, threads, bufferTime, index))\\n        await runSpawner(ns, cmd, target, threads, bufferTime);\\n}\\n\",\"filename\":\"/batching/runSpawner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.05,\"server\":\"home\",\"moduleSequenceNumber\":270252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\nconst reserveScripts = [cnctScript, bkdrScript, \\\"/phase2/restart.js\\\"];\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1000 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(...reserveScripts.map((script) => ns.getScriptRam(script)))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///d1697237-f075-464f-b642-f6e60d313ccb\",\"moduleSequenceNumber\":257866}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"home\",\"moduleSequenceNumber\":270254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":270256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   let data = ns.args\\n//     .join(\\\" \\\")\\n//     .split(\\\" \\\")\\n//     .map((s) => parseInt(s));\\n//   // data = [0, 5, 3, 10, 0, 3, 10, 0, 4, 6, 6, 0, 0, 7, 0, 1, 1];\\n//   ns.tprint(solveJump(data));\\n//   ns.print(solveJump(data));\\n// }\\n//\\n// Array Jumping Game\\n//\\n// You are attempting to solve a Coding Contract. You have 1 tries remaining, after which the contract will self-destruct.\\n//\\n// You are given the following array of integers:\\n//\\n// 0,5,3,10,0,3,10,0,4,6,6,0,0,7,0,1,1 => 0\\n// 7,1,3,0,0,4,1,5,0,4,6,8,0,0,7,6,0,2,5,4,0=> 1\\n//\\n// Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n.\\n//\\n// Assuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\n//\\n// Your answer should be submitted as 1 or 0, representing true and false respectively\\nexport function solveJump(data) {\\n    if (data.length === 0)\\n        return 1;\\n    const maxJump = data[0];\\n    if (maxJump === 0)\\n        return 0;\\n    if (maxJump >= data.length)\\n        return 1;\\n    // find the best jump and solve it.\\n    let bestJump = [1, 1];\\n    for (let i = 1; i <= maxJump; i++) {\\n        const nextMax = data[i];\\n        const jumpValue = nextMax + i + 1;\\n        if (jumpValue >= data.length)\\n            return 1;\\n        if (jumpValue > bestJump[1])\\n            bestJump = [i, jumpValue];\\n    }\\n    return solveJump(data.slice(bestJump[0]));\\n}\\n\",\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":270258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//GREATEST FACTOR\\nexport function factor(num) {\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\n        if (num % div != 0) {\\n            continue;\\n        }\\n        num = num / div;\\n        div = 1;\\n    }\\n    return num;\\n}\\n\",\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":270260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//Find All Valid Math Expressions\\n// You are attempting to solve a Coding Contract. You have 10 tries remaining, after which the contract will self-destruct.\\n// You are given the following string which contains only digits between 0 and 9:\\n// 288074550300\\n// You are also given a target number of 99. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\n// The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\n// [\\\"288074550300\\\", 99]\\n// NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\"1+01\\\" is not a valid expression Examples:\\n// Input: digits = \\\"123\\\", target = 6\\n// Output: [1+2+3, 1*2*3]\\n// Input: digits = \\\"105\\\", target = 5\\n// Output: [1*0+5, 10-5]\\n//\\nexport async function main(ns) {\\n    const testData = [\\\"288074550300\\\", 99];\\n    ns.tprint(await findMathExpression(ns, testData));\\n}\\n// TODO: Fix this as it freezes the ui.\\nexport async function findMathExpression(ns, data) {\\n    const digits = data[0].split(\\\"\\\");\\n    // [1, 2, 3, 4, 5]\\n    const operators = [\\\"+\\\", \\\"-\\\", \\\"*\\\", \\\"\\\"];\\n    // [+, -, *, ]\\n    let expressions = [digits[0], \\\"-\\\" + digits[0]].flatMap((d) => operators.map((op) => d + op));\\n    // [1+, 1-, 1*, 1, -1+, -1-, -1*, -1]\\n    for (let i = 1; i < digits.length - 1; i++) {\\n        await ns.sleep(1);\\n        expressions = expressions.flatMap((e) => operators.map((op) => e + digits[i] + op));\\n        // [1+2+, 1+2-, 1+2*, 1+2, 1-2+, ...]\\n    }\\n    let finalExpressions = [];\\n    for (const e of expressions.map((e) => e + digits[digits.length - 1])) {\\n        await ns.sleep(1);\\n        try {\\n            if (eval(e) === data[1])\\n                finalExpressions.push(e);\\n        }\\n        catch (e) {\\n            continue;\\n        }\\n    }\\n    return finalExpressions;\\n}\\nexport async function _findMathExpression(ns, data) {\\n    const digits = data[0].split(\\\"\\\");\\n    const operators = [\\\"+\\\", \\\"-\\\", \\\"*\\\", \\\"\\\"];\\n    let expressions = [digits[0], \\\"-\\\" + digits[0]].flatMap((d) => operators.map((op) => d + op));\\n    for (let i = 1; i < digits.length - 1; i++) {\\n        await ns.sleep(30);\\n        expressions = expressions.flatMap((e) => operators.map((op) => e + digits[i] + op));\\n    }\\n    return expressions\\n        .map((e) => e + digits[digits.length - 1])\\n        .filter((e) => {\\n        try {\\n            return eval(e) === data[1];\\n        }\\n        catch (e) {\\n            return false;\\n        }\\n    });\\n}\\n\",\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":270262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//GENERATE IP ADDRESSES\\nexport function generateIps(num) {\\n    num = num.toString();\\n    const length = num.length;\\n    let ips = [];\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length),\\n                ];\\n                let isValid = true;\\n                ip.forEach((seg) => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n                if (isValid)\\n                    ips.push(ip.join(\\\".\\\"));\\n            }\\n        }\\n    }\\n    return ips;\\n}\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\")\\n        return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255)\\n        return false;\\n    return true;\\n}\\n\",\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":270264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export * from \\\"contracts/solvers/totalWaysToSum.js\\\";\\nexport * from \\\"contracts/solvers/arrayJumpingGame.js\\\";\\nexport * from \\\"contracts/solvers/solveSum.js\\\";\\nexport * from \\\"contracts/solvers/mergeOverlap.js\\\";\\nexport * from \\\"contracts/solvers/spiral.js\\\";\\nexport * from \\\"contracts/solvers/factor.js\\\";\\nexport * from \\\"contracts/solvers/generateIps.js\\\";\\nexport * from \\\"contracts/solvers/uniquePaths.js\\\";\\nexport * from \\\"contracts/solvers/triangleSum.js\\\";\\nexport * from \\\"contracts/solvers/stockSolver.js\\\";\\nexport * from \\\"contracts/solvers/sanitizeParentheses.js\\\";\\nexport * from \\\"contracts/solvers/findMathExpressions.js\\\";\\n\",\"filename\":\"/contracts/solvers/index.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":270266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Merge Overlapping Intervals\\nexport function mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\n\",\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":270268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function solveSum(data) {\\n    const arrLength = data.length;\\n    let maxSum = -Infinity;\\n    for (let i = 0; i < arrLength; i++) {\\n        const sub = data.slice(0, i + 1);\\n        for (let j = 0; j < sub.length; j++) {\\n            const sub2 = sub.slice(j, sub.length);\\n            // ns.tprint(`i ${i} j ${j} ${JSON.stringify(sub)} ${JSON.stringify(sub2)}`);\\n            const sum = sub2.reduce((prev, cur) => (prev += cur), 0);\\n            if (sum > maxSum)\\n                maxSum = sum;\\n            // ns.tprint(`${sum}: ${sub2}`);\\n        }\\n    }\\n    return maxSum;\\n}\\n\",\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":270272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   let data = \\\"((a(a)(()(((a)a)))((\\\";\\n//   // data = ns.args[0].toString();\\n//   ns.tprint(sanitizeParentheses(data));\\n//   ns.print(sanitizeParentheses(data));\\n// }\\n// Given a string:\\n//\\n// ie.: '((a(a)(()(((a)a)))((' => [a(a)(()(((a)a))),(aa)(()(((a)a))),(a(a)()(((a)a))),(a(a)(()((a)a))),((aa)()(((a)a))),((aa)(()((a)a))),((a(a))(((a)a))),((a(a)()((a)a))),((a(a)(()(a)a)))]\\n//\\n// remove the minimum number of invalid parentheses in order to validate the\\n// string. If there are multiple ways to validate the string, provide all of the\\n// possible results. The answer should be provided as an array of strings. If it\\n// is impossible to validate the string the result should be an array with only\\n// an empty string.\\nexport function sanitizeParentheses(data) {\\n    var solution = Sanitize(data);\\n    if (solution == null) {\\n        return '[\\\"\\\"]';\\n    }\\n    else {\\n        return \\\"[\\\" + solution.join(\\\",\\\") + \\\"]\\\";\\n    }\\n}\\nfunction Sanitize_removeOneParth(item) {\\n    var possibleAnswers = [];\\n    for (let i = 0; i < item.length; i++) {\\n        if (item[i].toLowerCase().indexOf(\\\"(\\\") === -1 &&\\n            item[i].toLowerCase().indexOf(\\\")\\\") === -1) {\\n            continue;\\n        }\\n        let possible = item.substring(0, i) + item.substring(i + 1);\\n        possibleAnswers.push(possible);\\n    }\\n    return possibleAnswers;\\n}\\nfunction Sanitize_isValid(item) {\\n    var unclosed = 0;\\n    for (var i = 0; i < item.length; i++) {\\n        if (item[i] == \\\"(\\\") {\\n            unclosed++;\\n        }\\n        else if (item[i] == \\\")\\\") {\\n            unclosed--;\\n        }\\n        if (unclosed < 0) {\\n            return false;\\n        }\\n    }\\n    return unclosed == 0;\\n}\\nfunction Sanitize(data) {\\n    var currentPossible = [data];\\n    for (var i = 0; i < currentPossible.length; i++) {\\n        var newPossible = new Set();\\n        for (var j = 0; j < currentPossible.length; j++) {\\n            let newRemovedPossible = Sanitize_removeOneParth(currentPossible[j]);\\n            for (let item of newRemovedPossible) {\\n                newPossible.add(item);\\n            }\\n        }\\n        var validBoolList = [];\\n        for (const item of newPossible) {\\n            validBoolList.push(Sanitize_isValid(item));\\n        }\\n        if (validBoolList.includes(true)) {\\n            let finalList = [];\\n            newPossible = [...newPossible];\\n            for (var j = 0; j < validBoolList.length; j++) {\\n                if (validBoolList[j]) {\\n                    finalList.push(newPossible[j]);\\n                }\\n            }\\n            finalList = new Set(finalList);\\n            return [...finalList];\\n        }\\n        currentPossible = [...newPossible];\\n    }\\n    return null;\\n}\\n\",\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":270270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function maxProfit(arrayData) {\\n    let i, j, k;\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n    // WHY?\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n    let highestProfit = JSON.parse(tempArr);\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) {\\n            // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) {\\n                // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\",\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":270276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//SPIRALIZE Matrix\\nexport function spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift() || []);\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat((arr.pop() || []).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\nfunction column(arr, index) {\\n    let res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n\",\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":270274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   const data = [\\n//     [9],\\n//     [3, 3],\\n//     [1, 5, 1],\\n//     [6, 9, 4, 1],\\n//     [8, 9, 1, 4, 3],\\n//     [6, 2, 5, 5, 8, 2],\\n//     [6, 3, 6, 2, 7, 5, 1],\\n//     [9, 8, 2, 4, 5, 2, 3, 7],\\n//   ];\\n//   ns.tprint(triangleSum(data));\\n//   ns.print(triangleSum(data));\\n// }\\n//\\n//Minimum Path Sum in a Triangle\\n// You are attempting to solve a Coding Contract. You have 10 tries remaining, after which the contract will self-destruct.\\n// Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\n// [\\n//          [9],\\n//         [3,3],\\n//        [1,5,1],\\n//       [6,9,4,1],\\n//      [8,9,1,4,3],\\n//     [6,2,5,5,8,2],\\n//    [6,3,6,2,7,5,1],\\n//   [9,8,2,4,5,2,3,7]\\n// ] => 23\\n// Example: If you are given the following triangle:\\n// [\\n//      [2],\\n//     [3,4],\\n//    [6,5,7],\\n//   [4,1,8,3]\\n// ]\\n// The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\n//\\n//\\nexport function triangleSum(arrayData) {\\n    let triangle = arrayData;\\n    let nextArray = [];\\n    let previousArray = triangle[0];\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            }\\n            else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            }\\n            else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n        }\\n        previousArray = nextArray;\\n    }\\n    return Math.min.apply(null, nextArray);\\n}\\n\",\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":270280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   let data = 60;\\n//   // data = ns.args[0] as number;\\n//   ns.tprint(totalWaysToSum(data));\\n//   ns.print(totalWaysToSum(data));\\n// }\\n// Total Ways to Sum\\n// You are attempting to solve a Coding Contract. You have 10 tries remaining,\\n// after which the contract will self-destruct.\\n//\\n// It is possible write four as a sum in exactly four different ways:\\n//     3 + 1\\n//     2 + 2\\n//     2 + 1 + 1\\n//     1 + 1 + 1 + 1\\n//\\n//  How many different ways can the given number be written as a sum of at least\\n//  two positive integers?\\n//\\n//  60 => 966466\\nexport function totalWaysToSum(data) {\\n    let N = data;\\n    let K = data - 1;\\n    // Initialize a list\\n    let dp = Array.from({ length: N + 1 }, () => 0);\\n    // Update dp[0] to 1\\n    dp[0] = 1;\\n    // Iterate over the range [1, K + 1]\\n    for (let row = 1; row < K + 1; row++) {\\n        // Iterate over the range [1, N + 1]\\n        for (let col = 1; col < N + 1; col++) {\\n            // If col is greater\\n            // than or equal to row\\n            if (col >= row)\\n                // Update current\\n                // dp[col] state\\n                dp[col] = dp[col] + dp[col - row];\\n        }\\n    }\\n    // Return the total number of ways\\n    return dp[N];\\n}\\n// Total Ways to Sum II\\n// You are attempting to solve a Coding Contract. You have 10 tries remaining, after which the contract will self-destruct.\\n//\\n//\\n// How many different distinct ways can the number 37 be written as a sum of integers contained in the set:\\n//\\n// [1,2,4,5,6,7,8,12,14,15]?\\n//\\n// You may use each integer in the set zero or more times.\\nexport function totalWaysToSum2(data) {\\n    const target = data[0];\\n    const input = data[1].sort();\\n    // dp -> Data points that hold the total ways to sum for each of the inputs.\\n    let dp = Array.from({ length: input.length }, () => 1);\\n    let total = 0;\\n    for (let i = 0; i < dp.length; i++) {\\n        // iterate through each data point\\n        // to see if any input[j] + input[k] === input[i]\\n        // then dp[i]+= dp[j] + dp[k];\\n        for (let j = 0; j < i; j++) {\\n            for (let k = 0; k < i; k++) {\\n                if (input[j] + input[k] === input[i])\\n                    dp[i] += dp[j] + dp[k];\\n                if (input[j] + input[k] === target)\\n                    total += dp[j] + dp[k];\\n            }\\n        }\\n    }\\n    // Return the total number of ways\\n    return total;\\n}\\n\",\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":270278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//UNIQUE PATHS IN A GRID//UNIQUE PATHS IN A GRID\\nexport function uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\n}\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\nexport function uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n            if (grid[i][j] == 1 &&\\n                (!ignoreFirst || i != 0 || j != 0) &&\\n                (!ignoreLast || i != grid.length - 1 || j != grid[i].length - 1)) {\\n                let newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n    }\\n    return totalPossiblePaths;\\n}\\n\",\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":270282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nimport { displayContract } from \\\"contracts/probe\\\";\\nconst minuteInterval = 2;\\nfunction getAllServers(ns) {\\n    const tree = new ServerTree(ns);\\n    return tree.home.list();\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will automatically list contracts that it finds on the network.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let contracts;\\n    function refreshLog() {\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(\\\"Contracts\\\");\\n        ns.print(\\\"=========\\\");\\n        for (const [c, s] of contracts)\\n            ns.print(displayContract(ns, c, s));\\n        ns.print(\\\"=========\\\");\\n    }\\n    while (true) {\\n        // await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\n        let servers = [];\\n        contracts = getAllServers(ns).flatMap((server) => {\\n            const onServer = ns\\n                .ls(server.hostname, \\\".cct\\\")\\n                .map((cct) => [cct, server.hostname]);\\n            return onServer;\\n        });\\n        for (const s of servers) {\\n            await ns.scp(\\\"/contracts/probe.js\\\", \\\"home\\\", s);\\n        }\\n        servers = [];\\n        if (contracts.length > 0)\\n            refreshLog();\\n        await ns.sleep(1);\\n    }\\n}\\n\",\"filename\":\"/contracts/list.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"home\",\"moduleSequenceNumber\":270284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"codingcontract.getNumTriesRemaining\",\"cost\":2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    let contracts = ns.ls(ns.getHostname(), \\\".cct\\\");\\n    ns.tprint(`There are ${contracts.length} contracts on this server:`);\\n    for (const cct of contracts) {\\n        ns.tprint(displayContract(ns, cct));\\n    }\\n}\\nexport function displayContract(ns, cct, host = ns.getHostname()) {\\n    return `\\n  ================\\n  ${cct} @ ${host}:\\n      remaining   : ${ns.codingcontract.getNumTriesRemaining(cct, host)} attempts\\n      type        : ${ns.codingcontract.getContractType(cct, host)}\\n      data        : ${JSON.stringify(ns.codingcontract.getData(cct, host))}\\n      description : ${ns.codingcontract.getDescription(cct, host)}\\n  ================\\n      `;\\n}\\n\",\"filename\":\"/contracts/probe.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":18.85,\"server\":\"home\",\"moduleSequenceNumber\":270286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"codingcontract.getNumTriesRemaining\",\"cost\":2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nimport * as solvers from \\\"contracts/solvers/index.js\\\";\\nconst minuteInterval = 2;\\nfunction getAllServers(ns) {\\n    const tree = new ServerTree(ns);\\n    return tree.home.list();\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will automatically complete contracts that it finds on the network.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let failedContracts = [];\\n    let successfulContracts = [];\\n    function refreshLog() {\\n        ns.clearLog();\\n        for (const cnt of failedContracts) {\\n            ns.print(`\\n      =========================\\n        server: ${cnt.server}\\n        filename: ${cnt.contract}\\n        type: ${cnt.type}\\n      =========================\\n        `);\\n        }\\n        for (const cnt of successfulContracts) {\\n            ns.print(`\\n      =========================\\n        server: ${cnt.server}\\n        filename: ${cnt.contract}\\n        type: ${cnt.type}\\n        reward: \\n          ${cnt.reward}\\n      =========================\\n        `);\\n        }\\n        ns.print(`Contracts failed: ${failedContracts.length}`);\\n        ns.print(`Contracts Succeeded: ${successfulContracts.length}`);\\n    }\\n    while (true) {\\n        // await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\n        const contracts = getAllServers(ns).flatMap((server) => {\\n            const onServer = ns.ls(server.hostname, \\\".cct\\\").map((contract) => {\\n                const type = ns.codingcontract.getContractType(contract, server.hostname);\\n                const data = ns.codingcontract.getData(contract, server.hostname);\\n                return {\\n                    type,\\n                    data,\\n                    server,\\n                    contract,\\n                };\\n            });\\n            return onServer;\\n        });\\n        for (const { type, data, server, contract } of contracts) {\\n            const reward = await solve(type, data, server.hostname, contract, ns);\\n            if (!reward) {\\n                failedContracts.push({\\n                    server: server.hostname,\\n                    contract,\\n                    type,\\n                });\\n                refreshLog();\\n            }\\n            else {\\n                successfulContracts.push({\\n                    server: server.hostname,\\n                    contract,\\n                    type,\\n                    reward,\\n                });\\n                refreshLog();\\n            }\\n        }\\n        await ns.sleep(1);\\n    }\\n}\\nasync function solve(type, data, server, contract, ns) {\\n    let solution;\\n    ns.print(type);\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = solvers.maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = solvers.maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = solvers.maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = solvers.maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solvers.triangleSum(data);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = solvers.uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = solvers.uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = solvers.generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = solvers.factor(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = solvers.spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = solvers.mergeOverlap(data);\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            solution = solvers.solveSum(data);\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            solution = solvers.solveJump(data);\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            solution = solvers.totalWaysToSum(data);\\n            break;\\n        // case \\\"Total Ways to Sum II\\\":\\n        //   solution = solvers.totalWaysToSum2(data);\\n        //   break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n            solution = solvers.sanitizeParentheses(data);\\n            break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n            solution = await solvers.findMathExpression(ns, data);\\n            break;\\n        default:\\n            ns.print(`Unknown contract type: ${type}`);\\n            return \\\"\\\";\\n    }\\n    if (solution != undefined)\\n        ns.print(`Submitting solution: ${solution} to ${type} - ${contract}`);\\n    return solution != undefined\\n        ? ns.codingcontract.attempt(solution, contract, server, {\\n            returnReward: true,\\n        })\\n        : \\\"\\\";\\n}\\n\",\"filename\":\"/contracts/start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///e96515c5-9c3a-4172-9162-c6c0bd8a2f40\",\"moduleSequenceNumber\":245347},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///d3de8a2c-8779-4e5c-a0fa-7e711b9a0555\",\"moduleSequenceNumber\":245355},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///f520904b-89d6-406f-bf5a-41d350614ac4\",\"moduleSequenceNumber\":245361},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///0656dc45-b5dd-43c7-9d77-de65bfa1237b\",\"moduleSequenceNumber\":245365},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///965f1cf7-53cf-461a-8512-d4a5c752243d\",\"moduleSequenceNumber\":245367},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///ba0aa81c-ac54-436a-945f-b94f9186131f\",\"moduleSequenceNumber\":245349},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///654a04ed-4936-4a25-93c2-d4106531ead6\",\"moduleSequenceNumber\":245345},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///40e86171-e151-47c0-a397-12002c8dedcb\",\"moduleSequenceNumber\":245359},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///0cb1b35c-2702-4a53-b6d0-11421a4d3549\",\"moduleSequenceNumber\":245353},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///a16975fe-5284-48b9-963b-b527edf055ea\",\"moduleSequenceNumber\":245357},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///7ab85f05-b702-4d99-9a59-8aee29499173\",\"moduleSequenceNumber\":245343},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///75c2e74d-1d47-4e5d-8334-99a14b163097\",\"moduleSequenceNumber\":245363},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///a877ceef-21f3-482c-9a3c-502d10afc21a\",\"moduleSequenceNumber\":245351},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///57e01c2f-0882-4b82-90e9-968b6eed0a22\",\"moduleSequenceNumber\":245427},{\"filename\":\"/contracts/start.js\",\"url\":\"blob:file:///c0a4a016-e623-446b-8284-3b28571c33e0\",\"moduleSequenceNumber\":256962}],\"dependents\":[],\"ramUsage\":24.1,\"server\":\"home\",\"moduleSequenceNumber\":270288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\nimport { nukeAll } from \\\"nuker\\\";\\nimport { batch } from \\\"batching/batch\\\";\\n// import { monitor } from \\\"ui/monitor\\\";\\n// import { expandServer } from \\\"expandServer\\\";\\n// import { createPrograms } from \\\"programs\\\";\\n// import { factionWatch } from \\\"factionWatch\\\";\\n// import { commitCrime } from \\\"actions/crime\\\";\\n// import { purchaseServers, upgradeServers } from \\\"purchase\\\";\\n// import { installBackdoors } from \\\"backdoor\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const bestServer = ns.args[0];\\n    await batch(ns, bestServer);\\n    while (getHackableServers(ns)[0].hostname === bestServer) {\\n        ns.clearLog();\\n        await nukeAll(ns);\\n        // await installBackdoors(ns);\\n        // expandServer(ns);\\n        // if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n        //   await purchaseServers(ns);\\n        // else await upgradeServers(ns);\\n        // factionWatch(ns);\\n        // monitor(ns, ns.getServer(bestServer));\\n        // await createPrograms(ns);\\n        // await commitCrime(ns);\\n    }\\n    ns.spawn(\\\"phase1/restart.js\\\");\\n}\\n\",\"filename\":\"/phase1/batch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":22.2,\"server\":\"home\",\"moduleSequenceNumber\":36935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nukeAll } from \\\"nuker\\\";\\nimport { getHackableServers, getRunnableServers } from \\\"cnct\\\";\\nimport { expandServer } from \\\"expandServer\\\";\\n// import { createPrograms } from \\\"programs\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    await cheapHack(ns);\\n    ns.spawn(\\\"phase1/restart.js\\\");\\n}\\nexport async function cheapHack(ns) {\\n    await nukeAll(ns);\\n    const target = getHackableServers(ns)[0].hostname;\\n    // deploy to all servers.\\n    for (const { hostname } of getRunnableServers(ns)) {\\n        if (!hostname || hostname === \\\"home\\\")\\n            continue;\\n        if (!ns.isRunning(\\\"hack.js\\\", hostname, target))\\n            ns.killall(hostname);\\n        await ns.scp(\\\"hack.js\\\", \\\"home\\\", hostname);\\n        // calculate maxThreads\\n        const maxThreads = Math.floor((ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) /\\n            ns.getScriptRam(\\\"hack.js\\\")) || 1;\\n        ns.exec(\\\"hack.js\\\", hostname, maxThreads, target);\\n    }\\n    ns.run(\\\"/phase1/monitor.js\\\", 1, target);\\n    expandServer(ns);\\n    await nukeAll(ns);\\n    await ns.sleep(5000);\\n}\\n\",\"filename\":\"/phase1/cheapHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"expandServer.js\",\"url\":\"blob:file:///fddb5eb8-58df-4c15-8f0f-0ac397acd493\",\"moduleSequenceNumber\":245441},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///31d60f26-887a-497d-b890-d2c5b92b0273\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///85b3d8e6-5a0d-4664-8b73-9555e5abb61f\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///9c8b245f-e486-4a1b-835e-466842ba9a42\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///01a58b5f-cf39-432f-9177-974357e0be9b\",\"moduleSequenceNumber\":245439},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///5a5869fe-603b-453d-92db-9126e991c6fa\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///d59144e9-cf6a-40aa-a6bb-90eef0cc118b\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///f176c03e-3bae-4916-ace7-7df460384932\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///e44e28e8-ade4-470f-948e-86adb125e261\",\"moduleSequenceNumber\":245439},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///150d550e-54e4-489e-bbf7-01fcf8aad3fd\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/nuke.js\",\"url\":\"blob:file:///f1a4e0d6-a36a-40de-8044-0b277a9206db\",\"moduleSequenceNumber\":245421},{\"filename\":\"nuker.js\",\"url\":\"blob:file:///45a96d10-a721-4451-b8c7-6178cb63693b\",\"moduleSequenceNumber\":245457},{\"filename\":\"/phase1/cheapHack.js\",\"url\":\"blob:file:///3923026e-a1bf-431f-87d7-32ec3efe38a5\",\"moduleSequenceNumber\":245759}],\"dependents\":[],\"ramUsage\":25.8,\"server\":\"home\",\"moduleSequenceNumber\":270308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { expandHacknet } from \\\"hacknet\\\";\\nexport async function main(ns) {\\n    expandHacknet(ns);\\n    ns.spawn(\\\"phase1/restart.js\\\");\\n}\\n\",\"filename\":\"/phase1/hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.7,\"server\":\"home\",\"moduleSequenceNumber\":36939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nukeAll } from \\\"nuker\\\";\\nexport async function main(ns) {\\n    await nukeAll(ns);\\n    ns.spawn(\\\"phase1/actions/backdoor.js\\\");\\n}\\n\",\"filename\":\"/phase1/nuke.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///9af9bcda-919c-4b9b-ba35-4148ac337e79\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///ff563721-b808-4a5f-8bc4-e6a6bf426a64\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///d57c3ecb-20a1-433c-bf65-494c8eed04c5\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///64517ff6-9e23-4e46-9996-4a22e406c691\",\"moduleSequenceNumber\":245439},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///69df8853-d481-42ad-88e5-3bd19b1d6330\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/nuke.js\",\"url\":\"blob:file:///9422995d-4115-417b-8f43-5e2f7e9d7fd3\",\"moduleSequenceNumber\":245421},{\"filename\":\"nuker.js\",\"url\":\"blob:file:///6f48db29-2ec3-4c2e-9ba2-40d2281e7b5d\",\"moduleSequenceNumber\":245457},{\"filename\":\"/phase1/nuke.js\",\"url\":\"blob:file:///4562af4c-4f52-4b41-875e-f86a18efa92a\",\"moduleSequenceNumber\":245757}],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"home\",\"moduleSequenceNumber\":270312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { prepBatch } from \\\"batching/prepBatch\\\";\\nimport { getHackableServers } from \\\"cnct\\\";\\nimport { kill } from \\\"utils/scriptKilling\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const target = getHackableServers(ns)[0].hostname;\\n    kill(ns, (ps) => ps.filename === \\\"/phase1/monitor.js\\\" && !ps.args.includes(target));\\n    if (!ns.isRunning(\\\"/phase1/monitor.js\\\", \\\"home\\\", target)) {\\n        ns.run(\\\"/phase1/monitor.js\\\", 1, target);\\n        kill(ns, (ps) => ps.filename === \\\"hack.js\\\");\\n    }\\n    await prepBatch(ns, target);\\n    ns.spawn(\\\"phase1/cheapHack.js\\\", 1, target);\\n}\\n\",\"filename\":\"/phase1/prepare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///e21703f6-9a84-4931-ac83-470b94bb51eb\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///4d624f12-da25-4ace-9536-35dc140dfd71\",\"moduleSequenceNumber\":245425},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///61d158e9-42ec-4d5d-9327-d46e4b9e30b5\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///dffbd821-0a51-4b93-86d4-a8be81bf174b\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///9a3f53e3-4dce-42b7-b896-2a3503b8c13a\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///b3269f18-c4da-4e80-a919-1ad7d6d81306\",\"moduleSequenceNumber\":245439},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///72ed0f8d-0d0c-4229-873f-031a71e78753\",\"moduleSequenceNumber\":245427},{\"filename\":\"ps.js\",\"url\":\"blob:file:///1e5e2368-4eab-4b80-a580-fc266f0e9f9d\",\"moduleSequenceNumber\":245461},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///984e67e0-d940-4def-9f57-3a305220b457\",\"moduleSequenceNumber\":245463},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///7baf706f-3aae-4929-b4f6-0287e113f01f\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///1d65e3d3-d743-4d3f-9437-a358b6136b18\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///60386261-1184-4d0c-90a7-d2da316b74bd\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///d8f27ba4-d5da-4883-be70-f46b814fc6d6\",\"moduleSequenceNumber\":245439},{\"filename\":\"/batching/runSpawner.js\",\"url\":\"blob:file:///e790b2ed-b832-4da1-b689-3b9a160d42d9\",\"moduleSequenceNumber\":245337},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///a957caf7-8230-4c05-a23b-9b756c341cb4\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///2f9a90dd-323f-4377-8991-3a9934f992e8\",\"moduleSequenceNumber\":245425},{\"filename\":\"/batching/prepBatch.js\",\"url\":\"blob:file:///450dc4ef-8790-432b-9461-f297cd320fcb\",\"moduleSequenceNumber\":245335},{\"filename\":\"/phase1/prepare.js\",\"url\":\"blob:file:///b9668346-45c5-4271-8cb1-eb99d311113a\",\"moduleSequenceNumber\":245758}],\"dependents\":[],\"ramUsage\":24.2,\"server\":\"home\",\"moduleSequenceNumber\":270314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let phase2RAM = 500;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    phase2RAM = ns.getScriptRam(\\\"/phase2/restart.js\\\") * 2;\\n    if (ns.getServerMaxRam(\\\"home\\\") > phase2RAM)\\n        ns.spawn(\\\"phase2/restart.js\\\");\\n    ns.spawn(\\\"/phase1/actions/program.js\\\");\\n}\\n\",\"filename\":\"/phase1/restart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/phase1/restart.js\",\"url\":\"blob:file:///ffe19a87-2299-4dec-a6bc-820484f6ccb5\",\"moduleSequenceNumber\":245760}],\"dependents\":[],\"ramUsage\":3.75,\"server\":\"home\",\"moduleSequenceNumber\":270316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const scripts = [\\n    \\\"/phase1/restart.js\\\",\\n    \\\"/phase1/nuke.js\\\",\\n    \\\"/phase1/work.js\\\",\\n    \\\"/phase1/prepare.js\\\",\\n    \\\"/phase1/cheapHack.js\\\",\\n    \\\"/phase1/actions/findAug.js\\\",\\n    \\\"/phase1/actions/purchaseAug.js\\\",\\n    \\\"/phase1/actions/backdoor.js\\\",\\n    \\\"/phase1/actions/companyWork.js\\\",\\n    \\\"/phase1/actions/crime.js\\\",\\n    \\\"/phase1/actions/factionHunt.js\\\",\\n    \\\"/phase1/actions/factionWork.js\\\",\\n    \\\"/phase1/actions/program.js\\\",\\n    //\\n];\\nconst commonScripts = [\\\"/phase1/monitor.js\\\"];\\nlet maxRam = 32;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    for (const commonScript of commonScripts)\\n        maxRam -= ns.getScriptRam(commonScript);\\n    while (true) {\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(`Phase 1 Tests`);\\n        ns.print(`Max Ram = ${ns.nFormat(maxRam * 1e9, \\\"0.0b\\\")}`);\\n        ns.print(`=============`);\\n        for (const script of scripts) {\\n            const ram = ns.getScriptRam(script);\\n            ns.print(`${script} :\\n        ${ram > maxRam\\n                ? `Ram Over     : ${ns.nFormat((ram - maxRam) * 1e9, \\\"0.0b\\\")} FAIL!`\\n                : `Ram Under    : ${ns.nFormat((maxRam - ram) * 1e9, \\\"0.0b\\\")} SUCCESS!`}`);\\n        }\\n        await ns.sleep(1);\\n    }\\n}\\n\",\"filename\":\"/phase1/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/phase1/test.js\",\"url\":\"blob:file:///33e5aa0c-5849-4a86-8de4-62353ca5d3ae\",\"moduleSequenceNumber\":268980}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":270318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMinRam } from \\\"purchase\\\";\\nimport { getHackableServers } from \\\"cnct\\\";\\nimport { monitor, Daemon } from \\\"ui/monitor\\\";\\nimport { nukeAll } from \\\"nuker\\\";\\nimport { installBackdoors } from \\\"backdoor\\\";\\nimport { createPrograms } from \\\"programs\\\";\\nimport { expandServer } from \\\"expandServer\\\";\\nimport { factionWatch } from \\\"factionWatch\\\";\\nimport { purchaseServers, upgradeServers } from \\\"purchase\\\";\\nimport { expandHacknet } from \\\"hacknet\\\";\\nimport { batch } from \\\"batching/batch\\\";\\nimport { purchasePricey } from \\\"actions/augmentations\\\";\\nimport { manageStock } from \\\"stocks/start\\\";\\nimport { getNeededFactions } from \\\"actions/factionHunt\\\";\\nimport { workForFaction } from \\\"actions/factionWork\\\";\\nimport { commitCrime } from \\\"actions/crime\\\";\\nimport { kill } from \\\"utils/scriptKilling\\\";\\n// timing constants\\n// const second = 1000; //milliseconds\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\n// const hours = 60 * minutes;\\n// const hour = hours;\\n// const days = 24 * hours;\\n// const day = days;\\nconst scripts = [\\n    \\\"/contracts/start.js\\\",\\n    //\\n];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    // phase 1 cleanup\\n    kill(ns, (proc) => proc.filename === \\\"hack.js\\\");\\n    for (const script of scripts) {\\n        ns.run(script);\\n    }\\n    await nukeAll(ns);\\n    let target = getHackableServers(ns)[0].hostname;\\n    async function updateHack() {\\n        target = getHackableServers(ns)[0].hostname;\\n        if (!ns.scriptRunning(\\\"/batching/batch.js\\\", \\\"home\\\") &&\\n            !ns.run(\\\"/batching/batch.js\\\", 1, target))\\n            await batch(ns, target);\\n    }\\n    await spendMoney(ns);\\n    await nukeAll(ns);\\n    await updateHack();\\n    while (true) {\\n        ns.clearLog();\\n        ns.tail();\\n        // Keep nuking servers\\n        await nukeAll(ns);\\n        // update hack target if necessary\\n        if (getHackableServers(ns)[0].hostname !== target)\\n            await updateHack();\\n        // install backdoors and join any factions.\\n        if (!ns.scriptRunning(\\\"backdoor.js\\\", \\\"home\\\")) {\\n            if (!ns.run(\\\"backdoor.js\\\"))\\n                await installBackdoors(ns);\\n        }\\n        if (!ns.scriptRunning(\\\"factionWatch.js\\\", \\\"home\\\"))\\n            if (!ns.run(\\\"factionWatch.js\\\"))\\n                factionWatch(ns);\\n        await spendMoney(ns);\\n        monitor(ns);\\n        await ns.sleep(1);\\n        // If I'm not to busy work for a company.\\n        const neededFactions = getNeededFactions(ns);\\n        if (!ns.singularity.isBusy() || ns.getPlayer().workType.includes(\\\"Company\\\"))\\n            await neededFactions[0].workToJoin();\\n        if (!(await purchasePricey(ns)) && hasAugsToInstall(ns))\\n            await finishOut(ns);\\n    }\\n}\\nasync function spendMoney(ns) {\\n    await purchasePricey(ns);\\n    // Buy or create any programs you may need.\\n    await createPrograms(ns);\\n    expandServer(ns);\\n    if (getMinRam(ns) < ns.getPurchasedServerMaxRam()) {\\n        if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n            await purchaseServers(ns);\\n        else\\n            await upgradeServers(ns);\\n    }\\n    expandHacknet(ns);\\n    await manageStock(ns);\\n}\\nasync function finishOut(ns) {\\n    // check if we are at the end of the Bitnode\\n    if (ns.serverExists(Daemon) &&\\n        ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(Daemon)) {\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(`You can now Backdoor ${Daemon}`);\\n        ns.exit();\\n    }\\n    // first find the faction I have the most rep with.\\n    const targetFaction = ns\\n        .getPlayer()\\n        .factions.sort((a, b) => ns.singularity.getFactionRep(b) - ns.singularity.getFactionRep(a))[0];\\n    if (!targetFaction)\\n        return;\\n    while (true) {\\n        ns.clearLog();\\n        const neuroflux = ns.singularity\\n            .getAugmentationsFromFaction(targetFaction)\\n            .find((aug) => aug.startsWith(\\\"NeuroFlux\\\"));\\n        if (!neuroflux)\\n            throw new Error(\\\"NeuroFlux Governor not found!\\\");\\n        if (ns.singularity.getAugmentationRepReq(neuroflux) >\\n            ns.singularity.getFactionRep(targetFaction)) {\\n            if (hasAugsToInstall(ns))\\n                ns.singularity.installAugmentations(\\\"restart.js\\\");\\n            else\\n                await workForFaction(ns, targetFaction);\\n        }\\n        else if (ns.singularity.getAugmentationPrice(neuroflux) <\\n            ns.getServerMoneyAvailable(\\\"home\\\"))\\n            ns.singularity.purchaseAugmentation(targetFaction, neuroflux);\\n        else\\n            await commitCrime(ns);\\n        ns.print(`Finishing out by buying ${neuroflux} from ${targetFaction}`);\\n        await ns.sleep(1);\\n    }\\n}\\nfunction hasAugsToInstall(ns) {\\n    return (ns.singularity.getOwnedAugmentations(true).length >\\n        ns.singularity.getOwnedAugmentations(false).length);\\n}\\n\",\"filename\":\"/phase2/restart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///aada29c9-8ebb-4eb1-b59c-3067b2ed01e4\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///d5150a99-2a0a-4f61-a3d0-e86051340321\",\"moduleSequenceNumber\":245425},{\"filename\":\"/actions/crime.js\",\"url\":\"blob:file:///9ed08713-88ce-4df6-bc47-12c8b775e5ab\",\"moduleSequenceNumber\":245319},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///c6e21726-e29d-4ef2-8865-ab5ead09f8ac\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///30f22342-81f1-4599-bf15-2447d1ddc15e\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///ac7ca827-d38a-468e-af90-a1b043ded16f\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///776e27b3-92c0-499c-9dd3-8561f565ccce\",\"moduleSequenceNumber\":245439},{\"filename\":\"shareAll.js\",\"url\":\"blob:file:///0c35de60-dd2b-4a4d-aa6a-579021abc505\",\"moduleSequenceNumber\":245471},{\"filename\":\"/actions/factionWork.js\",\"url\":\"blob:file:///af036d93-332e-4691-8231-11708d825dde\",\"moduleSequenceNumber\":245323},{\"filename\":\"/actions/crime.js\",\"url\":\"blob:file:///6edfec5e-f7eb-419b-bb11-d2dc1f902824\",\"moduleSequenceNumber\":245319},{\"filename\":\"/actions/companyWork.js\",\"url\":\"blob:file:///5861c263-70a6-4643-8c17-0a969ff68024\",\"moduleSequenceNumber\":245315},{\"filename\":\"/actions/crime.js\",\"url\":\"blob:file:///08f40eca-0310-46e1-bade-f16113f21d24\",\"moduleSequenceNumber\":245319},{\"filename\":\"/actions/factionHunt.js\",\"url\":\"blob:file:///7045a3cb-c124-4111-993a-be4d705fb2f8\",\"moduleSequenceNumber\":245321},{\"filename\":\"/stocks/folio.js\",\"url\":\"blob:file:///b9c50757-8ef1-42bf-a7e4-0c5bd0004980\",\"moduleSequenceNumber\":245407},{\"filename\":\"/stocks/start.js\",\"url\":\"blob:file:///22b98ab2-0a99-4d39-bba2-400704d1b022\",\"moduleSequenceNumber\":245413},{\"filename\":\"/utils/etaCalculator.js\",\"url\":\"blob:file:///5fa8a096-221a-4d2d-9c26-65437b5938c7\",\"moduleSequenceNumber\":245417},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///153f81e9-792b-4d9f-aac4-f9d318af4a57\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///90aa0a2e-c09b-447b-8efe-23c111f4f69c\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///dfcda055-401e-468f-9708-558953f8aa29\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///7e432e49-d85a-4267-b956-51221b4102b5\",\"moduleSequenceNumber\":245439},{\"filename\":\"shareAll.js\",\"url\":\"blob:file:///39d95e1f-d7b2-4492-9aa9-307a93d1da86\",\"moduleSequenceNumber\":245471},{\"filename\":\"/actions/factionWork.js\",\"url\":\"blob:file:///da5ec649-9a12-446c-9e17-8ea4306eae41\",\"moduleSequenceNumber\":245323},{\"filename\":\"/actions/crime.js\",\"url\":\"blob:file:///4cdb0099-1a6c-4ce0-9205-b7a17275ba7a\",\"moduleSequenceNumber\":245319},{\"filename\":\"/actions/augmentations.js\",\"url\":\"blob:file:///b92ea034-b529-4f40-9928-6051621449fb\",\"moduleSequenceNumber\":245317},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///1d74dd4e-2ada-4bb7-b6a9-fc6a8fc074e6\",\"moduleSequenceNumber\":245463},{\"filename\":\"expandServer.js\",\"url\":\"blob:file:///3129f037-7890-44a8-b89a-6fd8b419ba64\",\"moduleSequenceNumber\":245441},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///4abbb13f-6c96-4c77-8294-2975619b715b\",\"moduleSequenceNumber\":245427},{\"filename\":\"ps.js\",\"url\":\"blob:file:///a40a1047-905b-46a2-8ede-c4fddc49dcd9\",\"moduleSequenceNumber\":245461},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///f83dec56-d5c1-43c9-8879-b045d6d59ae7\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///3b7e1b2d-40d6-475d-8de6-036c8806edb0\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///5082a27d-3c90-4428-935e-a2b4a2abb831\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///29a5b1ad-25a6-4faa-9145-e28775026f56\",\"moduleSequenceNumber\":245439},{\"filename\":\"/batching/runSpawner.js\",\"url\":\"blob:file:///8d0fa4af-78f3-4ab2-9ac5-ef611b2e1f2c\",\"moduleSequenceNumber\":245337},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///7dc8dbd9-358e-4599-bb84-d3bce9e51633\",\"moduleSequenceNumber\":245427},{\"filename\":\"ps.js\",\"url\":\"blob:file:///fd4cf59f-157f-4112-abb9-b283de3df9f6\",\"moduleSequenceNumber\":245461},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///773133d8-cae0-46c4-9643-340af0e3c87d\",\"moduleSequenceNumber\":245463},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///8ae315fa-5797-4d8a-8732-a08c9e47a699\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///1085ac47-fde8-4b5c-8dda-3916306c9656\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///ef13b62d-971c-40cb-98e3-45aabaf6fede\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///2ab0ae4d-a6d9-4dc7-ab35-92f4fa4adf25\",\"moduleSequenceNumber\":245439},{\"filename\":\"/batching/runSpawner.js\",\"url\":\"blob:file:///d3bf18f1-9e7f-4c91-bcd8-3f28a207ec14\",\"moduleSequenceNumber\":245337},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///687ea261-7da6-4536-bf4e-e7256763cd57\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///57090888-99cc-46b4-8289-243a431a6e00\",\"moduleSequenceNumber\":245425},{\"filename\":\"/batching/prepBatch.js\",\"url\":\"blob:file:///4ad816cc-dd4e-48c1-91cb-721d587f0ff5\",\"moduleSequenceNumber\":245335},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///1529a50d-7abb-4356-a9b0-5d4545006be2\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///4433a3a5-02d3-4132-bdaf-7ef3df26549a\",\"moduleSequenceNumber\":245425},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///57b5aa44-b3d0-4855-89ea-29eef3a26a91\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///7d3afc15-3e20-4360-bc27-be1f7c25dd1c\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///9a175614-003d-4ed1-b8d5-516bdd5e342c\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///32890620-3a2c-4308-a5f5-5c35bde1983c\",\"moduleSequenceNumber\":245439},{\"filename\":\"/batching/batch.js\",\"url\":\"blob:file:///b914bf67-6024-43fa-8994-89e6b4bb46b0\",\"moduleSequenceNumber\":245329},{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///16b949c4-3c39-4b6f-9cc5-e26522f5016d\",\"moduleSequenceNumber\":245449},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///1ba9dca8-cef0-4fd5-b85c-0f2dcc12a982\",\"moduleSequenceNumber\":245463},{\"filename\":\"factionWatch.js\",\"url\":\"blob:file:///0f7bb891-a2cc-4746-a6cd-74c18657955d\",\"moduleSequenceNumber\":245445},{\"filename\":\"expandServer.js\",\"url\":\"blob:file:///488d71c2-7505-44e5-b6c6-9937049c301d\",\"moduleSequenceNumber\":245441},{\"filename\":\"/actions/programming.js\",\"url\":\"blob:file:///65393e69-91d1-4afe-a500-10fd06cfd4e8\",\"moduleSequenceNumber\":245325},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///dce1ddc1-87ed-433a-99d2-6421e63083e2\",\"moduleSequenceNumber\":245423},{\"filename\":\"programs.js\",\"url\":\"blob:file:///632a336b-a5d4-464e-93f3-fe57157bc7a7\",\"moduleSequenceNumber\":245459},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///62ad0f7a-3d20-477b-931a-3be3c52284a6\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///e8a2141f-476c-479e-a104-be2e2656d740\",\"moduleSequenceNumber\":245429},{\"filename\":\"bkdr.js\",\"url\":\"blob:file:///ed2a6bf3-4b0f-4780-87bd-8a4a4a2610e0\",\"moduleSequenceNumber\":245435},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///fa8d8e9b-e0a2-41ee-a9e2-582960cb6722\",\"moduleSequenceNumber\":245427},{\"filename\":\"backdoor.js\",\"url\":\"blob:file:///365175eb-6337-4885-9198-2432f0e43778\",\"moduleSequenceNumber\":245433},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///1230b573-de02-4945-917c-0454a82f66c8\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///a4fe0aee-c337-45d2-a138-f0edbe288a03\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///1eecc018-e158-48ea-a955-b3209ed2fb6e\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///6b38cfe5-36d1-4d8e-bfc4-d05347abfb73\",\"moduleSequenceNumber\":245439},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///87e22523-b8ba-4d1e-a140-9a02f32e19f3\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/nuke.js\",\"url\":\"blob:file:///4c2702f3-b572-4cf6-ab54-64759c22c8c3\",\"moduleSequenceNumber\":245421},{\"filename\":\"nuker.js\",\"url\":\"blob:file:///6155b073-447c-4213-9d95-83633d4525d4\",\"moduleSequenceNumber\":245457},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///d195da82-3ee7-4469-a1b0-5c331d4c8358\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///59fb1d43-5baf-41ec-9e82-1b3a85bd783a\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///c95081b4-a0b0-4348-9c81-f38965608a8c\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///5344b3c2-1ad0-4a4a-9ee1-b9833ffe29c1\",\"moduleSequenceNumber\":245439},{\"filename\":\"/ui/monitor.js\",\"url\":\"blob:file:///6a086a43-a355-41cd-a50c-d9287fc6dc30\",\"moduleSequenceNumber\":245415},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///d872abdb-5e82-4239-ba9a-d371e5a6fcf5\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///c4e0fc56-9c51-4303-8384-861cb8f9479e\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///c4b760d1-d737-4fa6-a463-3c7ea454f654\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///65a606de-af76-469a-ae90-d1a021562347\",\"moduleSequenceNumber\":245439},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///cb564205-148b-49e9-8e09-ec9ae53540f9\",\"moduleSequenceNumber\":245463},{\"filename\":\"/phase2/restart.js\",\"url\":\"blob:file:///e796e8f8-5c51-4f7d-b369-e04d49f6ea61\",\"moduleSequenceNumber\":256961}],\"dependents\":[],\"ramUsage\":183.6,\"server\":\"home\",\"moduleSequenceNumber\":270322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.installAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"sleeve.travel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"stock.purchaseWseAccount\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchaseTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketData\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketDataTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getFolio(ns) {\\n    const symbols = ns.stock.getSymbols();\\n    let folio = [];\\n    for (const sym of symbols) {\\n        const [shares] = ns.stock.getPosition(sym);\\n        if (shares > 0) {\\n            folio.push({ sym, shares });\\n        }\\n    }\\n    return folio;\\n}\\n\",\"filename\":\"/stocks/folio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":270324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolio } from \\\"stocks/folio\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.tail();\\n    ns.print(\\\"Liquidating assets.\\\");\\n    await liquidate(ns);\\n}\\nasync function liquidate(ns) {\\n    let folio = getFolio(ns);\\n    let total = 0;\\n    while (folio.length > 0) {\\n        ns.scriptKill(\\\"/stocks/start.js\\\", \\\"home\\\");\\n        await ns.sleep(1);\\n        ns.clearLog();\\n        for (const stock of folio) {\\n            const forecast = ns.stock.getForecast(stock.sym);\\n            if (forecast < 0.5) {\\n                // SELL!\\n                const sellPrice = ns.stock.sell(stock.sym, stock.shares);\\n                total += sellPrice;\\n                ns.print(`\\n          ${stock.sym} sold for ${sellPrice}\\n          `);\\n            }\\n            else {\\n                ns.print(`\\n          Waiting for ${stock.sym} to stop growing.\\n          `);\\n            }\\n        }\\n        folio = getFolio(ns);\\n    }\\n    ns.print(`All stocks sold for a total of ${total}`);\\n}\\n\",\"filename\":\"/stocks/liquidate.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":11.6,\"server\":\"home\",\"moduleSequenceNumber\":270326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// % of money to use in buying stocks\\n// const budget = 1;\\n// % at which to buy or sell stocks\\n// const buyAt = 60;\\n// Profit amount to sell the stock at.\\n// const sellAt = 10000000;\\n// TODO short stocks\\n// const shortAt = 40;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let stocks = ns.stock.getSymbols();\\n    for (let stock of stocks.sort((a, b) => ns.stock.getAskPrice(b) - ns.stock.getAskPrice(a))) {\\n        // let increaseChance = ns.stock.getForecast(stock) * 100;\\n        let askPrice = ns.stock.getAskPrice(stock);\\n        ns.tprint(`${stock} - ${ns.nFormat(askPrice, \\\"$0.0a\\\")}`);\\n    }\\n}\\n\",\"filename\":\"/stocks/listall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":270328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolio } from \\\"stocks/folio\\\";\\n// % of money to use in buying stocks\\nconst budget = 0.5;\\n// % at which to buy or sell stocks\\nconst buyAt = 0.6;\\nconst sellBellow = 0.5;\\n// const shortAt = 0.4;\\n// const sellShortAt = 0.5;\\n// const stockToWatch = \\\"MGCP\\\"; // Megacorp\\n// TODO short stocks\\n// const shortAt = 40;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    while (await manageStock(ns)) {\\n        if (getFolio(ns).length > 0)\\n            ns.tail();\\n        showFolio(ns);\\n        await ns.sleep(1);\\n    }\\n}\\n/** @param {NS} ns **/\\nexport async function manageStock(ns) {\\n    try {\\n        if (!ns.stock.purchaseWseAccount() ||\\n            !ns.stock.purchaseTixApi() ||\\n            !ns.stock.purchase4SMarketData() ||\\n            !ns.stock.purchase4SMarketDataTixApi()) {\\n            return false;\\n        }\\n    }\\n    catch (error) {\\n        return false;\\n    }\\n    // let stock = stockToWatch;\\n    let folio = getFolio(ns);\\n    if (folio.length > 0) {\\n        // we have a stock - get it and monitor if it is increasing/decreasing\\n        for (const { sym, shares } of folio) {\\n            if (ns.stock.getPosition(sym)[0] > 0) {\\n                // we have stock in the long position\\n                let increaseChance = ns.stock.getForecast(sym);\\n                if (increaseChance <= sellBellow) {\\n                    let total = ns.stock.sell(sym, shares);\\n                    // ns.tail();\\n                    ns.print(`Sold:\\n          shares    : ${ns.nFormat(shares, \\\"0.00a\\\")} \\n          stock     : ${sym}\\n          total     : ${ns.nFormat(total * shares, \\\"$0.000a\\\")} \\n          increase%   : ${increaseChance.toLocaleString(undefined, {\\n                        style: \\\"percent\\\",\\n                    })}\\n            `);\\n                }\\n            }\\n        }\\n    }\\n    // buy any stocks that are increasing that we can offord\\n    for (const sym of ns.stock.getSymbols()) {\\n        let increaseChance = ns.stock.getForecast(sym);\\n        if (increaseChance >= buyAt) {\\n            buyStock(ns, sym);\\n        }\\n    }\\n    return true;\\n}\\nfunction buyStock(ns, sym) {\\n    let cashAvailable = ns.getServerMoneyAvailable(\\\"home\\\") * budget;\\n    let stockCost = ns.stock.getBidPrice(sym);\\n    let maxShares = ns.stock.getMaxShares(sym);\\n    let [ownedShares] = ns.stock.getPosition(sym);\\n    if (cashAvailable >= maxShares * stockCost &&\\n        ownedShares < ns.stock.getMaxShares(sym)) {\\n        ns.stock.buy(sym, maxShares - ownedShares);\\n        let increaseChance = ns.stock.getForecast(sym);\\n        ns.print(`Bought:\\n        shares      : ${ns.nFormat(maxShares, \\\"0.0a\\\")}\\n        stock       : ${sym} \\n        total       : ${ns.nFormat(stockCost * maxShares, \\\"$0.0a\\\")}\\n        increase%   : ${ns.nFormat(increaseChance, \\\"0.0%\\\")}\\n        `);\\n    }\\n}\\nfunction showFolio(ns) {\\n    ns.clearLog();\\n    for (const { sym, shares } of getFolio(ns)) {\\n        let [_, avgPrice] = ns.stock.getPosition(sym);\\n        let invested = shares * avgPrice;\\n        let currentWorth = ns.stock.getBidPrice(sym) * shares;\\n        ns.print(`${sym}:\\n      shares          : ${ns.nFormat(shares, \\\"0.0a\\\")}\\n      invested        : ${ns.nFormat(invested, \\\"$0.0a\\\")}\\n      worth           : ${ns.nFormat(currentWorth, \\\"$0.0a\\\")}\\n      profit          : ${ns.nFormat(currentWorth - invested, \\\"$0.0a\\\")}(${ns.nFormat((currentWorth - invested) / invested, \\\"0.0%\\\")})\\n      `);\\n    }\\n}\\nexport function getBestStock(ns) {\\n    let best = [\\\"\\\", 0];\\n    for (const stock of ns.stock.getSymbols()) {\\n        let increaseChance = ns.stock.getForecast(stock);\\n        if (increaseChance > best[1]) {\\n            best = [stock, increaseChance];\\n        }\\n    }\\n    return best[0];\\n}\\n\",\"filename\":\"/stocks/start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":27.2,\"server\":\"home\",\"moduleSequenceNumber\":270330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.purchaseWseAccount\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchaseTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketData\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketDataTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\nexport const Daemon = \\\"w0r1d_d43m0n\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.tail();\\n    while (true) {\\n        ns.tail();\\n        ns.clearLog();\\n        let host = ns.args[0];\\n        if (host && ns.serverExists(host))\\n            monitor(ns, ns.getServer(host));\\n        else\\n            monitor(ns);\\n        await ns.sleep(1);\\n    }\\n}\\nfunction getTarget(ns) {\\n    return getHackableServers(ns)[0];\\n}\\nexport function monitor(ns, target = null) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const { hostname } = target || getTarget(ns);\\n    ns.print(`\\n  ScriptXP            : ${ns.nFormat(ns.getScriptExpGain(), \\\"0.0a\\\")} / sec.\\n  Cash/sec            : ${ns.nFormat(ns.getScriptIncome()[0], \\\"$0.0a\\\")} / sec.\\n  Cash/sec since Aug  : ${ns.nFormat(ns.getScriptIncome()[1], \\\"$0.0a\\\")} / sec.\\n  TARGET              : ${hostname}\\n    `);\\n    const moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n    const maxMoney = ns.getServerMaxMoney(hostname);\\n    const security = ns.getServerSecurityLevel(hostname);\\n    const minSecurity = ns.getServerMinSecurityLevel(hostname);\\n    const hackChance = ns.hackAnalyzeChance(hostname);\\n    const server = target || getTarget(ns);\\n    // always show the smallest time.\\n    server.hackDifficulty = server.minDifficulty;\\n    const player = ns.getPlayer();\\n    ns.print(`${hostname}:\\n    Security      : (${ns.nFormat(minSecurity / security, \\\"000.00%\\\")}) +${ns.nFormat(security - minSecurity, \\\"0.00a\\\")}\\n    Money         : (${ns.nFormat(moneyAvailable / maxMoney, \\\"000.00%\\\")}) ${ns.nFormat(moneyAvailable, \\\"$0.0a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.0a\\\")}\\n    Hack Chance   : ${ns.nFormat(hackChance, \\\"0.0%\\\")}\\n    Hack Time     : ${ns.tFormat(ns.formulas.hacking.hackTime(server, player))}\\n    Grow Time     : ${ns.tFormat(ns.formulas.hacking.growTime(server, player))}\\n    Waken Time    : ${ns.tFormat(ns.formulas.hacking.weakenTime(server, player))}\\n    `);\\n    ns.print(`home:\\n    RAM           : ${ns.nFormat(ns.getServerMaxRam(\\\"home\\\") * 1e9, \\\"0.0b\\\")}\\n    RAM Upgrade @ : ${ns.nFormat(ns.singularity.getUpgradeHomeRamCost(), \\\"$0.0a\\\")}\\n    Cores         : ${ns.getServer(\\\"home\\\").cpuCores}\\n    Core Upgrade @: ${ns.nFormat(ns.singularity.getUpgradeHomeCoresCost(), \\\"$0.0a\\\")}`);\\n    let ram = 0;\\n    for (const host of ns.getPurchasedServers()) {\\n        ram += ns.getServerMaxRam(host);\\n    }\\n    const maxRam = ns.getPurchasedServerLimit() * ns.getPurchasedServerMaxRam();\\n    const sorted = ns\\n        .getPurchasedServers()\\n        .sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b));\\n    const smallest = sorted[0];\\n    const largest = sorted[sorted.length - 1];\\n    if (smallest &&\\n        ns.getServerMaxRam(smallest) < ns.getPurchasedServerMaxRam()) {\\n        ns.print(`Purchased Servers:\\n    Count         : ${ns.getPurchasedServers().length} / ${ns.getPurchasedServerLimit()}\\n      Smallest      : ${ns.nFormat(smallest ? ns.getServerMaxRam(smallest) * 1e9 : 0, \\\"0.0b\\\")}\\n      Largest       : ${ns.nFormat(largest ? ns.getServerMaxRam(largest) * 1e9 : 0, \\\"0.0b\\\")}\\n    Current RAM   : ${ns.nFormat(ram * 1e9, \\\"0.0b\\\")}\\n    Max RAM       : ${ns.nFormat(maxRam * 1e9, \\\"0.0b\\\")}`);\\n    }\\n    else if (!smallest) {\\n        ns.print(\\\"Purchased Servers: NONE\\\");\\n    }\\n    else\\n        ns.print(\\\"Purchased Servers: MAX\\\");\\n    if (ns.serverExists(Daemon))\\n        ns.print(`Hacking Level to crash the bitnode: ${ns.getServerRequiredHackingLevel(Daemon)}`);\\n    else\\n        ns.print(\\\"You don't have the red pill yet!\\\");\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\n\",\"filename\":\"/ui/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":16,\"server\":\"home\",\"moduleSequenceNumber\":270332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function etaCalculator(ns, milliseconds) {\\n    const today = new Date();\\n    const timeCompleted = today.setUTCMilliseconds(today.getUTCMilliseconds() + milliseconds);\\n    const dateCompleted = new Date(timeCompleted);\\n    // return `${dateCompleted.getMonth() + 1}-${dateCompleted.getDate()} ${\\n    //   dateCompleted.getHours() % 12\\n    // }:${dateCompleted.getMinutes()}:${dateCompleted.getSeconds()} ${\\n    //   dateCompleted.getHours() < 12 ? \\\"AM\\\" : \\\"PM\\\"\\n    // }`;\\n    return `${dateCompleted.getMonth() + 1}-${dateCompleted.getDate()} ${ns.nFormat(dateCompleted.getHours() % 13, \\\"00\\\")}:${ns.nFormat(dateCompleted.getMinutes(), \\\"00\\\")}:${ns.nFormat(dateCompleted.getSeconds(), \\\"00\\\")} ${dateCompleted.getHours() < 12 ? \\\"AM\\\" : \\\"PM\\\"}`;\\n}\\n\",\"filename\":\"/utils/etaCalculator.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":270334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const keys = {\\n    serverNodes: \\\"ServerNodes\\\",\\n};\\n// localStorage Functions\\nexport function setItem(key, value) {\\n    localStorage.setItem(key, JSON.stringify(value));\\n}\\nexport function getItem(key) {\\n    JSON.parse(localStorage.getItem(key) || JSON.stringify(undefined));\\n}\\n\",\"filename\":\"/utils/localStorage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":270336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ProgramData } from \\\"utils/ProgramData\\\";\\nexport function nuke(ns, target) {\\n    const programs = new ProgramData(ns);\\n    for (const p of programs.programs) {\\n        if (p.exists)\\n            p.execute(target);\\n    }\\n    ns.nuke(target);\\n}\\n\",\"filename\":\"/utils/nuke.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":270338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ProgramData {\\n    constructor(ns) {\\n        this.programs = [\\n            {\\n                filename: \\\"BruteSSH.exe\\\",\\n                hackingLevel: 50,\\n                execute: ns.brutessh,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"FTPCrack.exe\\\",\\n                hackingLevel: 100,\\n                execute: ns.ftpcrack,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"relaySMTP.exe\\\",\\n                hackingLevel: 250,\\n                execute: ns.relaysmtp,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"HTTPWorm.exe\\\",\\n                hackingLevel: 500,\\n                execute: ns.httpworm,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"SQLInject.exe\\\",\\n                hackingLevel: 750,\\n                execute: ns.sqlinject,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n        ];\\n    }\\n    get hackablePorts() {\\n        let total = 0;\\n        for (const p of this.programs) {\\n            if (p.exists)\\n                total++;\\n        }\\n        return total;\\n    }\\n}\\n\",\"filename\":\"/utils/ProgramData.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":270340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\n// ONLY USE FOR TESTING\\nexport async function main(ns) {\\n    ns.tprint(`This script doesn't do anything right now. Call a function from it if you want to use it.`);\\n}\\nexport function kill(ns, predicate) {\\n    const tree = new ServerTree(ns);\\n    const processes = [];\\n    for (const server of tree.home.list()) {\\n        for (const ps of ns.ps(server.hostname)) {\\n            processes.push([ps, server.hostname]);\\n        }\\n    }\\n    for (const [ps, server] of processes) {\\n        if (predicate(ps, server))\\n            ns.kill(ps.pid);\\n    }\\n}\\n\",\"filename\":\"/utils/scriptKilling.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.5,\"server\":\"home\",\"moduleSequenceNumber\":270342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/utils/ServerTree.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":270344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function copyCmd(ns, cmd) {\\n    const terminalInput = document.getElementById(\\\"terminal-input\\\");\\n    if (!terminalInput) {\\n        ns.print(\\\"Couldn't get terminal-input field.\\\");\\n        return;\\n    }\\n    terminalInput.value = cmd;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({ target: terminalInput });\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\nexport function runCmd(ns, cmd) {\\n    copyCmd(ns, cmd);\\n    document.dispatchEvent(new KeyboardEvent(\\\"keydown\\\", { keyCode: 13 }));\\n}\\n\",\"filename\":\"/utils/terminal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":270346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      List the top 5 most expensive augmentations from your factions.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} \\n      `);\\n        return;\\n    }\\n    const { factions } = ns.getPlayer();\\n    let augs = [];\\n    for (const faction of factions) {\\n        for (const aug of ns.singularity.getAugmentationsFromFaction(faction)) {\\n            augs.push({\\n                aug,\\n                faction,\\n                price: ns.singularity.getAugmentationPrice(aug),\\n            });\\n        }\\n    }\\n    augs = augs.sort((a, b) => b.price - a.price).slice(undefined, 5);\\n    ns.tprint(\\\"Most Expensive Augmentations:\\\");\\n    ns.tprint(\\\"=============================\\\");\\n    for (const aug of augs) {\\n        ns.tprint(`(${aug.aug})\\n      ${aug.faction}\\n      ${ns.nFormat(aug.price, \\\"$0.0a\\\")}`);\\n    }\\n}\\n\",\"filename\":\"augList.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"home\",\"moduleSequenceNumber\":270348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nimport { bkdr } from \\\"bkdr\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will monitor for servers that need a backdoor installed.\\n      It will also nuke any server that needs it.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.sleep(1);\\n        ns.clearLog();\\n        // find nukable servers.\\n        if (!ns.scriptRunning(\\\"nuker.js\\\", \\\"home\\\"))\\n            ns.run(\\\"nuker.js\\\");\\n        await installBackdoors(ns);\\n    }\\n}\\nexport async function installBackdoors(ns) {\\n    const allServers = new ServerTree(ns).home.filter((s) => s.hostname !== \\\"home\\\" && !ns.getPurchasedServers().includes(s.hostname));\\n    const serversBackdoored = allServers.filter((s) => s.backdoorInstalled);\\n    if (serversBackdoored.length === allServers.length) {\\n        ns.print(`\\n        ALL SERVERS HAVE BEEN BACKDOORED\\n        `);\\n        return;\\n    }\\n    let backdoors = allServers.filter((s) => s.hasAdminRights &&\\n        !s.backdoorInstalled &&\\n        s.requiredHackingSkill < ns.getHackingLevel());\\n    ns.print(`\\n      ${serversBackdoored.length} of ${allServers.length.toPrecision(2)} servers\\n      have been backdoored.\\n      ${backdoors.length} servers\\n      are being backdoored.\\n      `);\\n    // show the log if we have servers to backdoor\\n    if (backdoors.length === 0) {\\n        return;\\n    }\\n    if (ns\\n        .getOwnedSourceFiles()\\n        .map((sf) => sf.n)\\n        .includes(4) ||\\n        ns.getPlayer().bitNodeN === 4) {\\n        await bn4(ns, backdoors);\\n    }\\n    else\\n        await noBn4(ns, backdoors);\\n}\\nasync function noBn4(ns, backdoors) {\\n    ns.tail();\\n    ns.print(`Backdoor the following servers:`);\\n    ns.print(`===============================`);\\n    // find backdoorable servers.\\n    for (const server of backdoors) {\\n        // list them.\\n        ns.print(server.hostname);\\n        await bkdr(ns, server.hostname);\\n    }\\n    ns.print(`===============================`);\\n}\\nexport async function bn4(ns, backdoors) {\\n    const tree = new ServerTree(ns);\\n    for (const host of backdoors) {\\n        const path = tree.home.find(host.hostname);\\n        // go to the target\\n        for (const host of path) {\\n            ns.singularity.connect(host);\\n        }\\n        ns.enableLog(\\\"installBackdoor\\\");\\n        ns.print(ns.tFormat(Date.now()));\\n        await ns.singularity.installBackdoor();\\n        // return home\\n        for (const host of path.reverse()) {\\n            ns.singularity.connect(host);\\n        }\\n    }\\n}\\n\",\"filename\":\"backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///db1ab8ba-1d67-46df-8ee8-6bc17ab9fb3b\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///3ea6c131-0c4b-4509-a4f1-a3f2a83622b2\",\"moduleSequenceNumber\":245429},{\"filename\":\"bkdr.js\",\"url\":\"blob:file:///40bc062f-c14e-4b5c-ab8f-d4df09c8fe0a\",\"moduleSequenceNumber\":245435},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///5b08755c-e488-4dda-89c8-da448c34e4f1\",\"moduleSequenceNumber\":245427},{\"filename\":\"backdoor.js\",\"url\":\"blob:file:///23e867f5-2a66-40c3-9dae-60ccf1492091\",\"moduleSequenceNumber\":256964}],\"dependents\":[],\"ramUsage\":42.7,\"server\":\"home\",\"moduleSequenceNumber\":270350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerTree } from \\\"utils/ServerTree\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    await bkdr(ns, target);\\n}\\nexport async function bkdr(ns, target) {\\n    let tree = new ServerTree(ns);\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\") + \\\"backdoor;\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"bkdr.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///01f67552-a384-4845-9a15-4a2005413136\",\"moduleSequenceNumber\":16238},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///63a7b6c4-a8f0-480f-9f0e-f05ace008184\",\"moduleSequenceNumber\":16240},{\"filename\":\"bkdr.js\",\"url\":\"blob:file:///c46f59fd-8cda-4289-b0a8-45fec9e6896c\",\"moduleSequenceNumber\":17188}],\"dependents\":[],\"ramUsage\":28.9,\"server\":\"home\",\"moduleSequenceNumber\":270352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nconst growMultiplier = 4;\\nconst hackPercent = 0.5;\\nconst runningScripts = [\\n    \\\"/batching/hack.js\\\",\\n    \\\"/batching/grow.js\\\",\\n    \\\"/batching/weaken.js\\\",\\n    \\\"/batching/spawner.js\\\",\\n];\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack sorted by the amount of money\\n// we can make off them.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerTree(ns);\\n    return tree.home\\n        .filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() &&\\n        s.hasAdminRights &&\\n        s.hostname !== \\\"home\\\" &&\\n        !ns.getPurchasedServers().includes(s.hostname) &&\\n        s.moneyMax > 0)\\n        .sort((a, b) => {\\n        return getServerHackValue(ns, b) - getServerHackValue(ns, a);\\n    });\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nfunction getServerHackValue(ns, server) {\\n    server.hackDifficulty = server.minDifficulty;\\n    // now find the required number of threads for each action.\\n    const growThreads = Math.ceil(ns.growthAnalyze(server.hostname, growMultiplier));\\n    const hackThreads = Math.ceil(hackPercent / ns.hackAnalyze(server.hostname));\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    const hackSecurityDelta = ns.hackAnalyzeSecurity(hackThreads);\\n    let weakenThreads = 0;\\n    let targetDelta = Math.max(growSecurityDelta, hackSecurityDelta);\\n    // pin targetDelta to 100 to prevent infinity\\n    if (targetDelta > 100)\\n        targetDelta = 100;\\n    const maxThreads = Math.max(hackThreads, weakenThreads, growThreads);\\n    const reserveRam = Math.max(...runningScripts.map((script) => ns.getScriptRam(script) * maxThreads));\\n    const player = ns.getPlayer();\\n    return ((server.moneyMax *\\n        ns.formulas.hacking.hackChance(server, player) *\\n        ns.formulas.hacking.hackPercent(server, player) *\\n        ns.formulas.hacking.growPercent(server, 1, player)) /\\n        reserveRam);\\n}\\n\",\"filename\":\"cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":36.05,\"server\":\"home\",\"moduleSequenceNumber\":270358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will run continuously and expand your server for you. It will\\n      only work with Source File 4.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (!ns.singularity.isBusy()) {\\n            work(ns);\\n        }\\n        expandServer(ns);\\n        await ns.sleep(1);\\n    }\\n}\\nexport function expandServer(ns) {\\n    const ramUpgradeCost = ns.singularity.getUpgradeHomeRamCost();\\n    const coreUpgradeCost = ns.singularity.getUpgradeHomeCoresCost();\\n    if (ns.getServerMoneyAvailable(\\\"home\\\") >= ramUpgradeCost) {\\n        ns.singularity.upgradeHomeRam();\\n    }\\n    if (ns.getServerMoneyAvailable(\\\"home\\\") >= coreUpgradeCost) {\\n        ns.singularity.upgradeHomeCores();\\n    }\\n}\\nfunction work(ns) {\\n    ns.singularity.applyToCompany(`Joe's Guns`, \\\"part-time employee\\\");\\n    ns.singularity.workForCompany(`Joe's Guns`);\\n}\\n\",\"filename\":\"expandServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":17.3,\"server\":\"home\",\"moduleSequenceNumber\":270356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getNeededFactions } from \\\"actions/factionHunt\\\";\\nexport async function main(ns) {\\n    const neededFactions = getNeededFactions(ns);\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.tail();\\n    ns.print(`Needed Factions`);\\n    ns.print(`===============`);\\n    for (const faction of neededFactions) {\\n        ns.print(faction.name);\\n    }\\n    if (neededFactions.length === 0)\\n        ns.print(\\\"NONE\\\");\\n}\\n\",\"filename\":\"factionList.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":49.7,\"server\":\"home\",\"moduleSequenceNumber\":270360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// interface iGoal {\\n//   faction: string;\\n//   rep: number;\\n// }\\n// const factions: iGoal[] = [\\n//   {\\n//     faction: \\\"Daedalus\\\",\\n//     rep: 2310000,\\n//   },\\n//   {\\n//     faction: \\\"ECorp\\\",\\n//     rep: 1500000,\\n//   },\\n//   {\\n//     faction: \\\"Speakers for the Dead\\\",\\n//     rep: 362500,\\n//   },\\n//   {\\n//     faction: \\\"The Covenant\\\",\\n//     rep: 1250000,\\n//   },\\n//   {\\n//     faction: \\\"Blade Industries\\\",\\n//     rep: 562500,\\n//   },\\n//   {\\n//     faction: \\\"The Syndicate\\\",\\n//     rep: 875000,\\n//   },\\n//   {\\n//     faction: \\\"KuaiGong International\\\",\\n//     rep: 562500,\\n//   },\\n//   {\\n//     faction: \\\"Bachman & Associates\\\",\\n//     rep: 375000,\\n//   },\\n//   {\\n//     faction: \\\"Clarke Incorporated\\\",\\n//     rep: 437500,\\n//   },\\n//   {\\n//     faction: \\\"Slum Snakes\\\",\\n//     rep: 22500,\\n//   },\\n//   {\\n//     faction: \\\"Silhouette\\\",\\n//     rep: 62500,\\n//   },\\n// ];\\nconst restrictedFactions = [\\n    \\\"Sector-12\\\",\\n    \\\"Chongqing\\\",\\n    \\\"New Tokyo\\\",\\n    \\\"Ishima\\\",\\n    \\\"Aevum\\\",\\n    \\\"Volhaven\\\",\\n];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    while (true) {\\n        await ns.sleep(1);\\n        ns.clearLog();\\n        // ns.tail();\\n        factionWatch(ns);\\n    }\\n}\\nexport function factionWatch(ns) {\\n    const ownedAugs = ns.singularity.getOwnedAugmentations(true);\\n    for (const invitation of ns.singularity.checkFactionInvitations()) {\\n        // check if I need any of this factions augmentations.\\n        for (const aug of ns.singularity.getAugmentationsFromFaction(invitation)) {\\n            if (!ownedAugs.includes(aug)) {\\n                ns.singularity.joinFaction(invitation);\\n                break;\\n            }\\n        }\\n    }\\n    const { factions } = ns.getPlayer();\\n    // now check for the first invitation;\\n    if (factions.length === 0) {\\n        for (const invitation of ns.singularity.checkFactionInvitations()) {\\n            // skip restricted factions here.\\n            if (restrictedFactions.includes(invitation))\\n                continue;\\n            ns.singularity.joinFaction(invitation);\\n            break;\\n        }\\n    }\\n    travel(ns);\\n}\\nexport function travel(ns) {\\n    // travel if necessary\\n    function findTargetCity() {\\n        for (const city of restrictedFactions) {\\n            if (!factionIsCleared(ns, city) &&\\n                !ns.getPlayer().factions.includes(city)) {\\n                return city;\\n            }\\n        }\\n    }\\n    switch (ns.getPlayer().city) {\\n        case \\\"Sector-12\\\":\\n            if ((ns.getPlayer().factions.includes(\\\"Sector-12\\\") ||\\n                factionIsCleared(ns, \\\"Sector-12\\\")) &&\\n                !ns.getPlayer().factions.includes(\\\"Aevum\\\") &&\\n                !factionIsCleared(ns, \\\"Aevum\\\"))\\n                ns.singularity.travelToCity(\\\"Aevum\\\");\\n            if (factionIsCleared(ns, \\\"Sector-12\\\") && factionIsCleared(ns, \\\"Aevum\\\")) {\\n                // check other cities\\n                const city = findTargetCity();\\n                if (city)\\n                    ns.singularity.travelToCity(city);\\n            }\\n            break;\\n        case \\\"Aevum\\\":\\n            if ((ns.getPlayer().factions.includes(\\\"Aevum\\\") ||\\n                factionIsCleared(ns, \\\"Aevum\\\")) &&\\n                !ns.getPlayer().factions.includes(\\\"Sector-12\\\") &&\\n                !factionIsCleared(ns, \\\"Sector-12\\\"))\\n                ns.singularity.travelToCity(\\\"Sector-12\\\");\\n            if (factionIsCleared(ns, \\\"Sector-12\\\") && factionIsCleared(ns, \\\"Aevum\\\")) {\\n                // check other cities\\n                const city = findTargetCity();\\n                if (city)\\n                    ns.singularity.travelToCity(city);\\n            }\\n            break;\\n        case \\\"Chongqing\\\":\\n            if (ns.getPlayer().factions.includes(\\\"Chongqing\\\") ||\\n                factionIsCleared(ns, \\\"Chongqing\\\")) {\\n                if (!ns.getPlayer().factions.includes(\\\"New Tokyo\\\") &&\\n                    !factionIsCleared(ns, \\\"New Tokyo\\\")) {\\n                    ns.singularity.travelToCity(\\\"New Tokyo\\\");\\n                    break;\\n                }\\n                if (!ns.getPlayer().factions.includes(\\\"Ishima\\\") &&\\n                    !factionIsCleared(ns, \\\"Ishima\\\")) {\\n                    ns.singularity.travelToCity(\\\"Ishima\\\");\\n                    break;\\n                }\\n            }\\n            if (factionIsCleared(ns, \\\"Chongqing\\\") &&\\n                factionIsCleared(ns, \\\"New Tokyo\\\") &&\\n                factionIsCleared(ns, \\\"Ishima\\\")) {\\n                // check other cities\\n                const city = findTargetCity();\\n                if (city) {\\n                    ns.singularity.travelToCity(city);\\n                    break;\\n                }\\n            }\\n        case \\\"New Tokyo\\\":\\n            if (ns.getPlayer().factions.includes(\\\"New Tokyo\\\") ||\\n                factionIsCleared(ns, \\\"New Tokyo\\\")) {\\n                if (!ns.getPlayer().factions.includes(\\\"Chongqing\\\") &&\\n                    !factionIsCleared(ns, \\\"Chongqing\\\")) {\\n                    ns.singularity.travelToCity(\\\"Chongqing\\\");\\n                    break;\\n                }\\n                if (!ns.getPlayer().factions.includes(\\\"Ishima\\\") &&\\n                    !factionIsCleared(ns, \\\"Ishima\\\")) {\\n                    ns.singularity.travelToCity(\\\"Ishima\\\");\\n                    break;\\n                }\\n            }\\n            if (factionIsCleared(ns, \\\"Chongqing\\\") &&\\n                factionIsCleared(ns, \\\"New Tokyo\\\") &&\\n                factionIsCleared(ns, \\\"Ishima\\\")) {\\n                // check other cities\\n                const city = findTargetCity();\\n                if (city) {\\n                    ns.singularity.travelToCity(city);\\n                    break;\\n                }\\n            }\\n        case \\\"Ishima\\\":\\n            if (ns.getPlayer().factions.includes(\\\"Ishima\\\") ||\\n                factionIsCleared(ns, \\\"Ishima\\\")) {\\n                if (!ns.getPlayer().factions.includes(\\\"New Tokyo\\\") &&\\n                    !factionIsCleared(ns, \\\"New Tokyo\\\")) {\\n                    ns.singularity.travelToCity(\\\"New Tokyo\\\");\\n                    break;\\n                }\\n                if (!ns.getPlayer().factions.includes(\\\"Chongqing\\\") &&\\n                    !factionIsCleared(ns, \\\"Chongqing\\\")) {\\n                    ns.singularity.travelToCity(\\\"Chongqing\\\");\\n                    break;\\n                }\\n            }\\n            if (factionIsCleared(ns, \\\"Chongqing\\\") &&\\n                factionIsCleared(ns, \\\"New Tokyo\\\") &&\\n                factionIsCleared(ns, \\\"Ishima\\\")) {\\n                // check other cities\\n                const city = findTargetCity();\\n                if (city) {\\n                    ns.singularity.travelToCity(city);\\n                    break;\\n                }\\n            }\\n        case \\\"Volhaven\\\":\\n            if (factionIsCleared(ns, \\\"Volhaven\\\")) {\\n                // check other cities\\n                const city = findTargetCity();\\n                if (city) {\\n                    ns.singularity.travelToCity(city);\\n                    break;\\n                }\\n            }\\n    }\\n}\\nexport function factionIsCleared(ns, faction) {\\n    const owned = ns.singularity.getOwnedAugmentations(true);\\n    if (ns.singularity\\n        .getAugmentationsFromFaction(faction)\\n        .filter((aug) => !owned.includes(aug)).length === 0)\\n        return true;\\n    return false;\\n}\\n\",\"filename\":\"factionWatch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"factionWatch.js\",\"url\":\"blob:file:///3078580a-b1f2-4fa3-9746-3957a5af7adc\",\"moduleSequenceNumber\":256965}],\"dependents\":[],\"ramUsage\":24.1,\"server\":\"home\",\"moduleSequenceNumber\":270362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"sleeve.travel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e83674c5-2f1f-4a6a-9924-7087244221fb\",\"moduleSequenceNumber\":2090}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":270364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const allowancePercentage = 0.01;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        ns.disableLog(\\\"ALL\\\");\\n        ns.clearLog();\\n        expandHacknet(ns);\\n        await ns.sleep(1);\\n    }\\n}\\nexport function expandHacknet(ns) {\\n    // buy our first node if needed.\\n    if (ns.hacknet.numNodes() === 0)\\n        ns.hacknet.purchaseNode();\\n    // Find the best hacknet purchase.\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n        let gain = [0, 0, 0];\\n        let currentCash = ns.getServerMoneyAvailable(\\\"home\\\");\\n        currentCash *= allowancePercentage;\\n        if (ns.hacknet.getPurchaseNodeCost() <= currentCash) {\\n            ns.hacknet.purchaseNode();\\n            continue;\\n        }\\n        else {\\n            // ns.print(\\n            //   `Cannot afford a new node with ${ns.nFormat(currentCash, \\\"$0.00a\\\")}`\\n            // );\\n        }\\n        const node = ns.hacknet.getNodeStats(i);\\n        if (node.level < 200) {\\n            gain[0] =\\n                ((node.level + 1) *\\n                    1.6 *\\n                    Math.pow(1.035, node.ram - 1) *\\n                    ((node.cores + 5) / 6)) /\\n                    ns.hacknet.getLevelUpgradeCost(i, 1);\\n        }\\n        else {\\n            gain[0] = 0;\\n        }\\n        if (node.ram < 64) {\\n            gain[1] =\\n                (node.level *\\n                    1.6 *\\n                    Math.pow(1.035, node.ram * 2 - 1) *\\n                    ((node.cores + 5) / 6)) /\\n                    ns.hacknet.getRamUpgradeCost(i, 1);\\n        }\\n        else {\\n            gain[1] = 0;\\n        }\\n        if (node.cores < 16) {\\n            gain[2] =\\n                (node.level *\\n                    1.6 *\\n                    Math.pow(1.035, node.ram - 1) *\\n                    ((node.cores + 6) / 6)) /\\n                    ns.hacknet.getCoreUpgradeCost(i, 1);\\n        }\\n        else {\\n            gain[2] = 0;\\n        }\\n        // ns.print(`Level Upgrade: ${gain[0]}`);\\n        // ns.print(`Ram Upgrade: ${gain[1]}`);\\n        // ns.print(`Core Upgrade: ${gain[2]}`);\\n        let topgain = 0;\\n        for (let g of gain) {\\n            if (g > topgain) {\\n                topgain = g;\\n            }\\n        }\\n        if (topgain === 0) {\\n            // ns.print(`All Gains maxed on Node ${i}`);\\n            continue;\\n        }\\n        if (topgain === gain[0] &&\\n            ns.hacknet.getLevelUpgradeCost(i, 1) < currentCash) {\\n            // ns.toast(`Upgrading Level on Node ${i}`);\\n            ns.hacknet.upgradeLevel(i, 1);\\n        }\\n        if (topgain === gain[1] &&\\n            ns.hacknet.getRamUpgradeCost(i, 1) < currentCash) {\\n            // ns.toast(`Upgrading Ram on Node ${i}`);\\n            ns.hacknet.upgradeRam(i, 1);\\n        }\\n        if (topgain === gain[2] &&\\n            ns.hacknet.getCoreUpgradeCost(i, 1) < currentCash) {\\n            // ns.toast(`Upgrading Cores on Node ${i}`);\\n            ns.hacknet.upgradeCore(i, 1);\\n        }\\n        else {\\n            // ns.print(\\n            //   `Cannot afford to upgrade Node ${i} with ${ns.nFormat(\\n            //     currentCash,\\n            //     \\\"$0.00a\\\"\\n            //   )}`\\n            // );\\n        }\\n    }\\n}\\n\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":270366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ps } from \\\"ps\\\";\\nexport async function main(ns) {\\n    for (const proc of ps(ns)) {\\n        if (proc.ps.args.includes(ns.args[0]) ||\\n            proc.ps.filename.includes(ns.args[0])) {\\n            ns.kill(proc.ps.pid);\\n        }\\n    }\\n}\\nexport function autocomplete(data) {\\n    return [...data.scripts, ...data.servers];\\n}\\n\",\"filename\":\"kill.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.5,\"server\":\"home\",\"moduleSequenceNumber\":270368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { kill } from \\\"utils/scriptKilling\\\";\\nexport async function main(ns) {\\n    kill(ns, (ps) => ps.filename === \\\"share.js\\\");\\n}\\n\",\"filename\":\"killShare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.5,\"server\":\"home\",\"moduleSequenceNumber\":270370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getUninstalledAugs } from \\\"actions/factionHunt\\\";\\nexport async function main(ns) {\\n    let hackingXP = 0;\\n    let hackingLevel = 0;\\n    for (const aug of getUninstalledAugs(ns)) {\\n        let data = ns.singularity.getAugmentationStats(aug);\\n        hackingLevel *= data.hacking_mult || 1;\\n        hackingXP *= data.hacking_exp_mult || 1;\\n    }\\n    ns.tprint(`Unclaimed Hacking XP multiplier    : ${hackingXP}`);\\n    ns.tprint(`Unclaimed Hacking Level multiplier : ${hackingLevel}`);\\n}\\n\",\"filename\":\"maxHacking.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":54.7,\"server\":\"home\",\"moduleSequenceNumber\":270372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { getNukableServers } from \\\"cnct\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will monitor for servers that need a backdoor installed.\\n      It will also nuke any server that needs it.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.sleep(1);\\n        ns.clearLog();\\n        nukeAll(ns);\\n    }\\n}\\nexport async function nukeAll(ns) {\\n    // find nukable servers.\\n    for (const server of getNukableServers(ns)) {\\n        // nuke them.\\n        ns.toast(`nuking ${server.hostname}`);\\n        nuke(ns, server.hostname);\\n        server.hasAdminRights = true;\\n    }\\n}\\n\",\"filename\":\"nuker.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///dd8631de-f2c9-4d66-ab92-bb0fd77d401d\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///6fd07477-0826-4b8b-a217-6218e6081a49\",\"moduleSequenceNumber\":245427},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///8fe548b1-760b-4a55-bf24-38033fca9d9e\",\"moduleSequenceNumber\":245429},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///dacfea55-3841-4d79-9a91-91f4437a5cfc\",\"moduleSequenceNumber\":245439},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///b2e74a17-0343-4fc7-a6a2-d284a751eec1\",\"moduleSequenceNumber\":245423},{\"filename\":\"/utils/nuke.js\",\"url\":\"blob:file:///072db829-df64-4ae0-9201-46370d19d0e4\",\"moduleSequenceNumber\":245421},{\"filename\":\"nuker.js\",\"url\":\"blob:file:///2b4c1f3f-a3eb-4c3e-bddb-5ca75f3af515\",\"moduleSequenceNumber\":256966}],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"home\",\"moduleSequenceNumber\":270374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ProgramData } from \\\"utils/ProgramData\\\";\\nimport { createProgram } from \\\"actions/programming\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This monitors for programs that need created and creates the program if\\n      you have Source File 4. If not it prompts the user to create the program.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    const data = new ProgramData(ns);\\n    while (data.programs.filter((p) => !p.exists).length > 0) {\\n        ns.clearLog();\\n        await createPrograms(ns);\\n        await ns.sleep(1);\\n    }\\n}\\nexport async function createPrograms(ns) {\\n    const data = new ProgramData(ns);\\n    if (ns.singularity.purchaseTor()) {\\n        for (const program of data.programs.filter((p) => !p.exists)) {\\n            ns.singularity.purchaseProgram(program.filename);\\n        }\\n    }\\n    let neededPrograms = [];\\n    for (const program of data.programs) {\\n        if (!program.exists)\\n            neededPrograms.push(program.filename);\\n        else\\n            continue;\\n        if (program.hackingLevel <= ns.getHackingLevel()) {\\n            // this program needs created.\\n            if (!program.exists) {\\n                await createProgram(ns, program.filename);\\n            }\\n        }\\n    }\\n    if (neededPrograms.length === 0)\\n        return;\\n}\\n\",\"filename\":\"programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.1,\"server\":\"home\",\"moduleSequenceNumber\":270376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nexport async function main(ns) {\\n    const grep = ns.args.join(\\\" \\\");\\n    for (const proc of ps(ns).filter((p) => p.ps.filename.includes(grep) ||\\n        p.ps.args.includes(grep) ||\\n        p.server.hostname.includes(grep))) {\\n        const { ps, server } = proc;\\n        const memory = ps.threads * ns.getScriptRam(ps.filename, server.hostname);\\n        ns.tprint(`${ps.filename}:\\n      ${ps.args} @ ${server.hostname}\\n      Memory: ${ns.nFormat(memory * 1e9, \\\"0.0b\\\")}`);\\n    }\\n}\\n// Returns a list of { ps, server }'s. Containing every running process.'\\nexport function ps(ns) {\\n    let processes = [];\\n    const tree = new ServerTree(ns);\\n    for (const server of tree.home.list()) {\\n        for (const ps of ns.ps(server.hostname)) {\\n            processes.push({\\n                ps,\\n                server,\\n            });\\n        }\\n    }\\n    return processes;\\n}\\nexport function autocomplete(data) {\\n    return [...data.servers, ...data.scripts];\\n}\\n\",\"filename\":\"ps.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":270378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const budgetPercent = 0.9;\\nlet ramStopPoints = [64, 1024];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ramStopPoints.push(ns.getPurchasedServerMaxRam());\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(`\\n      This will purchase the largest possible servers.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\n        ns.clearLog();\\n        ns.tail();\\n        await purchaseServers(ns);\\n    }\\n    while (getMinRam(ns) < ns.getPurchasedServerMaxRam()) {\\n        ns.clearLog();\\n        ns.tail();\\n        await upgradeServers(ns);\\n    }\\n    ns.clearLog();\\n    // serverStats(ns);\\n}\\nexport async function upgradeServers(ns) {\\n    if (ns.getPurchasedServers().length === 0)\\n        return;\\n    // serverStats(ns);\\n    const ram = await calculateRam(ns);\\n    const price = ns.getPurchasedServerCost(ram);\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\") * budgetPercent;\\n    // find the server with the least amount of ram.\\n    const serverName = ns\\n        .getPurchasedServers()\\n        .sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b))[0];\\n    if (moneyAvailable > price) {\\n        ns.enableLog(\\\"deleteServer\\\");\\n        ns.enableLog(\\\"purchaseServer\\\");\\n        if (ns.ps(serverName).length === 0) {\\n            if (ns.deleteServer(serverName))\\n                ns.purchaseServer(`pserver-${Date.now()}`, ram);\\n        }\\n    }\\n    else {\\n        ns.print(`${ns.nFormat(price, \\\"$0.0a\\\")} needed to add ${ns.nFormat((ram - getMinRam(ns)) * 1e9, \\\"0.0b\\\")} RAM to servers.`);\\n    }\\n}\\nexport async function purchaseServers(ns) {\\n    // serverStats(ns);\\n    const ram = await calculateRam(ns);\\n    const price = ns.getPurchasedServerCost(ram);\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\") * budgetPercent;\\n    if (moneyAvailable > price) {\\n        const serverName = `pserver-${Date.now()}`;\\n        ns.purchaseServer(serverName, ram);\\n    }\\n}\\nexport async function calculateRam(ns) {\\n    // return ns.getPurchasedServerMaxRam();\\n    // get budget\\n    const budget = ns.getServerMoneyAvailable(\\\"home\\\") * budgetPercent;\\n    for (const ram of ramStopPoints.reverse())\\n        if (ns.getPurchasedServerCost(ram) <= budget && ram > getMinRam(ns))\\n            return ram;\\n    for (const ram of ramStopPoints)\\n        if (ram > getMinRam(ns))\\n            return ram;\\n    return ns.getPurchasedServerMaxRam();\\n}\\nexport function getMinRam(ns) {\\n    if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n        return ramStopPoints[0];\\n    return Math.min(...ns.getPurchasedServers().map((s) => ns.getServerMaxRam(s)));\\n}\\n\",\"filename\":\"purchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.05,\"server\":\"home\",\"moduleSequenceNumber\":270380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMinRam } from \\\"purchase\\\";\\nimport { kill } from \\\"utils/scriptKilling\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This is a script that will detect which phase you are in and restart your hacking scripts.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // kill all scripts to start.\\n    kill(ns, (ps) => ps.filename !== ns.getScriptName());\\n    const homeRAM = ns.getServerMaxRam(\\\"home\\\") * 1e9;\\n    const minRAM = getMinRam(ns) * 1e9;\\n    const totalRAM = getTotalRam(ns) * 1e9;\\n    const purchasedServerMaxRAM = ns.getPurchasedServerMaxRam() * 1e9;\\n    ns.print(`\\n    Home RAM: ${ns.nFormat(homeRAM, \\\"0.0b\\\")}\\n    Min RAM: ${ns.nFormat(minRAM, \\\"0.0b\\\")}\\n    Total RAM: ${ns.nFormat(totalRAM, \\\"0.0b\\\")}\\n    Purchased Server MAX RAM: ${ns.nFormat(purchasedServerMaxRAM, \\\"0.0b\\\")}\\n    `);\\n    // just run phase1 and if you are ready for phase2/3 it should automatically\\n    // elevate.\\n    ns.spawn(\\\"/phase1/restart.js\\\");\\n}\\nfunction getTotalRam(ns) {\\n    let total = ns.getServerMaxRam(\\\"home\\\");\\n    if (ns.getPurchasedServers().length === 0)\\n        return total;\\n    for (const ram of ns.getPurchasedServers().map((s) => ns.getServerMaxRam(s)))\\n        total += ram;\\n    return total;\\n}\\n\",\"filename\":\"restart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///30261a70-ff5c-47a8-8c1b-e75510557073\",\"moduleSequenceNumber\":215209},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///189e0c72-dbc1-4e65-aa03-dfdc45821078\",\"moduleSequenceNumber\":215207},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///b341ba3e-7bdb-4dfa-9ed9-3666b8e59750\",\"moduleSequenceNumber\":215245},{\"filename\":\"restart.js\",\"url\":\"blob:file:///29cf857a-c584-477f-a8d9-5d31a7294a22\",\"moduleSequenceNumber\":215816}],\"dependents\":[],\"ramUsage\":9,\"server\":\"home\",\"moduleSequenceNumber\":270382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script analyzes hackable server wealth/health.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    await ns.sleep(1000);\\n    ns.clearLog();\\n    ns.tail();\\n    const tree = new ServerTree(ns);\\n    for (const server of tree.home\\n        .filter((s) => s.hasAdminRights &&\\n        s.requiredHackingSkill <= ns.getHackingLevel() &&\\n        s.hostname !== \\\"home\\\" &&\\n        !ns.getPurchasedServers().includes(s.hostname) &&\\n        s.moneyMax > 0)\\n        .sort((a, b) => {\\n        const maxMoneyA = ns.getServerMaxMoney(a.hostname);\\n        const maxMoneyB = ns.getServerMaxMoney(b.hostname);\\n        // const availableRam =\\n        //   (ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) * 1e9;\\n        let hackChanceA = 0;\\n        let hackChanceB = 0;\\n        let hackTimeA = 1;\\n        let hackTimeB = 1;\\n        if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n            a.hackDifficulty = a.minDifficulty;\\n            b.hackDifficulty = b.minDifficulty;\\n            hackChanceA = ns.formulas.hacking.hackChance(a, ns.getPlayer());\\n            hackChanceB = ns.formulas.hacking.hackChance(b, ns.getPlayer());\\n            hackTimeA = ns.formulas.hacking.hackTime(a, ns.getPlayer());\\n            hackTimeB = ns.formulas.hacking.hackTime(b, ns.getPlayer());\\n        }\\n        else {\\n            hackChanceA = ns.hackAnalyzeChance(a.hostname);\\n            hackChanceB = ns.hackAnalyzeChance(b.hostname);\\n        }\\n        const valueA = (maxMoneyA * hackChanceA) / hackTimeA;\\n        const valueB = (maxMoneyB * hackChanceB) / hackTimeB;\\n        return valueB - valueA;\\n    })) {\\n        analyzeServer(ns, server.hostname);\\n    }\\n}\\nfunction analyzeServer(ns, server, msg = \\\"\\\") {\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    // const availableRam =\\n    //   (ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) * 1e9;\\n    let hackChance = 0;\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n        const testServer = ns.getServer(server);\\n        testServer.hackDifficulty = testServer.minDifficulty;\\n        hackChance = ns.formulas.hacking.hackChance(testServer, ns.getPlayer());\\n    }\\n    else {\\n        hackChance = ns.hackAnalyzeChance(server);\\n    }\\n    if (msg)\\n        ns.print(msg);\\n    const value = maxMoney * hackChance;\\n    ns.print(`${server}:\\n      ${ns.nFormat(value, \\\"$0.000a\\\")}`);\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\n\",\"filename\":\"serverWealth.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.8,\"server\":\"home\",\"moduleSequenceNumber\":270384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":270386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"cnct\\\";\\nconst serverPercent = 0.75;\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      Shares all the servers possible.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    await shareAll(ns);\\n}\\nexport async function shareAll(ns) {\\n    // copy the share script to all the servers we have admin priveledges to.\\n    for (const server of getRunnableServers(ns)) {\\n        // if (!server || server.hostname === \\\"home\\\") continue;\\n        if (!server)\\n            continue;\\n        const shareScript = \\\"share.js\\\";\\n        await ns.scp(shareScript, server.hostname);\\n        // calculate the maximum number of threads.\\n        server.ramUsed = ns.getServerUsedRam(server.hostname);\\n        let maxThreads = Math.max(Math.floor((server.maxRam * serverPercent - server.ramUsed) /\\n            ns.getScriptRam(shareScript, server.hostname)), 1);\\n        if (maxThreads < 1)\\n            maxThreads = 1;\\n        // run the share script if possible.\\n        ns.exec(shareScript, server.hostname, maxThreads);\\n    }\\n}\\n\",\"filename\":\"shareAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"home\",\"moduleSequenceNumber\":270388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"cnct\\\";\\nimport { kill } from \\\"utils/scriptKilling\\\";\\nconst serverPercent = 1;\\nconst homeSingletons = [\\n    \\\"hacknet.js\\\",\\n    \\\"contracts/start.js\\\",\\n    \\\"backdoor.js\\\",\\n    ///\\n];\\nconst homeReserve = [\\n    \\\"cnct.js\\\",\\n    \\\"bkdr.js\\\",\\n    ///\\n];\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      For sharing and only sharing.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // first kill everything else.\\n    kill(ns, (ps) => ps.filename !== ns.getScriptName());\\n    // run singleton scripts\\n    for (const script of homeSingletons) {\\n        ns.run(script);\\n    }\\n    // copy the share script to all the servers we have admin priveledges to.\\n    for (const server of getRunnableServers(ns)) {\\n        // if (!server || server.hostname === \\\"home\\\") continue;\\n        if (!server)\\n            continue;\\n        const shareScript = \\\"share.js\\\";\\n        await ns.scp(shareScript, server.hostname);\\n        // calculate the maximum number of threads.\\n        server.ramUsed = ns.getServerUsedRam(server.hostname);\\n        let maxThreads = Math.max(Math.floor((server.maxRam * serverPercent - server.ramUsed - getReservedRam(ns)) /\\n            ns.getScriptRam(shareScript, server.hostname)), 1);\\n        // run the share script if possible.\\n        ns.exec(shareScript, server.hostname, maxThreads);\\n    }\\n}\\nfunction getReservedRam(ns) {\\n    if (ns.getHostname() !== \\\"home\\\")\\n        return 0;\\n    return Math.max(...homeReserve.map((script) => ns.getScriptRam(script)));\\n}\\n\",\"filename\":\"shareOnly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.95,\"server\":\"home\",\"moduleSequenceNumber\":270390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // TODO: purchasePricey Here //\\n    ns.singularity.applyToCompany(\\\"Joe's Guns\\\", \\\"Employee\\\");\\n    ns.singularity.workForCompany(\\\"Joe's Guns\\\");\\n    ns.spawn(\\\"phase1/prepare.js\\\");\\n}\\n\",\"filename\":\"/phase1/work.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/phase1/work.js\",\"url\":\"blob:file:///509d4182-9958-42c5-a503-3d4b7e52fbe7\",\"moduleSequenceNumber\":188460}],\"dependents\":[],\"ramUsage\":9.6,\"server\":\"home\",\"moduleSequenceNumber\":270320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const target = ns.args[0];\\n    while (true) {\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(`\\r\\n  Home RAM        : ${ns.nFormat(ns.getServerMaxRam(\\\"home\\\") * 1e9, \\\"0b\\\")}\\r\\n  Upgrade Cost    : ${ns.nFormat(ns.singularity.getUpgradeHomeRamCost(), \\\"$0.0a\\\")}\\r\\n  Script Income   : ${ns.nFormat(ns.getScriptIncome()[0], \\\"$0.0a\\\")}\\r\\n  Target Server   : ${target}\\r\\n  Server Security : +${ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)}\\r\\n  Server Cash     : ${ns.nFormat(ns.getServerMoneyAvailable(target) / ns.getServerMaxMoney(target), \\\"0.0%\\\")}\\r\\n      `);\\n        await ns.sleep(1);\\n    }\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\n\",\"filename\":\"/phase1/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/phase1/monitor.js\",\"url\":\"blob:file:///4919ec70-1e40-49f2-a498-426b1df2fec5\",\"moduleSequenceNumber\":216263}],\"dependents\":[],\"ramUsage\":3.65,\"server\":\"home\",\"moduleSequenceNumber\":270310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO: Sort and prioritize these.\\nconst companyPositions = [\\n    \\\"business\\\",\\n    \\\"business consultant\\\",\\n    \\\"software\\\",\\n    \\\"software consultant\\\",\\n    \\\"it\\\",\\n    \\\"agent\\\",\\n    \\\"security engineer\\\",\\n    \\\"security\\\",\\n    \\\"network engineer\\\",\\n    \\\"employee\\\",\\n    \\\"part-time employee\\\",\\n    \\\"waiter\\\",\\n    \\\"part-time waiter\\\",\\n];\\nconst factionCompanies = [\\n    {\\n        name: \\\"MegaCorp\\\",\\n        repGoal: 200000,\\n        city: \\\"Sector-12\\\",\\n    },\\n    {\\n        name: \\\"Four Sigma\\\",\\n        repGoal: 200000,\\n        city: \\\"Sector-12\\\",\\n    },\\n    {\\n        name: \\\"Blade Industries\\\",\\n        repGoal: 200000,\\n        city: \\\"Sector-12\\\",\\n    },\\n    {\\n        name: \\\"ECorp\\\",\\n        repGoal: 200000,\\n        city: \\\"Aevum\\\",\\n    },\\n    {\\n        name: \\\"Bachman & Associates\\\",\\n        repGoal: 200000,\\n        city: \\\"Aevum\\\",\\n    },\\n    {\\n        name: \\\"Clarke Incorporated\\\",\\n        repGoal: 200000,\\n        city: \\\"Aevum\\\",\\n    },\\n    {\\n        name: \\\"Fulcrum Technologies\\\",\\n        factionName: \\\"Fulcrum Secret Technologies\\\",\\n        repGoal: 250000,\\n        city: \\\"Aevum\\\",\\n    },\\n    {\\n        name: \\\"KuaiGong International\\\",\\n        repGoal: 200000,\\n        city: \\\"Chongqing\\\",\\n    },\\n    {\\n        name: \\\"NWO\\\",\\n        repGoal: 200000,\\n        city: \\\"Volhaven\\\",\\n    },\\n    {\\n        name: \\\"OmniTek Incorporated\\\",\\n        repGoal: 200000,\\n        city: \\\"Volhaven\\\",\\n    },\\n];\\nexport async function main(ns) {\\n    // work for faction companies if possible/needed.\\n    for (const company of factionCompanies) {\\n        // first check if we are already invited/joined the company/faction\\n        if (ns.singularity\\n            .checkFactionInvitations()\\n            .concat(ns.getPlayer().factions)\\n            .includes(company.factionName || company.name))\\n            continue;\\n        // Now we know we need this faction invitation - check if we are already\\n        // working for it.\\n        if (ns.singularity.isBusy() &&\\n            ns.getPlayer().workType.toLowerCase().includes(\\\"company\\\") &&\\n            ns.getPlayer().companyName === company.name) {\\n            // we are working for the company should we finish?\\n            if (ns.singularity.getCompanyRep(company.name) +\\n                ns.getPlayer().workRepGained * 0.5 >=\\n                company.repGoal)\\n                ns.singularity.stopAction();\\n        }\\n        else if (await workForCompany(ns, company.name))\\n            ns.spawn(\\\"/phase1/prepare.js\\\");\\n    }\\n    // if we still aren't busy start a life of crime\\n    if (!ns.singularity.isBusy())\\n        ns.spawn(\\\"/phase1/actions/crime.js\\\");\\n    else\\n        ns.spawn(\\\"/phase1/prepare.js\\\");\\n}\\n// Starts working for a company if possible. Returns true if successful. Cancels\\n// any other action.\\nasync function workForCompany(ns, company, preferedPosition = undefined) {\\n    // first check if we are already working for that company.\\n    if (ns.singularity.isBusy() &&\\n        ns.getPlayer().workType.toLowerCase().includes(\\\"company\\\") &&\\n        ns.getPlayer().companyName.toLowerCase().includes(company.toLowerCase()))\\n        return true;\\n    // apply to the company\\n    if (preferedPosition) {\\n        ns.singularity.applyToCompany(company, preferedPosition);\\n    }\\n    else\\n        for (const position of companyPositions) {\\n            if (ns.singularity.applyToCompany(company, position))\\n                break;\\n        }\\n    return ns.singularity.workForCompany(company);\\n}\\n\",\"filename\":\"/phase1/actions/companyWork.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":15.6,\"server\":\"home\",\"moduleSequenceNumber\":270294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { etaCalculator } from \\\"utils/etaCalculator\\\";\\nexport async function main(ns) {\\n    if (await purchasePricey(ns))\\n        ns.spawn(\\\"/phase1/prepare.js\\\");\\n    else\\n        ns.spawn(\\\"/phase1/work.js\\\");\\n}\\nfunction priciestAug(ns, cap = getMaxPrice(ns)) {\\n    const owned = ns.singularity.getOwnedAugmentations(true);\\n    let allAugs = [];\\n    for (const faction of ns.getPlayer().factions) {\\n        for (const aug of ns.singularity\\n            .getAugmentationsFromFaction(faction)\\n            .filter((a) => {\\n            if (owned.includes(a))\\n                return false;\\n            for (const prereq of ns.singularity.getAugmentationPrereq(a)) {\\n                if (!owned.includes(prereq))\\n                    return false;\\n            }\\n            if (ns.singularity.getAugmentationPrice(a) > cap)\\n                return false;\\n            return true;\\n        })) {\\n            allAugs.push(aug);\\n        }\\n    }\\n    return allAugs.sort((a, b) => ns.singularity.getAugmentationPrice(b) -\\n        ns.singularity.getAugmentationPrice(a))[0];\\n}\\nasync function purchasePricey(ns) {\\n    const targetAug = priciestAug(ns);\\n    if (!targetAug)\\n        return false;\\n    const faction = ns\\n        .getPlayer()\\n        .factions.sort((a, b) => ns.singularity.getFactionRep(b) - ns.singularity.getFactionRep(a))\\n        .find((f) => ns.singularity.getAugmentationsFromFaction(f).includes(targetAug));\\n    if (!faction) {\\n        ns.spawn(\\\"/phase1/work.js\\\");\\n        return false;\\n    }\\n    if (ns.singularity.getAugmentationRepReq(targetAug) >\\n        ns.singularity.getFactionRep(faction)) {\\n        // need rep with {faction}\\n        if (ns.singularity.isBusy() &&\\n            ns.getPlayer().workType.includes(\\\"Faction\\\") &&\\n            ns.getPlayer().currentWorkFactionName === faction) {\\n            // already working for the faction\\n            // Print ETA\\n            const totalRep = ns.singularity.getFactionRep(faction) + ns.getPlayer().workRepGained;\\n            const goal = ns.singularity.getAugmentationRepReq(targetAug);\\n            // const ETA = ((goal - totalRep) / ns.getPlayer().workRepGainRate) * 200;\\n            // ns.print(`ETA   : ${ns.tFormat(ETA)}`);\\n            // ns.print(`ETA   : ${etaCalculator(ns, ETA)}`);\\n            if (totalRep >= goal)\\n                ns.singularity.stopAction();\\n        }\\n        else\\n            ns.spawn(\\\"/phase1/actions/factionWork.js\\\", 1, faction);\\n    }\\n    else if (ns.getServerMoneyAvailable(\\\"home\\\") >=\\n        ns.singularity.getAugmentationPrice(targetAug)) {\\n        // have enough rep and cash\\n        ns.singularity.purchaseAugmentation(faction, targetAug);\\n    }\\n    else {\\n        // have enough rep but not enough cash\\n        ns.spawn(\\\"/phase1/actions/crime.js\\\");\\n    }\\n    return true;\\n}\\nfunction getMaxPrice(ns) {\\n    // this is the minimum max price. If we have more in our bank we will use that\\n    // instead.\\n    let min = 10000000000;\\n    if (ns.singularity.getOwnedAugmentations(true).length -\\n        ns.singularity.getOwnedAugmentations(false).length ===\\n        0)\\n        min = Infinity;\\n    return Math.max(ns.getServerMoneyAvailable(\\\"home\\\"), min);\\n}\\n\",\"filename\":\"/phase1/actions/augmentations.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31.7,\"server\":\"home\",\"moduleSequenceNumber\":57862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    await commitCrime(ns, ns.args[0], ns.args[1]);\\n    ns.spawn(\\\"/phase1/nuke.js\\\");\\n}\\nconst crimes = [\\n    \\\"heist\\\",\\n    \\\"assassinate\\\",\\n    \\\"kidnap\\\",\\n    \\\"grand theft auto\\\",\\n    \\\"homicide\\\",\\n    \\\"traffick illegal arms\\\",\\n    \\\"bond forgery\\\",\\n    \\\"deal drugs\\\",\\n    \\\"larceny\\\",\\n    \\\"mug\\\",\\n    \\\"rob store\\\",\\n    \\\"shoplift\\\",\\n    //\\n];\\nexport async function commitCrime(ns, goal = 0, crime = undefined) {\\n    if (!crime)\\n        crime = getBestCrime(ns);\\n    if (ns.singularity.isBusy())\\n        return;\\n    while (true) {\\n        ns.disableLog(\\\"ALL\\\");\\n        ns.enableLog(\\\"commitCrime\\\");\\n        ns.tail();\\n        if (!ns.singularity.isBusy()) {\\n            ns.singularity.commitCrime(crime);\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= goal)\\n            return;\\n        await ns.sleep(1);\\n    }\\n}\\nfunction getBestCrime(ns) {\\n    return crimes.sort((a, b) => crimeCashValue(ns, b) - crimeCashValue(ns, a))[0];\\n}\\n// This gives the cash value of a crime taking in to account the chance of\\n// success as well as the time taken.\\nfunction crimeCashValue(ns, crime) {\\n    const chance = ns.singularity.getCrimeChance(crime);\\n    const stats = ns.singularity.getCrimeStats(crime);\\n    const cash = ns.getBitNodeMultipliers().CrimeMoney * stats.money;\\n    return (cash * chance) / stats.time ** 2 + 1 / stats.time ** 2;\\n}\\n\",\"filename\":\"/phase1/actions/crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/phase1/actions/crime.js\",\"url\":\"blob:file:///244d8735-63ec-4f3b-a672-b82f75723af7\",\"moduleSequenceNumber\":195628}],\"dependents\":[],\"ramUsage\":23.2,\"server\":\"home\",\"moduleSequenceNumber\":270296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { shareAll } from \\\"shareAll\\\";\\nconst workTypes = [\\\"Hacking Contracts\\\", \\\"Field Work\\\", \\\"Security Work\\\"];\\nexport async function main(ns) {\\n    // Work for the given faction using the most expedient method (usually hacking)\\n    const faction = ns.args[0];\\n    if (ns.singularity.isBusy() &&\\n        ns.getPlayer().workType.includes(\\\"Faction\\\") &&\\n        ns.getPlayer().currentWorkFactionName === faction) {\\n        if (ns.getPlayer().workRepGained + ns.singularity.getFactionRep(faction) >=\\n            getFactionRepGoal(ns, faction))\\n            ns.singularity.stopAction();\\n    }\\n    else\\n        await workForFaction(ns, faction);\\n    ns.spawn(\\\"/phase1/nuke.js\\\");\\n}\\nexport async function workForFaction(ns, faction) {\\n    const goal = getFactionRepGoal(ns, faction);\\n    await shareAll(ns);\\n    if (ns.singularity.isBusy() &&\\n        ns.getPlayer().workType.toLowerCase().includes(\\\"faction\\\") &&\\n        ns.getPlayer().currentWorkFactionName === faction) {\\n        ns.print(`Max Rep : ${ns.nFormat(goal, \\\"0.000a\\\")}`);\\n        if (ns.singularity.getFactionRep(faction) + ns.getPlayer().workRepGained >=\\n            goal) {\\n            ns.singularity.stopAction();\\n        }\\n        return;\\n    }\\n    for (const workType of workTypes) {\\n        if (ns.singularity.workForFaction(faction, workType))\\n            return;\\n    }\\n    ns.toast(`ERROR! ${faction} does not offer any work!`);\\n}\\nexport function getFactionRepGoal(ns, faction) {\\n    const owned = ns.singularity.getOwnedAugmentations(true);\\n    let highestRep = 0;\\n    for (const aug of ns.singularity\\n        .getAugmentationsFromFaction(faction)\\n        .filter((a) => !owned.includes(a))) {\\n        const rep = ns.singularity.getAugmentationRepReq(aug);\\n        if (rep > highestRep)\\n            highestRep = rep;\\n    }\\n    return highestRep;\\n}\\n\",\"filename\":\"/phase1/actions/factionWork.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///c02fd776-467a-45cd-ab2f-7b25384730c4\",\"moduleSequenceNumber\":196242},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///c9b55d6f-894c-4de1-879b-52f110ca8362\",\"moduleSequenceNumber\":196246},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///5058a212-48ac-4456-b104-e1c4f485ec6d\",\"moduleSequenceNumber\":196248},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///f65f8ce5-8611-4d3a-95b1-c143dd1e71a3\",\"moduleSequenceNumber\":196258},{\"filename\":\"shareAll.js\",\"url\":\"blob:file:///8a337222-3162-4225-8934-d43e28fa3c20\",\"moduleSequenceNumber\":196290},{\"filename\":\"/phase1/actions/factionWork.js\",\"url\":\"blob:file:///6a621a97-b97b-49b9-a424-d5d70548f555\",\"moduleSequenceNumber\":196549}],\"dependents\":[],\"ramUsage\":26.7,\"server\":\"home\",\"moduleSequenceNumber\":270300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const programName = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !programName) {\\n        ns.tprint(`\\n      This script will create a program for you.\\n      It requires Source File 4 to work.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} PROGRAM_NAME\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    while (!ns.fileExists(programName)) {\\n        ns.clearLog();\\n        await createProgram(ns, programName);\\n        await ns.sleep(1);\\n    }\\n}\\nexport async function createProgram(ns, programName) {\\n    ns.tail();\\n    if (ns.fileExists(programName) &&\\n        ns.singularity.isBusy() &&\\n        ns.getPlayer().workType.toLowerCase().includes(\\\"program\\\") &&\\n        ns.getPlayer().createProgramName === programName) {\\n        ns.singularity.stopAction();\\n        return;\\n    }\\n    if (ns.singularity.purchaseTor() &&\\n        ns.singularity.purchaseProgram(programName))\\n        return;\\n    if (!ns.singularity.isBusy() ||\\n        !ns.getPlayer().workType.toLowerCase().includes(\\\"program\\\")) {\\n        // ns.toast(ns.getPlayer().workType);\\n        ns.singularity.createProgram(programName);\\n    }\\n}\\n\",\"filename\":\"/phase1/actions/programming.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.8,\"server\":\"home\",\"moduleSequenceNumber\":40746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function hasSourceFile(ns, n) {\\n    return (ns\\n        .getOwnedSourceFiles()\\n        .map((sf) => sf.n)\\n        .includes(n) || ns.getPlayer().bitNodeN === n);\\n}\\n\",\"filename\":\"/phase1/actions/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":245389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// This class is for each faction in the game. It should hold everything we\\n// need to join the faction along with a method to test if the faction is\\n// needed.\\nclass FactionData {\\n    constructor(ns, name, req) {\\n        this.ns = ns;\\n        this.name = name;\\n        this.requirements = req;\\n    }\\n    get needed() {\\n        if (this.ns.getPlayer().factions.includes(this.name))\\n            return false;\\n        if (this.ns.singularity\\n            .getAugmentationsFromFaction(this.name)\\n            .filter((aug) => !this.ns.singularity.getOwnedAugmentations(true).includes(aug)).length === 0)\\n            return false;\\n        return true;\\n    }\\n    get augs() {\\n        return this.ns.singularity.getAugmentationsFromFaction(this.name);\\n    }\\n    get neededAugs() {\\n        return this.augs.filter((aug) => !this.ns.singularity.getOwnedAugmentations(true).includes(aug));\\n    }\\n    get canJoin() {\\n        const ns = this.ns;\\n        const req = this.requirements;\\n        const player = this.ns.getPlayer();\\n        if (req.hackLevel && req.hackLevel > player.hacking)\\n            return false;\\n        if (req.strLevel && req.strLevel > player.strength)\\n            return false;\\n        if (req.defLevel && req.defLevel > player.defense)\\n            return false;\\n        if (req.dexLevel && req.dexLevel > player.dexterity)\\n            return false;\\n        if (req.agiLevel && req.agiLevel > player.agility)\\n            return false;\\n        if (req.chaLevel && req.chaLevel > player.charisma)\\n            return false;\\n        if (req.cashReq && req.cashReq > ns.getServerMoneyAvailable(\\\"home\\\"))\\n            return false;\\n        if (req.companyName &&\\n            req.companyRep &&\\n            req.companyRep > ns.singularity.getCompanyRep(req.companyName))\\n            return false;\\n        // if (\\n        //   req.backdoorServer &&\\n        //   !ns.getServer(req.backdoorServer).backdoorInstalled\\n        // )\\n        //   return false;\\n        // function getHacknetStats(): {\\n        //   levels: number;\\n        //   ram: number;\\n        //   cores: number;\\n        // } {\\n        //   let levels = 0;\\n        //   let ram = 0;\\n        //   let cores = 0;\\n        //   for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n        //     const node = ns.hacknet.getNodeStats(i);\\n        //     levels += node.level;\\n        //     ram += node.ram;\\n        //     cores += node.cores;\\n        //   }\\n        //   return {\\n        //     levels,\\n        //     cores,\\n        //     ram,\\n        //   };\\n        // }\\n        // const hacknetStats = getHacknetStats();\\n        // if (req.hacknetLevels && req.hacknetLevels > hacknetStats.levels)\\n        //   return false;\\n        // if (req.hacknetRAM && req.hacknetRAM > hacknetStats.ram) return false;\\n        // if (req.hacknetCores && req.hacknetCores > hacknetStats.cores) return false;\\n        if (req.lockouts.length > 0) {\\n            for (const faction of player.factions) {\\n                if (req.lockouts.includes(faction))\\n                    return false;\\n            }\\n        }\\n        // TODO: figure out how to see karma?\\n        if (req.chiefOfCompanyReq) {\\n            // TODO: figure out how to check company positions.\\n        }\\n        if (req.peopleKilled && player.numPeopleKilled < req.peopleKilled)\\n            return false;\\n        if (req.augsReq &&\\n            req.augsReq > ns.singularity.getOwnedAugmentations(false).length)\\n            return false;\\n        // if nothing fails - success! - we can travel if we want.\\n        // TODO: also need to check Karma and the CEO/CFO/CSO positions\\n        return true;\\n    }\\n    async workToJoin() {\\n        if (!this.needed)\\n            return;\\n        const req = this.requirements;\\n        if (this.canJoin && req.locations.length > 0) {\\n            if (req.locations.includes(this.ns.getPlayer().location)) {\\n                // check other requirements\\n                if (req.chiefOfCompanyReq) {\\n                    this.ns.spawn(\\\"/phase1/actions/companyWork.js\\\");\\n                    return;\\n                }\\n                else {\\n                    this.ns.spawn(\\\"/phase1/actions/crime.js\\\", 1, \\\"0\\\");\\n                    return;\\n                }\\n            }\\n        }\\n        // CHECK EVERYTHING HERE.\\n        // not much can be done if we need augs\\n        if (req.augsReq &&\\n            req.augsReq > this.ns.singularity.getOwnedAugmentations(false).length)\\n            return;\\n        const player = this.ns.getPlayer();\\n        if (req.strLevel && req.strLevel > player.strength)\\n            gym(this.ns, \\\"strength\\\");\\n        else if (req.defLevel && req.defLevel > player.defense)\\n            gym(this.ns, \\\"defense\\\");\\n        else if (req.dexLevel && req.dexLevel > player.dexterity)\\n            gym(this.ns, \\\"dexterity\\\");\\n        else if (req.agiLevel && req.agiLevel > player.agility)\\n            gym(this.ns, \\\"agility\\\");\\n        else if (req.chaLevel && req.chaLevel > player.charisma)\\n            university(this.ns, \\\"charisma\\\");\\n        else if (req.hackLevel && req.hackLevel > player.hacking)\\n            university(this.ns, \\\"hacking\\\");\\n        else if (req.companyName &&\\n            req.companyRep &&\\n            req.companyRep > this.ns.singularity.getCompanyRep(req.companyName)) {\\n            if (this.ns.singularity.isBusy() &&\\n                player.workType.includes(\\\"Company\\\") &&\\n                player.companyName === req.companyName &&\\n                req.companyRep <=\\n                    this.ns.singularity.getCompanyRep(req.companyName) +\\n                        player.workRepGained / 2)\\n                this.ns.singularity.stopAction();\\n            else\\n                this.ns.spawn(\\\"/phase1/actions/companyWork.js\\\");\\n        }\\n        else if (req.peopleKilled && req.peopleKilled > player.numPeopleKilled)\\n            this.ns.spawn(\\\"/phase1/actions/crime.js\\\", 1, \\\"0\\\", \\\"homicide\\\");\\n        else if (req.cashReq &&\\n            req.cashReq > this.ns.getServerMoneyAvailable(\\\"home\\\"))\\n            this.ns.spawn(\\\"/phase1/actions/crime.js\\\", 1, req.cashReq.toString());\\n    }\\n}\\nexport async function main(ns) {\\n    const factions = getNeededFactions(ns);\\n    if (factions.length === 0)\\n        ns.spawn(\\\"/phase1/nuke.js\\\");\\n    await factions[0].workToJoin();\\n    for (const faction of ns.singularity.checkFactionInvitations()) {\\n        ns.singularity.joinFaction(faction);\\n    }\\n    ns.spawn(\\\"/phase1/nuke.js\\\");\\n}\\nfunction gym(ns, stat) {\\n    const statGains = {\\n        strength: ns.getPlayer().workStrExpGainRate,\\n        defense: ns.getPlayer().workDefExpGainRate,\\n        dexterity: ns.getPlayer().workDexExpGainRate,\\n        agility: ns.getPlayer().workAgiExpGainRate,\\n    };\\n    if (ns.singularity.isBusy() && statGains[stat] > 0)\\n        return;\\n    ns.singularity.gymWorkout(\\\"Powerhouse Gym\\\", stat);\\n}\\nfunction university(ns, stat) {\\n    const statGains = {\\n        hacking: ns.getPlayer().workHackExpGainRate,\\n        charisma: ns.getPlayer().workChaExpGainRate,\\n    };\\n    if (ns.singularity.isBusy() && statGains[stat] > 0)\\n        return;\\n    ns.singularity.universityCourse(\\\"Rothman University\\\", stat === \\\"hacking\\\" ? \\\"algorithms\\\" : \\\"leadership\\\");\\n}\\nfunction getAllFactions(ns) {\\n    return [\\n        // Early Game\\n        new FactionData(ns, \\\"CyberSec\\\", {\\n            locations: [],\\n            lockouts: [],\\n            hackLevel: ns.getServerRequiredHackingLevel(\\\"CSEC\\\"),\\n        }),\\n        new FactionData(ns, \\\"Tian Di Hui\\\", {\\n            locations: [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"],\\n            lockouts: [],\\n            hackLevel: 50,\\n            cashReq: 1000000,\\n        }),\\n        new FactionData(ns, \\\"Netburners\\\", {\\n            locations: [],\\n            lockouts: [],\\n            hackLevel: 80,\\n            // hacknetLevels: 100,\\n            // hacknetRAM: 8,\\n            // hacknetCores: 4,\\n        }),\\n        // City Factions\\n        new FactionData(ns, \\\"Sector-12\\\", {\\n            locations: [\\\"Sector-12\\\"],\\n            lockouts: [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"],\\n            cashReq: 15000000,\\n        }),\\n        new FactionData(ns, \\\"Aevum\\\", {\\n            locations: [\\\"Aevum\\\"],\\n            lockouts: [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"],\\n            cashReq: 40000000,\\n        }),\\n        new FactionData(ns, \\\"Chongqing\\\", {\\n            locations: [\\\"Chongqing\\\"],\\n            lockouts: [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Volhaven\\\"],\\n            cashReq: 20000000,\\n        }),\\n        new FactionData(ns, \\\"New Tokyo\\\", {\\n            locations: [\\\"New Tokyo\\\"],\\n            lockouts: [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Volhaven\\\"],\\n            cashReq: 20000000,\\n        }),\\n        new FactionData(ns, \\\"Ishima\\\", {\\n            locations: [\\\"Ishima\\\"],\\n            lockouts: [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Volhaven\\\"],\\n            cashReq: 30000000,\\n        }),\\n        new FactionData(ns, \\\"Volhaven\\\", {\\n            locations: [\\\"Volhaven\\\"],\\n            lockouts: [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"],\\n            cashReq: 50000000,\\n        }),\\n        // Hacking Groups\\n        new FactionData(ns, \\\"NiteSec\\\", {\\n            locations: [],\\n            lockouts: [],\\n            hackLevel: ns.getServerRequiredHackingLevel(\\\"avmnite-02h\\\"),\\n        }),\\n        new FactionData(ns, \\\"The Black Hand\\\", {\\n            locations: [],\\n            lockouts: [],\\n            hackLevel: ns.getServerRequiredHackingLevel(\\\"I.I.I.I\\\"),\\n        }),\\n        new FactionData(ns, \\\"BitRunners\\\", {\\n            locations: [],\\n            lockouts: [],\\n            hackLevel: ns.getServerRequiredHackingLevel(\\\"run4theh111z\\\"),\\n        }),\\n        // Corporations\\n        new FactionData(ns, \\\"MegaCorp\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"MegaCorp\\\",\\n            companyRep: 200000,\\n        }),\\n        new FactionData(ns, \\\"Four Sigma\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"Four Sigma\\\",\\n            companyRep: 200000,\\n        }),\\n        new FactionData(ns, \\\"Blade Industries\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"Blade Industries\\\",\\n            companyRep: 200000,\\n        }),\\n        new FactionData(ns, \\\"ECorp\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"ECorp\\\",\\n            companyRep: 200000,\\n        }),\\n        new FactionData(ns, \\\"Bachman & Associates\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"Bachman & Associates\\\",\\n            companyRep: 200000,\\n        }),\\n        new FactionData(ns, \\\"Clarke Incorporated\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"Clarke Incorporated\\\",\\n            companyRep: 200000,\\n        }),\\n        new FactionData(ns, \\\"Fulcrum Secret Technologies\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"Fulcrum Technologies\\\",\\n            companyRep: 250000,\\n            hackLevel: ns.getServerRequiredHackingLevel(\\\"fulcrumassets\\\"),\\n        }),\\n        new FactionData(ns, \\\"KuaiGong International\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"KuaiGong International\\\",\\n            companyRep: 200000,\\n        }),\\n        new FactionData(ns, \\\"NWO\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"NWO\\\",\\n            companyRep: 200000,\\n        }),\\n        new FactionData(ns, \\\"OmniTek Incorporated\\\", {\\n            locations: [],\\n            lockouts: [],\\n            companyName: \\\"OmniTek Incorporated\\\",\\n            companyRep: 200000,\\n        }),\\n        // Criminal Organizations\\n        new FactionData(ns, \\\"Slum Snakes\\\", {\\n            locations: [],\\n            lockouts: [],\\n            cashReq: 1000000,\\n            karmaReq: -9,\\n            strLevel: 30,\\n            defLevel: 30,\\n            dexLevel: 30,\\n            agiLevel: 30,\\n        }),\\n        new FactionData(ns, \\\"Tetrads\\\", {\\n            locations: [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"],\\n            lockouts: [],\\n            karmaReq: -18,\\n            strLevel: 75,\\n            defLevel: 75,\\n            dexLevel: 75,\\n            agiLevel: 75,\\n        }),\\n        new FactionData(ns, \\\"Silhouette\\\", {\\n            locations: [],\\n            lockouts: [],\\n            karmaReq: -22,\\n            cashReq: 15000000,\\n            chiefOfCompanyReq: true,\\n        }),\\n        new FactionData(ns, \\\"Speakers for the Dead\\\", {\\n            locations: [],\\n            lockouts: [],\\n            hackLevel: 100,\\n            strLevel: 300,\\n            defLevel: 300,\\n            dexLevel: 300,\\n            agiLevel: 300,\\n            peopleKilled: 30,\\n            karmaReq: -45,\\n        }),\\n        new FactionData(ns, \\\"The Dark Army\\\", {\\n            locations: [\\\"Chongqing\\\"],\\n            lockouts: [],\\n            hackLevel: 300,\\n            strLevel: 300,\\n            defLevel: 300,\\n            dexLevel: 300,\\n            agiLevel: 300,\\n            peopleKilled: 5,\\n            karmaReq: -45,\\n        }),\\n        new FactionData(ns, \\\"The Syndicate\\\", {\\n            locations: [\\\"Aevum\\\", \\\"Sector-12\\\"],\\n            lockouts: [],\\n            hackLevel: 200,\\n            strLevel: 200,\\n            defLevel: 200,\\n            dexLevel: 200,\\n            agiLevel: 200,\\n            cashReq: 10000000,\\n            karmaReq: -90,\\n        }),\\n        // Endgame Factions\\n        new FactionData(ns, \\\"Daedalus\\\", {\\n            locations: [],\\n            lockouts: [],\\n            augsReq: 30,\\n            cashReq: 100000000000,\\n            hackLevel: 2500,\\n        }),\\n        new FactionData(ns, \\\"The Covenant\\\", {\\n            locations: [],\\n            lockouts: [],\\n            augsReq: 20,\\n            cashReq: 75000000000,\\n            hackLevel: 850,\\n            strLevel: 850,\\n            defLevel: 850,\\n            dexLevel: 850,\\n            agiLevel: 850,\\n        }),\\n        new FactionData(ns, \\\"Illuminati\\\", {\\n            locations: [],\\n            lockouts: [],\\n            augsReq: 30,\\n            cashReq: 150000000000,\\n            hackLevel: 1500,\\n            strLevel: 1200,\\n            defLevel: 1200,\\n            dexLevel: 1200,\\n            agiLevel: 1200,\\n        }),\\n    ];\\n}\\nfunction getNeededFactions(ns) {\\n    return getAllFactions(ns).filter((faction) => faction.needed);\\n}\\n\",\"filename\":\"/phase1/actions/factionHunt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.8,\"server\":\"home\",\"moduleSequenceNumber\":270298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const programs = [\\n    [\\\"BruteSSH.exe\\\", 50],\\n    [\\\"FTPCrack.exe\\\", 100],\\n    [\\\"relaySMTP.exe\\\", 250],\\n    [\\\"HTTPWorm.exe\\\", 500],\\n    [\\\"SQLInject.exe\\\", 750],\\n];\\n// Create the first program it can.\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    for (const [program, level] of programs) {\\n        if (!ns.fileExists(program) && ns.getHackingLevel() >= level) {\\n            await createProgram(ns, program);\\n            break;\\n        }\\n    }\\n    if (ns.singularity.isBusy() &&\\n        ns.getPlayer().workType.toLowerCase().includes(\\\"program\\\"))\\n        ns.spawn(\\\"/phase1/nuke.js\\\");\\n    else\\n        ns.spawn(\\\"/phase1/actions/findAug.js\\\");\\n}\\nexport async function createProgram(ns, programName) {\\n    if (ns.fileExists(programName) &&\\n        ns.singularity.isBusy() &&\\n        ns.getPlayer().workType.toLowerCase().includes(\\\"program\\\") &&\\n        ns.getPlayer().createProgramName === programName) {\\n        ns.singularity.stopAction();\\n        return;\\n    }\\n    if (!ns.singularity.isBusy() ||\\n        !ns.getPlayer().workType.toLowerCase().includes(\\\"program\\\")) {\\n        // ns.toast(ns.getPlayer().workType);\\n        ns.singularity.createProgram(programName);\\n    }\\n}\\n\",\"filename\":\"/phase1/actions/program.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/phase1/actions/program.js\",\"url\":\"blob:file:///48f3e700-da64-45a1-a31a-22c38c4f8673\",\"moduleSequenceNumber\":245474}],\"dependents\":[],\"ramUsage\":10.75,\"server\":\"home\",\"moduleSequenceNumber\":270304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { etaCalculator } from \\\"utils/etaCalculator\\\";\\nexport async function main(ns) {\\n    const targetAug = ns.args[0];\\n    purchaseAug(ns, targetAug);\\n    ns.spawn(\\\"/phase1/nuke.js\\\");\\n}\\nfunction purchaseAug(ns, targetAug) {\\n    if (!targetAug)\\n        return false;\\n    const faction = ns\\n        .getPlayer()\\n        .factions.sort((a, b) => ns.singularity.getFactionRep(b) - ns.singularity.getFactionRep(a))\\n        .find((f) => ns.singularity.getAugmentationsFromFaction(f).includes(targetAug));\\n    if (!faction) {\\n        ns.spawn(\\\"/phase1/actions/factionHunt.js\\\");\\n        return false;\\n    }\\n    if (ns.singularity.getAugmentationRepReq(targetAug) >\\n        ns.singularity.getFactionRep(faction)) {\\n        // need rep with {faction}\\n        if (ns.singularity.isBusy() &&\\n            ns.getPlayer().workType.includes(\\\"Faction\\\") &&\\n            ns.getPlayer().currentWorkFactionName === faction) {\\n            // already working for the faction\\n            // Print ETA\\n            const totalRep = ns.singularity.getFactionRep(faction) + ns.getPlayer().workRepGained;\\n            const goal = ns.singularity.getAugmentationRepReq(targetAug);\\n            const ETA = ((goal - totalRep) / ns.getPlayer().workRepGainRate) * 200;\\n            ns.clearLog();\\n            ns.tail();\\n            ns.print(`ETA   : ${ns.tFormat(ETA)}`);\\n            ns.print(`ETA   : ${etaCalculator(ns, ETA)}`);\\n            if (totalRep >= goal)\\n                ns.singularity.stopAction();\\n        }\\n        else\\n            ns.spawn(\\\"/phase1/actions/factionWork.js\\\", 1, faction);\\n    }\\n    else if (ns.getServerMoneyAvailable(\\\"home\\\") >=\\n        ns.singularity.getAugmentationPrice(targetAug)) {\\n        // have enough rep and cash\\n        ns.singularity.purchaseAugmentation(faction, targetAug);\\n    }\\n    else {\\n        // have enough rep but not enough cash\\n        ns.spawn(\\\"/phase1/actions/crime.js\\\", 1, ns.singularity.getAugmentationPrice(targetAug).toString());\\n    }\\n    return true;\\n}\\n\",\"filename\":\"/phase1/actions/purchaseAug.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/etaCalculator.js\",\"url\":\"blob:file:///fae3c431-07b2-4e5a-98aa-8768bc2b1eca\",\"moduleSequenceNumber\":245417},{\"filename\":\"/phase1/actions/purchaseAug.js\",\"url\":\"blob:file:///9f97d36c-7215-46bb-b509-1550e189a3f8\",\"moduleSequenceNumber\":245476}],\"dependents\":[],\"ramUsage\":21.7,\"server\":\"home\",\"moduleSequenceNumber\":270306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const aug = priciestAug(ns);\\n    if (!aug)\\n        ns.spawn(\\\"phase1/actions/factionHunt.js\\\");\\n    else\\n        ns.spawn(\\\"/phase1/actions/purchaseAug.js\\\", 1, aug);\\n}\\nfunction priciestAug(ns, cap = getMaxPrice(ns)) {\\n    const owned = ns.singularity.getOwnedAugmentations(true);\\n    let allAugs = [];\\n    for (const faction of ns.getPlayer().factions) {\\n        for (const aug of ns.singularity\\n            .getAugmentationsFromFaction(faction)\\n            .filter((a) => {\\n            if (owned.includes(a))\\n                return false;\\n            for (const prereq of ns.singularity.getAugmentationPrereq(a)) {\\n                if (!owned.includes(prereq))\\n                    return false;\\n            }\\n            if (ns.singularity.getAugmentationPrice(a) > cap)\\n                return false;\\n            return true;\\n        })) {\\n            allAugs.push(aug);\\n        }\\n    }\\n    return allAugs.sort((a, b) => ns.singularity.getAugmentationPrice(b) -\\n        ns.singularity.getAugmentationPrice(a))[0];\\n}\\nfunction getMaxPrice(ns) {\\n    // this is the minimum max price. If we have more in our bank we will use that\\n    // instead.\\n    let min = 10000000000;\\n    if (ns.singularity.getOwnedAugmentations(true).length -\\n        ns.singularity.getOwnedAugmentations(false).length ===\\n        0)\\n        min = Infinity;\\n    return Math.max(ns.getServerMoneyAvailable(\\\"home\\\"), min);\\n}\\n\",\"filename\":\"/phase1/actions/findAug.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/phase1/actions/findAug.js\",\"url\":\"blob:file:///240a5f04-ee97-4660-abd0-419a2b4ed33a\",\"moduleSequenceNumber\":245475}],\"dependents\":[],\"ramUsage\":21.7,\"server\":\"home\",\"moduleSequenceNumber\":270302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      List the top 5 most expensive augmentations from your factions.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} \\n      `);\\n        return;\\n    }\\n    const { factions } = ns.getPlayer();\\n    let augs = [];\\n    for (const faction of factions) {\\n        for (const aug of ns.singularity.getAugmentationsFromFaction(faction)) {\\n            augs.push({\\n                aug,\\n                faction,\\n                price: ns.singularity.getAugmentationPrice(aug),\\n            });\\n        }\\n    }\\n    augs = augs.sort((a, b) => b.price - a.price).slice(undefined, 5);\\n    ns.tprint(\\\"Most Expensive Augmentations:\\\");\\n    ns.tprint(\\\"=============================\\\");\\n    for (const aug of augs) {\\n        ns.tprint(`(${aug.aug})\\n      ${aug.faction}\\n      ${ns.nFormat(aug.price, \\\"$0.0a\\\")}`);\\n    }\\n}\\n\",\"filename\":\"/phase1/actions/augList.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"home\",\"moduleSequenceNumber\":270290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    await installBackdoors(ns);\\n    ns.spawn(\\\"phase1/prepare.js\\\");\\n}\\nasync function installBackdoors(ns) {\\n    const allServers = new ServerTree(ns).home.filter((s) => s.hostname !== \\\"home\\\" && !ns.getPurchasedServers().includes(s.hostname));\\n    const serversBackdoored = allServers.filter((s) => s.backdoorInstalled);\\n    if (serversBackdoored.length === allServers.length) {\\n        ns.print(`\\n        ALL SERVERS HAVE BEEN BACKDOORED\\n        `);\\n        return;\\n    }\\n    let backdoors = allServers.filter((s) => s.hasAdminRights &&\\n        !s.backdoorInstalled &&\\n        s.requiredHackingSkill < ns.getHackingLevel());\\n    ns.print(`\\n      ${serversBackdoored.length} of ${allServers.length.toPrecision(2)} servers\\n      have been backdoored.\\n      ${backdoors.length} servers\\n      are being backdoored.\\n      `);\\n    // show the log if we have servers to backdoor\\n    if (backdoors.length === 0) {\\n        return;\\n    }\\n    await bn4(ns, backdoors);\\n}\\nasync function bn4(ns, backdoors) {\\n    const tree = new ServerTree(ns);\\n    for (const host of backdoors) {\\n        const path = tree.home.find(host.hostname);\\n        // go to the target\\n        for (const host of path) {\\n            ns.singularity.connect(host);\\n        }\\n        ns.enableLog(\\\"installBackdoor\\\");\\n        ns.print(ns.tFormat(Date.now()));\\n        await ns.singularity.installBackdoor();\\n        // return home\\n        for (const host of path.reverse()) {\\n            ns.singularity.connect(host);\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase1/actions/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12.1,\"server\":\"home\",\"moduleSequenceNumber\":270292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserver-1651245042057\",\"pserver-1651245042924\",\"pserver-1651248145833\",\"pserver-1651249521417\",\"pserver-1651249941664\",\"pserver-1651250449430\",\"pserver-1651250818827\",\"pserver-1651251296520\",\"pserver-1651251669740\",\"pserver-1651252026049\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.196,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"84.7.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"ecorp\",\"moduleSequenceNumber\":294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"ecorp\",\"moduleSequenceNumber\":295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"ecorp\",\"moduleSequenceNumber\":257944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":28483883832.75,\"moneyMax\":106814564372.8125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1336,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-106524.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":602984572,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"8.2.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"megacorp\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"megacorp\",\"moduleSequenceNumber\":297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"megacorp\",\"moduleSequenceNumber\":257946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":39355175383.5,\"moneyMax\":147581907688.125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1154,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"40.8.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"b-and-a\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"b-and-a\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"b-and-a\",\"moduleSequenceNumber\":257942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":154,\"hackDifficulty\":154,\"minDifficulty\":51,\"moneyAvailable\":18498345495,\"moneyMax\":69368795606.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":978,\"serverGrowth\":68}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-249467.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"AoCJ28AoCJ28A6AoCJ28A6zAoCJ28A6zgZ1UXXIXIXIXIXIlCCCCL6gu0iNmZZZZOmZZZZOmZZxfDx\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"99.1.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":31.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252160823],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.41000000000008,\"pid\":14238,\"ramUsage\":1.85,\"server\":\"blade\",\"threads\":17,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///96262563-f30f-4ad2-aa7d-cfa2d11ebe4f\",\"moduleSequenceNumber\":258392}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///96262563-f30f-4ad2-aa7d-cfa2d11ebe4f\",\"moduleSequenceNumber\":258392}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"blade\",\"moduleSequenceNumber\":258392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///fad83d1e-2ec6-45e5-8f78-7cdee5f236a1\",\"moduleSequenceNumber\":257280}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"blade\",\"moduleSequenceNumber\":257280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///fd529a6f-b211-49a3-b632-1d15b5277bfb\",\"moduleSequenceNumber\":258020}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"blade\",\"moduleSequenceNumber\":258020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":180,\"hackDifficulty\":180,\"minDifficulty\":60,\"moneyAvailable\":8279657421.75,\"moneyMax\":31048715331.5625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1083,\"serverGrowth\":81}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-113028.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[20],[3],[13],[6],[5],[39]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"73.7.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nwo\",\"moduleSequenceNumber\":302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nwo\",\"moduleSequenceNumber\":303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nwo\",\"moduleSequenceNumber\":257952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":28109793412.5,\"moneyMax\":105411725296.875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1129,\"serverGrowth\":71}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-970001-Joe'sGuns.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[12,[[0,4],[9,11],[1,2],[3,4],[7,9],[1,4],[7,8],[4,11],[1,9],[2,10],[0,3],[3,5],[2,7],[0,8],[6,8],[2,11],[6,9],[3,9],[0,9],[5,11],[4,7]]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"40.0.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"clarkinc\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"clarkinc\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"clarkinc\",\"moduleSequenceNumber\":257928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":12178667529.75,\"moneyMax\":45670003236.5625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1026,\"serverGrowth\":67}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"12.1.5.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":510.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252112400],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.61000000000077,\"pid\":14184,\"ramUsage\":1.85,\"server\":\"omnitek\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///1cbb4852-bedb-4eff-ba79-b4fd64e9df25\",\"moduleSequenceNumber\":259124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252141405],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.81000000000036,\"pid\":14221,\"ramUsage\":1.85,\"server\":\"omnitek\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///1cbb4852-bedb-4eff-ba79-b4fd64e9df25\",\"moduleSequenceNumber\":259124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252176270],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.809999999999935,\"pid\":14247,\"ramUsage\":1.85,\"server\":\"omnitek\",\"threads\":60,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///1cbb4852-bedb-4eff-ba79-b4fd64e9df25\",\"moduleSequenceNumber\":259124}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///1cbb4852-bedb-4eff-ba79-b4fd64e9df25\",\"moduleSequenceNumber\":259124}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnitek\",\"moduleSequenceNumber\":259124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///64ec7d07-24ce-4215-a52b-42074fb6ab77\",\"moduleSequenceNumber\":257268}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnitek\",\"moduleSequenceNumber\":257268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f350b1c3-a33c-4243-abbd-b99b01842bcd\",\"moduleSequenceNumber\":259125}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omnitek\",\"moduleSequenceNumber\":259125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":190,\"hackDifficulty\":190,\"minDifficulty\":63,\"moneyAvailable\":11964407730,\"moneyMax\":44866528987.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1011,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-549767.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[67,21,87,186,83,5,30],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"82.3.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"4sigma\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"4sigma\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"4sigma\",\"moduleSequenceNumber\":257924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":18728276886.75,\"moneyMax\":70231038325.3125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1067,\"serverGrowth\":82}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"63.6.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":257940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"blade\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":194,\"hackDifficulty\":194,\"minDifficulty\":65,\"moneyAvailable\":19867222879.5,\"moneyMax\":74502085798.125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1090,\"serverGrowth\":90}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"17.9.3.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252089990],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":114.21000000000109,\"pid\":14154,\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"threads\":7,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///75c84c05-ea77-4688-a7ca-e27d9d550c0f\",\"moduleSequenceNumber\":257262}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252095885],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":108.210000000001,\"pid\":14163,\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"threads\":100,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///75c84c05-ea77-4688-a7ca-e27d9d550c0f\",\"moduleSequenceNumber\":257262}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252097980],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":106.21000000000097,\"pid\":14167,\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///75c84c05-ea77-4688-a7ca-e27d9d550c0f\",\"moduleSequenceNumber\":257262}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252121542],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":82.61000000000064,\"pid\":14202,\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///df8bfbb5-841c-4bdf-93f2-82d43cba4c6c\",\"moduleSequenceNumber\":257263}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252137975],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.2100000000004,\"pid\":14216,\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///75c84c05-ea77-4688-a7ca-e27d9d550c0f\",\"moduleSequenceNumber\":257262}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252139386],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.81000000000039,\"pid\":14218,\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///75c84c05-ea77-4688-a7ca-e27d9d550c0f\",\"moduleSequenceNumber\":257262}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252140885],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.21000000000036,\"pid\":14220,\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///df8bfbb5-841c-4bdf-93f2-82d43cba4c6c\",\"moduleSequenceNumber\":257263}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252173743],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"pid\":14246,\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///75c84c05-ea77-4688-a7ca-e27d9d550c0f\",\"moduleSequenceNumber\":257262}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252181495],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.609999999999953,\"pid\":14255,\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"threads\":100,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///df8bfbb5-841c-4bdf-93f2-82d43cba4c6c\",\"moduleSequenceNumber\":257263}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252190246],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.809999999999985,\"pid\":14263,\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///75c84c05-ea77-4688-a7ca-e27d9d550c0f\",\"moduleSequenceNumber\":257262}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252193911],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.209999999999997,\"pid\":14267,\"ramUsage\":1.8,\"server\":\"fulcrumtech\",\"threads\":37,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f2712b51-e096-4fbe-bcc3-652085d42c00\",\"moduleSequenceNumber\":258397}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252194707],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":14269,\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///75c84c05-ea77-4688-a7ca-e27d9d550c0f\",\"moduleSequenceNumber\":257262}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///75c84c05-ea77-4688-a7ca-e27d9d550c0f\",\"moduleSequenceNumber\":257262}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":257262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///df8bfbb5-841c-4bdf-93f2-82d43cba4c6c\",\"moduleSequenceNumber\":257263}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":257263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\nconst reserveScripts = [cnctScript, bkdrScript, \\\"/phase2/restart.js\\\"];\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1000 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(...reserveScripts.map((script) => ns.getScriptRam(script)))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///15ded4cb-1d4a-4502-8d82-c78969ab9321\",\"moduleSequenceNumber\":257249}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":257249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f2712b51-e096-4fbe-bcc3-652085d42c00\",\"moduleSequenceNumber\":258397}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":258397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":184,\"hackDifficulty\":184,\"minDifficulty\":61,\"moneyAvailable\":1289799060.75,\"moneyMax\":4836746477.8125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1208,\"serverGrowth\":90}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"90.4.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":257954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1517,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"10.8.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"stormtech\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"stormtech\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"stormtech\",\"moduleSequenceNumber\":257934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":176,\"hackDifficulty\":176,\"minDifficulty\":59,\"moneyAvailable\":876370569,\"moneyMax\":3286389633.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1052,\"serverGrowth\":92}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"6.9.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"defcomm\",\"moduleSequenceNumber\":318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"defcomm\",\"moduleSequenceNumber\":319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"defcomm\",\"moduleSequenceNumber\":257962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":190,\"hackDifficulty\":190,\"minDifficulty\":63,\"moneyAvailable\":648034590.75,\"moneyMax\":2430129715.3125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1017,\"serverGrowth\":52}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-225197.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"53572619\",-18],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"31.0.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"infocomm\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"infocomm\",\"moduleSequenceNumber\":321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"infocomm\",\"moduleSequenceNumber\":257966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"solaris\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":150,\"hackDifficulty\":150,\"minDifficulty\":50,\"moneyAvailable\":536012363.25,\"moneyMax\":2010046362.1875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":935,\"serverGrowth\":51}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"97.0.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":31.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252109618],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.61000000000081,\"pid\":14181,\"ramUsage\":1.85,\"server\":\"helios\",\"threads\":17,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///2ebecada-570d-4d1d-951c-61026bc3fec4\",\"moduleSequenceNumber\":258391}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///2ebecada-570d-4d1d-951c-61026bc3fec4\",\"moduleSequenceNumber\":258391}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"helios\",\"moduleSequenceNumber\":258391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7cd401fd-a876-49d8-aaf9-c4500cee1215\",\"moduleSequenceNumber\":257279}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"helios\",\"moduleSequenceNumber\":257279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///1d43665c-98a8-4500-836a-16e0ceef43ab\",\"moduleSequenceNumber\":258019}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"helios\",\"moduleSequenceNumber\":258019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":174,\"hackDifficulty\":174,\"minDifficulty\":58,\"moneyAvailable\":529722938.25,\"moneyMax\":1986461018.4375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":876,\"serverGrowth\":72}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"75.5.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":31.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252137135],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.01000000000042,\"pid\":14215,\"ramUsage\":1.85,\"server\":\"vitalife\",\"threads\":17,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8694fe4a-fb77-43da-b700-fd0637eccc7a\",\"moduleSequenceNumber\":258390}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8694fe4a-fb77-43da-b700-fd0637eccc7a\",\"moduleSequenceNumber\":258390}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"vitalife\",\"moduleSequenceNumber\":258390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0276f3b8-330e-4a7c-ad2c-0295a18f8706\",\"moduleSequenceNumber\":257278}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"vitalife\",\"moduleSequenceNumber\":257278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5916b836-52b2-4fcf-914c-fa288fb19dcd\",\"moduleSequenceNumber\":258018}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"vitalife\",\"moduleSequenceNumber\":258018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":176,\"hackDifficulty\":176,\"minDifficulty\":59,\"moneyAvailable\":546210550.5,\"moneyMax\":2048289564.375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":786,\"serverGrowth\":77}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"71.1.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"icarus\",\"moduleSequenceNumber\":326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"icarus\",\"moduleSequenceNumber\":327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"icarus\",\"moduleSequenceNumber\":257912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":172,\"hackDifficulty\":172,\"minDifficulty\":57,\"moneyAvailable\":744144697.5,\"moneyMax\":2790542615.625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":922,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"90.7.5.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":127.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252095389],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":108.81000000000101,\"pid\":14161,\"ramUsage\":1.85,\"server\":\"univ-energy\",\"threads\":69,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5fedc545-a50f-43b9-b0dd-b8c723eb1d99\",\"moduleSequenceNumber\":257865}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5fedc545-a50f-43b9-b0dd-b8c723eb1d99\",\"moduleSequenceNumber\":257865}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"univ-energy\",\"moduleSequenceNumber\":257865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///5240dbdf-c0fd-405e-92fa-2d5a91156b08\",\"moduleSequenceNumber\":257271}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"univ-energy\",\"moduleSequenceNumber\":257271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5bf24945-76e0-411a-8505-c048126dfab4\",\"moduleSequenceNumber\":268817}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"univ-energy\",\"moduleSequenceNumber\":268817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":166,\"hackDifficulty\":166,\"minDifficulty\":55,\"moneyAvailable\":886651605.75,\"moneyMax\":3324943521.5625,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":857,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"82.6.7.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252163638],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.61000000000004,\"pid\":14239,\"ramUsage\":1.85,\"server\":\"titan-labs\",\"threads\":34,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b5526f4b-5e2e-4a10-8821-c5ac0a44ffd0\",\"moduleSequenceNumber\":258388}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b5526f4b-5e2e-4a10-8821-c5ac0a44ffd0\",\"moduleSequenceNumber\":258388}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"titan-labs\",\"moduleSequenceNumber\":258388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///27791eb8-59b4-4428-8307-75ffa93378df\",\"moduleSequenceNumber\":257275}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"titan-labs\",\"moduleSequenceNumber\":257275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///b92ea35f-c68c-44ed-89f2-2dc3057e90a3\",\"moduleSequenceNumber\":258015}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"titan-labs\",\"moduleSequenceNumber\":258015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":152,\"hackDifficulty\":152,\"minDifficulty\":51,\"moneyAvailable\":643506770.25,\"moneyMax\":2413150388.4375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":870,\"serverGrowth\":66}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"68.9.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":31.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252166122],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.010000000000005,\"pid\":14242,\"ramUsage\":1.85,\"server\":\"microdyne\",\"threads\":17,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///19c20657-cc00-41ba-a20d-2914dd9f1c45\",\"moduleSequenceNumber\":259492}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///19c20657-cc00-41ba-a20d-2914dd9f1c45\",\"moduleSequenceNumber\":259492}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"microdyne\",\"moduleSequenceNumber\":259492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7a134dbb-6e12-42ec-a5a7-6cb35ea05b14\",\"moduleSequenceNumber\":257277}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"microdyne\",\"moduleSequenceNumber\":257277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///33b9933c-3a2e-45b6-afcf-c7b75efb49f3\",\"moduleSequenceNumber\":258017}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"microdyne\",\"moduleSequenceNumber\":258017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":134,\"hackDifficulty\":134,\"minDifficulty\":45,\"moneyAvailable\":486123094.5,\"moneyMax\":1822961604.375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":72}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"49.4.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":257914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":152,\"hackDifficulty\":152,\"minDifficulty\":51,\"moneyAvailable\":667025146.5,\"moneyMax\":2501344299.375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":70}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"16.5.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":257906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":634907079,\"moneyMax\":2380901546.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":835,\"serverGrowth\":75}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"18.7.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aerocorp\",\"moduleSequenceNumber\":338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aerocorp\",\"moduleSequenceNumber\":339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"aerocorp\",\"moduleSequenceNumber\":257898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":178,\"hackDifficulty\":178,\"minDifficulty\":59,\"moneyAvailable\":858320287.5,\"moneyMax\":3218701078.125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":881,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-87068.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"28650110676\",-50],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"36.9.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":14.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252184483],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999964,\"pid\":14258,\"ramUsage\":1.85,\"server\":\"omnia\",\"threads\":8,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3f62d6c5-25e5-4942-8e3a-17e296ea3ae6\",\"moduleSequenceNumber\":258394}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3f62d6c5-25e5-4942-8e3a-17e296ea3ae6\",\"moduleSequenceNumber\":258394}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnia\",\"moduleSequenceNumber\":258394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///e56365a5-be1e-4b4c-947e-d34bee6b8ff5\",\"moduleSequenceNumber\":257282}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnia\",\"moduleSequenceNumber\":257282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///cd7612bf-b3b5-4c31-8b02-f87e1b5ca17a\",\"moduleSequenceNumber\":258022}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omnia\",\"moduleSequenceNumber\":258022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"global-pharm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":178,\"hackDifficulty\":178,\"minDifficulty\":59,\"moneyAvailable\":716818606.5,\"moneyMax\":2688069774.375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":909,\"serverGrowth\":66}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"34.1.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-def\",\"moduleSequenceNumber\":342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-def\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zb-def\",\"moduleSequenceNumber\":257930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130,\"hackDifficulty\":130,\"minDifficulty\":43,\"moneyAvailable\":818961855.75,\"moneyMax\":3071106959.0625,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":74}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-706708.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"288372\",16],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"76.8.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":257920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148,\"hackDifficulty\":148,\"minDifficulty\":49,\"moneyAvailable\":593299973.25,\"moneyMax\":2224874899.6875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":814,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"46.9.3.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":127.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252157220],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000013,\"pid\":14235,\"ramUsage\":1.85,\"server\":\"solaris\",\"threads\":69,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///4923fa67-7dba-48fa-af35-2c73378d3d5e\",\"moduleSequenceNumber\":257270}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///eaaf607d-4d1a-41d4-9b2b-f038f16b191a\",\"moduleSequenceNumber\":257864}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"solaris\",\"moduleSequenceNumber\":257864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///4923fa67-7dba-48fa-af35-2c73378d3d5e\",\"moduleSequenceNumber\":257270}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"solaris\",\"moduleSequenceNumber\":257270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///59bb037a-a876-47b6-9ca7-5512e8d52c26\",\"moduleSequenceNumber\":268816}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"solaris\",\"moduleSequenceNumber\":268816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":140,\"hackDifficulty\":140,\"minDifficulty\":47,\"moneyAvailable\":567553147.5,\"moneyMax\":2128324303.125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":799,\"serverGrowth\":74}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"76.1.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"deltaone\",\"moduleSequenceNumber\":348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"deltaone\",\"moduleSequenceNumber\":349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"deltaone\",\"moduleSequenceNumber\":257974,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":1168151313,\"moneyMax\":4380567423.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":826,\"serverGrowth\":57}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"72.0.9.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252172932],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.209999999999923,\"pid\":14245,\"ramUsage\":1.85,\"server\":\"global-pharm\",\"threads\":34,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///c7017565-f07d-4f9d-8c6f-f5aeb27e5685\",\"moduleSequenceNumber\":258387}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///c7017565-f07d-4f9d-8c6f-f5aeb27e5685\",\"moduleSequenceNumber\":258387}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"global-pharm\",\"moduleSequenceNumber\":258387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///b24d5180-9084-4635-9fa7-be694d2afc31\",\"moduleSequenceNumber\":257274}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"global-pharm\",\"moduleSequenceNumber\":257274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///e52aa56a-0d98-4285-881a-535d16c0c355\",\"moduleSequenceNumber\":258014}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"global-pharm\",\"moduleSequenceNumber\":258014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":164,\"hackDifficulty\":164,\"minDifficulty\":55,\"moneyAvailable\":1207589060.25,\"moneyMax\":4528458975.9375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":845,\"serverGrowth\":80}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"89.7.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nova-med\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nova-med\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nova-med\",\"moduleSequenceNumber\":257958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":138,\"hackDifficulty\":138,\"minDifficulty\":46,\"moneyAvailable\":911268483,\"moneyMax\":3417256811.25,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":786,\"serverGrowth\":74}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-282617.cct\",\"type\":\"Total Ways to Sum\",\"data\":19,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"10.9.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zeus-med\",\"moduleSequenceNumber\":354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zeus-med\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zeus-med\",\"moduleSequenceNumber\":257970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148,\"hackDifficulty\":148,\"minDifficulty\":49,\"moneyAvailable\":1059466309.5,\"moneyMax\":3972998660.625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":835,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"8.7.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":14.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252136092],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.01000000000043,\"pid\":14211,\"ramUsage\":1.85,\"server\":\"unitalife\",\"threads\":8,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///30c94805-3e7e-4f18-8478-0fa87209640c\",\"moduleSequenceNumber\":258396}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///30c94805-3e7e-4f18-8478-0fa87209640c\",\"moduleSequenceNumber\":258396}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"unitalife\",\"moduleSequenceNumber\":258396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///06f70600-7a64-4e7c-bacf-11081e87aa21\",\"moduleSequenceNumber\":257284}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"unitalife\",\"moduleSequenceNumber\":257284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///c6d1fa02-9960-473c-99e6-f8a7c9e9be69\",\"moduleSequenceNumber\":258024}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"unitalife\",\"moduleSequenceNumber\":258024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":160,\"hackDifficulty\":160,\"minDifficulty\":53,\"moneyAvailable\":811486775.25,\"moneyMax\":3043075407.1875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":814,\"serverGrowth\":76}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"40.6.5.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":127.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252203689],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":14279,\"ramUsage\":1.85,\"server\":\"lexo-corp\",\"threads\":69,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///cf5aceda-0b07-4605-b5be-79e991543044\",\"moduleSequenceNumber\":257863}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///cf5aceda-0b07-4605-b5be-79e991543044\",\"moduleSequenceNumber\":257863}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":257863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d52c2c8a-606a-45f3-9968-099eec3e1a94\",\"moduleSequenceNumber\":257269}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":257269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///2669adb4-e988-45b1-b7e8-cbac10fabf30\",\"moduleSequenceNumber\":275464}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":275464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":152,\"hackDifficulty\":152,\"minDifficulty\":51,\"moneyAvailable\":570226743,\"moneyMax\":2138350286.25,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":737,\"serverGrowth\":64}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"86.2.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252192011],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.009999999999991,\"pid\":14266,\"ramUsage\":1.85,\"server\":\"rho-construction\",\"threads\":34,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///c5e2ceaf-93e1-40a9-afd4-a8246e497300\",\"moduleSequenceNumber\":197627}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///c5e2ceaf-93e1-40a9-afd4-a8246e497300\",\"moduleSequenceNumber\":197627}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rho-construction\",\"moduleSequenceNumber\":197627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///6d379247-7d45-4c03-98b0-3ed1f2d72a55\",\"moduleSequenceNumber\":196613}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rho-construction\",\"moduleSequenceNumber\":196613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e4710897-b411-456b-a303-a691c88944c1\",\"moduleSequenceNumber\":195360}],\"dependents\":[],\"ramUsage\":2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":195360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"rho-construction\",\"moduleSequenceNumber\":196593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///1ced9f16-c2f9-4803-9cf0-1ba07a4e415a\",\"moduleSequenceNumber\":259488}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"rho-construction\",\"moduleSequenceNumber\":259488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":426732364.5,\"moneyMax\":1600246366.875,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":481,\"serverGrowth\":56}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"72.0.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252190461],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.609999999999985,\"pid\":14264,\"ramUsage\":1.8,\"server\":\"alpha-ent\",\"threads\":35,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///1e9f31e2-bf13-4df9-9379-4246f587d07a\",\"moduleSequenceNumber\":258012}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d843909f-9580-4039-964e-c105bfd3c5b3\",\"moduleSequenceNumber\":258025}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":258025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///dccbbb9a-3899-4973-919f-e97e535c2f71\",\"moduleSequenceNumber\":257272}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":257272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///1e9f31e2-bf13-4df9-9379-4246f587d07a\",\"moduleSequenceNumber\":258012}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":258012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":116,\"hackDifficulty\":116,\"minDifficulty\":39,\"moneyAvailable\":466855376.25,\"moneyMax\":1750707660.9375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":533,\"serverGrowth\":51}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"73.1.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252198899],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000003,\"pid\":14276,\"ramUsage\":1.8,\"server\":\"aevum-police\",\"threads\":17,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5f76cd04-0340-497f-a813-b605a342b5d2\",\"moduleSequenceNumber\":258016}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7d8c233b-e7e7-42ae-a3b3-c68039555ebe\",\"moduleSequenceNumber\":258389}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aevum-police\",\"moduleSequenceNumber\":258389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///fc6544c1-d6f7-4de2-ad8c-0f26e83c2535\",\"moduleSequenceNumber\":257276}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aevum-police\",\"moduleSequenceNumber\":257276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5f76cd04-0340-497f-a813-b605a342b5d2\",\"moduleSequenceNumber\":258016}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"aevum-police\",\"moduleSequenceNumber\":258016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":144,\"hackDifficulty\":144,\"minDifficulty\":48,\"moneyAvailable\":254158140.75,\"moneyMax\":953093027.8125,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":400,\"serverGrowth\":31}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"73.3.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":31.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252152394],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.8100000000002,\"pid\":14230,\"ramUsage\":1.85,\"server\":\"rothman-uni\",\"threads\":17,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5998b257-eb9c-4d3c-9a63-fd628bba300e\",\"moduleSequenceNumber\":197628}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5998b257-eb9c-4d3c-9a63-fd628bba300e\",\"moduleSequenceNumber\":197628}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":197628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3f6c7e75-ffdb-4b77-961c-243e49bd5185\",\"moduleSequenceNumber\":196614}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":196614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///44a89884-a920-4941-9a17-8048c345f6bb\",\"moduleSequenceNumber\":195364}],\"dependents\":[],\"ramUsage\":2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":195364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":196575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a9af89d1-30c8-4464-a57e-05d17b65d926\",\"moduleSequenceNumber\":272201}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":272201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":173937715.5,\"moneyMax\":652266433.125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":429,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"69.5.4.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252113447],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.61000000000075,\"pid\":14186,\"ramUsage\":1.85,\"server\":\"zb-institute\",\"threads\":34,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///305b8855-0992-4d8c-9819-12bd8ddc3fe5\",\"moduleSequenceNumber\":258026}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///305b8855-0992-4d8c-9819-12bd8ddc3fe5\",\"moduleSequenceNumber\":258026}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-institute\",\"moduleSequenceNumber\":258026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///f83a2e21-c897-4973-a2ee-67a561365fc5\",\"moduleSequenceNumber\":257273}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-institute\",\"moduleSequenceNumber\":257273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6a160c85-ccd3-47f3-b626-2a94c7f81d75\",\"moduleSequenceNumber\":258013}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zb-institute\",\"moduleSequenceNumber\":258013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":612518661.75,\"moneyMax\":2296944981.5625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":772,\"serverGrowth\":80}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"51.5.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":14.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252118895],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.21000000000068,\"pid\":14196,\"ramUsage\":1.85,\"server\":\"summit-uni\",\"threads\":8,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4d5cb44b-8598-4510-bef9-639ccb103d9c\",\"moduleSequenceNumber\":197630}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4d5cb44b-8598-4510-bef9-639ccb103d9c\",\"moduleSequenceNumber\":197630}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"summit-uni\",\"moduleSequenceNumber\":197630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///e1ee0991-40c2-44ef-8e4d-49db03815544\",\"moduleSequenceNumber\":196616}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"summit-uni\",\"moduleSequenceNumber\":196616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a086f13c-bf68-49f5-9c5c-798677b92e8f\",\"moduleSequenceNumber\":195369}],\"dependents\":[],\"ramUsage\":2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":195369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"summit-uni\",\"moduleSequenceNumber\":196571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a4718e8f-4245-472f-91c2-47497730003f\",\"moduleSequenceNumber\":261091}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"summit-uni\",\"moduleSequenceNumber\":261091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"computek\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":122,\"hackDifficulty\":122,\"minDifficulty\":41,\"moneyAvailable\":215799094.5,\"moneyMax\":809246604.375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":457,\"serverGrowth\":59}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"85.2.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"syscore\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"syscore\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"syscore\",\"moduleSequenceNumber\":257988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142,\"hackDifficulty\":142,\"minDifficulty\":47,\"moneyAvailable\":349971034.5,\"moneyMax\":1312391379.375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":573,\"serverGrowth\":65}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-950694.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"229101172129\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"92.4.8.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":127.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252136961],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.21000000000042,\"pid\":14214,\"ramUsage\":1.85,\"server\":\"catalyst\",\"threads\":69,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///773de1f5-3f71-49ab-b48c-0943eb98937a\",\"moduleSequenceNumber\":196610}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///773de1f5-3f71-49ab-b48c-0943eb98937a\",\"moduleSequenceNumber\":196610}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"catalyst\",\"moduleSequenceNumber\":196610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///f2d5ec6e-b09c-4c4a-89c3-3a3304063899\",\"moduleSequenceNumber\":198471}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"catalyst\",\"moduleSequenceNumber\":198471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ca756b02-34f0-4014-9bfe-dafb92f056c5\",\"moduleSequenceNumber\":195351}],\"dependents\":[],\"ramUsage\":2,\"server\":\"catalyst\",\"moduleSequenceNumber\":195351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"catalyst\",\"moduleSequenceNumber\":196579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\nconst reserveScripts = [cnctScript, bkdrScript, \\\"/phase2/restart.js\\\"];\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1000 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(...reserveScripts.map((script) => ns.getScriptRam(script)))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///f27cd1b6-4568-4bab-967c-db8a45e203d8\",\"moduleSequenceNumber\":196609}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"catalyst\",\"moduleSequenceNumber\":196609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///384ee0de-264d-48af-8525-cb7cfd53691b\",\"moduleSequenceNumber\":281296}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"catalyst\",\"moduleSequenceNumber\":281296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":128,\"hackDifficulty\":128,\"minDifficulty\":43,\"moneyAvailable\":252928514.25,\"moneyMax\":948481928.4375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":400,\"serverGrowth\":33}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"32.0.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":31.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252158506],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"pid\":14237,\"ramUsage\":1.85,\"server\":\"the-hub\",\"threads\":17,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///122e94dc-7745-41d9-b1bf-df67479551d6\",\"moduleSequenceNumber\":17185}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///122e94dc-7745-41d9-b1bf-df67479551d6\",\"moduleSequenceNumber\":17185}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"the-hub\",\"moduleSequenceNumber\":17185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///b156a8fe-e7ad-4eee-a7b6-7b3ff3b76ec6\",\"moduleSequenceNumber\":72375}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"the-hub\",\"moduleSequenceNumber\":72375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e3d35a42-ec31-4cc8-8c20-6dcace52a313\",\"moduleSequenceNumber\":73118}],\"dependents\":[],\"ramUsage\":2,\"server\":\"the-hub\",\"moduleSequenceNumber\":73118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"the-hub\",\"moduleSequenceNumber\":196597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///b51e8f52-b5aa-45d9-9873-4b7916b2a6c9\",\"moduleSequenceNumber\":259491}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"the-hub\",\"moduleSequenceNumber\":259491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":122597062.5,\"moneyMax\":459738984.375,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":302,\"serverGrowth\":55}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"74.7.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"computek\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"computek\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"computek\",\"moduleSequenceNumber\":195371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"computek\",\"moduleSequenceNumber\":196569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"computek\",\"moduleSequenceNumber\":257886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":128,\"hackDifficulty\":128,\"minDifficulty\":43,\"moneyAvailable\":173713996.5,\"moneyMax\":651427486.875,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":379,\"serverGrowth\":64}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"29.1.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252176329],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.809999999999935,\"pid\":14248,\"ramUsage\":1.85,\"server\":\"netlink\",\"threads\":34,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a3de53bf-cc5d-4418-86d6-6ee88709b253\",\"moduleSequenceNumber\":197625}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a3de53bf-cc5d-4418-86d6-6ee88709b253\",\"moduleSequenceNumber\":197625}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"netlink\",\"moduleSequenceNumber\":197625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///b7bd8aa6-3a5e-46e5-8ce6-d94358b54951\",\"moduleSequenceNumber\":196611}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"netlink\",\"moduleSequenceNumber\":196611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///47a63edd-2d49-4f04-8c5e-26b8a84b56eb\",\"moduleSequenceNumber\":195355}],\"dependents\":[],\"ramUsage\":2,\"server\":\"netlink\",\"moduleSequenceNumber\":195355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"netlink\",\"moduleSequenceNumber\":196587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///446632d2-6b33-4e1d-a609-407752c1555d\",\"moduleSequenceNumber\":259487}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"netlink\",\"moduleSequenceNumber\":259487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":144,\"hackDifficulty\":144,\"minDifficulty\":48,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":423,\"serverGrowth\":64}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"20.9.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":73121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":196589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":257990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":54704747.25,\"moneyMax\":205142802.1875,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":254,\"serverGrowth\":40}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"15.4.2.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252146608],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.41000000000028,\"pid\":14223,\"ramUsage\":1.85,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///66be9b07-9119-48a7-9cbc-78d962333b8c\",\"moduleSequenceNumber\":1993}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///66be9b07-9119-48a7-9cbc-78d962333b8c\",\"moduleSequenceNumber\":1993}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":1993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///99774f1b-54d1-4125-af6f-3fa434b5e6fc\",\"moduleSequenceNumber\":11044}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":11044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///3f216126-da86-412f-ad66-d100db56ef58\",\"moduleSequenceNumber\":73120}],\"dependents\":[],\"ramUsage\":2,\"server\":\"n00dles\",\"moduleSequenceNumber\":73120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"n00dles\",\"moduleSequenceNumber\":196551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///ed53e53f-5980-48d5-8b0c-00e6f6e98959\",\"moduleSequenceNumber\":291227}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"n00dles\",\"moduleSequenceNumber\":291227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":2,\"hackDifficulty\":1.04,\"minDifficulty\":1,\"moneyAvailable\":196875,\"moneyMax\":196875,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"16.4.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252118739],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.41000000000068,\"pid\":14195,\"ramUsage\":1.85,\"server\":\"foodnstuff\",\"threads\":8,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///36358bb6-27b3-42c4-979e-fae6d5d70d3b\",\"moduleSequenceNumber\":1992}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///36358bb6-27b3-42c4-979e-fae6d5d70d3b\",\"moduleSequenceNumber\":1992}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1992,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d3ce21f3-0574-4874-8ea8-ba89c3c39130\",\"moduleSequenceNumber\":10597}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":10597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\nconst reserveScripts = [cnctScript, bkdrScript, \\\"/phase2/restart.js\\\"];\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1000 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(...reserveScripts.map((script) => ns.getScriptRam(script)))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///9e3700a7-2526-4703-a915-1bba80a31906\",\"moduleSequenceNumber\":1986}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1986,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///65e759d2-d7d7-4176-828d-96ea0964f6a6\",\"moduleSequenceNumber\":73081}],\"dependents\":[],\"ramUsage\":2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":73081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":196553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///7e63a316-5122-4dec-a4c2-0f2c64a2f122\",\"moduleSequenceNumber\":263729}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":263729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":1500000,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"36.6.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252185529],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.609999999999967,\"pid\":14260,\"ramUsage\":1.85,\"server\":\"sigma-cosmetics\",\"threads\":8,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///737dbb6a-9aed-4e87-9956-f11200c4d704\",\"moduleSequenceNumber\":1987}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///737dbb6a-9aed-4e87-9956-f11200c4d704\",\"moduleSequenceNumber\":1987}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///b1e80978-4b01-471b-b895-d83881ee3f78\",\"moduleSequenceNumber\":11045}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":11045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\nconst reserveScripts = [cnctScript, bkdrScript, \\\"/phase2/restart.js\\\"];\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1000 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(...reserveScripts.map((script) => ns.getScriptRam(script)))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///5006d59a-ddbd-48db-b818-4d435f763b48\",\"moduleSequenceNumber\":870}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///df5b209b-4b3d-4839-9e63-1a14400145c4\",\"moduleSequenceNumber\":73083}],\"dependents\":[],\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":73083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":196555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6a3e85e8-7f50-46ab-9599-4d26e6000848\",\"moduleSequenceNumber\":258762}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":258762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":2613075.9590820996,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"25.7.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252121031],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":83.01000000000064,\"pid\":14201,\"ramUsage\":1.85,\"server\":\"joesguns\",\"threads\":8,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///16280610-7cc6-47bf-aa57-e983fb01e696\",\"moduleSequenceNumber\":1988}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///16280610-7cc6-47bf-aa57-e983fb01e696\",\"moduleSequenceNumber\":1988}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":1988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///99eb9e7f-1977-4984-89cc-7be100426347\",\"moduleSequenceNumber\":11046}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":11046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///57fb3d00-806a-43c6-8200-4ba2355c7536\",\"moduleSequenceNumber\":73085}],\"dependents\":[],\"ramUsage\":2,\"server\":\"joesguns\",\"moduleSequenceNumber\":73085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"joesguns\",\"moduleSequenceNumber\":196561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///e2993882-126f-4bbe-8e91-e6d27fc82983\",\"moduleSequenceNumber\":279834}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"joesguns\",\"moduleSequenceNumber\":279834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1875000,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"89.1.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252138040],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.0100000000004,\"pid\":14217,\"ramUsage\":1.85,\"server\":\"zer0\",\"threads\":17,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///eec13461-6fde-46a3-bc1e-12621b7bcbb7\",\"moduleSequenceNumber\":17181}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///eec13461-6fde-46a3-bc1e-12621b7bcbb7\",\"moduleSequenceNumber\":17181}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zer0\",\"moduleSequenceNumber\":17181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///1b339c26-af35-4fb1-a035-0b0b983b5069\",\"moduleSequenceNumber\":72371}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zer0\",\"moduleSequenceNumber\":72371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///7529435f-bf5e-4412-8b36-c9cd1c6e260c\",\"moduleSequenceNumber\":73106}],\"dependents\":[],\"ramUsage\":2,\"server\":\"zer0\",\"moduleSequenceNumber\":73106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"zer0\",\"moduleSequenceNumber\":196563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///2c4edb1b-10da-4339-b73b-1e402812f1e2\",\"moduleSequenceNumber\":275101}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zer0\",\"moduleSequenceNumber\":275101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":5625000,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"88.9.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252124655],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.4100000000006,\"pid\":14204,\"ramUsage\":1.85,\"server\":\"nectar-net\",\"threads\":8,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///fe17c032-9130-4f25-abb1-c4f73ad0f2d5\",\"moduleSequenceNumber\":1989}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///fe17c032-9130-4f25-abb1-c4f73ad0f2d5\",\"moduleSequenceNumber\":1989}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///16021069-cb2e-4264-a968-f51875addf77\",\"moduleSequenceNumber\":11489}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nectar-net\",\"moduleSequenceNumber\":11489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///3b56c8bc-1a43-4c37-b3d8-0fe9d140f548\",\"moduleSequenceNumber\":73093}],\"dependents\":[],\"ramUsage\":2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":73093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"nectar-net\",\"moduleSequenceNumber\":196565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///1d345596-8c7e-4b49-9fbe-8246f8e10408\",\"moduleSequenceNumber\":272202}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nectar-net\",\"moduleSequenceNumber\":272202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":2062500,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"27.7.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252115334],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.81000000000073,\"pid\":14187,\"ramUsage\":1.85,\"server\":\"neo-net\",\"threads\":17,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///aec399f6-15bd-4b41-b9ba-af514b050d6d\",\"moduleSequenceNumber\":17183}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///aec399f6-15bd-4b41-b9ba-af514b050d6d\",\"moduleSequenceNumber\":17183}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"neo-net\",\"moduleSequenceNumber\":17183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7ed0ea50-e1ba-47d2-b5ea-9f624c5814f2\",\"moduleSequenceNumber\":72373}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"neo-net\",\"moduleSequenceNumber\":72373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b9e114ee-13ad-45c1-b423-82e51ff0cdda\",\"moduleSequenceNumber\":73112}],\"dependents\":[],\"ramUsage\":2,\"server\":\"neo-net\",\"moduleSequenceNumber\":73112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"neo-net\",\"moduleSequenceNumber\":196585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///0e14ad40-e133-4f20-a79c-55755d248fd0\",\"moduleSequenceNumber\":259489}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"neo-net\",\"moduleSequenceNumber\":259489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":3750000,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"39.0.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252136888],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.21000000000042,\"pid\":14213,\"ramUsage\":1.85,\"server\":\"silver-helix\",\"threads\":34,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3022f43f-074b-4723-b8d1-ae4a407d6a2b\",\"moduleSequenceNumber\":17179}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3022f43f-074b-4723-b8d1-ae4a407d6a2b\",\"moduleSequenceNumber\":17179}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"silver-helix\",\"moduleSequenceNumber\":17179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///00b61a0b-57d8-48d9-b101-11ae72e768b7\",\"moduleSequenceNumber\":72370}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"silver-helix\",\"moduleSequenceNumber\":72370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///fccc7b79-c5fc-4a29-adca-f8437582857d\",\"moduleSequenceNumber\":73100}],\"dependents\":[],\"ramUsage\":2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":73100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"silver-helix\",\"moduleSequenceNumber\":196559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///0c1003cf-ee97-4ee3-9dd0-df24b773e4a7\",\"moduleSequenceNumber\":264969}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"silver-helix\",\"moduleSequenceNumber\":264969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":33750000,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-394242-Joe'sGuns.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[189,[1,4,8,9,15,16,18,19,20]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"4.8.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252196090],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.010000000000005,\"pid\":14271,\"ramUsage\":1.85,\"server\":\"hong-fang-tea\",\"threads\":8,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a513578e-7428-4944-bc0f-a0f779edb98b\",\"moduleSequenceNumber\":1990}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a513578e-7428-4944-bc0f-a0f779edb98b\",\"moduleSequenceNumber\":1990}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///5085287e-d528-449a-8f24-644c96f634d8\",\"moduleSequenceNumber\":10598}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":10598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///2b6a9721-25c2-4822-86b7-7eb71c7c41a0\",\"moduleSequenceNumber\":73095}],\"dependents\":[],\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":73095,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":196581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///ac731b01-a66d-4ebc-9e0d-5ae4a15b2958\",\"moduleSequenceNumber\":276913}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":276913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":2250000,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-396421-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[164,137,180,20,117,88,63,160,159,23,6,136,49,72,45,104,114,111,176,117,156,30,95,177,60,98,27,9,151,142,34,66,2,117,149,21,74,27,159,94,185,6,198,44,96,72,95,135,148,134]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"6.8.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252119771],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.41000000000066,\"pid\":14198,\"ramUsage\":1.85,\"server\":\"harakiri-sushi\",\"threads\":8,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0b6ba00-e7c1-4187-a81c-c809f633db4c\",\"moduleSequenceNumber\":1991}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0b6ba00-e7c1-4187-a81c-c809f633db4c\",\"moduleSequenceNumber\":1991}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///77a8062e-0ce8-4322-928b-9007841e1798\",\"moduleSequenceNumber\":11043}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":11043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///46390cd9-d330-41c1-afa1-94daa1878e4c\",\"moduleSequenceNumber\":73097}],\"dependents\":[],\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":73097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":196601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///860ff0fa-1ffc-4729-9de2-a55bcc739995\",\"moduleSequenceNumber\":258401}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":258401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10.439999999999998,\"minDifficulty\":10,\"moneyAvailable\":11250000,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-955562.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[6,9],[4,5],[2,10],[5,11],[20,22],[1,10],[8,9],[22,28],[6,13],[1,5],[11,17],[8,15]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"86.3.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252128591],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.61000000000054,\"pid\":14208,\"ramUsage\":1.85,\"server\":\"phantasy\",\"threads\":17,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34cd88ca-6816-491a-919d-639d9f346e2e\",\"moduleSequenceNumber\":17184}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///34cd88ca-6816-491a-919d-639d9f346e2e\",\"moduleSequenceNumber\":17184}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"phantasy\",\"moduleSequenceNumber\":17184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///b23a1864-c389-42a5-8495-b33b556988bb\",\"moduleSequenceNumber\":72374}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"phantasy\",\"moduleSequenceNumber\":72374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///034f9727-1449-4c92-b2f4-053ec2c3fd5f\",\"moduleSequenceNumber\":73115}],\"dependents\":[],\"ramUsage\":2,\"server\":\"phantasy\",\"moduleSequenceNumber\":73115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"phantasy\",\"moduleSequenceNumber\":196595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///e4878dc4-aa48-4ed0-94a4-2331de549d59\",\"moduleSequenceNumber\":259490}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"phantasy\",\"moduleSequenceNumber\":259490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":40,\"hackDifficulty\":13.276,\"minDifficulty\":13,\"moneyAvailable\":44395877.293374516,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"74.1.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252181355],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.809999999999953,\"pid\":14254,\"ramUsage\":1.85,\"server\":\"max-hardware\",\"threads\":17,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///820be2c4-d138-4faf-b356-f5703efd88a9\",\"moduleSequenceNumber\":17180}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///820be2c4-d138-4faf-b356-f5703efd88a9\",\"moduleSequenceNumber\":17180}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"max-hardware\",\"moduleSequenceNumber\":17180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///b133aa5a-625d-4b87-b348-1d4c6fae93f0\",\"moduleSequenceNumber\":72610}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"max-hardware\",\"moduleSequenceNumber\":72610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///2cddd8f3-4440-40e0-982b-e82adff04c39\",\"moduleSequenceNumber\":73103}],\"dependents\":[],\"ramUsage\":2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":73103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"max-hardware\",\"moduleSequenceNumber\":196557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///73bf0e47-0cde-40e9-ade6-cf340b9bda31\",\"moduleSequenceNumber\":258011}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"max-hardware\",\"moduleSequenceNumber\":258011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":7500000,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"99.3.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252133531],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":70.61000000000047,\"pid\":14209,\"ramUsage\":1.85,\"server\":\"omega-net\",\"threads\":17,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///64d2d2fc-585a-44b5-9191-c5290b8dad77\",\"moduleSequenceNumber\":17182}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///64d2d2fc-585a-44b5-9191-c5290b8dad77\",\"moduleSequenceNumber\":17182}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omega-net\",\"moduleSequenceNumber\":17182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///263d8eed-5852-4c5b-9383-6e02241dac2a\",\"moduleSequenceNumber\":72372}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omega-net\",\"moduleSequenceNumber\":72372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4e3eebc9-d205-4e73-b1eb-83941fb395b9\",\"moduleSequenceNumber\":73109}],\"dependents\":[],\"ramUsage\":2,\"server\":\"omega-net\",\"moduleSequenceNumber\":73109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"omega-net\",\"moduleSequenceNumber\":196567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///efb30e55-348d-424f-bb44-209a6ae264ac\",\"moduleSequenceNumber\":274737}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omega-net\",\"moduleSequenceNumber\":274737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":48378620.25,\"moneyMax\":181419825.9375,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":216,\"serverGrowth\":35}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"47.6.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":73930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":196599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":258000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":40868217.75,\"moneyMax\":153255816.5625,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":243,\"serverGrowth\":28}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-124274.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[113,172,114,95,134,188,38,11,97,112,176,134,120,73,71,100,100]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"79.8.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252106947],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.21000000000085,\"pid\":14175,\"ramUsage\":1.85,\"server\":\"iron-gym\",\"threads\":17,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///79fdd052-cc9e-4d8b-8131-98685e8c8dd5\",\"moduleSequenceNumber\":17186}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///79fdd052-cc9e-4d8b-8131-98685e8c8dd5\",\"moduleSequenceNumber\":17186}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":17186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///4c1d70fb-f311-4c48-897f-9c89417236a2\",\"moduleSequenceNumber\":72376}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":72376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///f0ccb277-321c-49cf-bd5e-0d6cc8122b34\",\"moduleSequenceNumber\":73079}],\"dependents\":[],\"ramUsage\":2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":73079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"iron-gym\",\"moduleSequenceNumber\":196603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///7b1495c8-8bd5-4ca5-9d1e-3423962669b3\",\"moduleSequenceNumber\":263728}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"iron-gym\",\"moduleSequenceNumber\":263728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":15000000,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"79.9.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":31.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252136355],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.81000000000043,\"pid\":14212,\"ramUsage\":1.85,\"server\":\"millenium-fitness\",\"threads\":17,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0f6571da-c856-4478-9fe2-57e92b38d3a6\",\"moduleSequenceNumber\":197629}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0f6571da-c856-4478-9fe2-57e92b38d3a6\",\"moduleSequenceNumber\":197629}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":197629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///4f71e8da-31f0-4c82-8324-9a786e5b156d\",\"moduleSequenceNumber\":196615}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":196615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///cc47d78f-fc52-4cbd-97b2-ddcea275a634\",\"moduleSequenceNumber\":195366}],\"dependents\":[],\"ramUsage\":2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":195366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":196577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///afca8b2d-00e9-4988-88a7-d9873ea06189\",\"moduleSequenceNumber\":276914}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":276914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":33,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":513,\"serverGrowth\":32}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"59.9.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":31.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252127452],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.61000000000055,\"pid\":14206,\"ramUsage\":1.85,\"server\":\"powerhouse-fitness\",\"threads\":17,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///01b3f73d-844d-43ff-80ed-88167980e783\",\"moduleSequenceNumber\":258393}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///01b3f73d-844d-43ff-80ed-88167980e783\",\"moduleSequenceNumber\":258393}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":258393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///000ac44f-893e-4d0b-8904-4533522ee54f\",\"moduleSequenceNumber\":257281}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":257281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///0c071f3c-21f5-4f67-be9b-2fcb9184d23f\",\"moduleSequenceNumber\":258021}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":258021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118,\"hackDifficulty\":118,\"minDifficulty\":39,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1094,\"serverGrowth\":56}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-31907-CyberSec.cct\",\"type\":\"HammingCodes: Integer to encoded Binary\",\"data\":26,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"47.8.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":257972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":104,\"hackDifficulty\":104,\"minDifficulty\":35,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":735,\"serverGrowth\":40}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"77.8.7.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":510.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252106190],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":98.01000000000086,\"pid\":14173,\"ramUsage\":1.85,\"server\":\"run4theh111z\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0190cb40-46bd-4c09-8fc7-9d4e7c0e978d\",\"moduleSequenceNumber\":259123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252153410],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.81000000000019,\"pid\":14231,\"ramUsage\":1.85,\"server\":\"run4theh111z\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0190cb40-46bd-4c09-8fc7-9d4e7c0e978d\",\"moduleSequenceNumber\":259123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252178953],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999944,\"pid\":14250,\"ramUsage\":1.85,\"server\":\"run4theh111z\",\"threads\":60,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0190cb40-46bd-4c09-8fc7-9d4e7c0e978d\",\"moduleSequenceNumber\":259123}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0190cb40-46bd-4c09-8fc7-9d4e7c0e978d\",\"moduleSequenceNumber\":259123}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":259123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///4f686f80-5ece-443d-ae1a-4e2a409ffb25\",\"moduleSequenceNumber\":257267}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":257267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5c2350df-796e-457e-b880-17fd0a56350e\",\"moduleSequenceNumber\":258400}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":258400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":520,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"69.8.5.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252197530],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"pid\":14274,\"ramUsage\":1.8,\"server\":\"I.I.I.I\",\"threads\":35,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f9739e07-2b2c-4840-b465-a3d3d85e9eca\",\"moduleSequenceNumber\":275100}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b9fc768b-cbd1-401b-ad12-6e204a837a34\",\"moduleSequenceNumber\":197626}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":197626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///b33445ba-5c31-4252-8c54-e5add3347044\",\"moduleSequenceNumber\":196612}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":196612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6de8996f-e7ab-42ae-af73-6886ce235527\",\"moduleSequenceNumber\":195358}],\"dependents\":[],\"ramUsage\":2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":195358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":196591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f9739e07-2b2c-4840-b465-a3d3d85e9eca\",\"moduleSequenceNumber\":275100}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":275100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":340,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"25.3.2.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":127.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252157806],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.21000000000012,\"pid\":14236,\"ramUsage\":1.85,\"server\":\"avmnite-02h\",\"threads\":69,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///47e8a899-0d18-4404-9a02-d02ef69d0a4a\",\"moduleSequenceNumber\":17178}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///47e8a899-0d18-4404-9a02-d02ef69d0a4a\",\"moduleSequenceNumber\":17178}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":17178,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///16a17db6-9f44-4720-b858-9832c3b33ba3\",\"moduleSequenceNumber\":192267}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":192267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\nconst reserveScripts = [cnctScript, bkdrScript, \\\"/phase2/restart.js\\\"];\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1000 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(...reserveScripts.map((script) => ns.getScriptRam(script)))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///9c672a37-1566-4d82-ad48-a632991b902e\",\"moduleSequenceNumber\":17177}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":17177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///50fafaad-6890-4aec-89e9-901302b952bb\",\"moduleSequenceNumber\":73088}],\"dependents\":[],\"ramUsage\":2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":73088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":196573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///eb1c48b8-8e0c-469f-8622-1cd242091094\",\"moduleSequenceNumber\":259486}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":259486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":212,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"37.7.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":14.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252110035],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.0100000000008,\"pid\":14182,\"ramUsage\":1.85,\"server\":\".\",\"threads\":8,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///c22a9524-9ed9-44ff-b84b-c18ef65af11d\",\"moduleSequenceNumber\":258395}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///c22a9524-9ed9-44ff-b84b-c18ef65af11d\",\"moduleSequenceNumber\":258395}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\".\",\"moduleSequenceNumber\":258395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8ff3d182-c3a8-4f76-b338-360b2412cca9\",\"moduleSequenceNumber\":257283}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\".\",\"moduleSequenceNumber\":257283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///bb496b71-5591-4905-bd48-03c7710b5487\",\"moduleSequenceNumber\":258023}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\".\",\"moduleSequenceNumber\":258023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":517,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"3.1.2.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252116307],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.81000000000071,\"pid\":14189,\"ramUsage\":1.85,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///045dd89a-5b76-4cd5-a6d8-d3015a6ba1e3\",\"moduleSequenceNumber\":17187}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///045dd89a-5b76-4cd5-a6d8-d3015a6ba1e3\",\"moduleSequenceNumber\":17187}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"CSEC\",\"moduleSequenceNumber\":17187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///dd3af264-b15b-4fca-900d-849b94433e97\",\"moduleSequenceNumber\":72377}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"CSEC\",\"moduleSequenceNumber\":72377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0];\\n    while (true) {\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ca4cabaf-5b43-44c5-a40a-aed2d4f64582\",\"moduleSequenceNumber\":73091}],\"dependents\":[],\"ramUsage\":2,\"server\":\"CSEC\",\"moduleSequenceNumber\":73091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"CSEC\",\"moduleSequenceNumber\":196583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///c594f933-0b49-4a29-8ff8-fe53db15d421\",\"moduleSequenceNumber\":263730}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"CSEC\",\"moduleSequenceNumber\":263730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":60,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"81.4.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"The-Cave\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"The-Cave\",\"moduleSequenceNumber\":440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"The-Cave\",\"moduleSequenceNumber\":257948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"22.8.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":9000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"78.7.6.3\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"darkweb\",\"moduleSequenceNumber\":257252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"darkweb\",\"moduleSequenceNumber\":257253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"darkweb\",\"moduleSequenceNumber\":258006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1651245042057\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1651245042057\",\"httpPortOpen\":false,\"ip\":\"48.8.5.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"phantasy\",108,null,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1624151.347200047,\"onlineMoneyMade\":0,\"onlineRunningTime\":7039.609999995793,\"pid\":9042,\"ramUsage\":5.85,\"server\":\"pserver-1651245042057\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"phantasy\",108,null,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":302919.78239999764,\"onlineMoneyMade\":0,\"onlineRunningTime\":7039.609999995793,\"pid\":9043,\"ramUsage\":5.85,\"server\":\"pserver-1651245042057\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///40056ca2-f947-4788-a0f6-db3d46fcc2e8\",\"moduleSequenceNumber\":257861}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"phantasy\",1341,null,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":288089.39519999805,\"onlineMoneyMade\":0,\"onlineRunningTime\":7039.409999995793,\"pid\":9046,\"ramUsage\":5.85,\"server\":\"pserver-1651245042057\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///40056ca2-f947-4788-a0f6-db3d46fcc2e8\",\"moduleSequenceNumber\":257861}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252090057],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":114.01000000000109,\"pid\":14155,\"ramUsage\":1.85,\"server\":\"pserver-1651245042057\",\"threads\":4,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0c60d959-0d2e-4f04-9061-16e90a687858\",\"moduleSequenceNumber\":257862}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252107387],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.81000000000084,\"pid\":14176,\"ramUsage\":1.85,\"server\":\"pserver-1651245042057\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0c60d959-0d2e-4f04-9061-16e90a687858\",\"moduleSequenceNumber\":257862}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252117176],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.0100000000007,\"pid\":14191,\"ramUsage\":1.85,\"server\":\"pserver-1651245042057\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0c60d959-0d2e-4f04-9061-16e90a687858\",\"moduleSequenceNumber\":257862}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252128000],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.21000000000055,\"pid\":14207,\"ramUsage\":1.85,\"server\":\"pserver-1651245042057\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0c60d959-0d2e-4f04-9061-16e90a687858\",\"moduleSequenceNumber\":257862}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252184454],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999964,\"pid\":14257,\"ramUsage\":1.85,\"server\":\"pserver-1651245042057\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0c60d959-0d2e-4f04-9061-16e90a687858\",\"moduleSequenceNumber\":257862}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252194715],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":14270,\"ramUsage\":1.85,\"server\":\"pserver-1651245042057\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0c60d959-0d2e-4f04-9061-16e90a687858\",\"moduleSequenceNumber\":257862}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0c60d959-0d2e-4f04-9061-16e90a687858\",\"moduleSequenceNumber\":257862}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651245042057\",\"moduleSequenceNumber\":257862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///90eb2ca7-26e7-4925-a446-7a3a321a37ab\",\"moduleSequenceNumber\":257264}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651245042057\",\"moduleSequenceNumber\":257264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\nconst reserveScripts = [cnctScript, bkdrScript, \\\"/phase2/restart.js\\\"];\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1000 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(...reserveScripts.map((script) => ns.getScriptRam(script)))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///40056ca2-f947-4788-a0f6-db3d46fcc2e8\",\"moduleSequenceNumber\":257861}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1651245042057\",\"moduleSequenceNumber\":257861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///4e935c50-d4c2-4476-8112-19d10c7460ae\",\"moduleSequenceNumber\":258399}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1651245042057\",\"moduleSequenceNumber\":258399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1651245042924\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1651245042924\",\"httpPortOpen\":false,\"ip\":\"97.4.1.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252095497],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":108.61000000000101,\"pid\":14162,\"ramUsage\":1.85,\"server\":\"pserver-1651245042924\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///28aaf854-add6-4898-9fb3-c2a4e4bbc4a1\",\"moduleSequenceNumber\":257265}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252120213],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":83.81000000000066,\"pid\":14200,\"ramUsage\":1.85,\"server\":\"pserver-1651245042924\",\"threads\":100,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///28aaf854-add6-4898-9fb3-c2a4e4bbc4a1\",\"moduleSequenceNumber\":257265}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252124194],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80.0100000000006,\"pid\":14203,\"ramUsage\":1.85,\"server\":\"pserver-1651245042924\",\"threads\":21,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///28aaf854-add6-4898-9fb3-c2a4e4bbc4a1\",\"moduleSequenceNumber\":257265}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252125595],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.61000000000058,\"pid\":14205,\"ramUsage\":1.85,\"server\":\"pserver-1651245042924\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///28aaf854-add6-4898-9fb3-c2a4e4bbc4a1\",\"moduleSequenceNumber\":257265}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252136042],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.01000000000043,\"pid\":14210,\"ramUsage\":1.85,\"server\":\"pserver-1651245042924\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///28aaf854-add6-4898-9fb3-c2a4e4bbc4a1\",\"moduleSequenceNumber\":257265}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252198667],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":14275,\"ramUsage\":1.85,\"server\":\"pserver-1651245042924\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///28aaf854-add6-4898-9fb3-c2a4e4bbc4a1\",\"moduleSequenceNumber\":257265}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///28aaf854-add6-4898-9fb3-c2a4e4bbc4a1\",\"moduleSequenceNumber\":257265}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651245042924\",\"moduleSequenceNumber\":257265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7f11f67a-41c3-4a50-8f74-37b4eb9dc558\",\"moduleSequenceNumber\":257266}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651245042924\",\"moduleSequenceNumber\":257266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///4661277c-6f47-479f-b237-026fbcc545b6\",\"moduleSequenceNumber\":258398}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1651245042924\",\"moduleSequenceNumber\":258398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1651248145833\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1651248145833\",\"httpPortOpen\":false,\"ip\":\"99.6.5.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252096848],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.21000000000099,\"pid\":14166,\"ramUsage\":1.85,\"server\":\"pserver-1651248145833\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///bb3ee4e1-ff8a-4e09-8300-108a9a72f4c3\",\"moduleSequenceNumber\":278003}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252117164],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.0100000000007,\"pid\":14190,\"ramUsage\":1.85,\"server\":\"pserver-1651248145833\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///bb3ee4e1-ff8a-4e09-8300-108a9a72f4c3\",\"moduleSequenceNumber\":278003}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252119653],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.41000000000066,\"pid\":14197,\"ramUsage\":1.85,\"server\":\"pserver-1651248145833\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///bb3ee4e1-ff8a-4e09-8300-108a9a72f4c3\",\"moduleSequenceNumber\":278003}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252148914],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000025,\"pid\":14227,\"ramUsage\":1.85,\"server\":\"pserver-1651248145833\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///bb3ee4e1-ff8a-4e09-8300-108a9a72f4c3\",\"moduleSequenceNumber\":278003}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252156361],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.810000000000144,\"pid\":14234,\"ramUsage\":1.85,\"server\":\"pserver-1651248145833\",\"threads\":13,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///bb3ee4e1-ff8a-4e09-8300-108a9a72f4c3\",\"moduleSequenceNumber\":278003}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252182974],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999958,\"pid\":14256,\"ramUsage\":1.85,\"server\":\"pserver-1651248145833\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d7b83a24-b188-4808-8ef3-277b21d313cd\",\"moduleSequenceNumber\":280200}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///bb3ee4e1-ff8a-4e09-8300-108a9a72f4c3\",\"moduleSequenceNumber\":278003}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651248145833\",\"moduleSequenceNumber\":278003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///9ce5c7b0-1ea5-49d7-9cd1-a9d7ccbf62f6\",\"moduleSequenceNumber\":278006}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1651248145833\",\"moduleSequenceNumber\":278006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d7b83a24-b188-4808-8ef3-277b21d313cd\",\"moduleSequenceNumber\":280200}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651248145833\",\"moduleSequenceNumber\":280200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1651249521417\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1651249521417\",\"httpPortOpen\":false,\"ip\":\"70.4.0.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252096794],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.41000000000099,\"pid\":14165,\"ramUsage\":1.85,\"server\":\"pserver-1651249521417\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e20e3739-dd0c-4070-a35d-435b18f5decf\",\"moduleSequenceNumber\":286409}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252191559],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.609999999999989,\"pid\":14265,\"ramUsage\":1.8,\"server\":\"pserver-1651249521417\",\"threads\":111,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///72196bd4-ffed-4990-bed8-c6a1d8ed5101\",\"moduleSequenceNumber\":286412}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252193996],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.209999999999997,\"pid\":14268,\"ramUsage\":1.85,\"server\":\"pserver-1651249521417\",\"threads\":13,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dc5a435-a87f-42e6-bbc7-ccc10de577a2\",\"moduleSequenceNumber\":287519}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252197301],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"pid\":14272,\"ramUsage\":1.85,\"server\":\"pserver-1651249521417\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e20e3739-dd0c-4070-a35d-435b18f5decf\",\"moduleSequenceNumber\":286409}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252197426],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"pid\":14273,\"ramUsage\":1.85,\"server\":\"pserver-1651249521417\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e20e3739-dd0c-4070-a35d-435b18f5decf\",\"moduleSequenceNumber\":286409}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252199809],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":14277,\"ramUsage\":1.85,\"server\":\"pserver-1651249521417\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dc5a435-a87f-42e6-bbc7-ccc10de577a2\",\"moduleSequenceNumber\":287519}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e20e3739-dd0c-4070-a35d-435b18f5decf\",\"moduleSequenceNumber\":286409}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651249521417\",\"moduleSequenceNumber\":286409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///72196bd4-ffed-4990-bed8-c6a1d8ed5101\",\"moduleSequenceNumber\":286412}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1651249521417\",\"moduleSequenceNumber\":286412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dc5a435-a87f-42e6-bbc7-ccc10de577a2\",\"moduleSequenceNumber\":287519}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651249521417\",\"moduleSequenceNumber\":287519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1651249941664\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1651249941664\",\"httpPortOpen\":false,\"ip\":\"63.1.5.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252100766],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":103.41000000000093,\"pid\":14168,\"ramUsage\":1.85,\"server\":\"pserver-1651249941664\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8236e524-3138-4168-bc61-4748c15d5239\",\"moduleSequenceNumber\":288994}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252107775],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.41000000000084,\"pid\":14177,\"ramUsage\":1.85,\"server\":\"pserver-1651249941664\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///88aa8ab3-4088-4c44-8779-f3000d619c19\",\"moduleSequenceNumber\":290484}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252139480],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.61000000000038,\"pid\":14219,\"ramUsage\":1.85,\"server\":\"pserver-1651249941664\",\"threads\":13,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8236e524-3138-4168-bc61-4748c15d5239\",\"moduleSequenceNumber\":288994}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252155403],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.81000000000016,\"pid\":14233,\"ramUsage\":1.85,\"server\":\"pserver-1651249941664\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8236e524-3138-4168-bc61-4748c15d5239\",\"moduleSequenceNumber\":288994}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252180041],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"pid\":14252,\"ramUsage\":1.85,\"server\":\"pserver-1651249941664\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8236e524-3138-4168-bc61-4748c15d5239\",\"moduleSequenceNumber\":288994}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252184644],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"pid\":14259,\"ramUsage\":1.8,\"server\":\"pserver-1651249941664\",\"threads\":111,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f56ddd06-3326-47e7-92aa-c5d9ec962ccc\",\"moduleSequenceNumber\":288997}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8236e524-3138-4168-bc61-4748c15d5239\",\"moduleSequenceNumber\":288994}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651249941664\",\"moduleSequenceNumber\":288994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f56ddd06-3326-47e7-92aa-c5d9ec962ccc\",\"moduleSequenceNumber\":288997}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1651249941664\",\"moduleSequenceNumber\":288997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///88aa8ab3-4088-4c44-8779-f3000d619c19\",\"moduleSequenceNumber\":290484}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651249941664\",\"moduleSequenceNumber\":290484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1651250449430\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1651250449430\",\"httpPortOpen\":false,\"ip\":\"73.0.3.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252101452],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":102.61000000000092,\"pid\":14169,\"ramUsage\":1.85,\"server\":\"pserver-1651250449430\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///22154491-bfcb-4c58-93ea-c45c62242b8f\",\"moduleSequenceNumber\":292343}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252103518],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":100.6100000000009,\"pid\":14170,\"ramUsage\":1.85,\"server\":\"pserver-1651250449430\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///22154491-bfcb-4c58-93ea-c45c62242b8f\",\"moduleSequenceNumber\":292343}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252106929],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.21000000000085,\"pid\":14174,\"ramUsage\":1.85,\"server\":\"pserver-1651250449430\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///22154491-bfcb-4c58-93ea-c45c62242b8f\",\"moduleSequenceNumber\":292343}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252108053],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.01000000000083,\"pid\":14180,\"ramUsage\":1.85,\"server\":\"pserver-1651250449430\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///22154491-bfcb-4c58-93ea-c45c62242b8f\",\"moduleSequenceNumber\":292343}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252165864],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":14240,\"ramUsage\":1.85,\"server\":\"pserver-1651250449430\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///22154491-bfcb-4c58-93ea-c45c62242b8f\",\"moduleSequenceNumber\":292343}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252179847],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999948,\"pid\":14251,\"ramUsage\":1.85,\"server\":\"pserver-1651250449430\",\"threads\":13,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///22154491-bfcb-4c58-93ea-c45c62242b8f\",\"moduleSequenceNumber\":292343}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///22154491-bfcb-4c58-93ea-c45c62242b8f\",\"moduleSequenceNumber\":292343}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651250449430\",\"moduleSequenceNumber\":292343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///866c6679-f79a-4250-b0f3-e9b9b6b30607\",\"moduleSequenceNumber\":292346}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1651250449430\",\"moduleSequenceNumber\":292346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///124825a1-4b1f-4ecf-887a-eeb9cfcb754b\",\"moduleSequenceNumber\":292349}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651250449430\",\"moduleSequenceNumber\":292349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1651250818827\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1651250818827\",\"httpPortOpen\":false,\"ip\":\"79.1.0.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252104683],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":99.41000000000088,\"pid\":14172,\"ramUsage\":1.85,\"server\":\"pserver-1651250818827\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9aba141e-7617-497c-b47c-036ace02c0a4\",\"moduleSequenceNumber\":294596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252107996],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.01000000000083,\"pid\":14178,\"ramUsage\":1.85,\"server\":\"pserver-1651250818827\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9aba141e-7617-497c-b47c-036ace02c0a4\",\"moduleSequenceNumber\":294596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252113179],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.01000000000076,\"pid\":14185,\"ramUsage\":1.85,\"server\":\"pserver-1651250818827\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9aba141e-7617-497c-b47c-036ace02c0a4\",\"moduleSequenceNumber\":294596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252120206],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":83.81000000000066,\"pid\":14199,\"ramUsage\":1.85,\"server\":\"pserver-1651250818827\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9aba141e-7617-497c-b47c-036ace02c0a4\",\"moduleSequenceNumber\":294596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252166064],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.010000000000005,\"pid\":14241,\"ramUsage\":1.85,\"server\":\"pserver-1651250818827\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9aba141e-7617-497c-b47c-036ace02c0a4\",\"moduleSequenceNumber\":294596}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252181088],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999952,\"pid\":14253,\"ramUsage\":1.85,\"server\":\"pserver-1651250818827\",\"threads\":13,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9aba141e-7617-497c-b47c-036ace02c0a4\",\"moduleSequenceNumber\":294596}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9aba141e-7617-497c-b47c-036ace02c0a4\",\"moduleSequenceNumber\":294596}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651250818827\",\"moduleSequenceNumber\":294596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///cedf5268-bbc8-43b5-aafc-1e6eb788fd62\",\"moduleSequenceNumber\":294599}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1651250818827\",\"moduleSequenceNumber\":294599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ca686706-f51b-46d6-8f18-ed618f7bc876\",\"moduleSequenceNumber\":295356}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651250818827\",\"moduleSequenceNumber\":295356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1651251296520\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1651251296520\",\"httpPortOpen\":false,\"ip\":\"41.0.1.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252093295],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.81000000000104,\"pid\":14160,\"ramUsage\":1.85,\"server\":\"pserver-1651251296520\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///fe1ec36b-9662-4b64-bc2b-1b7a8b4b03d2\",\"moduleSequenceNumber\":297621}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252147531],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.61000000000027,\"pid\":14225,\"ramUsage\":1.85,\"server\":\"pserver-1651251296520\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///fe1ec36b-9662-4b64-bc2b-1b7a8b4b03d2\",\"moduleSequenceNumber\":297621}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252149247],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.810000000000244,\"pid\":14228,\"ramUsage\":1.85,\"server\":\"pserver-1651251296520\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///fe1ec36b-9662-4b64-bc2b-1b7a8b4b03d2\",\"moduleSequenceNumber\":297621}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252151608],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.41000000000021,\"pid\":14229,\"ramUsage\":1.85,\"server\":\"pserver-1651251296520\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///fe1ec36b-9662-4b64-bc2b-1b7a8b4b03d2\",\"moduleSequenceNumber\":297621}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252185841],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"pid\":14261,\"ramUsage\":1.85,\"server\":\"pserver-1651251296520\",\"threads\":13,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///fe1ec36b-9662-4b64-bc2b-1b7a8b4b03d2\",\"moduleSequenceNumber\":297621}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252189030],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.20999999999998,\"pid\":14262,\"ramUsage\":1.85,\"server\":\"pserver-1651251296520\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///fe1ec36b-9662-4b64-bc2b-1b7a8b4b03d2\",\"moduleSequenceNumber\":297621}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///fe1ec36b-9662-4b64-bc2b-1b7a8b4b03d2\",\"moduleSequenceNumber\":297621}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651251296520\",\"moduleSequenceNumber\":297621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///cc250a6b-028c-4e02-bf18-49fca34a5854\",\"moduleSequenceNumber\":297624}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1651251296520\",\"moduleSequenceNumber\":297624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///e67ebfbb-4678-4546-a452-13684fd71593\",\"moduleSequenceNumber\":299527}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651251296520\",\"moduleSequenceNumber\":299527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1651251669740\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1651251669740\",\"httpPortOpen\":false,\"ip\":\"58.5.4.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252115446],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.61000000000072,\"pid\":14188,\"ramUsage\":1.85,\"server\":\"pserver-1651251669740\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///1559678f-77e3-43be-8de1-e7680cc39eb1\",\"moduleSequenceNumber\":299910}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252148410],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.610000000000255,\"pid\":14226,\"ramUsage\":1.85,\"server\":\"pserver-1651251669740\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///6808c61d-68e6-4801-97e7-bf08842bc432\",\"moduleSequenceNumber\":301065}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252154761],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":49.41000000000017,\"pid\":14232,\"ramUsage\":1.85,\"server\":\"pserver-1651251669740\",\"threads\":13,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///1559678f-77e3-43be-8de1-e7680cc39eb1\",\"moduleSequenceNumber\":299910}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252170953],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.20999999999994,\"pid\":14244,\"ramUsage\":1.85,\"server\":\"pserver-1651251669740\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///1559678f-77e3-43be-8de1-e7680cc39eb1\",\"moduleSequenceNumber\":299910}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252178465],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.609999999999943,\"pid\":14249,\"ramUsage\":1.85,\"server\":\"pserver-1651251669740\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///1559678f-77e3-43be-8de1-e7680cc39eb1\",\"moduleSequenceNumber\":299910}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252202719],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":14278,\"ramUsage\":1.8,\"server\":\"pserver-1651251669740\",\"threads\":111,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///829767bd-3a83-4afd-ba62-a867be389aff\",\"moduleSequenceNumber\":299913}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///1559678f-77e3-43be-8de1-e7680cc39eb1\",\"moduleSequenceNumber\":299910}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651251669740\",\"moduleSequenceNumber\":299910,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///829767bd-3a83-4afd-ba62-a867be389aff\",\"moduleSequenceNumber\":299913}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1651251669740\",\"moduleSequenceNumber\":299913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///6808c61d-68e6-4801-97e7-bf08842bc432\",\"moduleSequenceNumber\":301065}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651251669740\",\"moduleSequenceNumber\":301065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1651252026049\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1651252026049\",\"httpPortOpen\":false,\"ip\":\"12.8.7.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252086766],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000113,\"pid\":14147,\"ramUsage\":1.85,\"server\":\"pserver-1651252026049\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///cf3fa7de-160e-42b3-bd96-0128190bb06c\",\"moduleSequenceNumber\":302217}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252086774],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.41000000000113,\"pid\":14148,\"ramUsage\":1.85,\"server\":\"pserver-1651252026049\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///cf3fa7de-160e-42b3-bd96-0128190bb06c\",\"moduleSequenceNumber\":302217}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252117229],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.0100000000007,\"pid\":14192,\"ramUsage\":1.85,\"server\":\"pserver-1651252026049\",\"threads\":108,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///cf3fa7de-160e-42b3-bd96-0128190bb06c\",\"moduleSequenceNumber\":302217}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252144491],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.61000000000031,\"pid\":14222,\"ramUsage\":1.85,\"server\":\"pserver-1651252026049\",\"threads\":216,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1651252146837],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.21000000000028,\"pid\":14224,\"ramUsage\":1.85,\"server\":\"pserver-1651252026049\",\"threads\":13,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///cf3fa7de-160e-42b3-bd96-0128190bb06c\",\"moduleSequenceNumber\":302217}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///cf3fa7de-160e-42b3-bd96-0128190bb06c\",\"moduleSequenceNumber\":302217}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651252026049\",\"moduleSequenceNumber\":302217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///045d8681-dbb0-4ae5-9aac-38fbb27880a5\",\"moduleSequenceNumber\":302220}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1651252026049\",\"moduleSequenceNumber\":302220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///4aae5be5-b046-48c1-a30f-7ba27135ea4f\",\"moduleSequenceNumber\":302995}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1651252026049\",\"moduleSequenceNumber\":302995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":11291.181986461566,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":362.5066666666973}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":373.13066666669897}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":313.3973333333563}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":1259.9413333333334}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":381.66400000003364}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":27057.362968804187}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{\"darkweb\":\"home;connect darkweb\",\"liquidate\":\"run stocks/liquidate.js\",\"scn\":\"cls;scan-analyze 10\",\"bkdr\":\"run bkdr.js\",\"hm\":\"home\",\"scn3\":\"cls; scan-analyze 3\",\"flight\":\"run fl1ght.exe\",\"scn5\":\"cls; scan-analyze 5\"}","GlobalAliasesSave":"{\"cnct\":\"run cnct.js\",\"restart\":\"cls; killall ; run restart.js\"}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":28973.995853809945,\"lastPrice\":28871.007337345527,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.46,\"b\":false,\"otlkMag\":19.33374639758151,\"otlkMagForecast\":31.355022158917453,\"cap\":282012084,\"spreadPerc\":0.2,\"shareTxForMovement\":54030,\"shareTxUntilMovement\":54030,\"totalShares\":93200000,\"maxShares\":18600000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":35896.51629138206,\"lastPrice\":36027.34986209208,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":false,\"otlkMag\":20.96464019148954,\"otlkMagForecast\":29.845982539032285,\"cap\":351406899,\"spreadPerc\":0.1,\"shareTxForMovement\":41035,\"shareTxUntilMovement\":41035,\"totalShares\":82600000,\"maxShares\":16500000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":30063.53842431207,\"lastPrice\":30243.05305649443,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":13.305949390944988,\"otlkMagForecast\":37.99664993423032,\"cap\":65024229,\"spreadPerc\":0.2,\"shareTxForMovement\":57027,\"shareTxUntilMovement\":57027,\"totalShares\":117700000,\"maxShares\":23500000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":31832.46390043403,\"lastPrice\":31995.387210236644,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":14.591652500192312,\"otlkMagForecast\":63.157684350072174,\"cap\":453512211,\"spreadPerc\":0.3,\"shareTxForMovement\":44480,\"shareTxUntilMovement\":44480,\"totalShares\":74300000,\"maxShares\":14900000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":59064.964677099364,\"lastPrice\":59381.00905768021,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":12.779042264686733,\"otlkMagForecast\":38.15460800363549,\"cap\":559748061,\"spreadPerc\":0.5,\"shareTxForMovement\":64606,\"shareTxUntilMovement\":64606,\"totalShares\":41900000,\"maxShares\":8400000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":74960.10631865231,\"lastPrice\":74337.51817392283,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":true,\"otlkMag\":14.404714173913348,\"otlkMagForecast\":65.68638596480922,\"cap\":810373605,\"spreadPerc\":0.1,\"shareTxForMovement\":62801,\"shareTxUntilMovement\":62801,\"totalShares\":37100000,\"maxShares\":7400000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":16037.884728265555,\"lastPrice\":15934.089931350647,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":false,\"otlkMag\":9.809309270201515,\"otlkMagForecast\":40.631676760528954,\"cap\":411691469,\"spreadPerc\":0.7,\"shareTxForMovement\":41851,\"shareTxUntilMovement\":41851,\"totalShares\":94300000,\"maxShares\":18900000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":28203.57027612724,\"lastPrice\":27926.37010598972,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.28,\"b\":true,\"otlkMag\":20.282293377251694,\"otlkMagForecast\":69.23613516358898,\"cap\":85019104,\"spreadPerc\":0.9,\"shareTxForMovement\":72892,\"shareTxUntilMovement\":72892,\"totalShares\":67200000,\"maxShares\":13400000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":44494.5452789898,\"lastPrice\":44220.21115480212,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":7.48358099109461,\"otlkMagForecast\":56.225043913402686,\"cap\":420531883,\"spreadPerc\":0.5,\"shareTxForMovement\":59957,\"shareTxUntilMovement\":59957,\"totalShares\":50200000,\"maxShares\":10000000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":28182.859754750138,\"lastPrice\":28318.3617787831,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":11.792427770047887,\"otlkMagForecast\":59.95000033892332,\"cap\":47286373,\"spreadPerc\":0.7,\"shareTxForMovement\":84955,\"shareTxUntilMovement\":84955,\"totalShares\":48300000,\"maxShares\":9700000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":17317.478204124945,\"lastPrice\":17230.625482319534,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":8.29434956586243,\"otlkMagForecast\":59.60890304760168,\"cap\":65768774,\"spreadPerc\":0.8,\"shareTxForMovement\":45510,\"shareTxUntilMovement\":45510,\"totalShares\":52500000,\"maxShares\":10500000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":12809.198048990851,\"lastPrice\":12884.690680860342,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":7.073183478221791,\"otlkMagForecast\":42.407812535713404,\"cap\":314875591,\"spreadPerc\":0.9,\"shareTxForMovement\":79851,\"shareTxUntilMovement\":79851,\"totalShares\":78700000,\"maxShares\":15700000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":16714.22974642073,\"lastPrice\":16798.479522950733,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":7.430553504890452,\"otlkMagForecast\":42.0275395289648,\"cap\":250693890,\"spreadPerc\":0.3,\"shareTxForMovement\":74764,\"shareTxUntilMovement\":74764,\"totalShares\":55500000,\"maxShares\":11100000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":18127.0404841271,\"lastPrice\":18048.661063328665,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":9.911958069730158,\"otlkMagForecast\":40.26690807474132,\"cap\":383787287,\"spreadPerc\":0.9,\"shareTxForMovement\":66634,\"shareTxUntilMovement\":66634,\"totalShares\":33300000,\"maxShares\":6700000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":19225.57773971859,\"lastPrice\":19319.50442202347,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":5.207551449440149,\"otlkMagForecast\":55.98082033312098,\"cap\":221627180,\"spreadPerc\":0.5,\"shareTxForMovement\":78742,\"shareTxUntilMovement\":78742,\"totalShares\":37800000,\"maxShares\":7600000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":8661.669104706096,\"lastPrice\":8706.672514958975,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":5.413300620816462,\"otlkMagForecast\":54.378990612664325,\"cap\":35255723,\"spreadPerc\":1,\"shareTxForMovement\":60853,\"shareTxUntilMovement\":60853,\"totalShares\":81000000,\"maxShares\":16200000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":24666.492238059374,\"lastPrice\":24520.078571652328,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":7.685606980305148,\"otlkMagForecast\":58.003788844636304,\"cap\":410906872,\"spreadPerc\":0.7,\"shareTxForMovement\":71649,\"shareTxUntilMovement\":71649,\"totalShares\":29700000,\"maxShares\":5900000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":11258.02824813477,\"lastPrice\":11310.41031346549,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":9.646013800687893,\"otlkMagForecast\":60.61485623584317,\"cap\":32061940,\"spreadPerc\":0.4,\"shareTxForMovement\":98587,\"shareTxUntilMovement\":98587,\"totalShares\":41800000,\"maxShares\":8400000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":14931.289702567157,\"lastPrice\":14842.661581128572,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":4.629766767912615,\"otlkMagForecast\":55.9201919142203,\"cap\":262152968,\"spreadPerc\":0.6,\"shareTxForMovement\":100168,\"shareTxUntilMovement\":100168,\"totalShares\":38700000,\"maxShares\":7700000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":7758.712613253424,\"lastPrice\":7905.520208710063,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.44,\"b\":false,\"otlkMag\":5.700688525965152,\"otlkMagForecast\":45.4358525984236,\"cap\":55325592,\"spreadPerc\":0.7,\"shareTxForMovement\":16459,\"shareTxUntilMovement\":16459,\"totalShares\":67200000,\"maxShares\":13400000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":4407.691850618394,\"lastPrice\":4362.026052013328,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.35,\"b\":true,\"otlkMag\":7.709876136335756,\"otlkMagForecast\":55.61104961095425,\"cap\":79560020,\"spreadPerc\":1.1,\"shareTxForMovement\":89938,\"shareTxUntilMovement\":89938,\"totalShares\":42300000,\"maxShares\":8500000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":6584.498683659111,\"lastPrice\":6552.486469345169,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":1.5394391890097148,\"otlkMagForecast\":49.451132633493145,\"cap\":63898581,\"spreadPerc\":1,\"shareTxForMovement\":105936,\"shareTxUntilMovement\":105936,\"totalShares\":35300000,\"maxShares\":7100000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":37379.190924608425,\"lastPrice\":37973.41848598754,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.05,\"b\":true,\"otlkMag\":9.995171677660984,\"otlkMagForecast\":63.45326583388937,\"cap\":98654775,\"spreadPerc\":1.6,\"shareTxForMovement\":75749,\"shareTxUntilMovement\":75749,\"totalShares\":28400000,\"maxShares\":5700000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":10850.02935636686,\"lastPrice\":10709.67304361776,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.69,\"b\":false,\"otlkMag\":5.587473795051428,\"otlkMagForecast\":46.4131626186946,\"cap\":44251242,\"spreadPerc\":0.5,\"shareTxForMovement\":22898,\"shareTxUntilMovement\":22898,\"totalShares\":29300000,\"maxShares\":5900000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":5103.670415530389,\"lastPrice\":5068.297274722537,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.9,\"b\":true,\"otlkMag\":5.343806660309233,\"otlkMagForecast\":55.0598994588395,\"cap\":53047607,\"spreadPerc\":1.1,\"shareTxForMovement\":85963,\"shareTxUntilMovement\":85963,\"totalShares\":37800000,\"maxShares\":7600000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":1739.3702726102435,\"lastPrice\":1772.1471329312844,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.43,\"b\":false,\"otlkMag\":6.164370821444905,\"otlkMagForecast\":48.79019271155106,\"cap\":27036597,\"spreadPerc\":0.7,\"shareTxForMovement\":18475,\"shareTxUntilMovement\":18475,\"totalShares\":18800000,\"maxShares\":3800000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4414.807935159173,\"lastPrice\":4449.386122403405,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.01,\"b\":true,\"otlkMag\":2.117545314702983,\"otlkMagForecast\":49.50795157914516,\"cap\":87818300,\"spreadPerc\":0.8,\"shareTxForMovement\":77564,\"shareTxUntilMovement\":77564,\"totalShares\":12500000,\"maxShares\":2500000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":4903.318678296483,\"lastPrice\":4933.357731821875,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":1.7741325463790245,\"otlkMagForecast\":51.04768081301918,\"cap\":36509668,\"spreadPerc\":0.9,\"shareTxForMovement\":79943,\"shareTxUntilMovement\":79943,\"totalShares\":11600000,\"maxShares\":2300000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":3673.419902022339,\"lastPrice\":3711.306991969999,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.33,\"b\":false,\"otlkMag\":5.19698207453041,\"otlkMagForecast\":49.776182369299626,\"cap\":14893222,\"spreadPerc\":1.3,\"shareTxForMovement\":64333,\"shareTxUntilMovement\":64333,\"totalShares\":11000000,\"maxShares\":2200000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":600.7779856186957,\"lastPrice\":591.467001385623,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.03,\"b\":true,\"otlkMag\":2.760472800943075,\"otlkMagForecast\":48.68014019348969,\"cap\":9156039,\"spreadPerc\":0.7,\"shareTxForMovement\":38481,\"shareTxUntilMovement\":38481,\"totalShares\":94200000,\"maxShares\":18800000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":923.2045627220353,\"lastPrice\":913.289272613026,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.4,\"b\":true,\"otlkMag\":8.809495404732255,\"otlkMagForecast\":60.191340151755185,\"cap\":20147639,\"spreadPerc\":1.1,\"shareTxForMovement\":41673,\"shareTxUntilMovement\":41673,\"totalShares\":110400000,\"maxShares\":22100000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":26265.497051122384,\"lastPrice\":26113.618184811476,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":7.841091191364695,\"otlkMagForecast\":57.411981516944,\"cap\":131323748,\"spreadPerc\":0.6,\"shareTxForMovement\":174574,\"shareTxUntilMovement\":174574,\"totalShares\":14100000,\"maxShares\":2800000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":16174.866872665449,\"lastPrice\":16091.2615494601,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":10.39214967237227,\"otlkMagForecast\":61.6915792856752,\"cap\":27205773,\"spreadPerc\":0.6,\"shareTxForMovement\":133671,\"shareTxUntilMovement\":133671,\"totalShares\":29600000,\"maxShares\":5900000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":20,\"lastUpdate\":1651252200062,\"ticksUntilCycle\":7}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":7,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":24,\"MonacoVim\":true,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-34,\"y\":101,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"15","AllGangsSave":"","LastExportBonus":"1651252204095","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}