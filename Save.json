{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":436,\"hp\":23,\"max_hp\":23,\"strength\":139,\"defense\":139,\"dexterity\":169,\"agility\":169,\"charisma\":52,\"intelligence\":42,\"hacking_chance_mult\":1.3824,\"hacking_speed_mult\":1.3824,\"hacking_money_mult\":1.3824,\"hacking_grow_mult\":1.3824,\"hacking_exp\":10022918.994448656,\"strength_exp\":15000.809599996393,\"defense_exp\":15000.809599996393,\"dexterity_exp\":31697.129599994896,\"agility_exp\":31697.129599994896,\"charisma_exp\":1326.7583999992862,\"intelligence_exp\":1407.7882999999995,\"hacking_mult\":1.3824,\"strength_mult\":1.28,\"defense_mult\":1.28,\"dexterity_mult\":1.28,\"agility_mult\":1.28,\"charisma_mult\":1.28,\"hacking_exp_mult\":1.3824,\"strength_exp_mult\":1.28,\"defense_exp_mult\":1.28,\"dexterity_exp_mult\":1.28,\"agility_exp_mult\":1.28,\"charisma_exp_mult\":1.28,\"company_rep_mult\":1.28,\"faction_rep_mult\":1.28,\"money\":7187584024.500666,\"city\":\"Sector-12\",\"location\":\"The Slums\",\"jobs\":{\"Joe's Guns\":\"Part-time Employee\"},\"companyName\":\"Joe's Guns\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserver-1650412254811\",\"pserver-1650413089399\",\"pserver-1650413687370\",\"pserver-1650414626298\",\"pserver-1650414886313\",\"pserver-1650415090311\",\"pserver-1650415352780\",\"pserver-1650415598894\",\"pserver-1650415768717\",\"pserver-1650416024296\",\"pserver-1650416193434\",\"pserver-1650416448545\",\"pserver-1650416633694\",\"pserver-1650416872936\",\"pserver-1650417126282\",\"pserver-1650417297831\",\"pserver-1650417553825\",\"pserver-1650417723699\",\"pserver-1650417977090\",\"pserver-1650418148139\",\"pserver-1650418402545\",\"pserver-1650418573845\",\"pserver-1650418826548\",\"pserver-1650418996054\",\"pserver-1650419252736\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":81105.19999938403,\"ram\":64,\"totalMoneyGenerated\":18295587.143820897,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":71624.79999952196,\"ram\":64,\"totalMoneyGenerated\":18280444.550770637,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":71212.59999952796,\"ram\":64,\"totalMoneyGenerated\":18273568.62672387,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":70474.19999953872,\"ram\":64,\"totalMoneyGenerated\":18267617.605109323,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":69538.99999954899,\"ram\":64,\"totalMoneyGenerated\":18259216.39979306,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":68240.9999995679,\"ram\":64,\"totalMoneyGenerated\":18239175.22839709,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":65302.199999610646,\"ram\":64,\"totalMoneyGenerated\":18055856.49112896,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":61287.99999966903,\"ram\":64,\"totalMoneyGenerated\":18006446.10332915,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":53095.399999788184,\"ram\":64,\"totalMoneyGenerated\":17880843.27395131,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":37367.40000001724,\"ram\":64,\"totalMoneyGenerated\":17635604.004752837,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":36938.00000002349,\"ram\":64,\"totalMoneyGenerated\":17244325.1301744,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":36938.00000002349,\"ram\":64,\"totalMoneyGenerated\":17193886.187762596,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":36938.00000002349,\"ram\":64,\"totalMoneyGenerated\":17192063.80494922,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":36938.00000002349,\"ram\":64,\"totalMoneyGenerated\":17187971.828816094,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":36938.00000002349,\"ram\":64,\"totalMoneyGenerated\":17184729.552645,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":28390.6000000681,\"ram\":64,\"totalMoneyGenerated\":12952147.55228669,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":22970.800000048424,\"ram\":64,\"totalMoneyGenerated\":12576559.526714757,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":22970.800000048424,\"ram\":64,\"totalMoneyGenerated\":12574055.147878988,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":19388.80000003541,\"ram\":64,\"totalMoneyGenerated\":10790954.693621852,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":586.9637896110627,\"onlineTimeSeconds\":6189.799999996568,\"ram\":64,\"totalMoneyGenerated\":3583850.364854478,\"name\":\"hacknet-node-19\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"The Black Hand\",\"NiteSec\",\"Sector-12\",\"Slum Snakes\",\"Netburners\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":1,\"n\":5}],\"numPeopleKilled\":5081,\"karma\":-15895.699999999408,\"crime_money_mult\":1.28,\"crime_success_mult\":1.28,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"Sector-12\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.10368000000000001,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.3433227956611826,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":9313.926911991211,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":29500.586473609375,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":22228800,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.28,\"hacknet_node_money_mult\":1.28,\"hacknet_node_purchase_cost_mult\":0.72,\"hacknet_node_ram_cost_mult\":0.72,\"hacknet_node_core_cost_mult\":0.72,\"hacknet_node_level_cost_mult\":0.72,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"entropy\":0,\"lastUpdate\":1650449172093,\"lastSave\":1650449132705,\"totalPlaytime\":5423014400,\"playtimeSinceLastAug\":82327800,\"playtimeSinceLastBitnode\":82327800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":1612500000,\"corporation\":0,\"crime\":83596032,\"gang\":0,\"hacking\":42928037583.70559,\"hacknet\":319674903.19732535,\"hacknet_expenses\":-6078932609.875103,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-6200000000,\"total\":7187583024.500666,\"work\":142638.0799999074,\"servers\":-25190235522.51145,\"other\":-287200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":1612500000,\"corporation\":0,\"crime\":83596032,\"gang\":0,\"hacking\":42928037583.70559,\"hacknet\":319674903.19732535,\"hacknet_expenses\":-6078932609.875103,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-6200000000,\"total\":7187583024.500666,\"work\":142638.0799999074,\"servers\":-25190235522.51145,\"other\":-287200000,\"augmentations\":0}},\"scriptProdSinceLastAug\":42927355687,\"exploits\":[],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1645026146788},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1645028434786},{\"ID\":\"NS2\",\"unlockedOn\":1645044319911},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1645045831181},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1645056200950},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1645056560955},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1645066283086},{\"ID\":\"TOR\",\"unlockedOn\":1645066643085},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1645070003093},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1645097626865},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1645155279886},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1645183682014},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1645190539010},{\"ID\":\"TRAVEL\",\"unlockedOn\":1645202118069},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1645206439756},{\"ID\":\"WORKOUT\",\"unlockedOn\":1645274022801},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1645310391987},{\"ID\":\"NITESEC\",\"unlockedOn\":1645372344826},{\"ID\":\"4S\",\"unlockedOn\":1645407697058},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1645449421121},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1645451161327},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1645492247503},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1645588414067},{\"ID\":\"DONATION\",\"unlockedOn\":1645808344381},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1645842991741},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1646071287225},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1646082477122},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1646132482080},{\"ID\":\"SF1.1\",\"unlockedOn\":1646609210207},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1647371428634},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1648434173382},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1648692192627},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1648692192635},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1648695732622},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1648698912619},{\"ID\":\"CHALLENGE_BN1\",\"unlockedOn\":1649818533991},{\"ID\":\"SF5.1\",\"unlockedOn\":1650366868790}],\"terminalCommandHistory\":[\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect aerocorp;connect omnia;connect icarus;connect taiyang-digital;connect microdyne;connect fulcrumtech;connect 4sigma;connect blade;connect The-Cave;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect aerocorp;connect omnia;connect icarus;connect taiyang-digital;connect microdyne;connect fulcrumtech;connect 4sigma;connect blade;connect ecorp;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect aerocorp;connect omnia;connect icarus;connect taiyang-digital;connect microdyne;connect fulcrumtech;connect 4sigma;connect blade;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect aerocorp;connect omnia;connect icarus;connect taiyang-digital;connect microdyne;connect fulcrumtech;connect 4sigma;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect aerocorp;connect omnia;connect icarus;connect taiyang-digital;connect microdyne;connect fulcrumtech;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect aerocorp;connect omnia;connect icarus;connect taiyang-digital;connect microdyne;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect aerocorp;connect omnia;connect icarus;connect taiyang-digital;connect titan-labs;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect aerocorp;connect omnia;connect icarus;connect taiyang-digital;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect aerocorp;connect omnia;connect icarus;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect aerocorp;connect omnia;connect defcomm;connect infocomm;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect aerocorp;connect omnia;connect defcomm;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect aerocorp;connect omnia;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect aerocorp;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect galactic-cyber;connect unitalife;connect zeus-med;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect galactic-cyber;connect deltaone;connect solaris;connect zb-def;connect applied-energetics;connect stormtech;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect galactic-cyber;connect deltaone;connect solaris;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect galactic-cyber;connect deltaone;backdoor;\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect galactic-cyber;backdoor;\",\"hm\",\"cnct w0r1d_d43m0n\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect aerocorp;connect omnia;connect icarus;connect taiyang-digital;connect microdyne;connect fulcrumtech;connect 4sigma;connect blade;connect The-Cave;connect w0r1d_d43m0n;\",\"analyze\",\"grow\",\"hm\",\"run batching/batch.js foodnstuff\",\"home;connect harakiri-sushi;connect CSEC;connect phantasy;connect computek;connect rothman-uni;connect lexo-corp;connect aerocorp;connect omnia;connect icarus;connect taiyang-digital;connect microdyne;connect fulcrumtech;connect 4sigma;connect blade;connect The-Cave;connect w0r1d_d43m0n;backdoor;\",\"ps\",\"restart\",\"killall\",\"run phase1/basicHack.js\",\"restart\",\"run expandServer.js\",\"restart\",\"free\",\"restart\",\"run phase1/restart.js\",\"mem phase1/restart.js\",\"run phase1/restart.js\",\"vim actions/crime.js\",\"free\",\"restart\",\"free\",\"hm\",\"free\",\"cnct johnson-ortho\",\"home;connect n00dles;connect nectar-net;connect neo-net;connect johnson-ortho;\",\"restart\",\"hm\",\"restart\",\"free\"],\"identifier\":\"afc61675d036e\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"41.2.4.6\",\"isConnectedTo\":true,\"maxRam\":4096,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":163.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/contracts/start.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34867.61000005355,\"pid\":1475,\"ramUsage\":24.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///1b125494-1d26-454a-9bed-8c364ce58974\",\"moduleSequenceNumber\":2423},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///3695994e-10a4-4854-badc-e271a5c41149\",\"moduleSequenceNumber\":2431},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///3fe76f9b-0cc6-4afd-87b5-94d9478dc0fb\",\"moduleSequenceNumber\":2437},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///bde32b6c-797c-43fc-aa23-c6a20072774c\",\"moduleSequenceNumber\":2439},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///c33418d9-6fc2-4066-b023-5e1d3f91a7a9\",\"moduleSequenceNumber\":2443},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///cfd1a1b4-3716-4e57-8769-c029631badfa\",\"moduleSequenceNumber\":2425},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///352a00da-9188-4768-aa9f-b179b7fd447b\",\"moduleSequenceNumber\":2421},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///c1e61ebf-d8b9-4ee7-be3a-045fabcf343c\",\"moduleSequenceNumber\":2435},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///fc801368-2df8-4ee9-bdfa-dd9c3eb6bdff\",\"moduleSequenceNumber\":2429},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///c390f1ce-3610-4d0b-93f2-52ab9ad09c4f\",\"moduleSequenceNumber\":2433},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///2d8ce5d9-a0b0-4944-951c-a09b737e3bc6\",\"moduleSequenceNumber\":2419},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///9be7b42e-7e34-4f04-8302-926f79e3e52b\",\"moduleSequenceNumber\":2441},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///2775a7e2-3204-4895-80dd-75a5150c1ae6\",\"moduleSequenceNumber\":2427},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///a3fc27db-a149-4649-a463-c85e7af69b94\",\"moduleSequenceNumber\":2491},{\"filename\":\"/contracts/start.js\",\"url\":\"blob:file:///35a79787-aa68-4754-b6db-cfef42b2fbf7\",\"moduleSequenceNumber\":2925}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/phase2/restart.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33457.010000074035,\"pid\":3925,\"ramUsage\":115.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///7910d46d-f1eb-43b7-b3d1-29bd28a600ae\",\"moduleSequenceNumber\":2487},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///ba214cae-5dba-48da-93d9-945668433f9e\",\"moduleSequenceNumber\":2491},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///c899252c-3096-4d7a-b675-51b358d23b72\",\"moduleSequenceNumber\":2493},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///e3938aa4-281f-4f9a-91f4-24b947d9b101\",\"moduleSequenceNumber\":2505},{\"filename\":\"/ui/monitor.js\",\"url\":\"blob:file:///f6c15129-8388-401b-99fc-09817fe88786\",\"moduleSequenceNumber\":2481},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///42515fae-964d-4c4e-b90d-3479744c189a\",\"moduleSequenceNumber\":2531},{\"filename\":\"/phase2/restart.js\",\"url\":\"blob:file:///d30c48db-416a-4817-977e-3b9b7d976070\",\"moduleSequenceNumber\":2547}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"omega-net\",66,24659.652541205647,1],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4729.798656,\"onlineMoneyMade\":0,\"onlineRunningTime\":421.0099999999847,\"pid\":7923,\"ramUsage\":5.85,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4a312dd5-3afa-4839-a65b-ba3eb353383a\",\"moduleSequenceNumber\":115353}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"omega-net\",66,24659.652541205647,2],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2364.899328,\"onlineMoneyMade\":0,\"onlineRunningTime\":289.4099999999922,\"pid\":7930,\"ramUsage\":5.85,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4a312dd5-3afa-4839-a65b-ba3eb353383a\",\"moduleSequenceNumber\":115353}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"omega-net\",815,24659.652541205647,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":39629.979648,\"onlineMoneyMade\":0,\"onlineRunningTime\":268.0099999999934,\"pid\":7933,\"ramUsage\":5.85,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4a312dd5-3afa-4839-a65b-ba3eb353383a\",\"moduleSequenceNumber\":115353}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"omega-net\",901,24659.652541205647,0],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44544.909312,\"onlineMoneyMade\":658322026,\"onlineRunningTime\":203.00999999999704,\"pid\":7945,\"ramUsage\":5.85,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4a312dd5-3afa-4839-a65b-ba3eb353383a\",\"moduleSequenceNumber\":115353}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nimport * as solvers from \\\"contracts/solvers/index.js\\\";\\nconst minuteInterval = 2;\\nfunction getAllServers(ns) {\\n    const tree = new ServerTree(ns);\\n    return tree.home.list();\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will automatically complete contracts that it finds on the network.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let failedContracts = [];\\n    let successfulContracts = [];\\n    function refreshLog() {\\n        ns.clearLog();\\n        for (const cnt of failedContracts) {\\n            ns.print(`\\n      =========================\\n        server: ${cnt.server}\\n        filename: ${cnt.contract}\\n        type: ${cnt.type}\\n      =========================\\n        `);\\n        }\\n        for (const cnt of successfulContracts) {\\n            ns.print(`\\n      =========================\\n        server: ${cnt.server}\\n        filename: ${cnt.contract}\\n        type: ${cnt.type}\\n        reward: \\n          ${cnt.reward}\\n      =========================\\n        `);\\n        }\\n        ns.print(`Contracts failed: ${failedContracts.length}`);\\n        ns.print(`Contracts Succeeded: ${successfulContracts.length}`);\\n    }\\n    while (true) {\\n        // await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\n        const contracts = getAllServers(ns).flatMap((server) => {\\n            const onServer = ns.ls(server.hostname, \\\".cct\\\").map((contract) => {\\n                const type = ns.codingcontract.getContractType(contract, server.hostname);\\n                const data = ns.codingcontract.getData(contract, server.hostname);\\n                return {\\n                    type,\\n                    data,\\n                    server,\\n                    contract,\\n                };\\n            });\\n            return onServer;\\n        });\\n        for (const { type, data, server, contract } of contracts) {\\n            const reward = await solve(type, data, server.hostname, contract, ns);\\n            if (!reward) {\\n                failedContracts.push({\\n                    server: server.hostname,\\n                    contract,\\n                    type,\\n                });\\n                refreshLog();\\n            }\\n            else {\\n                successfulContracts.push({\\n                    server: server.hostname,\\n                    contract,\\n                    type,\\n                    reward,\\n                });\\n                refreshLog();\\n            }\\n        }\\n        await ns.sleep(minuteInterval * 60 * 1000);\\n    }\\n}\\nasync function solve(type, data, server, contract, ns) {\\n    let solution;\\n    ns.print(type);\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = solvers.maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = solvers.maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = solvers.maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = solvers.maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solvers.triangleSum(data);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = solvers.uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = solvers.uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = solvers.generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = solvers.factor(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = solvers.spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = solvers.mergeOverlap(data);\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            solution = solvers.solveSum(data);\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            solution = solvers.solveJump(data);\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            solution = solvers.totalWaysToSum(data);\\n            break;\\n        // case \\\"Total Ways to Sum II\\\":\\n        //   solution = solvers.totalWaysToSum2(data);\\n        //   break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n            solution = solvers.sanitizeParentheses(data);\\n            break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n            solution = await solvers.findMathExpression(ns, data);\\n            break;\\n        default:\\n            ns.print(`Unknown contract type: ${type}`);\\n            return \\\"\\\";\\n    }\\n    if (solution != undefined)\\n        ns.print(`Submitting solution: ${solution} to ${type} - ${contract}`);\\n    return solution != undefined\\n        ? ns.codingcontract.attempt(solution, contract, server, {\\n            returnReward: true,\\n        })\\n        : \\\"\\\";\\n}\\n\",\"filename\":\"/contracts/start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///693ee728-aff1-40c4-8b5e-fd782d738859\",\"moduleSequenceNumber\":15636},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///d19eae54-cc4f-4d03-a684-73ab5e18b1af\",\"moduleSequenceNumber\":15644},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///8b221893-e2fc-4d23-a6b2-dcde40a86229\",\"moduleSequenceNumber\":15650},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///31241352-d226-4e75-856d-46a76dda2c24\",\"moduleSequenceNumber\":15654},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///2023358c-7e99-4c5c-a4c6-a9d2336e6f8a\",\"moduleSequenceNumber\":15656},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///dff499b3-d993-46e2-aa0f-4aa0e78c9297\",\"moduleSequenceNumber\":15638},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///ee85a316-28cb-42f8-ac94-d03a5f7c21dd\",\"moduleSequenceNumber\":15634},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///6c64d874-dc20-4d42-9792-4797c3d7ecec\",\"moduleSequenceNumber\":15648},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///986078c2-3585-4ae5-b17f-a1379c220ca6\",\"moduleSequenceNumber\":15642},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///6afa7f77-fdc7-48b1-b173-bc840f9ab0b5\",\"moduleSequenceNumber\":15646},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///b1625c31-3b61-4cfa-b80e-75fd1cc5c91e\",\"moduleSequenceNumber\":15632},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///28eb4ef0-6624-41b4-974b-faf54498b570\",\"moduleSequenceNumber\":15652},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///a7f96f73-f648-4eed-b5e8-226459cf7f18\",\"moduleSequenceNumber\":15640},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///10901b94-54dd-4f61-ac99-31daa2dcc04e\",\"moduleSequenceNumber\":15704},{\"filename\":\"/contracts/start.js\",\"url\":\"blob:file:///7f722ca5-d184-47bd-b904-40c0adb0a4e5\",\"moduleSequenceNumber\":16138}],\"dependents\":[],\"ramUsage\":24.1,\"server\":\"home\",\"moduleSequenceNumber\":114478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMinRam } from \\\"purchase\\\";\\nimport { getHackableServers } from \\\"cnct\\\";\\nimport { monitor } from \\\"ui/monitor\\\";\\nimport { nukeAll } from \\\"nuker\\\";\\nimport { installBackdoors } from \\\"backdoor\\\";\\nimport { createPrograms } from \\\"programs\\\";\\nimport { expandServer } from \\\"expandServer\\\";\\nimport { factionWatch } from \\\"factionWatch\\\";\\nimport { purchaseServers, upgradeServers } from \\\"purchase\\\";\\nimport { expandHacknet } from \\\"hacknet\\\";\\nimport { prepBatch } from \\\"batching/prepBatch\\\";\\nimport { batch } from \\\"batching/batch\\\";\\nimport { purchasePricey } from \\\"actions/augmentations\\\";\\nimport { commitCrime } from \\\"actions/crime\\\";\\nimport { manageStock } from \\\"stocks/start\\\";\\n// timing constants\\n// const second = 1000; //milliseconds\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\n// const hours = 60 * minutes;\\n// const hour = hours;\\n// const days = 24 * hours;\\n// const day = days;\\nconst scripts = [\\\"/contracts/start.js\\\"];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This is a simple script that restarts the automated scripts periodically.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    for (const script of scripts) {\\n        ns.run(script);\\n        // This delay is to keep the scripts from colliding.\\n        await ns.sleep(5000);\\n    }\\n    let target = getHackableServers(ns)[0].hostname;\\n    async function updateHack() {\\n        target = getHackableServers(ns)[0].hostname;\\n        await prepBatch(ns, target);\\n        await batch(ns, target);\\n    }\\n    await nukeAll(ns);\\n    await updateHack();\\n    while (true) {\\n        ns.clearLog();\\n        ns.tail();\\n        // Keep nuking servers\\n        await nukeAll(ns);\\n        // Buy or create any programs you may need.\\n        await createPrograms(ns);\\n        // update hack target if necessary\\n        if (getHackableServers(ns)[0].hostname !== target)\\n            await updateHack();\\n        // install backdoors to join any factions.\\n        await installBackdoors(ns);\\n        expandServer(ns);\\n        factionWatch(ns);\\n        await purchasePricey(ns);\\n        if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n            await purchaseServers(ns);\\n        else\\n            await upgradeServers(ns);\\n        await manageStock(ns);\\n        expandHacknet(ns);\\n        monitor(ns);\\n        await commitCrime(ns);\\n        if (getMinRam(ns) >= ns.getPurchasedServerMaxRam())\\n            ns.spawn(\\\"phase3/restart.js\\\");\\n    }\\n}\\n\",\"filename\":\"/phase2/restart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stocks/folio.js\",\"url\":\"blob:file:///e5d9c001-53e0-40c3-8b28-430a92e4f033\",\"moduleSequenceNumber\":101573},{\"filename\":\"/stocks/start.js\",\"url\":\"blob:file:///274aeee1-1f64-4136-9b5d-48277e1325ff\",\"moduleSequenceNumber\":101579},{\"filename\":\"/actions/crime.js\",\"url\":\"blob:file:///8740f8d0-997f-43e5-8d57-e3f120e4331d\",\"moduleSequenceNumber\":101503},{\"filename\":\"/actions/factionWork.js\",\"url\":\"blob:file:///1af081ad-dc0b-45b9-a49c-8793f3d9a15b\",\"moduleSequenceNumber\":101495},{\"filename\":\"/actions/crime.js\",\"url\":\"blob:file:///43942403-eb2e-40bf-80a5-c3d647730386\",\"moduleSequenceNumber\":101503},{\"filename\":\"/actions/augmentations.js\",\"url\":\"blob:file:///3017cf8b-ec74-400e-9def-d437892277d2\",\"moduleSequenceNumber\":101493},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///462d6c36-6abf-4918-8429-8047553fc20e\",\"moduleSequenceNumber\":101587},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///f2fc96d9-7a86-43c4-890e-1c6394a293dd\",\"moduleSequenceNumber\":101591},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///6e7c84d2-1da2-4d10-8d25-a04cd1b4d948\",\"moduleSequenceNumber\":101593},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///0977499a-3b55-422f-8d27-150b0f152856\",\"moduleSequenceNumber\":101603},{\"filename\":\"/ui/monitor.js\",\"url\":\"blob:file:///58348436-8d7b-4806-820a-749cc0574792\",\"moduleSequenceNumber\":101583},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///d9bfae65-2090-4a86-8756-cffae104c387\",\"moduleSequenceNumber\":101631},{\"filename\":\"/actions/crime.js\",\"url\":\"blob:file:///6787e8d5-7818-4e4e-a42f-b8d6161365fa\",\"moduleSequenceNumber\":101503},{\"filename\":\"expandServer.js\",\"url\":\"blob:file:///e7dff5ed-645b-43b6-9a12-5daf7ab2b2b1\",\"moduleSequenceNumber\":101607},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///1aa0ca59-591d-4ca1-b565-b5a5341c307b\",\"moduleSequenceNumber\":101591},{\"filename\":\"ps.js\",\"url\":\"blob:file:///f466fd6b-e7c2-48d7-9995-96ee029f0d77\",\"moduleSequenceNumber\":101629},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///83b41708-eb1a-498c-8f26-0c747170bad2\",\"moduleSequenceNumber\":101587},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///5cfa1092-0a14-4f3f-8957-24c633d97f90\",\"moduleSequenceNumber\":101591},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///ce4082ca-209d-41f2-b14d-0d6494e5b66b\",\"moduleSequenceNumber\":101593},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///d0cf6d0d-7e61-47c8-8cb2-4c12cc40d287\",\"moduleSequenceNumber\":101603},{\"filename\":\"/batching/runSpawner.js\",\"url\":\"blob:file:///12ea8784-74e2-4433-be55-3b500f958782\",\"moduleSequenceNumber\":101513},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///e0a591e8-99a9-401f-a58c-3e722a3bda4f\",\"moduleSequenceNumber\":101631},{\"filename\":\"factionWatch.js\",\"url\":\"blob:file:///80144776-b2fd-4865-874c-3c53dbf11da1\",\"moduleSequenceNumber\":101611},{\"filename\":\"/actions/crime.js\",\"url\":\"blob:file:///8377cf9f-49cf-49f8-b304-ce0510fbe300\",\"moduleSequenceNumber\":101503},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///b0fd21a4-03f3-4b82-9a5c-e3cc7096bf4b\",\"moduleSequenceNumber\":101587},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///447c0c0d-f93d-4e6f-990b-4351dba2a95d\",\"moduleSequenceNumber\":101591},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///8ce0a0b6-59fd-4783-85fe-06160a36e378\",\"moduleSequenceNumber\":101593},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///85a782bf-07c9-4895-95d5-e938156528ed\",\"moduleSequenceNumber\":101603},{\"filename\":\"/ui/monitor.js\",\"url\":\"blob:file:///75f75dc9-1292-4b3c-91db-be150e49a996\",\"moduleSequenceNumber\":101583},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///ad8efae1-c5f0-4288-9a0e-27249eb10692\",\"moduleSequenceNumber\":101587},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///f3b8ac4a-4f37-425c-912c-6202dccde600\",\"moduleSequenceNumber\":101591},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///87938230-a29b-44e2-b92e-17870912bcbe\",\"moduleSequenceNumber\":101593},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///e4adfbd8-acdc-4098-8b64-349949b40a0e\",\"moduleSequenceNumber\":101603},{\"filename\":\"/batching/runSpawner.js\",\"url\":\"blob:file:///1b56f451-e195-4d13-bbdb-436de727a131\",\"moduleSequenceNumber\":101513},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///040d95a8-6e96-4420-8c51-0760b0e70730\",\"moduleSequenceNumber\":101591},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///809acae0-366b-46dd-89e5-24ad241abcfc\",\"moduleSequenceNumber\":101589},{\"filename\":\"/batching/prepBatch.js\",\"url\":\"blob:file:///1b796494-c17f-49e9-91fd-fe2f5cb3dd96\",\"moduleSequenceNumber\":101511},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///71f34c91-a058-4ea6-9b80-7f75013869b0\",\"moduleSequenceNumber\":101591},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///319535c7-1740-498d-91c2-2f10b0a83bf1\",\"moduleSequenceNumber\":101589},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///4238fd94-0a31-45b6-af97-fdafded247a6\",\"moduleSequenceNumber\":101587},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///41e9baf2-838a-4601-9395-d10914875a47\",\"moduleSequenceNumber\":101591},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///86a078b5-eda3-4edb-875c-15523033f4c2\",\"moduleSequenceNumber\":101593},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///e10fccf4-4c79-489f-8622-e449870c5651\",\"moduleSequenceNumber\":101603},{\"filename\":\"/batching/batch.js\",\"url\":\"blob:file:///b057027d-49b5-4722-a639-07883597822d\",\"moduleSequenceNumber\":101501},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///f6e55c1d-3c6f-4d24-833c-c7f9861e70b3\",\"moduleSequenceNumber\":101631},{\"filename\":\"factionWatch.js\",\"url\":\"blob:file:///1524bcdd-ea3c-43ee-9b46-4cc61fa3b9df\",\"moduleSequenceNumber\":101611},{\"filename\":\"/actions/crime.js\",\"url\":\"blob:file:///268a5e01-13aa-4a5d-8cd9-4ef0ce68aff6\",\"moduleSequenceNumber\":101503},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///15a2bab9-4a8a-455b-a566-8562a6ca97e4\",\"moduleSequenceNumber\":101587},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///f277b65a-50cd-4a73-91e7-d0335d873004\",\"moduleSequenceNumber\":101591},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///adeb53a6-c1db-4d17-8c3e-b5f98bb9e26a\",\"moduleSequenceNumber\":101593},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///13382125-28c7-4786-a828-5028eab4cb80\",\"moduleSequenceNumber\":101603},{\"filename\":\"/ui/monitor.js\",\"url\":\"blob:file:///01ec5432-6770-4a62-afc4-02ca9b0d1a63\",\"moduleSequenceNumber\":101583},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///5d53159c-532a-43ec-bfc7-fff29ab0217f\",\"moduleSequenceNumber\":101587},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///b03171f3-1226-4be4-b63d-6e81b44e53c5\",\"moduleSequenceNumber\":101591},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///1a008bfa-f82a-4a89-b773-c4a100dd44c3\",\"moduleSequenceNumber\":101593},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///a7b4908b-8c62-4d88-ab7b-89bdc143b462\",\"moduleSequenceNumber\":101603},{\"filename\":\"/batching/runSpawner.js\",\"url\":\"blob:file:///cf2fba64-0640-426a-aaf7-35007dded8ef\",\"moduleSequenceNumber\":101513},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///6ccbfd4a-eff4-44a0-89b4-bb7546d5e55f\",\"moduleSequenceNumber\":101591},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///db42ca2e-f09e-4871-a7b9-77a5b5884601\",\"moduleSequenceNumber\":101589},{\"filename\":\"/batching/prepBatch.js\",\"url\":\"blob:file:///23f35dd2-68cb-4f14-951c-5477fcbbb6fb\",\"moduleSequenceNumber\":101511},{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///08c04df0-4871-4bb1-b3a1-f5b7939d7809\",\"moduleSequenceNumber\":101619},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///0341b96c-d210-4e26-a843-f09582875ec4\",\"moduleSequenceNumber\":101631},{\"filename\":\"factionWatch.js\",\"url\":\"blob:file:///42239085-6c04-4148-bdcf-1fbc9cc0fde5\",\"moduleSequenceNumber\":101611},{\"filename\":\"expandServer.js\",\"url\":\"blob:file:///fd1a9a5b-2211-4908-a5d4-bcc08e406dcb\",\"moduleSequenceNumber\":101607},{\"filename\":\"/actions/programming.js\",\"url\":\"blob:file:///2bd7e3fe-cfef-4d2a-8fb3-113589457c44\",\"moduleSequenceNumber\":101497},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///5a83fc78-188c-430e-be29-410e62cbb1a3\",\"moduleSequenceNumber\":101587},{\"filename\":\"programs.js\",\"url\":\"blob:file:///33bc745e-1bb2-4f2d-a1b1-7b05d4f898b0\",\"moduleSequenceNumber\":101627},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///bf13d6a9-e2dc-4940-9649-e197ca893fde\",\"moduleSequenceNumber\":101591},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///f38f3f50-2c9b-48c2-b2ea-88a42a409b32\",\"moduleSequenceNumber\":101593},{\"filename\":\"bkdr.js\",\"url\":\"blob:file:///6c16d57b-90c2-439b-9acb-5de2b87f8e65\",\"moduleSequenceNumber\":101601},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///b88d45e2-9e71-4151-9897-774f98f7070a\",\"moduleSequenceNumber\":101591},{\"filename\":\"backdoor.js\",\"url\":\"blob:file:///c5f86650-5357-4a89-9a55-87d72d1f5cd3\",\"moduleSequenceNumber\":101599},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///bbb17ecd-5a66-439c-a7bd-6ba9336a46d0\",\"moduleSequenceNumber\":101587},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///8f48ffe9-51e3-4cb0-b3d2-94c0678a74f4\",\"moduleSequenceNumber\":101591},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///81704e6b-7e95-4327-ad41-62ced2dcaf68\",\"moduleSequenceNumber\":101593},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///cf9ad1a3-483b-4d50-98b9-57acc6f974b4\",\"moduleSequenceNumber\":101603},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///18557f7e-cd66-4552-9245-536bbc7085a6\",\"moduleSequenceNumber\":101587},{\"filename\":\"/utils/nuke.js\",\"url\":\"blob:file:///d57453f1-a079-4c5a-b8f5-3aef07886cbc\",\"moduleSequenceNumber\":101585},{\"filename\":\"nuker.js\",\"url\":\"blob:file:///b72a7c6d-2cb3-43c9-b521-01ed6f69c641\",\"moduleSequenceNumber\":101625},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///bf6e78f2-d4ba-466d-b20c-1198b29ae280\",\"moduleSequenceNumber\":101587},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///221a9885-ac35-4996-b5ed-32b37bd92adb\",\"moduleSequenceNumber\":101591},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///f90e4438-995b-4b73-ac5c-97de542eb5f9\",\"moduleSequenceNumber\":101593},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///08bd65ec-fa69-47d2-b7c5-d6cb89987c56\",\"moduleSequenceNumber\":101603},{\"filename\":\"/ui/monitor.js\",\"url\":\"blob:file:///02947a7e-7eae-4758-95d6-1e2310113e4e\",\"moduleSequenceNumber\":101583},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///0d7a060b-e24b-4126-a72b-74781f63f859\",\"moduleSequenceNumber\":101587},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///8dedb674-a601-45d7-bcea-78dae0d0e86a\",\"moduleSequenceNumber\":101591},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///1fca82cd-ba17-4380-b6b6-16f9a7ed8c93\",\"moduleSequenceNumber\":101593},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///f21807fa-e4ab-489d-b3e9-02cf99ed5155\",\"moduleSequenceNumber\":101603},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///08feb528-3a97-47d8-87c2-9eb216f9a0c6\",\"moduleSequenceNumber\":101631},{\"filename\":\"/phase2/restart.js\",\"url\":\"blob:file:///32401d0b-e6cb-48cf-b24d-7de7b8b76dc3\",\"moduleSequenceNumber\":101646}],\"dependents\":[],\"ramUsage\":163.4,\"server\":\"home\",\"moduleSequenceNumber\":114496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"stock.purchaseWseAccount\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchaseTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketData\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketDataTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nimport { bkdr } from \\\"bkdr\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will monitor for servers that need a backdoor installed.\\n      It will also nuke any server that needs it.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.sleep(1);\\n        ns.clearLog();\\n        // find nukable servers.\\n        if (!ns.scriptRunning(\\\"nuker.js\\\", \\\"home\\\"))\\n            ns.run(\\\"nuker.js\\\");\\n        await installBackdoors(ns);\\n    }\\n}\\nexport async function installBackdoors(ns) {\\n    const allServers = new ServerTree(ns).home.filter((s) => s.hostname !== \\\"home\\\" && !ns.getPurchasedServers().includes(s.hostname));\\n    const serversBackdoored = allServers.filter((s) => s.backdoorInstalled);\\n    ns.print(`\\n      ||=====================||\\n      ||${serversBackdoored.length.toPrecision(2)} of ${allServers.length.toPrecision(2)} servers     ||\\n      ||have been backdoored.||\\n      ||=====================||\\n      `);\\n    if (serversBackdoored.length === allServers.length) {\\n        ns.print(`\\n        ALL SERVERS HAVE BEEN BACKDOORED\\n        `);\\n        return;\\n    }\\n    let backdoors = allServers.filter((s) => s.hasAdminRights &&\\n        !s.backdoorInstalled &&\\n        s.requiredHackingSkill < ns.getHackingLevel());\\n    // show the log if we have servers to backdoor\\n    if (backdoors.length === 0) {\\n        ns.print(\\\"No servers require a backdoor at this time.\\\");\\n        return;\\n    }\\n    if (ns\\n        .getOwnedSourceFiles()\\n        .map((sf) => sf.n)\\n        .includes(4) ||\\n        ns.getPlayer().bitNodeN === 4) {\\n        await bn4(ns, backdoors);\\n    }\\n    else\\n        await noBn4(ns, backdoors);\\n}\\nasync function noBn4(ns, backdoors) {\\n    ns.tail();\\n    ns.print(`Backdoor the following servers:`);\\n    ns.print(`===============================`);\\n    // find backdoorable servers.\\n    for (const server of backdoors) {\\n        // list them.\\n        ns.print(server.hostname);\\n        await bkdr(ns, server.hostname);\\n    }\\n    ns.print(`===============================`);\\n}\\nexport async function bn4(ns, backdoors) {\\n    const tree = new ServerTree(ns);\\n    for (const host of backdoors) {\\n        const path = tree.home.find(host.hostname);\\n        // go to the target\\n        for (const host of path) {\\n            ns.singularity.connect(host);\\n        }\\n        await ns.singularity.installBackdoor();\\n        // return home\\n        for (const host of path.reverse()) {\\n            ns.singularity.connect(host);\\n        }\\n    }\\n}\\n\",\"filename\":\"backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///347010b8-b1bb-4d53-8c9f-2d19c5edbb9b\",\"moduleSequenceNumber\":2491},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///44921ed6-5a60-41e3-bc1c-82c6722198d4\",\"moduleSequenceNumber\":2493},{\"filename\":\"bkdr.js\",\"url\":\"blob:file:///f50e98a1-7cba-491b-b864-c84ae72fc077\",\"moduleSequenceNumber\":2501},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///9cec5b70-1616-4e15-8d86-b60eee8b4466\",\"moduleSequenceNumber\":2491},{\"filename\":\"backdoor.js\",\"url\":\"blob:file:///450236fe-df09-443b-9eab-f111a2c85e59\",\"moduleSequenceNumber\":2548}],\"dependents\":[],\"ramUsage\":42.7,\"server\":\"home\",\"moduleSequenceNumber\":114528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const allowancePercentage = 0.01;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    // buy our first node if needed.\\n    if (ns.hacknet.numNodes() === 0)\\n        ns.hacknet.purchaseNode();\\n    while (true) {\\n        ns.disableLog(\\\"ALL\\\");\\n        ns.clearLog();\\n        expandHacknet(ns);\\n        await ns.sleep(1);\\n    }\\n}\\nexport function expandHacknet(ns) {\\n    // Find the best hacknet purchase.\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n        let gain = [0, 0, 0];\\n        let currentCash = ns.getServerMoneyAvailable(\\\"home\\\");\\n        currentCash *= allowancePercentage;\\n        if (ns.hacknet.getPurchaseNodeCost() <= currentCash) {\\n            ns.hacknet.purchaseNode();\\n            continue;\\n        }\\n        else {\\n            // ns.print(\\n            //   `Cannot afford a new node with ${ns.nFormat(currentCash, \\\"$0.00a\\\")}`\\n            // );\\n        }\\n        const node = ns.hacknet.getNodeStats(i);\\n        if (node.level < 200) {\\n            gain[0] =\\n                ((node.level + 1) *\\n                    1.6 *\\n                    Math.pow(1.035, node.ram - 1) *\\n                    ((node.cores + 5) / 6)) /\\n                    ns.hacknet.getLevelUpgradeCost(i, 1);\\n        }\\n        else {\\n            gain[0] = 0;\\n        }\\n        if (node.ram < 64) {\\n            gain[1] =\\n                (node.level *\\n                    1.6 *\\n                    Math.pow(1.035, node.ram * 2 - 1) *\\n                    ((node.cores + 5) / 6)) /\\n                    ns.hacknet.getRamUpgradeCost(i, 1);\\n        }\\n        else {\\n            gain[1] = 0;\\n        }\\n        if (node.cores < 16) {\\n            gain[2] =\\n                (node.level *\\n                    1.6 *\\n                    Math.pow(1.035, node.ram - 1) *\\n                    ((node.cores + 6) / 6)) /\\n                    ns.hacknet.getCoreUpgradeCost(i, 1);\\n        }\\n        else {\\n            gain[2] = 0;\\n        }\\n        // ns.print(`Level Upgrade: ${gain[0]}`);\\n        // ns.print(`Ram Upgrade: ${gain[1]}`);\\n        // ns.print(`Core Upgrade: ${gain[2]}`);\\n        let topgain = 0;\\n        for (let g of gain) {\\n            if (g > topgain) {\\n                topgain = g;\\n            }\\n        }\\n        if (topgain === 0) {\\n            // ns.print(`All Gains maxed on Node ${i}`);\\n            continue;\\n        }\\n        if (topgain === gain[0] &&\\n            ns.hacknet.getLevelUpgradeCost(i, 1) < currentCash) {\\n            ns.print(`Upgrading Level on Node ${i}`);\\n            ns.hacknet.upgradeLevel(i, 1);\\n        }\\n        if (topgain === gain[1] &&\\n            ns.hacknet.getRamUpgradeCost(i, 1) < currentCash) {\\n            ns.print(`Upgrading Ram on Node ${i}`);\\n            ns.hacknet.upgradeRam(i, 1);\\n        }\\n        if (topgain === gain[2] &&\\n            ns.hacknet.getCoreUpgradeCost(i, 1) < currentCash) {\\n            ns.print(`Upgrading Cores on Node ${i}`);\\n            ns.hacknet.upgradeCore(i, 1);\\n        }\\n        else {\\n            // ns.print(\\n            //   `Cannot afford to upgrade Node ${i} with ${ns.nFormat(\\n            //     currentCash,\\n            //     \\\"$0.00a\\\"\\n            //   )}`\\n            // );\\n        }\\n    }\\n}\\n\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///70b97cd3-9479-45e2-a867-823d34ea680b\",\"moduleSequenceNumber\":2550}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":114548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const files = ns.ls(\\\"home\\\", \\\".js\\\");\\n    ns.tprint(`Removing the following files:`);\\n    for (const file of files) {\\n        ns.tprint(`   ${file}`);\\n        ns.rm(file);\\n    }\\n}\\n\",\"filename\":\"clean.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"clean.js\",\"url\":\"blob:file:///925c7153-6f0c-4b00-811f-638ca6a878fb\",\"moduleSequenceNumber\":388775}],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":114532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const programName = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !programName) {\\n        ns.tprint(`\\n      This script will create a program for you.\\n      It requires Source File 4 to work.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} PROGRAM_NAME\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    while (!ns.fileExists(programName)) {\\n        ns.clearLog();\\n        await createProgram(ns, programName);\\n        await ns.sleep(1);\\n    }\\n}\\nexport async function createProgram(ns, programName) {\\n    ns.tail();\\n    if (ns.singularity.purchaseTor() &&\\n        ns.singularity.purchaseProgram(programName))\\n        return;\\n    if (!ns.singularity.isBusy() || !ns.getPlayer().workType.includes(\\\"Program\\\"))\\n        ns.singularity.createProgram(programName);\\n}\\n\",\"filename\":\"/actions/programming.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/actions/test.js\",\"url\":\"blob:file:///d92282ea-04e5-4c36-b2d3-3749e071b06d\",\"moduleSequenceNumber\":119510},{\"filename\":\"/actions/programming.js\",\"url\":\"blob:file:///2c522c37-977a-4a64-be77-dd7bfa9d13eb\",\"moduleSequenceNumber\":121090}],\"dependents\":[],\"ramUsage\":11.8,\"server\":\"home\",\"moduleSequenceNumber\":114428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function hasSourceFile(ns, n) {\\n    return (ns\\n        .getOwnedSourceFiles()\\n        .map((sf) => sf.n)\\n        .includes(n) || ns.getPlayer().bitNodeN === n);\\n}\\n\",\"filename\":\"/actions/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":114430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { kill } from \\\"utils/scriptKilling\\\";\\nimport { runSpawner, spawnerName } from \\\"batching/runSpawner\\\";\\nimport { ps } from \\\"ps\\\";\\nimport { getRunnableServers } from \\\"cnct\\\";\\n/**\\n *  This will batch attack a given target with as little threads as possible.\\n * Adjusting timing rather than threads when necessary.\\n */\\nlet bufferTime = 10;\\nconst analyzeScript = \\\"/analyzeServer.js\\\";\\nconst runningScripts = [\\n    \\\"/batching/hack.js\\\",\\n    \\\"/batching/grow.js\\\",\\n    \\\"/batching/weaken.js\\\",\\n    spawnerName,\\n];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"exec\\\");\\n    ns.enableLog(\\\"run\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This will continuously batch hack a target from a host.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET\\n      `);\\n        return;\\n    }\\n    // DEBUG ONLY\\n    // killBatches(ns);\\n    const reserveRam = Math.max(...runningScripts.map((script) => ns.getScriptRam(script)));\\n    const scriptCount = Math.floor(totalRAM(ns) / reserveRam);\\n    const { hackTime, growTime, weakenTime } = getTiming(ns, target);\\n    const maxTime = Math.max(hackTime, growTime, weakenTime);\\n    bufferTime = maxTime / scriptCount;\\n    // check if this server is already being batched.\\n    if (ps(ns).find((ps) => ps.ps.args.includes(target) &&\\n        ps.ps.filename === spawnerName &&\\n        ps.ps.args.includes(\\\"hack\\\")))\\n        // already hacking\\n        return;\\n    // analyze the server\\n    ns.run(analyzeScript, 1, target, `Batch attack!`);\\n    // now find the required number of threads for each action.\\n    const growThreads = 1;\\n    const hackThreads = 1;\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    const hackSecurityDelta = ns.hackAnalyzeSecurity(hackThreads);\\n    let weakenThreads = 0;\\n    let targetDelta = Math.max(growSecurityDelta, hackSecurityDelta);\\n    // pin targetDelta to 100 to prevent infinity\\n    if (targetDelta > 100)\\n        targetDelta = 100;\\n    while (ns.weakenAnalyze(weakenThreads) < targetDelta) {\\n        await ns.sleep(1);\\n        weakenThreads += 1;\\n        ns.clearLog();\\n        ns.print(`Calculating Weaken Threads: ${weakenThreads}`);\\n        ns.print(`${weakenThreads} threads will cut security by ${ns.weakenAnalyze(weakenThreads)}`);\\n        ns.print(`Target security is ${targetDelta}`);\\n    }\\n    // sanity check\\n    if (hackTime > growTime || hackTime > weakenTime || growTime > weakenTime) {\\n        ns.tprint(`Something screwy going on with ${target} timing`);\\n        return;\\n    }\\n    // Prepare the server\\n    await prepareServer(ns, target);\\n    ns.print(\\\"Hacking...\\\");\\n    await runSpawner(ns, \\\"weaken\\\", target, weakenThreads, bufferTime * 3, 1);\\n    await ns.sleep(weakenTime - bufferTime * 2);\\n    await runSpawner(ns, \\\"weaken\\\", target, weakenThreads, bufferTime * 3, 2);\\n    await ns.sleep(weakenTime - growTime - bufferTime);\\n    await runSpawner(ns, \\\"grow\\\", target, growThreads, bufferTime * 3);\\n    await ns.sleep(growTime - hackTime - bufferTime * 2);\\n    await runSpawner(ns, \\\"hack\\\", target, hackThreads, bufferTime * 3);\\n}\\nfunction getTiming(ns, target) {\\n    let hackTime = 1;\\n    let growTime = 1;\\n    let weakenTime = 1;\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n        const server = ns.getServer(target);\\n        server.hackDifficulty = server.minDifficulty;\\n        const player = ns.getPlayer();\\n        hackTime = ns.formulas.hacking.hackTime(server, player);\\n        growTime = ns.formulas.hacking.growTime(server, player);\\n        weakenTime = ns.formulas.hacking.weakenTime(server, player);\\n    }\\n    else {\\n        hackTime = ns.getHackTime(target);\\n        growTime = ns.getGrowTime(target);\\n        weakenTime = ns.getWeakenTime(target);\\n    }\\n    return { hackTime, growTime, weakenTime };\\n}\\nexport async function prepareServer(ns, target) {\\n    // now find the required number of threads for each action.\\n    const growThreads = 1;\\n    const hackThreads = 1;\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    const hackSecurityDelta = ns.hackAnalyzeSecurity(hackThreads);\\n    let weakenThreads = 0;\\n    let targetDelta = Math.max(growSecurityDelta, hackSecurityDelta);\\n    // pin targetDelta to 100 to prevent infinity\\n    if (targetDelta > 100)\\n        targetDelta = 100;\\n    while (ns.weakenAnalyze(weakenThreads) < targetDelta) {\\n        await ns.sleep(1);\\n        weakenThreads += 1;\\n        // ns.clearLog();\\n        // ns.print(`Calculating Weaken Threads: ${weakenThreads}`);\\n        // ns.print(\\n        //   `${weakenThreads} threads will cut security by ${ns.weakenAnalyze(\\n        //     weakenThreads\\n        //   )}`\\n        // );\\n        // ns.print(`Target security is ${targetDelta}`);\\n    }\\n    // ns.print(`Preparing ${target} for hacking...`);\\n    // ns.print(\\\"Growing...\\\");\\n    await killMsg(ns, \\\"hack\\\", target);\\n    await runSpawner(ns, \\\"weaken\\\", target, weakenThreads, bufferTime * 3, 2);\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\n        await ns.sleep(bufferTime);\\n    await runSpawner(ns, \\\"grow\\\", target, growThreads, bufferTime * 3);\\n    while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n        await ns.sleep(bufferTime);\\n    }\\n    // ns.kill(growPid);\\n    await killMsg(ns, \\\"grow\\\", target);\\n    // ns.print(\\\"Weakening...\\\");\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n        await ns.sleep(bufferTime);\\n    }\\n    // ns.kill(weakenPid);\\n    await killMsg(ns, \\\"weaken\\\", target);\\n}\\nasync function killMsg(ns, cmd, target) {\\n    kill(ns, (ps) => {\\n        if (ps.filename === spawnerName &&\\n            ps.args.includes(cmd) &&\\n            ps.args.includes(target))\\n            return true;\\n        if (ps.filename.includes(cmd) && ps.args.includes(target))\\n            return true;\\n        return false;\\n    });\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\nfunction totalRAM(ns) {\\n    let total = 0;\\n    for (const { hostname } of getRunnableServers(ns)) {\\n        const host = hostname;\\n        total += ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n    }\\n    return total;\\n}\\n\",\"filename\":\"/batching/batchLite.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":12,\"server\":\"home\",\"moduleSequenceNumber\":114434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"cnct\\\";\\nimport { kill } from \\\"utils/scriptKilling\\\";\\nimport { prepBatch } from \\\"batching/prepBatch\\\";\\nimport { runSpawner, spawnerName } from \\\"batching/runSpawner\\\";\\nimport { ps } from \\\"ps\\\";\\nimport { expandServer } from \\\"expandServer\\\";\\nimport { commitCrime } from \\\"actions/crime\\\";\\nimport { purchaseServers, upgradeServers } from \\\"purchase\\\";\\nimport { monitor } from \\\"ui/monitor\\\";\\nconst minBufferTime = 60;\\nlet bufferTime = minBufferTime;\\nconst growMultiplier = 4;\\nconst hackPercent = 0.5;\\nconst analyzeScript = \\\"ui/monitor.js\\\";\\nconst runningScripts = [\\n    \\\"/batching/hack.js\\\",\\n    \\\"/batching/grow.js\\\",\\n    \\\"/batching/weaken.js\\\",\\n    spawnerName,\\n];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"exec\\\");\\n    ns.enableLog(\\\"run\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This will continuously batch hack a target from a host.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET\\n      `);\\n        return;\\n    }\\n    // analyze the server\\n    ns.run(analyzeScript, 1, target, `Batch attack!`);\\n    await prepBatch(ns, target);\\n    await batch(ns, target);\\n}\\nexport async function batch(ns, target) {\\n    // now find the required number of threads for each action.\\n    const growThreads = Math.ceil(ns.growthAnalyze(target, growMultiplier));\\n    const hackThreads = Math.ceil(hackPercent / ns.hackAnalyze(target));\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    const hackSecurityDelta = ns.hackAnalyzeSecurity(hackThreads);\\n    let weakenThreads = 0;\\n    let targetDelta = Math.max(growSecurityDelta, hackSecurityDelta);\\n    // pin targetDelta to 100 to prevent infinity\\n    if (targetDelta > 100)\\n        targetDelta = 100;\\n    const maxThreads = Math.max(hackThreads, weakenThreads, growThreads);\\n    const reserveRam = Math.max(...runningScripts.map((script) => ns.getScriptRam(script) * maxThreads));\\n    const scriptCount = Math.floor(totalRAM(ns) / reserveRam);\\n    // calculate timing\\n    const { hackTime, growTime, weakenTime } = getTiming(ns, target);\\n    const maxTime = Math.max(hackTime, growTime, weakenTime);\\n    bufferTime = maxTime / scriptCount;\\n    if (bufferTime < minBufferTime)\\n        bufferTime = minBufferTime;\\n    // check if this server is already being batched.\\n    if (ps(ns).find((ps) => ps.ps.args.includes(target) &&\\n        ps.ps.filename === spawnerName &&\\n        ps.ps.args.includes(\\\"hack\\\") &&\\n        ps.ps.args.includes(bufferTime.toString())))\\n        // already hacking\\n        return;\\n    // otherwise kill any batching that is going on.\\n    kill(ns, (ps) => ps.filename === spawnerName);\\n    while (ns.weakenAnalyze(weakenThreads) < targetDelta) {\\n        await ns.sleep(1);\\n        weakenThreads += 1;\\n        ns.clearLog();\\n        ns.print(`Calculating Weaken Threads: ${weakenThreads}`);\\n        ns.print(`${weakenThreads} threads will cut security by ${ns.weakenAnalyze(weakenThreads)}`);\\n        ns.print(`Target security is ${targetDelta}`);\\n    }\\n    ns.clearLog();\\n    // sanity check\\n    if (hackTime > growTime || hackTime > weakenTime || growTime > weakenTime) {\\n        ns.tprint(`Something screwy going on with ${target} timing`);\\n        return;\\n    }\\n    ns.print(\\\"Hacking...\\\");\\n    monitor(ns, ns.getServer(target));\\n    await runSpawner(ns, \\\"weaken\\\", target, weakenThreads, bufferTime, 1);\\n    await ns.sleep(weakenTime - (bufferTime * 2) / 3);\\n    await runSpawner(ns, \\\"weaken\\\", target, weakenThreads, bufferTime, 2);\\n    await ns.sleep(weakenTime - growTime - bufferTime / 3);\\n    await runSpawner(ns, \\\"grow\\\", target, growThreads, bufferTime);\\n    await ns.sleep(growTime - hackTime - (bufferTime * 2) / 3);\\n    await runSpawner(ns, \\\"hack\\\", target, hackThreads, bufferTime);\\n}\\nfunction getTiming(ns, target) {\\n    let hackTime = 1;\\n    let growTime = 1;\\n    let weakenTime = 1;\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n        const server = ns.getServer(target);\\n        server.hackDifficulty = server.minDifficulty;\\n        const player = ns.getPlayer();\\n        hackTime = ns.formulas.hacking.hackTime(server, player);\\n        growTime = ns.formulas.hacking.growTime(server, player);\\n        weakenTime = ns.formulas.hacking.weakenTime(server, player);\\n    }\\n    else {\\n        hackTime = ns.getHackTime(target);\\n        growTime = ns.getGrowTime(target);\\n        weakenTime = ns.getWeakenTime(target);\\n    }\\n    return { hackTime, growTime, weakenTime };\\n}\\nexport async function prepareServer(ns, target) {\\n    // now find the required number of threads for each action.\\n    const growThreads = Math.ceil(ns.growthAnalyze(target, growMultiplier));\\n    const hackThreads = Math.ceil(hackPercent / ns.hackAnalyze(target));\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    const hackSecurityDelta = ns.hackAnalyzeSecurity(hackThreads);\\n    let weakenThreads = 0;\\n    let targetDelta = Math.max(growSecurityDelta, hackSecurityDelta);\\n    // pin targetDelta to 100 to prevent infinity\\n    if (targetDelta > 100)\\n        targetDelta = 100;\\n    while (ns.weakenAnalyze(weakenThreads) < targetDelta) {\\n        await ns.sleep(1);\\n        weakenThreads += 1;\\n        // ns.clearLog();\\n        // ns.print(`Calculating Weaken Threads: ${weakenThreads}`);\\n        // ns.print(\\n        //   `${weakenThreads} threads will cut security by ${ns.weakenAnalyze(\\n        //     weakenThreads\\n        //   )}`\\n        // );\\n        // ns.print(`Target security is ${targetDelta}`);\\n    }\\n    // ns.print(`Preparing ${target} for hacking...`);\\n    // ns.print(\\\"Growing...\\\");\\n    await killMsg(ns, \\\"hack\\\", target);\\n    ns.run(spawnerName, 1, \\\"grow\\\", target, growThreads, bufferTime);\\n    ns.run(spawnerName, 1, \\\"weaken\\\", target, weakenThreads, bufferTime);\\n    while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n        expandServer(ns);\\n        if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n            await purchaseServers(ns);\\n        else\\n            await upgradeServers(ns);\\n        await commitCrime(ns);\\n    }\\n    // ns.kill(growPid);\\n    await killMsg(ns, \\\"grow\\\", target);\\n    // ns.print(\\\"Weakening...\\\");\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n        expandServer(ns);\\n        if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n            await purchaseServers(ns);\\n        else\\n            await upgradeServers(ns);\\n        await commitCrime(ns);\\n    }\\n    // ns.kill(weakenPid);\\n    await killMsg(ns, \\\"weaken\\\", target);\\n}\\nasync function killMsg(ns, cmd, target) {\\n    kill(ns, (ps) => {\\n        if (ps.filename === spawnerName &&\\n            ps.args.includes(cmd) &&\\n            ps.args.includes(target))\\n            return true;\\n        if (ps.filename.includes(cmd) && ps.args.includes(target))\\n            return true;\\n        return false;\\n    });\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\nfunction totalRAM(ns) {\\n    let total = 0;\\n    for (const { hostname } of getRunnableServers(ns)) {\\n        const host = hostname;\\n        total += ns.getServerMaxRam(host);\\n    }\\n    return total - ns.getServerUsedRam(\\\"home\\\");\\n}\\n\",\"filename\":\"/batching/batch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"purchase.js\",\"url\":\"blob:file:///10a83a78-b610-4d22-bd8c-59efac5fff49\",\"moduleSequenceNumber\":2929},{\"filename\":\"/actions/crime.js\",\"url\":\"blob:file:///e0cd1602-422f-4acc-9cf9-00cad1bcefc4\",\"moduleSequenceNumber\":2399},{\"filename\":\"expandServer.js\",\"url\":\"blob:file:///d5ff768c-4ef2-4bba-a84d-7794579ed1ca\",\"moduleSequenceNumber\":2927},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///69f1a2cf-b243-459d-af0d-b6d192db1d9a\",\"moduleSequenceNumber\":2491},{\"filename\":\"ps.js\",\"url\":\"blob:file:///44ff27e8-f589-49c1-a0f2-da9cd2f805f4\",\"moduleSequenceNumber\":2529},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///276cfbba-06ba-42d4-ae58-9500ff6de7fe\",\"moduleSequenceNumber\":2487},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///525a1dc2-4c40-4ffe-8fdd-54d4b14693e0\",\"moduleSequenceNumber\":2491},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///0bbb3682-09dc-4d25-a931-fb770b2b84c0\",\"moduleSequenceNumber\":2493},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///6833f792-cec2-4149-9661-af39b0204d7f\",\"moduleSequenceNumber\":2505},{\"filename\":\"/batching/runSpawner.js\",\"url\":\"blob:file:///6467ff33-e084-456e-8671-adbde374c1d4\",\"moduleSequenceNumber\":2413},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///16b2f783-5130-4876-a7dc-1f9e64c5a196\",\"moduleSequenceNumber\":2929},{\"filename\":\"factionWatch.js\",\"url\":\"blob:file:///6fc9bdfe-eae2-4ba2-aa10-9fa92c62c305\",\"moduleSequenceNumber\":2928},{\"filename\":\"/actions/crime.js\",\"url\":\"blob:file:///aefc1f3d-c51a-43fe-bde2-831d3a82e7e3\",\"moduleSequenceNumber\":2399},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///7bd3f713-af32-4448-b4a7-5e812b1afc05\",\"moduleSequenceNumber\":2487},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///2a061dc5-e5e2-44e6-add5-c59eaad57613\",\"moduleSequenceNumber\":2491},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///7b4f9876-9e78-47c1-bff2-045f35178198\",\"moduleSequenceNumber\":2493},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///45b54e9f-8b46-4a8d-9640-bad1d2fb5305\",\"moduleSequenceNumber\":2505},{\"filename\":\"/ui/monitor.js\",\"url\":\"blob:file:///e31f5a76-e61b-4ec4-a717-b701839f0ae1\",\"moduleSequenceNumber\":2933},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///92c6fb27-4431-40a6-93d7-141530be08d3\",\"moduleSequenceNumber\":2487},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///2b34fbf6-1ab3-4938-948f-83823ce68ffd\",\"moduleSequenceNumber\":2491},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///5aa613dc-1c01-43d6-ade2-fbb01a3c79c5\",\"moduleSequenceNumber\":2493},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///d3e33d44-2053-4005-96f7-b4475e41e533\",\"moduleSequenceNumber\":2505},{\"filename\":\"/batching/runSpawner.js\",\"url\":\"blob:file:///ce42cdbc-4261-4609-bb7e-627d967bd0d7\",\"moduleSequenceNumber\":2413},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///f95b0662-dcb8-4203-b5e2-16caa7946f3c\",\"moduleSequenceNumber\":2491},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///a18c4df0-d200-4b04-a3f3-4e90a9c8b02e\",\"moduleSequenceNumber\":2489},{\"filename\":\"/batching/prepBatch.js\",\"url\":\"blob:file:///31407c6e-1efc-47a3-a6b6-23af0d6f1ae6\",\"moduleSequenceNumber\":2411},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///b3b2e15a-106d-4475-84e0-2b7a38b4b0bc\",\"moduleSequenceNumber\":2491},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///76027995-9459-48e0-855f-62c4bdbb251c\",\"moduleSequenceNumber\":2489},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///9f480cde-50c3-47a0-8a98-57a1f786f8c2\",\"moduleSequenceNumber\":2487},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///764e20b5-db15-40e6-a2ae-60dd9fc25a54\",\"moduleSequenceNumber\":2491},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///74194a9b-c70b-457a-ae0f-5bb8f48ef353\",\"moduleSequenceNumber\":2493},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///55faf722-cca3-4974-bcf4-44b308638d4c\",\"moduleSequenceNumber\":2505},{\"filename\":\"/batching/batch.js\",\"url\":\"blob:file:///7fe57980-9c75-4178-aa0c-134a4ef40226\",\"moduleSequenceNumber\":14323}],\"dependents\":[],\"ramUsage\":68.85,\"server\":\"home\",\"moduleSequenceNumber\":114432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///87d53291-ed29-4c19-adea-5adacc54ddbf\",\"moduleSequenceNumber\":147395}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":114436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///395e64a4-fb68-465c-b336-83c3fc13258d\",\"moduleSequenceNumber\":147393}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":114438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { kill } from \\\"utils/scriptKilling\\\";\\nimport { runSpawner, spawnerName } from \\\"batching/runSpawner\\\";\\nimport { monitor } from \\\"ui/monitor\\\";\\nimport { commitCrime } from \\\"actions/crime\\\";\\nimport { factionWatch } from \\\"factionWatch\\\";\\nimport { purchaseServers, upgradeServers } from \\\"purchase\\\";\\nconst bufferTime = 3000;\\nconst growMultiplier = 4;\\nconst analyzeScript = \\\"/analyzeServer.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"exec\\\");\\n    ns.enableLog(\\\"run\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This will continuously prepare a server untill it's money is at maximum and it's security is at minimum.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET\\n      `);\\n        return;\\n    }\\n    // analyze the server\\n    ns.run(analyzeScript, 1, target, `Batch attack!`);\\n    await prepBatch(ns, target);\\n}\\nexport async function prepBatch(ns, target) {\\n    // now find the required number of threads for each action.\\n    const growThreads = Math.ceil(ns.growthAnalyze(target, growMultiplier));\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    let weakenThreads = 0;\\n    let targetDelta = growSecurityDelta;\\n    // pin targetDelta to 100 to prevent infinity\\n    if (targetDelta > 100)\\n        targetDelta = 100;\\n    ns.clearLog();\\n    while (ns.weakenAnalyze(weakenThreads) < targetDelta) {\\n        ns.tail();\\n        monitor(ns, ns.getServer(target));\\n        factionWatch(ns);\\n        if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n            await purchaseServers(ns);\\n        else\\n            await upgradeServers(ns);\\n        await commitCrime(ns);\\n        weakenThreads += 1;\\n        ns.print(`Calculating Weaken Threads: ${weakenThreads}`);\\n        ns.print(`${weakenThreads} threads will cut security by ${ns.weakenAnalyze(weakenThreads)}`);\\n        ns.print(`Target security is ${targetDelta}`);\\n    }\\n    ns.clearLog();\\n    // calculate timing\\n    const { hackTime, growTime, weakenTime } = getTiming(ns, target);\\n    // sanity check\\n    if (hackTime > growTime || hackTime > weakenTime || growTime > weakenTime) {\\n        ns.tprint(`Something screwy going on with ${target} timing`);\\n        return;\\n    }\\n    ns.print(\\\"Preparing...\\\");\\n    await runSpawner(ns, \\\"weaken\\\", target, weakenThreads, bufferTime);\\n    ns.clearLog();\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n        ns.tail();\\n        monitor(ns, ns.getServer(target));\\n        factionWatch(ns);\\n        if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n            await purchaseServers(ns);\\n        else\\n            await upgradeServers(ns);\\n        await commitCrime(ns);\\n    }\\n    ns.clearLog();\\n    await runSpawner(ns, \\\"grow\\\", target, growThreads, bufferTime);\\n    ns.clearLog();\\n    while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n        ns.tail();\\n        monitor(ns, ns.getServer(target));\\n        factionWatch(ns);\\n        if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n            await purchaseServers(ns);\\n        else\\n            await upgradeServers(ns);\\n        await commitCrime(ns);\\n    }\\n    ns.clearLog();\\n    kill(ns, (ps) => (ps.filename === spawnerName && ps.args.includes(target)) ||\\n        (ps.filename.includes(\\\"grow\\\") && ps.args.includes(target)) ||\\n        (ps.filename.includes(\\\"weaken\\\") && ps.args.includes(target)));\\n}\\nfunction getTiming(ns, target) {\\n    let hackTime = 1;\\n    let growTime = 1;\\n    let weakenTime = 1;\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n        const server = ns.getServer(target);\\n        server.hackDifficulty = server.minDifficulty;\\n        const player = ns.getPlayer();\\n        hackTime = ns.formulas.hacking.hackTime(server, player);\\n        growTime = ns.formulas.hacking.growTime(server, player);\\n        weakenTime = ns.formulas.hacking.weakenTime(server, player);\\n    }\\n    else {\\n        hackTime = ns.getHackTime(target);\\n        growTime = ns.getGrowTime(target);\\n        weakenTime = ns.getWeakenTime(target);\\n    }\\n    return { hackTime, growTime, weakenTime };\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\n\",\"filename\":\"/batching/prepBatch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":59.8,\"server\":\"home\",\"moduleSequenceNumber\":114440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"cnct\\\";\\nexport const spawnerName = \\\"/batching/spawner.js\\\";\\nexport async function runSpawner(ns, cmd, target, threads, bufferTime, index = 0) {\\n    let host = getRunnableServers(ns)[0];\\n    await ns.scp(spawnerName, \\\"home\\\", host.hostname);\\n    if (!ns.exec(spawnerName, host.hostname, 1, cmd, target, threads, bufferTime, index))\\n        ns.tprint(`ERROR! unable to run spawner on host: ${host.hostname}`);\\n}\\n\",\"filename\":\"/batching/runSpawner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":114442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4a312dd5-3afa-4839-a65b-ba3eb353383a\",\"moduleSequenceNumber\":115353}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"home\",\"moduleSequenceNumber\":115353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7cad9841-1702-4630-a433-24d4b6e3dcf6\",\"moduleSequenceNumber\":414238}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":114446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   let data = ns.args\\n//     .join(\\\" \\\")\\n//     .split(\\\" \\\")\\n//     .map((s) => parseInt(s));\\n//   // data = [0, 5, 3, 10, 0, 3, 10, 0, 4, 6, 6, 0, 0, 7, 0, 1, 1];\\n//   ns.tprint(solveJump(data));\\n//   ns.print(solveJump(data));\\n// }\\n//\\n// Array Jumping Game\\n//\\n// You are attempting to solve a Coding Contract. You have 1 tries remaining, after which the contract will self-destruct.\\n//\\n// You are given the following array of integers:\\n//\\n// 0,5,3,10,0,3,10,0,4,6,6,0,0,7,0,1,1 => 0\\n// 7,1,3,0,0,4,1,5,0,4,6,8,0,0,7,6,0,2,5,4,0=> 1\\n//\\n// Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n.\\n//\\n// Assuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\n//\\n// Your answer should be submitted as 1 or 0, representing true and false respectively\\nexport function solveJump(data) {\\n    if (data.length === 0)\\n        return 1;\\n    const maxJump = data[0];\\n    if (maxJump === 0)\\n        return 0;\\n    if (maxJump >= data.length)\\n        return 1;\\n    // find the best jump and solve it.\\n    let bestJump = [1, 1];\\n    for (let i = 1; i <= maxJump; i++) {\\n        const nextMax = data[i];\\n        const jumpValue = nextMax + i + 1;\\n        if (jumpValue >= data.length)\\n            return 1;\\n        if (jumpValue > bestJump[1])\\n            bestJump = [i, jumpValue];\\n    }\\n    return solveJump(data.slice(bestJump[0]));\\n}\\n\",\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":114448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//GREATEST FACTOR\\nexport function factor(num) {\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\n        if (num % div != 0) {\\n            continue;\\n        }\\n        num = num / div;\\n        div = 1;\\n    }\\n    return num;\\n}\\n\",\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":114450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//Find All Valid Math Expressions\\n// You are attempting to solve a Coding Contract. You have 10 tries remaining, after which the contract will self-destruct.\\n// You are given the following string which contains only digits between 0 and 9:\\n// 288074550300\\n// You are also given a target number of 99. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\n// The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\n// [\\\"288074550300\\\", 99]\\n// NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\"1+01\\\" is not a valid expression Examples:\\n// Input: digits = \\\"123\\\", target = 6\\n// Output: [1+2+3, 1*2*3]\\n// Input: digits = \\\"105\\\", target = 5\\n// Output: [1*0+5, 10-5]\\n//\\nexport async function main(ns) {\\n    const testData = [\\\"288074550300\\\", 99];\\n    ns.tprint(await findMathExpression(ns, testData));\\n}\\n// TODO: Fix this as it freezes the ui.\\nexport async function findMathExpression(ns, data) {\\n    const digits = data[0].split(\\\"\\\");\\n    // [1, 2, 3, 4, 5]\\n    const operators = [\\\"+\\\", \\\"-\\\", \\\"*\\\", \\\"\\\"];\\n    // [+, -, *, ]\\n    let expressions = [digits[0], \\\"-\\\" + digits[0]].flatMap((d) => operators.map((op) => d + op));\\n    // [1+, 1-, 1*, 1, -1+, -1-, -1*, -1]\\n    for (let i = 1; i < digits.length - 1; i++) {\\n        await ns.sleep(1);\\n        expressions = expressions.flatMap((e) => operators.map((op) => e + digits[i] + op));\\n        // [1+2+, 1+2-, 1+2*, 1+2, 1-2+, ...]\\n    }\\n    let finalExpressions = [];\\n    for (const e of expressions.map((e) => e + digits[digits.length - 1])) {\\n        await ns.sleep(1);\\n        try {\\n            if (eval(e) === data[1])\\n                finalExpressions.push(e);\\n        }\\n        catch (e) {\\n            continue;\\n        }\\n    }\\n    return finalExpressions;\\n}\\nexport async function _findMathExpression(ns, data) {\\n    const digits = data[0].split(\\\"\\\");\\n    const operators = [\\\"+\\\", \\\"-\\\", \\\"*\\\", \\\"\\\"];\\n    let expressions = [digits[0], \\\"-\\\" + digits[0]].flatMap((d) => operators.map((op) => d + op));\\n    for (let i = 1; i < digits.length - 1; i++) {\\n        await ns.sleep(30);\\n        expressions = expressions.flatMap((e) => operators.map((op) => e + digits[i] + op));\\n    }\\n    return expressions\\n        .map((e) => e + digits[digits.length - 1])\\n        .filter((e) => {\\n        try {\\n            return eval(e) === data[1];\\n        }\\n        catch (e) {\\n            return false;\\n        }\\n    });\\n}\\n\",\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":114452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//GENERATE IP ADDRESSES\\nexport function generateIps(num) {\\n    num = num.toString();\\n    const length = num.length;\\n    let ips = [];\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length),\\n                ];\\n                let isValid = true;\\n                ip.forEach((seg) => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n                if (isValid)\\n                    ips.push(ip.join(\\\".\\\"));\\n            }\\n        }\\n    }\\n    return ips;\\n}\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\")\\n        return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255)\\n        return false;\\n    return true;\\n}\\n\",\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":114454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export * from \\\"contracts/solvers/totalWaysToSum.js\\\";\\nexport * from \\\"contracts/solvers/arrayJumpingGame.js\\\";\\nexport * from \\\"contracts/solvers/solveSum.js\\\";\\nexport * from \\\"contracts/solvers/mergeOverlap.js\\\";\\nexport * from \\\"contracts/solvers/spiral.js\\\";\\nexport * from \\\"contracts/solvers/factor.js\\\";\\nexport * from \\\"contracts/solvers/generateIps.js\\\";\\nexport * from \\\"contracts/solvers/uniquePaths.js\\\";\\nexport * from \\\"contracts/solvers/triangleSum.js\\\";\\nexport * from \\\"contracts/solvers/stockSolver.js\\\";\\nexport * from \\\"contracts/solvers/sanitizeParentheses.js\\\";\\nexport * from \\\"contracts/solvers/findMathExpressions.js\\\";\\n\",\"filename\":\"/contracts/solvers/index.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":114456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Merge Overlapping Intervals\\nexport function mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\n\",\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":114458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   let data = \\\"((a(a)(()(((a)a)))((\\\";\\n//   // data = ns.args[0].toString();\\n//   ns.tprint(sanitizeParentheses(data));\\n//   ns.print(sanitizeParentheses(data));\\n// }\\n// Given a string:\\n//\\n// ie.: '((a(a)(()(((a)a)))((' => [a(a)(()(((a)a))),(aa)(()(((a)a))),(a(a)()(((a)a))),(a(a)(()((a)a))),((aa)()(((a)a))),((aa)(()((a)a))),((a(a))(((a)a))),((a(a)()((a)a))),((a(a)(()(a)a)))]\\n//\\n// remove the minimum number of invalid parentheses in order to validate the\\n// string. If there are multiple ways to validate the string, provide all of the\\n// possible results. The answer should be provided as an array of strings. If it\\n// is impossible to validate the string the result should be an array with only\\n// an empty string.\\nexport function sanitizeParentheses(data) {\\n    var solution = Sanitize(data);\\n    if (solution == null) {\\n        return '[\\\"\\\"]';\\n    }\\n    else {\\n        return \\\"[\\\" + solution.join(\\\",\\\") + \\\"]\\\";\\n    }\\n}\\nfunction Sanitize_removeOneParth(item) {\\n    var possibleAnswers = [];\\n    for (let i = 0; i < item.length; i++) {\\n        if (item[i].toLowerCase().indexOf(\\\"(\\\") === -1 &&\\n            item[i].toLowerCase().indexOf(\\\")\\\") === -1) {\\n            continue;\\n        }\\n        let possible = item.substring(0, i) + item.substring(i + 1);\\n        possibleAnswers.push(possible);\\n    }\\n    return possibleAnswers;\\n}\\nfunction Sanitize_isValid(item) {\\n    var unclosed = 0;\\n    for (var i = 0; i < item.length; i++) {\\n        if (item[i] == \\\"(\\\") {\\n            unclosed++;\\n        }\\n        else if (item[i] == \\\")\\\") {\\n            unclosed--;\\n        }\\n        if (unclosed < 0) {\\n            return false;\\n        }\\n    }\\n    return unclosed == 0;\\n}\\nfunction Sanitize(data) {\\n    var currentPossible = [data];\\n    for (var i = 0; i < currentPossible.length; i++) {\\n        var newPossible = new Set();\\n        for (var j = 0; j < currentPossible.length; j++) {\\n            let newRemovedPossible = Sanitize_removeOneParth(currentPossible[j]);\\n            for (let item of newRemovedPossible) {\\n                newPossible.add(item);\\n            }\\n        }\\n        var validBoolList = [];\\n        for (const item of newPossible) {\\n            validBoolList.push(Sanitize_isValid(item));\\n        }\\n        if (validBoolList.includes(true)) {\\n            let finalList = [];\\n            newPossible = [...newPossible];\\n            for (var j = 0; j < validBoolList.length; j++) {\\n                if (validBoolList[j]) {\\n                    finalList.push(newPossible[j]);\\n                }\\n            }\\n            finalList = new Set(finalList);\\n            return [...finalList];\\n        }\\n        currentPossible = [...newPossible];\\n    }\\n    return null;\\n}\\n\",\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":114460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function solveSum(data) {\\n    const arrLength = data.length;\\n    let maxSum = -Infinity;\\n    for (let i = 0; i < arrLength; i++) {\\n        const sub = data.slice(0, i + 1);\\n        for (let j = 0; j < sub.length; j++) {\\n            const sub2 = sub.slice(j, sub.length);\\n            // ns.tprint(`i ${i} j ${j} ${JSON.stringify(sub)} ${JSON.stringify(sub2)}`);\\n            const sum = sub2.reduce((prev, cur) => (prev += cur), 0);\\n            if (sum > maxSum)\\n                maxSum = sum;\\n            // ns.tprint(`${sum}: ${sub2}`);\\n        }\\n    }\\n    return maxSum;\\n}\\n\",\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":114462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//SPIRALIZE Matrix\\nexport function spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift() || []);\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat((arr.pop() || []).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\nfunction column(arr, index) {\\n    let res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n\",\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":114464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function maxProfit(arrayData) {\\n    let i, j, k;\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n    // WHY?\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n    let highestProfit = JSON.parse(tempArr);\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) {\\n            // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) {\\n                // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\",\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":114466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   let data = 60;\\n//   // data = ns.args[0] as number;\\n//   ns.tprint(totalWaysToSum(data));\\n//   ns.print(totalWaysToSum(data));\\n// }\\n// Total Ways to Sum\\n// You are attempting to solve a Coding Contract. You have 10 tries remaining,\\n// after which the contract will self-destruct.\\n//\\n// It is possible write four as a sum in exactly four different ways:\\n//     3 + 1\\n//     2 + 2\\n//     2 + 1 + 1\\n//     1 + 1 + 1 + 1\\n//\\n//  How many different ways can the given number be written as a sum of at least\\n//  two positive integers?\\n//\\n//  60 => 966466\\nexport function totalWaysToSum(data) {\\n    let N = data;\\n    let K = data - 1;\\n    // Initialize a list\\n    let dp = Array.from({ length: N + 1 }, () => 0);\\n    // Update dp[0] to 1\\n    dp[0] = 1;\\n    // Iterate over the range [1, K + 1]\\n    for (let row = 1; row < K + 1; row++) {\\n        // Iterate over the range [1, N + 1]\\n        for (let col = 1; col < N + 1; col++) {\\n            // If col is greater\\n            // than or equal to row\\n            if (col >= row)\\n                // Update current\\n                // dp[col] state\\n                dp[col] = dp[col] + dp[col - row];\\n        }\\n    }\\n    // Return the total number of ways\\n    return dp[N];\\n}\\n// Total Ways to Sum II\\n// You are attempting to solve a Coding Contract. You have 10 tries remaining, after which the contract will self-destruct.\\n//\\n//\\n// How many different distinct ways can the number 37 be written as a sum of integers contained in the set:\\n//\\n// [1,2,4,5,6,7,8,12,14,15]?\\n//\\n// You may use each integer in the set zero or more times.\\nexport function totalWaysToSum2(data) {\\n    const target = data[0];\\n    const input = data[1].sort();\\n    // dp -> Data points that hold the total ways to sum for each of the inputs.\\n    let dp = Array.from({ length: input.length }, () => 1);\\n    let total = 0;\\n    for (let i = 0; i < dp.length; i++) {\\n        // iterate through each data point\\n        // to see if any input[j] + input[k] === input[i]\\n        // then dp[i]+= dp[j] + dp[k];\\n        for (let j = 0; j < i; j++) {\\n            for (let k = 0; k < i; k++) {\\n                if (input[j] + input[k] === input[i])\\n                    dp[i] += dp[j] + dp[k];\\n                if (input[j] + input[k] === target)\\n                    total += dp[j] + dp[k];\\n            }\\n        }\\n    }\\n    // Return the total number of ways\\n    return total;\\n}\\n\",\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":114468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   const data = [\\n//     [9],\\n//     [3, 3],\\n//     [1, 5, 1],\\n//     [6, 9, 4, 1],\\n//     [8, 9, 1, 4, 3],\\n//     [6, 2, 5, 5, 8, 2],\\n//     [6, 3, 6, 2, 7, 5, 1],\\n//     [9, 8, 2, 4, 5, 2, 3, 7],\\n//   ];\\n//   ns.tprint(triangleSum(data));\\n//   ns.print(triangleSum(data));\\n// }\\n//\\n//Minimum Path Sum in a Triangle\\n// You are attempting to solve a Coding Contract. You have 10 tries remaining, after which the contract will self-destruct.\\n// Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\n// [\\n//          [9],\\n//         [3,3],\\n//        [1,5,1],\\n//       [6,9,4,1],\\n//      [8,9,1,4,3],\\n//     [6,2,5,5,8,2],\\n//    [6,3,6,2,7,5,1],\\n//   [9,8,2,4,5,2,3,7]\\n// ] => 23\\n// Example: If you are given the following triangle:\\n// [\\n//      [2],\\n//     [3,4],\\n//    [6,5,7],\\n//   [4,1,8,3]\\n// ]\\n// The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\n//\\n//\\nexport function triangleSum(arrayData) {\\n    let triangle = arrayData;\\n    let nextArray = [];\\n    let previousArray = triangle[0];\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            }\\n            else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            }\\n            else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n        }\\n        previousArray = nextArray;\\n    }\\n    return Math.min.apply(null, nextArray);\\n}\\n\",\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":114470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//UNIQUE PATHS IN A GRID//UNIQUE PATHS IN A GRID\\nexport function uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\n}\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\nexport function uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n            if (grid[i][j] == 1 &&\\n                (!ignoreFirst || i != 0 || j != 0) &&\\n                (!ignoreLast || i != grid.length - 1 || j != grid[i].length - 1)) {\\n                let newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n    }\\n    return totalPossiblePaths;\\n}\\n\",\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":114472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nimport { displayContract } from \\\"contracts/probe\\\";\\nconst minuteInterval = 2;\\nfunction getAllServers(ns) {\\n    const tree = new ServerTree(ns);\\n    return tree.home.list();\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will automatically list contracts that it finds on the network.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let contracts;\\n    function refreshLog() {\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(\\\"Contracts\\\");\\n        ns.print(\\\"=========\\\");\\n        for (const [c, s] of contracts)\\n            ns.print(displayContract(ns, c, s));\\n        ns.print(\\\"=========\\\");\\n    }\\n    while (true) {\\n        // await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\n        let servers = [];\\n        contracts = getAllServers(ns).flatMap((server) => {\\n            const onServer = ns\\n                .ls(server.hostname, \\\".cct\\\")\\n                .map((cct) => [cct, server.hostname]);\\n            return onServer;\\n        });\\n        for (const s of servers) {\\n            await ns.scp(\\\"/contracts/probe.js\\\", \\\"home\\\", s);\\n        }\\n        servers = [];\\n        if (contracts.length > 0)\\n            refreshLog();\\n        await ns.sleep(1);\\n    }\\n}\\n\",\"filename\":\"/contracts/list.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/probe.js\",\"url\":\"blob:file:///188be849-061b-4fa6-a5b5-6708157d7b4e\",\"moduleSequenceNumber\":470},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///8eeb8bb9-d902-4710-9b76-234117905e2e\",\"moduleSequenceNumber\":446},{\"filename\":\"/contracts/list.js\",\"url\":\"blob:file:///7355e2f1-7e3c-4b98-a71a-51c69f5e3370\",\"moduleSequenceNumber\":792}],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"home\",\"moduleSequenceNumber\":114474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"codingcontract.getNumTriesRemaining\",\"cost\":2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { ServerNode } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will monitor for servers that need a backdoor installed.\\n      It will also nuke any server that needs it.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    const programs = new ProgramData(ns);\\n    while (true) {\\n        // 30 seconds should be a perfectly reasonable update time.\\n        await ns.sleep(30000);\\n        let servers = new ServerNode(ns);\\n        // find nukable servers.\\n        for (const server of servers\\n            .list()\\n            .filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts)) {\\n            // nuke them.\\n            ns.print(`nuking ${server.hostname}`);\\n            nuke(ns, server.hostname);\\n        }\\n        // clear the log.\\n        ns.clearLog();\\n        let backdoors = servers\\n            .list()\\n            .filter((s) => s.hasAdminRights &&\\n            !s.backdoorInstalled &&\\n            s.requiredHackingSkill < ns.getHackingLevel() &&\\n            s.hostname !== \\\"home\\\");\\n        // show the log if we have servers to backdoor\\n        if (backdoors.length === 0) {\\n            ns.print(\\\"No servers require a backdoor at this time.\\\");\\n            continue;\\n        }\\n        ns.tail();\\n        ns.print(`The following servers need to have the backdoor installed:`);\\n        ns.print(`==========================================================`);\\n        // find backdoorable servers.\\n        for (const server of backdoors) {\\n            // list them.\\n            ns.print(server.hostname);\\n        }\\n        ns.print(`==========================================================`);\\n    }\\n}\\n\",\"filename\":\"/phase1/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"home\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers, getRunnableServers } from \\\"cnct\\\";\\nimport { prepareServer as prepBatch } from \\\"batching/batchLite\\\";\\nimport { nukeAll } from \\\"nuker\\\";\\n// const hackScript = \\\"hack.js\\\";\\nconst weakenScript = \\\"weaken.js\\\";\\nconst growScript = \\\"grow.js\\\";\\nvar Phase;\\n(function (Phase) {\\n    Phase[\\\"Grow\\\"] = \\\"Grow\\\";\\n    Phase[\\\"Weaken\\\"] = \\\"Weaken\\\";\\n    Phase[\\\"Hack\\\"] = \\\"Hack\\\";\\n})(Phase || (Phase = {}));\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    ns.tail();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      Hacks the richest server from every available server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // first nuke everything\\n    await nukeAll(ns);\\n    // find the richest server.\\n    let richest = getHackableServers(ns)[0];\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    let phase = Phase.Weaken;\\n    async function runPhase(phase) {\\n        ns.print(`Starting ${phase} phase`);\\n        serverStatus(ns, richest.hostname);\\n        for (const server of getRunnableServers(ns)) {\\n            if (!server)\\n                continue;\\n            if (server.hostname !== \\\"home\\\")\\n                ns.killall(server.hostname);\\n            let currentScripts = [growScript, weakenScript];\\n            switch (phase) {\\n                case Phase.Grow:\\n                    await prepBatch(ns, richest.hostname);\\n                    break;\\n                case Phase.Weaken:\\n                    currentScripts = [weakenScript];\\n                    await prepBatch(ns, richest.hostname);\\n                    break;\\n                case Phase.Hack:\\n                    ns.spawn(\\\"batching/batchLite.js\\\", 1, richest.hostname);\\n            }\\n            await ns.scp(currentScripts, server.hostname);\\n            const currentScriptsRam = Sum(currentScripts.map((script) => ns.getScriptRam(script)));\\n            // calculate the maximum number of threads.\\n            let maxThreads = Math.floor(server.hostname === \\\"home\\\"\\n                ? server.maxRam -\\n                    server.ramUsed -\\n                    getReservedRam(ns) / currentScriptsRam\\n                : server.maxRam / currentScriptsRam);\\n            // hack the richest server\\n            if (maxThreads > 0)\\n                for (const script of currentScripts) {\\n                    ns.exec(script, server.hostname, maxThreads, richest.hostname);\\n                }\\n        }\\n    }\\n    while (phase !== Phase.Hack) {\\n        // copy the hack script to all the servers we have admin priveledges to.\\n        const oldPhase = phase;\\n        await runPhase(phase);\\n        while (phase === oldPhase) {\\n            await ns.sleep(1);\\n            ns.clearLog();\\n            ns.tail();\\n            ns.print(`Current phase: ${phase}`);\\n            serverStatus(ns, richest.hostname);\\n            // update the phase\\n            if (ns.getServerSecurityLevel(richest.hostname) >\\n                ns.getServerMinSecurityLevel(richest.hostname))\\n                phase = Phase.Weaken;\\n            else if (ns.getServerMoneyAvailable(richest.hostname) <\\n                ns.getServerMaxMoney(richest.hostname))\\n                phase = Phase.Grow;\\n            else\\n                phase = Phase.Hack;\\n        }\\n    }\\n    // Hack phase.\\n    await runPhase(Phase.Hack);\\n}\\nfunction getReservedRam(ns) {\\n    return Math.max(ns.getScriptRam(\\\"cnct.js\\\"), ns.getScriptRam(\\\"bkdr.js\\\"));\\n}\\nfunction serverStatus(ns, host) {\\n    const currentSecurity = ns.getServerSecurityLevel(host);\\n    const minSecurity = ns.getServerMinSecurityLevel(host);\\n    const currentCash = ns.getServerMoneyAvailable(host);\\n    const maxCash = ns.getServerMaxMoney(host);\\n    ns.print(`${host}:\\n  Cash: ${ns.nFormat(currentCash, \\\"$0.000a\\\")}/${ns.nFormat(maxCash, \\\"$0.000a\\\")}(${ns.nFormat(currentCash / maxCash, \\\"0.0%\\\")})\\n  Security: ${minSecurity} / ${currentSecurity} (${ns.nFormat(minSecurity / currentSecurity, \\\"0.0%\\\")})\\n  `);\\n}\\nfunction Sum(elements) {\\n    let total = 0;\\n    for (const e of elements) {\\n        total += e;\\n    }\\n    return total;\\n}\\n\",\"filename\":\"/phase1/basicHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///6c8a712e-f06e-4b01-a17b-8faea593321a\",\"moduleSequenceNumber\":411356},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///e6735a57-981e-4e58-bc33-0d7025a30774\",\"moduleSequenceNumber\":411360},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///ca084aec-00b3-4d94-b149-cb541b36b944\",\"moduleSequenceNumber\":411362},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///5ea55aca-e46e-4972-9a44-c770e349c1fd\",\"moduleSequenceNumber\":411374},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///32441f6f-1b38-41aa-9e47-809c0b6bdffa\",\"moduleSequenceNumber\":411360},{\"filename\":\"ps.js\",\"url\":\"blob:file:///08dfc588-b89f-437e-b5eb-302a057162be\",\"moduleSequenceNumber\":411398},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///4f5c04f7-dbb7-4d01-928e-56691b5f8395\",\"moduleSequenceNumber\":411356},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///dc724a88-c72d-4d0a-abea-2d813f2b58ea\",\"moduleSequenceNumber\":411360},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///61677eb4-a91b-49be-849f-faf4d3b2daa6\",\"moduleSequenceNumber\":411362},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///757b9507-def3-4725-a041-f4630d056a41\",\"moduleSequenceNumber\":411374},{\"filename\":\"/batching/runSpawner.js\",\"url\":\"blob:file:///f15121c3-7c73-439a-a844-5c310975e5e6\",\"moduleSequenceNumber\":411288},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///b2c0a7ae-e207-448b-a75a-ad6830d2f267\",\"moduleSequenceNumber\":411360},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///9e9279c5-56f1-4008-8192-8121e16dc412\",\"moduleSequenceNumber\":411358},{\"filename\":\"/batching/batchLite.js\",\"url\":\"blob:file:///6b05e07f-b4d0-4ed7-9e63-97e9a783245d\",\"moduleSequenceNumber\":411280},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///d760687b-375f-4eca-9283-38173d0c68eb\",\"moduleSequenceNumber\":411356},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///e28e41a4-bf4c-4b70-8c7b-daa8fe366ddf\",\"moduleSequenceNumber\":411360},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///a419df00-fa80-4110-aa4d-1d1eeeb0f95c\",\"moduleSequenceNumber\":411362},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///b61e3530-1f55-4209-b0a3-91b04cda3ac9\",\"moduleSequenceNumber\":411374},{\"filename\":\"/phase1/basicHack.js\",\"url\":\"blob:file:///36811d91-00ba-44b8-b840-0fa4fa3c3693\",\"moduleSequenceNumber\":411415}],\"dependents\":[],\"ramUsage\":17.6,\"server\":\"home\",\"moduleSequenceNumber\":114480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      Hacks the richest server using the rest of your RAM.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = getHackableServers(ns)[0];\\n    const hackScript = \\\"hack.js\\\";\\n    await prep(ns, richest.hostname);\\n    // await prepBatch(ns, richest.hostname);\\n    // calculate the maximum number of threads.\\n    let maxThreads = Math.floor((ns.getServerMaxRam(ns.getHostname()) -\\n        ns.getServerUsedRam(ns.getHostname()) +\\n        ns.getScriptRam(ns.getScriptName(), ns.getHostname())) /\\n        ns.getScriptRam(hackScript, ns.getHostname()));\\n    // hack the richest server\\n    if (maxThreads > 0)\\n        ns.spawn(hackScript, maxThreads, richest.hostname);\\n    else {\\n        ns.tprint(\\\"ERROR! Cannot spawn hack script. Out of memory.\\\");\\n    }\\n}\\nasync function prep(ns, host) {\\n    // first soften her up.\\n    while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n        await ns.weaken(host);\\n    // then grow her up\\n    while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host)) {\\n        await ns.grow(host);\\n        // while continuing to soften.\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n    }\\n}\\n\",\"filename\":\"/phase1/hackRichest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.9,\"server\":\"home\",\"moduleSequenceNumber\":114484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { getHackableServers, getRunnableServers } from \\\"cnct\\\";\\n// import { commitCrime } from \\\"actions/crime\\\";\\n// import { expandServer } from \\\"expandServer\\\";\\n// import { expandHacknet } from \\\"hacknet\\\";\\n// import { factionWatch } from \\\"factionWatch\\\";\\n// import { nukeAll } from \\\"nuker\\\";\\n// timing constants\\n// const second = 1000; //milliseconds\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\n// const hour = 60 * minutes;\\n// const hours = hour;\\n// const day = 24 * hours;\\n// const days = day;\\nconst phase2RAM = 500;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    if (getTotalRam(ns) > phase2RAM)\\n        ns.spawn(\\\"phase2/restart.js\\\");\\n    ns.spawn(\\\"/phase1/prepare.js\\\");\\n    // THIS IS GUARANTEED TO WORK ON A FRESH BITNODE\\n    // while (true) {\\n    //   // await cheapHack(ns);\\n    //   await commitCrime(ns);\\n    //   ns.clearLog();\\n    //   ns.tail();\\n    //   // monitor(ns);\\n    //   ns.print(\\n    //     `\\n    //     Hack Profit     : ${ns.nFormat(ns.getScriptIncome()[0], \\\"$0.0a\\\")} / sec.\\n    //     Hack XP         : ${ns.nFormat(ns.getScriptExpGain(), \\\"0.0a\\\")} / sec.\\n    //     Home RAM        : ${ns.nFormat(ns.getServerMaxRam(\\\"home\\\") * 1e9, \\\"0.0b\\\")}\\n    //     Servers Owned   : ${ns.getPurchasedServers().length}\\n    //     Total RAM       : ${ns.nFormat(getTotalRam(ns) * 1e9, \\\"0.0b\\\")}\\n    //     Phase 2 RAM     : ${ns.nFormat(phase2RAM * 1e9, \\\"0.0b\\\")}\\n    // `\\n    //   );\\n    //   expandServer(ns);\\n    //   // factionWatch(ns);\\n    //   expandHacknet(ns);\\n    //   if (getTotalRam(ns) > phase2RAM) ns.spawn(\\\"phase2/restart.js\\\");\\n    // }\\n}\\nfunction getTotalRam(ns) {\\n    let total = ns.getServerMaxRam(\\\"home\\\");\\n    for (const host of ns.getPurchasedServers()) {\\n        total += ns.getServerMaxRam(host);\\n    }\\n    return total;\\n}\\n// async function cheapHack(ns: NS) {\\n//   nukeAll(ns);\\n//   const target = getHackableServers(ns)[0];\\n//   if (target.hackDifficulty > target.minDifficulty)\\n//     await ns.weaken(target.hostname);\\n//   else if (target.moneyAvailable < target.moneyMax)\\n//     await ns.grow(target.hostname);\\n//   else await ns.hack(target.hostname);\\n// }\\n\",\"filename\":\"/phase1/restart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/phase1/restart.js\",\"url\":\"blob:file:///337baa25-81f7-4483-acb5-62f8ac2a4831\",\"moduleSequenceNumber\":16136}],\"dependents\":[],\"ramUsage\":5.9,\"server\":\"home\",\"moduleSequenceNumber\":114490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const scripts = [\\n    \\\"hacknet.js\\\",\\n    \\\"shareAll.js\\\",\\n    \\\"/contracts/list.js\\\",\\n    \\\"cnct.js\\\",\\n    \\\"backdoor.js\\\",\\n    \\\"programs.js\\\",\\n    \\\"/phase1/basicHack.js\\\",\\n    \\\"/stocks/start.js\\\",\\n    // `expandServer.js` and `actions/programming.js` is currently failing until we can level up Source File 4\\n    // '/expandServer.js',\\n    // '/actions/programming.js',\\n];\\nconst maxRam = 32e9;\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will test all phase 1 scripts memory requirements.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let pass = true;\\n    let failedScripts = [];\\n    for (const script of scripts) {\\n        const ram = ns.getScriptRam(script, \\\"home\\\") * 1e9;\\n        if (ram > maxRam) {\\n            pass = false;\\n            failedScripts.push(script);\\n            ns.tprint(`${script} requires ${ns.nFormat(ram, \\\"0.00b\\\")} RAM - that's too much!`);\\n        }\\n        else {\\n            ns.tprint(`${script} only requires ${ns.nFormat(ram, \\\"0.00b\\\")} RAM`);\\n        }\\n    }\\n    if (!pass) {\\n        ns.tprint(`FAIL! You still need to work on these scripts:\\n      ${failedScripts}`);\\n    }\\n    else {\\n        ns.tprint(\\\"SUCCESS!\\\");\\n    }\\n}\\n\",\"filename\":\"/phase1/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":114492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { ServerNode } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will monitor for servers that need a backdoor installed.\\n      It will also nuke any server that needs it.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    const programs = new ProgramData(ns);\\n    while (true) {\\n        // 30 seconds should be a perfectly reasonable update time.\\n        await ns.sleep(30000);\\n        let ownedServers = ns.getPurchasedServers();\\n        let servers = new ServerNode(ns);\\n        // find nukable servers.\\n        for (const server of servers\\n            .list()\\n            .filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts)) {\\n            // nuke them.\\n            ns.print(`nuking ${server.hostname}`);\\n            nuke(ns, server.hostname);\\n        }\\n        // clear the log.\\n        ns.clearLog();\\n        let backdoors = servers\\n            .list()\\n            .filter((s) => s.hasAdminRights &&\\n            !s.backdoorInstalled &&\\n            s.requiredHackingSkill < ns.getHackingLevel() &&\\n            s.hostname !== \\\"home\\\" &&\\n            !ownedServers.includes(s.hostname));\\n        // show the log if we have servers to backdoor\\n        if (backdoors.length === 0) {\\n            ns.print(\\\"No servers require a backdoor at this time.\\\");\\n            continue;\\n        }\\n        ns.tail();\\n        ns.print(`The following servers need to have the backdoor installed:`);\\n        ns.print(`==========================================================`);\\n        // find backdoorable servers.\\n        for (const server of backdoors) {\\n            // list them.\\n            ns.print(server.hostname);\\n        }\\n        ns.print(`==========================================================`);\\n    }\\n}\\n\",\"filename\":\"/phase2/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\n// - batchHack.js: This is your bread and butter batching script. It will calculate\\n//   the richest server that can be effectively hacked with the memory you have\\n//   available. Copy 'batch.js' to the source server and start a batch based\\n//   attack on the target server.\\nconst batchScript = \\\"/batching/batch.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will start your batch hacking.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // Find the richest server that we have enough memory to effectively\\n    // batch.\\n    const targetServer = await getTargetServer(ns);\\n    // start batching!\\n    if (!targetServer) {\\n        ns.tprint(\\\"Can't batch yet!\\\");\\n        return;\\n    }\\n    ns.tprint(`Hacking ${targetServer.hostname}`);\\n    ns.spawn(batchScript, 1, targetServer.hostname);\\n}\\nasync function getTargetServer(ns) {\\n    return getHackableServers(ns)[0];\\n}\\n\",\"filename\":\"/phase2/batchHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///f0fbbc19-05f8-41f8-a9a8-70e9caa02041\",\"moduleSequenceNumber\":2487},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///4c9b1854-3cfa-49d9-a771-52abd9e31e67\",\"moduleSequenceNumber\":2491},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///9b1a55b1-ca95-413b-94e3-2a2248ed9c40\",\"moduleSequenceNumber\":2493},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///2c3e5646-64d9-4c7a-b0f1-09ae5bc3cd2a\",\"moduleSequenceNumber\":2505},{\"filename\":\"/phase2/batchHack.js\",\"url\":\"blob:file:///12c186d8-57d2-476e-bcb3-67b3e41e7d5b\",\"moduleSequenceNumber\":2931}],\"dependents\":[],\"ramUsage\":13.05,\"server\":\"home\",\"moduleSequenceNumber\":114494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will run continuously and expand your server for you. It will\\n      only work with Source File 4.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMaxRam(\\\"home\\\") < 1e9) {\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeRamCost()) {\\n            ns.upgradeHomeRam();\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeCoresCost()) {\\n            ns.upgradeHomeCores();\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase2/expandServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.85,\"server\":\"home\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      Hacks the richest server using the rest of your RAM.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = undefined;\\n    for (const server of getHackableServers(ns)) {\\n        if (!richest || richest.moneyMax < server.moneyMax)\\n            richest = server;\\n    }\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    const hackScript = \\\"hack.js\\\";\\n    // calculate the maximum number of threads.\\n    let maxThreads = Math.floor((ns.getServerMaxRam(ns.getHostname()) -\\n        ns.getServerUsedRam(ns.getHostname()) +\\n        ns.getScriptRam(ns.getScriptName(), ns.getHostname())) /\\n        ns.getScriptRam(hackScript, ns.getHostname()));\\n    // hack the richest server\\n    if (maxThreads > 0)\\n        ns.spawn(hackScript, maxThreads, richest.hostname);\\n    else {\\n        ns.tprint(\\\"ERROR! Cannot spawn hack script. Out of memory.\\\");\\n    }\\n}\\n\",\"filename\":\"/phase2/hackRichest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.2,\"server\":\"home\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { ServerNode } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will monitor for servers that need a backdoor installed.\\n      It will also nuke any server that needs it.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    const programs = new ProgramData(ns);\\n    while (true) {\\n        // 30 seconds should be a perfectly reasonable update time.\\n        await ns.sleep(30000);\\n        let servers = new ServerNode(ns);\\n        // find nukable servers.\\n        for (const server of servers\\n            .list()\\n            .filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts)) {\\n            // nuke them.\\n            ns.print(`nuking ${server.hostname}`);\\n            nuke(ns, server.hostname);\\n        }\\n        // clear the log.\\n        ns.clearLog();\\n        let backdoors = servers\\n            .list()\\n            .filter((s) => s.hasAdminRights &&\\n            !s.backdoorInstalled &&\\n            s.requiredHackingSkill < ns.getHackingLevel() &&\\n            s.hostname !== \\\"home\\\" &&\\n            !ns.getPurchasedServers().includes(s.hostname));\\n        // show the log if we have servers to backdoor\\n        if (backdoors.length === 0) {\\n            ns.print(\\\"No servers require a backdoor at this time.\\\");\\n            continue;\\n        }\\n        ns.tail();\\n        ns.print(`The following servers need to have the backdoor installed:`);\\n        ns.print(`==========================================================`);\\n        // find backdoorable servers.\\n        for (const server of backdoors) {\\n            // list them.\\n            ns.print(server.hostname);\\n        }\\n        ns.print(`==========================================================`);\\n    }\\n}\\n\",\"filename\":\"/phase3/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\n// - batchHack.js: This is your bread and butter batching script. It will calculate\\n//   the richest server that can be effectively hacked with the memory you have\\n//   available. Copy 'batch.js' to the source server and start a batch based\\n//   attack on the target server.\\nconst batchScript = \\\"/batching/batch.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will start your batch hacking.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // Find the richest server that we have enough memory to effectively\\n    // batch.\\n    const targetServers = getTargetServers(ns);\\n    // start batching!\\n    if (!targetServers || targetServers.length === 0) {\\n        ns.tprint(\\\"Can't batch yet!\\\");\\n        return;\\n    }\\n    for (const targetServer of targetServers) {\\n        ns.tprint(`Hacking ${targetServer.hostname}`);\\n        ns.run(batchScript, 1, targetServer.hostname);\\n        while (ns.scriptRunning(batchScript, ns.getHostname()))\\n            await ns.sleep(1);\\n    }\\n}\\nfunction getTargetServers(ns) {\\n    // const numServers = ns.getPurchasedServers().length + 1;\\n    const numServers = 1;\\n    return getHackableServers(ns).slice(0, numServers);\\n}\\n\",\"filename\":\"/phase3/batchHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///385ef62b-0f5b-40f2-a409-b8f50ae6d993\",\"moduleSequenceNumber\":393615},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///f37124d6-a3a5-4236-bd24-066a54e72188\",\"moduleSequenceNumber\":393619},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///f96f00ea-927a-4e4c-ab02-064327837d38\",\"moduleSequenceNumber\":393621},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///6c6b09fa-63e9-4353-a3fd-038b373fb97b\",\"moduleSequenceNumber\":393633},{\"filename\":\"/phase3/batchHack.js\",\"url\":\"blob:file:///386ae7ee-26f5-4cb7-a437-6a030e3d76ab\",\"moduleSequenceNumber\":398075}],\"dependents\":[],\"ramUsage\":13.1,\"server\":\"home\",\"moduleSequenceNumber\":114498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will run continuously and expand your server for you. It will\\n      only work with Source File 4.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMaxRam(\\\"home\\\") < 1e9) {\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeRamCost()) {\\n            ns.upgradeHomeRam();\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeCoresCost()) {\\n            ns.upgradeHomeCores();\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase3/expandServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.85,\"server\":\"home\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      Hacks the richest server using the rest of your RAM.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = undefined;\\n    for (const server of getHackableServers(ns)) {\\n        if (!richest || richest.moneyMax < server.moneyMax)\\n            richest = server;\\n    }\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    const hackScript = \\\"hack.js\\\";\\n    // calculate the maximum number of threads.\\n    let maxThreads = Math.floor((ns.getServerMaxRam(ns.getHostname()) -\\n        ns.getServerUsedRam(ns.getHostname()) +\\n        ns.getScriptRam(ns.getScriptName(), ns.getHostname())) /\\n        ns.getScriptRam(hackScript, ns.getHostname()));\\n    // hack the richest server\\n    if (maxThreads > 0)\\n        ns.spawn(hackScript, maxThreads, richest.hostname);\\n    else {\\n        ns.tprint(\\\"ERROR! Cannot spawn hack script. Out of memory.\\\");\\n    }\\n}\\n\",\"filename\":\"/phase3/hackRichest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.2,\"server\":\"home\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\nimport { monitor } from \\\"ui/monitor\\\";\\nimport { nukeAll } from \\\"nuker\\\";\\nimport { installBackdoors } from \\\"backdoor\\\";\\nimport { createPrograms } from \\\"programs\\\";\\nimport { expandServer } from \\\"expandServer\\\";\\nimport { factionWatch } from \\\"factionWatch\\\";\\nimport { expandHacknet } from \\\"hacknet\\\";\\nimport { prepBatch } from \\\"batching/prepBatch\\\";\\nimport { batch } from \\\"batching/batch\\\";\\nimport { purchasePricey } from \\\"actions/augmentations\\\";\\nimport { commitCrime } from \\\"actions/crime\\\";\\nimport { manageStock } from \\\"stocks/start\\\";\\n// timing constants\\n// const second = 1000; //milliseconds\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\n// const hours = 60 * minutes;\\n// const hour = hours;\\n// const days = 24 * hours;\\n// const day = days;\\nconst scripts = [\\\"/contracts/start.js\\\"];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This is a simple script that restarts the automated scripts periodically.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    for (const script of scripts) {\\n        ns.run(script);\\n        // This delay is to keep the scripts from colliding.\\n        await ns.sleep(5000);\\n    }\\n    let target = getHackableServers(ns)[0].hostname;\\n    async function updateHack() {\\n        target = getHackableServers(ns)[0].hostname;\\n        await prepBatch(ns, target);\\n        await batch(ns, target);\\n    }\\n    await nukeAll(ns);\\n    await updateHack();\\n    while (true) {\\n        ns.clearLog();\\n        ns.tail();\\n        // Keep nuking servers\\n        await nukeAll(ns);\\n        // Buy or create any programs you may need.\\n        await createPrograms(ns);\\n        // update hack target if necessary\\n        if (getHackableServers(ns)[0].hostname !== target)\\n            await updateHack();\\n        // install backdoors to join any factions.\\n        await installBackdoors(ns);\\n        expandServer(ns);\\n        factionWatch(ns);\\n        await purchasePricey(ns);\\n        await manageStock(ns);\\n        expandHacknet(ns);\\n        monitor(ns);\\n        await commitCrime(ns);\\n        const owned = ns.singularity.getOwnedAugmentations(true);\\n        let shouldInstall = true;\\n        for (const faction of ns.getPlayer().factions) {\\n            for (const aug of ns.singularity.getAugmentationsFromFaction(faction)) {\\n                // if we don't have all augs don't install.\\n                if (!owned.includes(aug))\\n                    shouldInstall = false;\\n            }\\n        }\\n        if (shouldInstall)\\n            ns.singularity.installAugmentations(\\\"restart.js\\\");\\n    }\\n}\\n\",\"filename\":\"/phase3/restart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///c6ffecec-5776-4a56-841f-ed2e1641a8c6\",\"moduleSequenceNumber\":147334},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///a1924673-1773-4cae-9f24-9176f69f312a\",\"moduleSequenceNumber\":147338},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///62d6e301-5094-4394-9015-5c1ffcf23c52\",\"moduleSequenceNumber\":147340},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///900d94a0-97bd-4f52-b145-92de7d9430d7\",\"moduleSequenceNumber\":160877},{\"filename\":\"/ui/monitor.js\",\"url\":\"blob:file:///dd0e8887-1c22-44c3-a0bc-096ad4b5c7e7\",\"moduleSequenceNumber\":154794},{\"filename\":\"/phase3/restart.js\",\"url\":\"blob:file:///88f32f62-3734-485f-98cc-d1eed2c65db7\",\"moduleSequenceNumber\":162429}],\"dependents\":[],\"ramUsage\":166.4,\"server\":\"home\",\"moduleSequenceNumber\":114500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.installAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stock.purchaseWseAccount\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchaseTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketData\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketDataTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getFolio(ns) {\\n    const symbols = ns.stock.getSymbols();\\n    let folio = [];\\n    for (const sym of symbols) {\\n        const [shares] = ns.stock.getPosition(sym);\\n        if (shares > 0) {\\n            folio.push({ sym, shares });\\n        }\\n    }\\n    return folio;\\n}\\n\",\"filename\":\"/stocks/folio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":114502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolio } from \\\"stocks/folio\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.tail();\\n    ns.print(\\\"Liquidating assets.\\\");\\n    await liquidate(ns);\\n}\\nasync function liquidate(ns) {\\n    let folio = getFolio(ns);\\n    let total = 0;\\n    while (folio.length > 0) {\\n        ns.scriptKill(\\\"/stocks/start.js\\\", \\\"home\\\");\\n        await ns.sleep(1);\\n        ns.clearLog();\\n        for (const stock of folio) {\\n            const forecast = ns.stock.getForecast(stock.sym);\\n            if (forecast < 0.5) {\\n                // SELL!\\n                const sellPrice = ns.stock.sell(stock.sym, stock.shares);\\n                total += sellPrice;\\n                ns.print(`\\n          ${stock.sym} sold for ${sellPrice}\\n          `);\\n            }\\n            else {\\n                ns.print(`\\n          Waiting for ${stock.sym} to stop growing.\\n          `);\\n            }\\n        }\\n        folio = getFolio(ns);\\n    }\\n    ns.print(`All stocks sold for a total of ${total}`);\\n}\\n\",\"filename\":\"/stocks/liquidate.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stocks/folio.js\",\"url\":\"blob:file:///b8a1f31b-776d-4a7c-9c71-13acefe87331\",\"moduleSequenceNumber\":278605},{\"filename\":\"/stocks/liquidate.js\",\"url\":\"blob:file:///e9a844ae-7ca9-4e71-a5bb-8b19127054ec\",\"moduleSequenceNumber\":492159}],\"dependents\":[],\"ramUsage\":11.6,\"server\":\"home\",\"moduleSequenceNumber\":114504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// % of money to use in buying stocks\\n// const budget = 1;\\n// % at which to buy or sell stocks\\n// const buyAt = 60;\\n// Profit amount to sell the stock at.\\n// const sellAt = 10000000;\\n// TODO short stocks\\n// const shortAt = 40;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let stocks = ns.stock.getSymbols();\\n    for (let stock of stocks.sort((a, b) => ns.stock.getAskPrice(b) - ns.stock.getAskPrice(a))) {\\n        // let increaseChance = ns.stock.getForecast(stock) * 100;\\n        let askPrice = ns.stock.getAskPrice(stock);\\n        ns.tprint(`${stock} - ${ns.nFormat(askPrice, \\\"$0.0a\\\")}`);\\n    }\\n}\\n\",\"filename\":\"/stocks/listall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":114506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.tail();\\n    while (true) {\\n        ns.tail();\\n        ns.clearLog();\\n        let host = ns.args[0];\\n        if (host && ns.serverExists(host))\\n            monitor(ns, ns.getServer(host));\\n        else\\n            monitor(ns);\\n        await ns.sleep(1);\\n    }\\n}\\nfunction getTarget(ns) {\\n    return getHackableServers(ns)[0];\\n}\\nexport function monitor(ns, target = null) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const { hostname } = target || getTarget(ns);\\n    ns.print(`\\n  ScriptXP    : ${ns.nFormat(ns.getScriptExpGain(), \\\"0.0a\\\")} / sec.\\n  Cash/sec    : ${ns.nFormat(ns.getScriptIncome()[0], \\\"$0.0a\\\")} / sec.\\n  Total Cash  : ${ns.nFormat(ns.getScriptIncome()[1], \\\"$0.0a\\\")}\\n  TARGET      : ${hostname}\\n    `);\\n    const moneyAvailable = ns.getServerMoneyAvailable(hostname);\\n    const maxMoney = ns.getServerMaxMoney(hostname);\\n    const security = ns.getServerSecurityLevel(hostname);\\n    const minSecurity = ns.getServerMinSecurityLevel(hostname);\\n    const hackChance = ns.hackAnalyzeChance(hostname);\\n    const server = target || getTarget(ns);\\n    // always show the smallest time.\\n    server.hackDifficulty = server.minDifficulty;\\n    const player = ns.getPlayer();\\n    ns.print(`${hostname}:\\n    Security      : (${ns.nFormat(minSecurity / security, \\\"000.00%\\\")}) +${ns.nFormat(security - minSecurity, \\\"0.00a\\\")}\\n    Money         : (${ns.nFormat(moneyAvailable / maxMoney, \\\"000.00%\\\")}) ${ns.nFormat(moneyAvailable, \\\"$0.0a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.0a\\\")}\\n    Hack Chance   : ${ns.nFormat(hackChance, \\\"0.0%\\\")}\\n    Hack Time     : ${ns.tFormat(ns.formulas.hacking.hackTime(server, player))}\\n    Grow Time     : ${ns.tFormat(ns.formulas.hacking.growTime(server, player))}\\n    Waken Time    : ${ns.tFormat(ns.formulas.hacking.weakenTime(server, player))}\\n    `);\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\n\",\"filename\":\"/ui/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///4ef341f1-20e6-4852-8eb6-42b4da4618b6\",\"moduleSequenceNumber\":2487},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///7a6ab5ac-a143-4e76-8529-8b661d390973\",\"moduleSequenceNumber\":2491},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///cabad0ff-19b9-418b-91d1-e6eb6a05dc48\",\"moduleSequenceNumber\":2493},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///e650256a-7af8-464f-bc4e-e8de432a1db5\",\"moduleSequenceNumber\":2505},{\"filename\":\"/ui/monitor.js\",\"url\":\"blob:file:///f7c0e550-b890-473e-814d-c541b75a207d\",\"moduleSequenceNumber\":2933}],\"dependents\":[],\"ramUsage\":12.75,\"server\":\"home\",\"moduleSequenceNumber\":114510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolio } from \\\"stocks/folio\\\";\\n// % of money to use in buying stocks\\nconst budget = 0.5;\\n// % at which to buy or sell stocks\\nconst buyAt = 0.6;\\nconst sellBellow = 0.5;\\n// const shortAt = 0.4;\\n// const sellShortAt = 0.5;\\n// const stockToWatch = \\\"MGCP\\\"; // Megacorp\\n// TODO short stocks\\n// const shortAt = 40;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    while (await manageStock(ns)) {\\n        if (getFolio(ns).length > 0)\\n            ns.tail();\\n        showFolio(ns);\\n        await ns.sleep(1);\\n    }\\n}\\n/** @param {NS} ns **/\\nexport async function manageStock(ns) {\\n    try {\\n        if (!ns.stock.purchaseWseAccount() ||\\n            !ns.stock.purchaseTixApi() ||\\n            !ns.stock.purchase4SMarketData() ||\\n            !ns.stock.purchase4SMarketDataTixApi()) {\\n            ns.tprint(\\\"You need 4S Maket Data Api access to effectively trade stocks!\\\");\\n            return false;\\n        }\\n    }\\n    catch (error) {\\n        ns.tprint(\\\"You need 4S Maket Data Api access to effectively trade stocks!\\\");\\n        return false;\\n    }\\n    // let stock = stockToWatch;\\n    let folio = getFolio(ns);\\n    if (folio.length > 0) {\\n        // we have a stock - get it and monitor if it is increasing/decreasing\\n        for (const { sym, shares } of folio) {\\n            if (ns.stock.getPosition(sym)[0] > 0) {\\n                // we have stock in the long position\\n                let increaseChance = ns.stock.getForecast(sym);\\n                if (increaseChance <= sellBellow) {\\n                    let total = ns.stock.sell(sym, shares);\\n                    // ns.tail();\\n                    ns.print(`Sold:\\n          shares    : ${ns.nFormat(shares, \\\"0.00a\\\")} \\n          stock     : ${sym}\\n          total     : ${ns.nFormat(total * shares, \\\"$0.000a\\\")} \\n          increase%   : ${increaseChance.toLocaleString(undefined, {\\n                        style: \\\"percent\\\",\\n                    })}\\n            `);\\n                }\\n                else {\\n                    await ns.sleep(1);\\n                }\\n            }\\n        }\\n    }\\n    // buy any stocks that are increasing that we can offord\\n    for (const sym of ns.stock.getSymbols()) {\\n        let increaseChance = ns.stock.getForecast(sym);\\n        if (increaseChance >= buyAt) {\\n            buyStock(ns, sym);\\n        }\\n    }\\n    return true;\\n}\\nfunction buyStock(ns, sym) {\\n    let cashAvailable = ns.getServerMoneyAvailable(\\\"home\\\") * budget;\\n    let stockCost = ns.stock.getBidPrice(sym);\\n    let maxShares = ns.stock.getMaxShares(sym);\\n    let [ownedShares] = ns.stock.getPosition(sym);\\n    if (cashAvailable >= maxShares * stockCost &&\\n        ownedShares < ns.stock.getMaxShares(sym)) {\\n        ns.stock.buy(sym, maxShares - ownedShares);\\n        let increaseChance = ns.stock.getForecast(sym);\\n        ns.print(`Bought:\\n        shares      : ${ns.nFormat(maxShares, \\\"0.0a\\\")}\\n        stock       : ${sym} \\n        total       : ${ns.nFormat(stockCost * maxShares, \\\"$0.0a\\\")}\\n        increase%   : ${ns.nFormat(increaseChance, \\\"0.0%\\\")}\\n        `);\\n    }\\n}\\nfunction showFolio(ns) {\\n    ns.clearLog();\\n    for (const { sym, shares } of getFolio(ns)) {\\n        let [_, avgPrice] = ns.stock.getPosition(sym);\\n        let invested = shares * avgPrice;\\n        let currentWorth = ns.stock.getBidPrice(sym) * shares;\\n        ns.print(`${sym}:\\n      shares          : ${ns.nFormat(shares, \\\"0.0a\\\")}\\n      invested        : ${ns.nFormat(invested, \\\"$0.0a\\\")}\\n      worth           : ${ns.nFormat(currentWorth, \\\"$0.0a\\\")}\\n      profit          : ${ns.nFormat(currentWorth - invested, \\\"$0.0a\\\")}(${ns.nFormat((currentWorth - invested) / invested, \\\"0.0%\\\")})\\n      `);\\n    }\\n}\\nexport function getBestStock(ns) {\\n    let best = [\\\"\\\", 0];\\n    for (const stock of ns.stock.getSymbols()) {\\n        let increaseChance = ns.stock.getForecast(stock);\\n        if (increaseChance > best[1]) {\\n            best = [stock, increaseChance];\\n        }\\n    }\\n    return best[0];\\n}\\n\",\"filename\":\"/stocks/start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stocks/folio.js\",\"url\":\"blob:file:///068ef486-e941-4d22-81ca-397935dff705\",\"moduleSequenceNumber\":88144},{\"filename\":\"/stocks/start.js\",\"url\":\"blob:file:///59fd637d-cd74-4ceb-922b-bb395b4f9f3a\",\"moduleSequenceNumber\":88603}],\"dependents\":[],\"ramUsage\":27.2,\"server\":\"home\",\"moduleSequenceNumber\":114508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.purchaseWseAccount\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchaseTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketData\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketDataTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const keys = {\\n    serverNodes: \\\"ServerNodes\\\",\\n};\\n// localStorage Functions\\nexport function setItem(key, value) {\\n    localStorage.setItem(key, JSON.stringify(value));\\n}\\nexport function getItem(key) {\\n    JSON.parse(localStorage.getItem(key) || JSON.stringify(undefined));\\n}\\n\",\"filename\":\"/utils/localStorage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":114512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ProgramData } from \\\"utils/ProgramData\\\";\\nexport function nuke(ns, target) {\\n    const programs = new ProgramData(ns);\\n    for (const p of programs.programs) {\\n        if (p.exists)\\n            p.execute(target);\\n    }\\n    ns.nuke(target);\\n}\\n\",\"filename\":\"/utils/nuke.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":114514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ProgramData {\\n    constructor(ns) {\\n        this.programs = [\\n            {\\n                filename: \\\"BruteSSH.exe\\\",\\n                hackingLevel: 50,\\n                execute: ns.brutessh,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"FTPCrack.exe\\\",\\n                hackingLevel: 100,\\n                execute: ns.ftpcrack,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"relaySMTP.exe\\\",\\n                hackingLevel: 250,\\n                execute: ns.relaysmtp,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"HTTPWorm.exe\\\",\\n                hackingLevel: 500,\\n                execute: ns.httpworm,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"SQLInject.exe\\\",\\n                hackingLevel: 750,\\n                execute: ns.sqlinject,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n        ];\\n    }\\n    get hackablePorts() {\\n        let total = 0;\\n        for (const p of this.programs) {\\n            if (p.exists)\\n                total++;\\n        }\\n        return total;\\n    }\\n}\\n\",\"filename\":\"/utils/ProgramData.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":114516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\n// ONLY USE FOR TESTING\\nexport async function main(ns) {\\n    ns.tprint(`This script doesn't do anything right now. Call a function from it if you want to use it.`);\\n}\\nexport function kill(ns, predicate) {\\n    const tree = new ServerTree(ns);\\n    const processes = [];\\n    for (const server of tree.home.list()) {\\n        for (const ps of ns.ps(server.hostname)) {\\n            processes.push([ps, server.hostname]);\\n        }\\n    }\\n    for (const [ps, server] of processes) {\\n        if (predicate(ps, server))\\n            ns.kill(ps.pid);\\n    }\\n}\\n\",\"filename\":\"/utils/scriptKilling.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.5,\"server\":\"home\",\"moduleSequenceNumber\":114518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/utils/ServerTree.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":114520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function copyCmd(ns, cmd) {\\n    const terminalInput = document.getElementById(\\\"terminal-input\\\");\\n    if (!terminalInput) {\\n        ns.print(\\\"Couldn't get terminal-input field.\\\");\\n        return;\\n    }\\n    terminalInput.value = cmd;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({ target: terminalInput });\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\nexport function runCmd(ns, cmd) {\\n    copyCmd(ns, cmd);\\n    document.dispatchEvent(new KeyboardEvent(\\\"keydown\\\", { keyCode: 13 }));\\n}\\n\",\"filename\":\"/utils/terminal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":114522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const server = ns.args[0];\\n    if (args.help || !server) {\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    const msg = ns.args[1];\\n    const loop = ns.args[2];\\n    if (loop)\\n        await analyzeServerLoop(ns, server, msg);\\n    else\\n        analyzeServer(ns, server, msg);\\n}\\nexport function analyzeServer(ns, server, msg = \\\"\\\") {\\n    const ram = [ns.getServerMaxRam(server), ns.getServerUsedRam(server)];\\n    const money = ns.getServerMoneyAvailable(server);\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    const minSec = ns.getServerMinSecurityLevel(server);\\n    const sec = ns.getServerSecurityLevel(server);\\n    if (msg)\\n        ns.tprint(msg);\\n    ns.tprint(`    Hack Profit  : ${ns.nFormat(ns.getScriptIncome()[0], \\\"$0.000a\\\")} / sec.\\n    Hack XP      : ${ns.nFormat(ns.getScriptExpGain(), \\\"0.000a\\\")} / sec.`);\\n    ns.tprint(`\\n\\n${server}:\\n    RAM          : ${ram[1]} / ${ram[0]} (${(ram[1] / ram[0]) * 100}%)\\n    $            : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${((money / maxMoney) * 100).toFixed(2)}%)\\n    security     : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth       : ${ns.getServerGrowth(server)}\\n    hack time    : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time    : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time  : ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2      : ${ns.growthAnalyze(server, 2).toFixed(2)} threads\\n    grow x3      : ${ns.growthAnalyze(server, 3).toFixed(2)} threads\\n    grow x4      : ${ns.growthAnalyze(server, 4).toFixed(2)} threads\\n    hack 10%     : ${(0.1 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%     : ${(0.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%     : ${(0.5 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance   : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\\nexport async function analyzeServerLoop(ns, server, msg = \\\"\\\") {\\n    while (true) {\\n        await ns.sleep(1000);\\n        ns.clearLog();\\n        ns.tail();\\n        const ram = [ns.getServerMaxRam(server), ns.getServerUsedRam(server)];\\n        const money = ns.getServerMoneyAvailable(server);\\n        const maxMoney = ns.getServerMaxMoney(server);\\n        const minSec = ns.getServerMinSecurityLevel(server);\\n        const sec = ns.getServerSecurityLevel(server);\\n        if (msg)\\n            ns.print(msg);\\n        ns.print(`    Hack Profit  : ${ns.nFormat(ns.getScriptIncome()[0], \\\"$0.000a\\\")} / sec.\\n    Hack XP      : ${ns.nFormat(ns.getScriptExpGain(), \\\"0.000a\\\")} / sec.`);\\n        ns.print(`\\n\\n${server}:\\n    RAM          : ${ram[1]} / ${ram[0]} (${(ram[1] / ram[0]) * 100}%)\\n    $            : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${((money / maxMoney) * 100).toFixed(2)}%)\\n    security     : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth       : ${ns.getServerGrowth(server)}\\n    hack time    : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time    : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time  : ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2      : ${ns.growthAnalyze(server, 2).toFixed(2)} threads\\n    grow x3      : ${ns.growthAnalyze(server, 3).toFixed(2)} threads\\n    grow x4      : ${ns.growthAnalyze(server, 4).toFixed(2)} threads\\n    hack 10%     : ${(0.1 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%     : ${(0.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%     : ${(0.5 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance   : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n    }\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\n\",\"filename\":\"analyzeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"analyzeServer.js\",\"url\":\"blob:file:///40684bdd-b083-448e-ad40-baddb17ddf3a\",\"moduleSequenceNumber\":135250}],\"dependents\":[],\"ramUsage\":5.55,\"server\":\"home\",\"moduleSequenceNumber\":114524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      List the top 5 most expensive augmentations from your factions.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} \\n      `);\\n        return;\\n    }\\n    const { factions } = ns.getPlayer();\\n    let augs = [];\\n    for (const faction of factions) {\\n        for (const aug of ns.singularity.getAugmentationsFromFaction(faction)) {\\n            augs.push({\\n                aug,\\n                faction,\\n                price: ns.singularity.getAugmentationPrice(aug),\\n            });\\n        }\\n    }\\n    augs = augs.sort((a, b) => b.price - a.price).slice(undefined, 5);\\n    ns.tprint(\\\"Most Expensive Augmentations:\\\");\\n    ns.tprint(\\\"=============================\\\");\\n    for (const aug of augs) {\\n        ns.tprint(`(${aug.aug})\\n      ${aug.faction}\\n      ${ns.nFormat(aug.price, \\\"$0.0a\\\")}`);\\n    }\\n}\\n\",\"filename\":\"augList.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"home\",\"moduleSequenceNumber\":114526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerTree } from \\\"utils/ServerTree\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    await bkdr(ns, target);\\n}\\nexport async function bkdr(ns, target) {\\n    let tree = new ServerTree(ns);\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\") + \\\"backdoor;\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"bkdr.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///0c3d91f1-9d24-4b42-8a74-815a4ee0e7e3\",\"moduleSequenceNumber\":237951},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///0969ce25-7e03-4541-952a-57074f3c172e\",\"moduleSequenceNumber\":237952},{\"filename\":\"bkdr.js\",\"url\":\"blob:file:///fc0e7175-bced-4b53-b8cc-1ceed8bb7ec2\",\"moduleSequenceNumber\":260275}],\"dependents\":[],\"ramUsage\":28.9,\"server\":\"home\",\"moduleSequenceNumber\":114530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nconst growMultiplier = 4;\\nconst hackPercent = 0.5;\\nconst runningScripts = [\\n    \\\"/batching/hack.js\\\",\\n    \\\"/batching/grow.js\\\",\\n    \\\"/batching/weaken.js\\\",\\n    \\\"/batching/spawner.js\\\",\\n];\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack sorted by the amount of money\\n// we can make off them.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerTree(ns);\\n    return tree.home\\n        .filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() &&\\n        s.hasAdminRights &&\\n        s.hostname !== \\\"home\\\" &&\\n        !ns.getPurchasedServers().includes(s.hostname) &&\\n        s.moneyMax > 0)\\n        .sort((a, b) => {\\n        return getServerHackValue(ns, b) - getServerHackValue(ns, a);\\n    });\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nfunction getServerHackValue(ns, server) {\\n    server.hackDifficulty = server.minDifficulty;\\n    // now find the required number of threads for each action.\\n    const growThreads = Math.ceil(ns.growthAnalyze(server.hostname, growMultiplier));\\n    const hackThreads = Math.ceil(hackPercent / ns.hackAnalyze(server.hostname));\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    const hackSecurityDelta = ns.hackAnalyzeSecurity(hackThreads);\\n    let weakenThreads = 0;\\n    let targetDelta = Math.max(growSecurityDelta, hackSecurityDelta);\\n    // pin targetDelta to 100 to prevent infinity\\n    if (targetDelta > 100)\\n        targetDelta = 100;\\n    const maxThreads = Math.max(hackThreads, weakenThreads, growThreads);\\n    const reserveRam = Math.max(...runningScripts.map((script) => ns.getScriptRam(script) * maxThreads));\\n    const player = ns.getPlayer();\\n    return ((server.moneyMax *\\n        ns.formulas.hacking.hackChance(server, player) *\\n        ns.formulas.hacking.hackPercent(server, player) *\\n        ns.formulas.hacking.growPercent(server, 1, player)) /\\n        reserveRam);\\n}\\n\",\"filename\":\"cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///725d4d83-207e-490e-a553-fa30176721d9\",\"moduleSequenceNumber\":567348},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///59b3d833-bd15-477e-a061-34fdedf22cd5\",\"moduleSequenceNumber\":567330},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///ed8cf32a-0b80-4a70-a45c-e441bfc9aeca\",\"moduleSequenceNumber\":567332},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///6c917333-c322-4eac-93bc-52e7c7ecd050\",\"moduleSequenceNumber\":567387}],\"dependents\":[],\"ramUsage\":36.05,\"server\":\"home\",\"moduleSequenceNumber\":114534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will run continuously and expand your server for you. It will\\n      only work with Source File 4.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (!ns.singularity.isBusy()) {\\n            work(ns);\\n        }\\n        expandServer(ns);\\n        await ns.sleep(1);\\n    }\\n}\\nexport function expandServer(ns) {\\n    const ramUpgradeCost = ns.singularity.getUpgradeHomeRamCost();\\n    const coreUpgradeCost = ns.singularity.getUpgradeHomeCoresCost();\\n    ns.print(`Ram Cost      : ${ns.nFormat(ramUpgradeCost, \\\"$0.0a\\\")}`);\\n    ns.print(`Core Cost     : ${ns.nFormat(coreUpgradeCost, \\\"$0.0a\\\")}`);\\n    if (ns.getServerMoneyAvailable(\\\"home\\\") >= ramUpgradeCost) {\\n        ns.singularity.upgradeHomeRam();\\n    }\\n    if (ns.getServerMoneyAvailable(\\\"home\\\") >= coreUpgradeCost) {\\n        ns.singularity.upgradeHomeCores();\\n    }\\n}\\nfunction work(ns) {\\n    ns.singularity.applyToCompany(`Joe's Guns`, \\\"part-time employee\\\");\\n    ns.singularity.workForCompany(`Joe's Guns`);\\n}\\n\",\"filename\":\"expandServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"expandServer.js\",\"url\":\"blob:file:///19c27c61-b646-4076-84df-e1c25beb1a68\",\"moduleSequenceNumber\":2927}],\"dependents\":[],\"ramUsage\":17.3,\"server\":\"home\",\"moduleSequenceNumber\":114536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// interface iGoal {\\n//   faction: string;\\n//   rep: number;\\n// }\\n// const factions: iGoal[] = [\\n//   {\\n//     faction: \\\"Daedalus\\\",\\n//     rep: 2310000,\\n//   },\\n//   {\\n//     faction: \\\"ECorp\\\",\\n//     rep: 1500000,\\n//   },\\n//   {\\n//     faction: \\\"Speakers for the Dead\\\",\\n//     rep: 362500,\\n//   },\\n//   {\\n//     faction: \\\"The Covenant\\\",\\n//     rep: 1250000,\\n//   },\\n//   {\\n//     faction: \\\"Blade Industries\\\",\\n//     rep: 562500,\\n//   },\\n//   {\\n//     faction: \\\"The Syndicate\\\",\\n//     rep: 875000,\\n//   },\\n//   {\\n//     faction: \\\"KuaiGong International\\\",\\n//     rep: 562500,\\n//   },\\n//   {\\n//     faction: \\\"Bachman & Associates\\\",\\n//     rep: 375000,\\n//   },\\n//   {\\n//     faction: \\\"Clarke Incorporated\\\",\\n//     rep: 437500,\\n//   },\\n//   {\\n//     faction: \\\"Slum Snakes\\\",\\n//     rep: 22500,\\n//   },\\n//   {\\n//     faction: \\\"Silhouette\\\",\\n//     rep: 62500,\\n//   },\\n// ];\\nconst restrictedFactions = [\\n    \\\"Sector-12\\\",\\n    \\\"Chongqing\\\",\\n    \\\"New Tokyo\\\",\\n    \\\"Ishima\\\",\\n    \\\"Aevum\\\",\\n    \\\"Volhaven\\\",\\n];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    while (true) {\\n        await ns.sleep(1);\\n        ns.clearLog();\\n        // ns.tail();\\n        factionWatch(ns);\\n    }\\n}\\nexport function factionWatch(ns) {\\n    const ownedAugs = ns.singularity.getOwnedAugmentations(true);\\n    for (const invitation of ns.singularity.checkFactionInvitations()) {\\n        // check if I need any of this factions augmentations.\\n        for (const aug of ns.singularity.getAugmentationsFromFaction(invitation)) {\\n            if (!ownedAugs.includes(aug)) {\\n                ns.singularity.joinFaction(invitation);\\n                break;\\n            }\\n        }\\n    }\\n    const { factions } = ns.getPlayer();\\n    // now check for the first invitation;\\n    if (factions.length === 0) {\\n        for (const invitation of ns.singularity.checkFactionInvitations()) {\\n            // skip restricted factions here.\\n            if (restrictedFactions.includes(invitation))\\n                continue;\\n            ns.singularity.joinFaction(invitation);\\n            break;\\n        }\\n    }\\n    // travel if necessary\\n    switch (ns.getPlayer().city) {\\n        case \\\"Sector-12\\\":\\n            if ((ns.getPlayer().factions.includes(\\\"Sector-12\\\") ||\\n                factionIsCleared(ns, \\\"Sector-12\\\")) &&\\n                !ns.getPlayer().factions.includes(\\\"Aevum\\\") &&\\n                !factionIsCleared(ns, \\\"Aevum\\\"))\\n                ns.singularity.travelToCity(\\\"Aevum\\\");\\n            break;\\n        case \\\"Aevum\\\":\\n            if ((ns.getPlayer().factions.includes(\\\"Aevum\\\") ||\\n                factionIsCleared(ns, \\\"Aevum\\\")) &&\\n                !ns.getPlayer().factions.includes(\\\"Sector-12\\\") &&\\n                !factionIsCleared(ns, \\\"Sector-12\\\"))\\n                ns.singularity.travelToCity(\\\"Sector-12\\\");\\n            if (factionIsCleared(ns, \\\"Sector-12\\\") && factionIsCleared(ns, \\\"Aevum\\\")) {\\n                // check other cities\\n            }\\n            break;\\n        case \\\"Chongqing\\\":\\n        case \\\"New Tokyo\\\":\\n        case \\\"Ishima\\\":\\n        case \\\"Volhaven\\\":\\n            break;\\n        default:\\n    }\\n}\\nexport function factionIsCleared(ns, faction) {\\n    const owned = ns.singularity.getOwnedAugmentations(true);\\n    if (ns.singularity\\n        .getAugmentationsFromFaction(faction)\\n        .filter((aug) => !owned.includes(aug)).length === 0)\\n        return true;\\n    return false;\\n}\\n\",\"filename\":\"factionWatch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"factionWatch.js\",\"url\":\"blob:file:///59d2b56b-d3ef-4ab5-a695-f5583620458b\",\"moduleSequenceNumber\":2928}],\"dependents\":[],\"ramUsage\":20.1,\"server\":\"home\",\"moduleSequenceNumber\":114538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0] || ns.getHostname();\\n    while (true) {\\n        ns.clearLog();\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":114540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers, getRunnableServers } from \\\"cnct\\\";\\nimport { kill } from \\\"utils/scriptKilling\\\";\\nconst scriptName = \\\"grow.js\\\";\\nconst killScripts = [\\\"hack.js\\\", \\\"weaken.js\\\"];\\nexport async function main(ns) {\\n    await growAll(ns);\\n}\\nexport async function growAll(ns) {\\n    const servers = getRunnableServers(ns);\\n    const target = getHackableServers(ns)[0];\\n    // kill any previous scripts with other targets\\n    kill(ns, (ps) => (!ps.args.includes(target.hostname) && ps.filename === scriptName) ||\\n        killScripts.includes(ps.filename));\\n    for (const { hostname } of servers) {\\n        await ns.scp(scriptName, hostname);\\n        // calculate the maximum threads\\n        const maxThreads = Math.floor((ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) /\\n            ns.getScriptRam(scriptName, hostname));\\n        if (maxThreads > 0)\\n            ns.exec(scriptName, hostname, maxThreads, target.hostname);\\n    }\\n}\\n\",\"filename\":\"growAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.75,\"server\":\"home\",\"moduleSequenceNumber\":114542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0] || ns.getHostname();\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(host);\\n        await ns.weaken(host);\\n        await ns.grow(host);\\n        await ns.weaken(host);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":114544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers, getRunnableServers } from \\\"cnct\\\";\\nimport { kill } from \\\"utils/scriptKilling\\\";\\nconst scriptName = \\\"hack.js\\\";\\nconst killScripts = [\\\"grow.js\\\", \\\"weaken.js\\\"];\\nexport async function main(ns) {\\n    await hackAll(ns);\\n}\\nexport async function hackAll(ns) {\\n    const servers = getRunnableServers(ns);\\n    const target = getHackableServers(ns)[0];\\n    // kill any previous scripts with other targets\\n    kill(ns, (ps) => (!ps.args.includes(target.hostname) && ps.filename === scriptName) ||\\n        killScripts.includes(ps.filename));\\n    for (const { hostname } of servers) {\\n        await ns.scp(scriptName, hostname);\\n        // calculate the maximum threads\\n        const maxThreads = Math.floor((ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) /\\n            ns.getScriptRam(scriptName, hostname));\\n        if (maxThreads > 0)\\n            ns.exec(scriptName, hostname, maxThreads, target.hostname);\\n    }\\n}\\n\",\"filename\":\"hackAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.75,\"server\":\"home\",\"moduleSequenceNumber\":114546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { kill } from \\\"utils/scriptKilling\\\";\\nexport async function main(ns) {\\n    kill(ns, (ps) => ps.filename === \\\"share.js\\\");\\n}\\n\",\"filename\":\"killShare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///83e97507-2132-471b-a021-8f56aa6b6c6b\",\"moduleSequenceNumber\":537167},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///69e43145-074e-48cb-a29f-56169a89d879\",\"moduleSequenceNumber\":537165},{\"filename\":\"killShare.js\",\"url\":\"blob:file:///d8b2d5b7-2cc0-427e-9cee-587a8b1ba611\",\"moduleSequenceNumber\":539815}],\"dependents\":[],\"ramUsage\":4.5,\"server\":\"home\",\"moduleSequenceNumber\":114552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ProgramData } from \\\"utils/ProgramData\\\";\\nimport { createProgram } from \\\"actions/programming\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This monitors for programs that need created and creates the program if\\n      you have Source File 4. If not it prompts the user to create the program.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    const data = new ProgramData(ns);\\n    while (data.programs.filter((p) => !p.exists).length > 0) {\\n        ns.clearLog();\\n        await createPrograms(ns);\\n        await ns.sleep(1);\\n    }\\n}\\nexport async function createPrograms(ns) {\\n    const data = new ProgramData(ns);\\n    let neededPrograms = [];\\n    for (const program of data.programs) {\\n        if (!program.exists)\\n            neededPrograms.push(program.filename);\\n        else\\n            continue;\\n        if (program.hackingLevel <= ns.getHackingLevel()) {\\n            // this program needs created.\\n            while (!program.exists) {\\n                await createProgram(ns, program.filename);\\n                await ns.sleep(1);\\n            }\\n        }\\n    }\\n    if (neededPrograms.length === 0)\\n        return;\\n    if (ns.singularity.purchaseTor()) {\\n        for (const programName of neededPrograms) {\\n            ns.singularity.purchaseProgram(programName);\\n        }\\n    }\\n}\\n\",\"filename\":\"programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/actions/programming.js\",\"url\":\"blob:file:///8751ab00-83b6-4ad6-9fd8-cabed949bcb0\",\"moduleSequenceNumber\":2397},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///da425383-aa2d-466b-8ca1-98d37d6af5f1\",\"moduleSequenceNumber\":2487},{\"filename\":\"programs.js\",\"url\":\"blob:file:///15aac4d5-5890-419d-918a-6879582119a7\",\"moduleSequenceNumber\":2926}],\"dependents\":[],\"ramUsage\":12.1,\"server\":\"home\",\"moduleSequenceNumber\":114556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nexport async function main(ns) {\\n    const grep = ns.args.join(\\\" \\\");\\n    for (const proc of ps(ns).filter((p) => p.ps.filename.includes(grep) ||\\n        p.ps.args.includes(grep) ||\\n        p.server.hostname.includes(grep))) {\\n        const { ps, server } = proc;\\n        const memory = ps.threads * ns.getScriptRam(ps.filename, server.hostname);\\n        ns.tprint(`${ps.filename}:\\n      ${ps.args} @ ${server.hostname}\\n      Memory: ${ns.nFormat(memory * 1e9, \\\"0.0b\\\")}`);\\n    }\\n}\\n// Returns a list of { ps, server }'s. Containing every running process.'\\nexport function ps(ns) {\\n    let processes = [];\\n    const tree = new ServerTree(ns);\\n    for (const server of tree.home.list()) {\\n        for (const ps of ns.ps(server.hostname)) {\\n            processes.push({\\n                ps,\\n                server,\\n            });\\n        }\\n    }\\n    return processes;\\n}\\nexport function autocomplete(data) {\\n    return [...data.servers, ...data.scripts];\\n}\\n\",\"filename\":\"ps.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///06d59f2a-7fc2-487f-aeb8-1022d5fc3199\",\"moduleSequenceNumber\":544337},{\"filename\":\"ps.js\",\"url\":\"blob:file:///01cc266e-b205-4523-a927-fc12b87d58fb\",\"moduleSequenceNumber\":544392}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":114558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const budgetPercent = 0.9;\\nlet ramStopPoints = [64, 1024];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ramStopPoints.push(ns.getPurchasedServerMaxRam());\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(`\\n      This will purchase the largest possible servers.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\n        ns.clearLog();\\n        ns.tail();\\n        await purchaseServers(ns);\\n    }\\n    ns.print(\\\"All servers have been purchased! Working on upgrades.\\\");\\n    while (getMinRam(ns) < ns.getPurchasedServerMaxRam()) {\\n        ns.clearLog();\\n        ns.tail();\\n        await upgradeServers(ns);\\n    }\\n    ns.clearLog();\\n    serverStats(ns);\\n    ns.print(\\\"All servers have been Upgraded!\\\");\\n}\\nexport async function upgradeServers(ns) {\\n    serverStats(ns);\\n    const ram = await calculateRam(ns);\\n    const price = ns.getPurchasedServerCost(ram);\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\") * budgetPercent;\\n    const serverName = ns\\n        .getPurchasedServers()\\n        .sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b))[0];\\n    if (moneyAvailable > price) {\\n        // find the server with the least amount of ram.\\n        ns.print(`Upgrading server ${serverName} from ${ns.nFormat(ns.getServerMaxRam(serverName) * 1e9, \\\"0.000b\\\")} to ${ns.nFormat(ram * 1e9, \\\"0.000b\\\")} of RAM for ${ns.nFormat(price, \\\"$0.000a\\\")}`);\\n        ns.enableLog(\\\"deleteServer\\\");\\n        ns.enableLog(\\\"purchaseServer\\\");\\n        if (ns.ps(serverName).length === 0) {\\n            if (ns.deleteServer(serverName))\\n                ns.purchaseServer(`pserver-${Date.now()}`, ram);\\n        }\\n        else {\\n            // TODO: find a way to migrate processes to another server.\\n        }\\n    }\\n    else {\\n        ns.print(`You need ${ns.nFormat(price, \\\"$0.000a\\\")} to upgrade ${serverName} from ${ns.nFormat(ns.getServerMaxRam(serverName) * 1e9, \\\"0.000b\\\")} to ${ns.nFormat(ram * 1e9, \\\"0.000b\\\")} of RAM`);\\n    }\\n}\\nexport async function purchaseServers(ns) {\\n    await ns.sleep(1);\\n    serverStats(ns);\\n    const ram = await calculateRam(ns);\\n    const price = ns.getPurchasedServerCost(ram);\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\") * budgetPercent;\\n    if (moneyAvailable > price) {\\n        const serverName = `pserver-${Date.now()}`;\\n        ns.print(`Buying server ${serverName} for ${ns.nFormat(price, \\\"$0.000a\\\")}`);\\n        ns.purchaseServer(`pserver-${Date.now()}`, ram);\\n    }\\n    else {\\n        ns.print(`You need ${ns.nFormat(price, \\\"$0.000a\\\")} to purchase a server with ${ns.nFormat(ram * 1e9, \\\"0.000b\\\")} of RAM`);\\n    }\\n}\\nasync function calculateRam(ns) {\\n    // get budget\\n    // return ns.getPurchasedServerMaxRam();\\n    const budget = ns.getServerMoneyAvailable(\\\"home\\\") * budgetPercent;\\n    for (const ram of ramStopPoints.reverse())\\n        if (ns.getPurchasedServerCost(ram) <= budget && ram > getMinRam(ns))\\n            return ram;\\n    for (const ram of ramStopPoints)\\n        if (ram > getMinRam(ns))\\n            return ram;\\n    return ns.getPurchasedServerMaxRam();\\n}\\nexport function getMinRam(ns) {\\n    if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n        return 32;\\n    const serverName = ns\\n        .getPurchasedServers()\\n        .sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b))[0];\\n    return ns.getServerMaxRam(serverName) || 32;\\n}\\nfunction serverStats(ns) {\\n    ns.print(`Current Server Stats:`);\\n    ns.print(`=====================`);\\n    for (const host of ns\\n        .getPurchasedServers()\\n        .sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b))) {\\n        ns.print(`${host}:\\n      RAM     : ${ns.nFormat(ns.getServerMaxRam(host) * 1e9, \\\"0.0b\\\")}`);\\n    }\\n    ns.print(`Max RAM: ${ns.nFormat(ns.getPurchasedServerMaxRam() * 1e9, \\\"0.0b\\\")}`);\\n    ns.print(`${ns.getPurchasedServers().length} of ${ns.getPurchasedServerLimit()} servers purchased.`);\\n    ns.print(`=====================`);\\n}\\n\",\"filename\":\"purchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"purchase.js\",\"url\":\"blob:file:///15e00d31-25df-4b36-9fd3-927153ba04ae\",\"moduleSequenceNumber\":2929}],\"dependents\":[],\"ramUsage\":9.05,\"server\":\"home\",\"moduleSequenceNumber\":114560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMinRam } from \\\"purchase\\\";\\nimport { kill } from \\\"utils/scriptKilling\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This is a script that will detect which phase you are in and restart your hacking scripts.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // kill all scripts to start.\\n    kill(ns, (ps) => ps.filename !== ns.getScriptName());\\n    const homeRAM = ns.getServerMaxRam(\\\"home\\\") * 1e9;\\n    const minRAM = getMinRam(ns) * 1e9;\\n    const totalRAM = getTotalRam(ns) * 1e9;\\n    const purchasedServerMaxRAM = ns.getPurchasedServerMaxRam() * 1e9;\\n    ns.tprint(`\\n    Home RAM: ${ns.nFormat(homeRAM, \\\"0.0b\\\")}\\n    Min RAM: ${ns.nFormat(minRAM, \\\"0.0b\\\")}\\n    Total RAM: ${ns.nFormat(totalRAM, \\\"0.0b\\\")}\\n    Purchased Server MAX RAM: ${ns.nFormat(purchasedServerMaxRAM, \\\"0.0b\\\")}\\n    `);\\n    // just run phase1 and if you are ready for phase2/3 it should automatically\\n    // elevate.\\n    ns.spawn(\\\"/phase1/restart.js\\\");\\n}\\nfunction getTotalRam(ns) {\\n    let total = ns.getServerMaxRam(\\\"home\\\");\\n    if (ns.getPurchasedServers().length === 0)\\n        return total;\\n    for (const ram of ns.getPurchasedServers().map((s) => ns.getServerMaxRam(s)))\\n        total += ram;\\n    return total;\\n}\\n\",\"filename\":\"restart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///a06c3d47-8ba9-4828-ac0d-cc042a4e6301\",\"moduleSequenceNumber\":15704},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///608b0053-4a9c-462c-9ab1-8c0cfd6584fc\",\"moduleSequenceNumber\":15702},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///748dc6fa-f5c6-4385-931c-fcae92d55c05\",\"moduleSequenceNumber\":15744},{\"filename\":\"restart.js\",\"url\":\"blob:file:///db483787-4823-45c9-89ed-081f2562d55c\",\"moduleSequenceNumber\":16135}],\"dependents\":[],\"ramUsage\":9,\"server\":\"home\",\"moduleSequenceNumber\":114562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script analyzes hackable server wealth/health.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    await ns.sleep(1000);\\n    ns.clearLog();\\n    ns.tail();\\n    const tree = new ServerTree(ns);\\n    for (const server of tree.home\\n        .filter((s) => s.hasAdminRights &&\\n        s.requiredHackingSkill <= ns.getHackingLevel() &&\\n        s.hostname !== \\\"home\\\" &&\\n        !ns.getPurchasedServers().includes(s.hostname) &&\\n        s.moneyMax > 0)\\n        .sort((a, b) => {\\n        const maxMoneyA = ns.getServerMaxMoney(a.hostname);\\n        const maxMoneyB = ns.getServerMaxMoney(b.hostname);\\n        // const availableRam =\\n        //   (ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) * 1e9;\\n        let hackChanceA = 0;\\n        let hackChanceB = 0;\\n        let hackTimeA = 1;\\n        let hackTimeB = 1;\\n        if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n            a.hackDifficulty = a.minDifficulty;\\n            b.hackDifficulty = b.minDifficulty;\\n            hackChanceA = ns.formulas.hacking.hackChance(a, ns.getPlayer());\\n            hackChanceB = ns.formulas.hacking.hackChance(b, ns.getPlayer());\\n            hackTimeA = ns.formulas.hacking.hackTime(a, ns.getPlayer());\\n            hackTimeB = ns.formulas.hacking.hackTime(b, ns.getPlayer());\\n        }\\n        else {\\n            hackChanceA = ns.hackAnalyzeChance(a.hostname);\\n            hackChanceB = ns.hackAnalyzeChance(b.hostname);\\n        }\\n        const valueA = (maxMoneyA * hackChanceA) / hackTimeA;\\n        const valueB = (maxMoneyB * hackChanceB) / hackTimeB;\\n        return valueB - valueA;\\n    })) {\\n        analyzeServer(ns, server.hostname);\\n    }\\n}\\nfunction analyzeServer(ns, server, msg = \\\"\\\") {\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    // const availableRam =\\n    //   (ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) * 1e9;\\n    let hackChance = 0;\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n        const testServer = ns.getServer(server);\\n        testServer.hackDifficulty = testServer.minDifficulty;\\n        hackChance = ns.formulas.hacking.hackChance(testServer, ns.getPlayer());\\n    }\\n    else {\\n        hackChance = ns.hackAnalyzeChance(server);\\n    }\\n    if (msg)\\n        ns.print(msg);\\n    const value = maxMoney * hackChance;\\n    ns.print(`${server}:\\n      ${ns.nFormat(value, \\\"$0.000a\\\")}`);\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\n\",\"filename\":\"serverWealth.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///4913575d-5062-4f61-b9fb-c27153baecfd\",\"moduleSequenceNumber\":629162},{\"filename\":\"serverWealth.js\",\"url\":\"blob:file:///381fb315-896c-481d-8993-2b29ebe2130a\",\"moduleSequenceNumber\":632924}],\"dependents\":[],\"ramUsage\":7.8,\"server\":\"home\",\"moduleSequenceNumber\":114564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///6a941d00-360d-4e98-969f-49261393b80e\",\"moduleSequenceNumber\":162517}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":114568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"cnct\\\";\\nconst serverPercent = 0.75;\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      Shares all the servers possible.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // copy the share script to all the servers we have admin priveledges to.\\n    for (const server of getRunnableServers(ns)) {\\n        // if (!server || server.hostname === \\\"home\\\") continue;\\n        if (!server)\\n            continue;\\n        const shareScript = \\\"share.js\\\";\\n        await ns.scp(shareScript, server.hostname);\\n        // calculate the maximum number of threads.\\n        server.ramUsed = ns.getServerUsedRam(server.hostname);\\n        let maxThreads = Math.max(Math.floor((server.maxRam * serverPercent - server.ramUsed) /\\n            ns.getScriptRam(shareScript, server.hostname)), 1);\\n        // run the share script if possible.\\n        ns.exec(shareScript, server.hostname, maxThreads);\\n    }\\n}\\n\",\"filename\":\"shareAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///6d2c2d80-a606-4678-a784-21db1b7ad89e\",\"moduleSequenceNumber\":147334},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///c970b633-d406-4f3f-838c-1d6dbb8cd7dd\",\"moduleSequenceNumber\":147338},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///c3e3eb14-a90d-4dea-977d-f0e37f908636\",\"moduleSequenceNumber\":147340},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///29527007-c537-4af3-995a-7338aa782764\",\"moduleSequenceNumber\":160877},{\"filename\":\"shareAll.js\",\"url\":\"blob:file:///94f8b74d-7ce3-4e9d-857c-0d53d1e5735c\",\"moduleSequenceNumber\":162440}],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"home\",\"moduleSequenceNumber\":114566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"cnct\\\";\\nimport { kill } from \\\"utils/scriptKilling\\\";\\nconst serverPercent = 1;\\nconst homeSingletons = [\\n    \\\"hacknet.js\\\",\\n    \\\"contracts/start.js\\\",\\n    \\\"backdoor.js\\\",\\n    ///\\n];\\nconst homeReserve = [\\n    \\\"cnct.js\\\",\\n    \\\"bkdr.js\\\",\\n    ///\\n];\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      For sharing and only sharing.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // first kill everything else.\\n    kill(ns, (ps) => ps.filename !== ns.getScriptName());\\n    // run singleton scripts\\n    for (const script of homeSingletons) {\\n        ns.run(script);\\n    }\\n    // copy the share script to all the servers we have admin priveledges to.\\n    for (const server of getRunnableServers(ns)) {\\n        // if (!server || server.hostname === \\\"home\\\") continue;\\n        if (!server)\\n            continue;\\n        const shareScript = \\\"share.js\\\";\\n        await ns.scp(shareScript, server.hostname);\\n        // calculate the maximum number of threads.\\n        server.ramUsed = ns.getServerUsedRam(server.hostname);\\n        let maxThreads = Math.max(Math.floor((server.maxRam * serverPercent - server.ramUsed - getReservedRam(ns)) /\\n            ns.getScriptRam(shareScript, server.hostname)), 1);\\n        // run the share script if possible.\\n        ns.exec(shareScript, server.hostname, maxThreads);\\n    }\\n}\\nfunction getReservedRam(ns) {\\n    if (ns.getHostname() !== \\\"home\\\")\\n        return 0;\\n    return Math.max(...homeReserve.map((script) => ns.getScriptRam(script)));\\n}\\n\",\"filename\":\"shareOnly.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.95,\"server\":\"home\",\"moduleSequenceNumber\":114570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const host = ns.args[0] || ns.getHostname();\\n    while (true) {\\n        await ns.weaken(host);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":114572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers, getRunnableServers } from \\\"cnct\\\";\\nimport { kill } from \\\"utils/scriptKilling\\\";\\nconst scriptName = \\\"weaken.js\\\";\\nconst killScripts = [\\\"hack.js\\\", \\\"grow.js\\\"];\\nexport async function main(ns) {\\n    await weakenAll(ns);\\n}\\nexport async function weakenAll(ns) {\\n    const servers = getRunnableServers(ns);\\n    const target = getHackableServers(ns)[0];\\n    // kill any previous scripts with other targets\\n    kill(ns, (ps) => (!ps.args.includes(target.hostname) && ps.filename === scriptName) ||\\n        killScripts.includes(ps.filename));\\n    for (const { hostname } of servers) {\\n        await ns.scp(scriptName, hostname);\\n        // calculate the maximum threads\\n        const maxThreads = Math.floor((ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) /\\n            ns.getScriptRam(scriptName, hostname));\\n        if (maxThreads > 0)\\n            ns.exec(scriptName, hostname, maxThreads, target.hostname);\\n    }\\n}\\n\",\"filename\":\"weakenAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.75,\"server\":\"home\",\"moduleSequenceNumber\":114574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ps } from \\\"ps\\\";\\nexport async function main(ns) {\\n    for (const proc of ps(ns)) {\\n        if (proc.ps.args.includes(ns.args[0]) ||\\n            proc.ps.filename.includes(ns.args[0])) {\\n            ns.kill(proc.ps.pid);\\n        }\\n    }\\n}\\nexport function autocomplete(data) {\\n    return [...data.scripts, ...data.servers];\\n}\\n\",\"filename\":\"kill.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.5,\"server\":\"home\",\"moduleSequenceNumber\":114550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    let contracts = ns.ls(ns.getHostname(), \\\".cct\\\");\\n    ns.tprint(`There are ${contracts.length} contracts on this server:`);\\n    for (const cct of contracts) {\\n        ns.tprint(displayContract(ns, cct));\\n    }\\n}\\nexport function displayContract(ns, cct, host = ns.getHostname()) {\\n    return `\\r\\n  ================\\r\\n  ${cct} @ ${host}:\\r\\n      remaining   : ${ns.codingcontract.getNumTriesRemaining(cct, host)} attempts\\r\\n      type        : ${ns.codingcontract.getContractType(cct, host)}\\r\\n      data        : ${JSON.stringify(ns.codingcontract.getData(cct, host))}\\r\\n      description : ${ns.codingcontract.getDescription(cct, host)}\\r\\n  ================\\r\\n      `;\\n}\\n\",\"filename\":\"/contracts/probe.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":18.85,\"server\":\"home\",\"moduleSequenceNumber\":114476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"codingcontract.getNumTriesRemaining\",\"cost\":2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const G = 1e9;\\n    const MAX = 2**30 * G;\\n    ns.tprint(`1GB = ${ns.nFormat(G, '0.0b')}`)\\n    ns.tprint(`1GB = ${ns.nFormat(MAX, '0.0b')}`)\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///34dd69ed-aac7-4648-8dab-920d4590caf3\",\"moduleSequenceNumber\":14216}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { totalWaysToSum2 } from 'contracts/solvers/totalWaysToSum';\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const data = [\\n        37,\\n        [1, 2, 4, 5, 6, 7, 8, 12, 14, 15]\\n    ]\\n\\n    ns.tprint(totalWaysToSum2(data));\\n}\",\"filename\":\"twts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///d5bbe673-8efb-4ee6-abd1-5952016e53c2\",\"moduleSequenceNumber\":278563},{\"filename\":\"twts.js\",\"url\":\"blob:file:///33f869e4-3e72-43fb-9d6a-a21a4f827a21\",\"moduleSequenceNumber\":523156}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { getNukableServers } from \\\"cnct\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will monitor for servers that need a backdoor installed.\\n      It will also nuke any server that needs it.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.sleep(1);\\n        ns.clearLog();\\n        nukeAll(ns);\\n    }\\n}\\nexport async function nukeAll(ns) {\\n    // find nukable servers.\\n    for (const server of getNukableServers(ns)) {\\n        // nuke them.\\n        ns.print(`nuking ${server.hostname}`);\\n        nuke(ns, server.hostname);\\n        server.hasAdminRights = true;\\n    }\\n}\\n\",\"filename\":\"nuker.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///0ffdbbd5-c4dc-4a32-ad1e-df9e8456fff6\",\"moduleSequenceNumber\":2487},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///c29b7836-91b8-4b04-8c29-294d610b249d\",\"moduleSequenceNumber\":2491},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///387c8f4b-ec45-4f1c-9ce4-7af792c26ce4\",\"moduleSequenceNumber\":2493},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///30d40b4f-23f3-43a7-884d-9c020515e342\",\"moduleSequenceNumber\":2505},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///3052fb4d-4b16-4f9a-8ca3-8c7210409412\",\"moduleSequenceNumber\":2487},{\"filename\":\"/utils/nuke.js\",\"url\":\"blob:file:///e2c18a67-13cf-434f-a4ef-99433227dbd6\",\"moduleSequenceNumber\":2485},{\"filename\":\"nuker.js\",\"url\":\"blob:file:///31cd107a-b27d-444c-94a1-7891db97d49b\",\"moduleSequenceNumber\":2549}],\"dependents\":[],\"ramUsage\":4.3,\"server\":\"home\",\"moduleSequenceNumber\":114554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    await commitCrime(ns, ns.args[0] || \\\"homicide\\\", ns.args[1] || 0);\\n}\\nconst crimes = [\\n    \\\"heist\\\",\\n    \\\"assassinate\\\",\\n    \\\"kidnap\\\",\\n    \\\"grand theft auto\\\",\\n    \\\"homicide\\\",\\n    \\\"traffick illegal arms\\\",\\n    \\\"bond forgery\\\",\\n    \\\"deal drugs\\\",\\n    \\\"larceny\\\",\\n    \\\"mug\\\",\\n    \\\"rob store\\\",\\n    \\\"shoplift\\\",\\n    //\\n];\\nexport async function commitCrime(ns, crime = undefined, goal = 0) {\\n    if (!crime)\\n        crime = getBestCrime(ns);\\n    const time = ns.singularity.getCrimeStats(crime).time;\\n    while (true) {\\n        ns.disableLog(\\\"ALL\\\");\\n        ns.enableLog(\\\"commitCrime\\\");\\n        ns.tail();\\n        if (!ns.singularity.isBusy()) {\\n            ns.singularity.commitCrime(crime);\\n            await ns.sleep(time);\\n        }\\n        else {\\n            await ns.sleep(1);\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= goal)\\n            return;\\n    }\\n}\\nfunction getBestCrime(ns) {\\n    return crimes.sort((a, b) => crimeCashValue(ns, b) - crimeCashValue(ns, a))[0];\\n}\\n// This gives the cash value of a crime taking in to account the chance of\\n// success as well as the time taken.\\nfunction crimeCashValue(ns, crime) {\\n    const chance = ns.singularity.getCrimeChance(crime);\\n    const stats = ns.singularity.getCrimeStats(crime);\\n    const cash = ns.getBitNodeMultipliers().CrimeMoney * stats.money;\\n    return (cash * chance) / stats.time ** 2;\\n}\\n\",\"filename\":\"/actions/crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.2,\"server\":\"home\",\"moduleSequenceNumber\":114424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nukeAll } from \\\"nuker\\\";\\nexport async function main(ns) {\\n    await nukeAll(ns);\\n    ns.spawn(\\\"phase1/prepare.js\\\");\\n}\\n\",\"filename\":\"/phase1/nuke.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"home\",\"moduleSequenceNumber\":114486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { prepBatch } from \\\"batching/prepBatch\\\";\\nimport { getHackableServers } from \\\"cnct\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const target = getHackableServers(ns)[0].hostname;\\n    await prepBatch(ns, target);\\n    ns.spawn(\\\"phase1/batch.js\\\", 1, target);\\n}\\n\",\"filename\":\"/phase1/prepare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///b1c9d3a7-2d6a-4533-aed0-d2830261180b\",\"moduleSequenceNumber\":527486},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///305e5311-2279-4d9c-89f9-24dea8f9854a\",\"moduleSequenceNumber\":527490},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///118b9a02-e5c0-411b-999f-dc6bca32caa8\",\"moduleSequenceNumber\":527492},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///2e4a67a2-5bf7-4f86-91ad-bdce039d7c71\",\"moduleSequenceNumber\":527504},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///905edfb8-78c5-4989-a6c4-ee7d7c3568a9\",\"moduleSequenceNumber\":527530},{\"filename\":\"factionWatch.js\",\"url\":\"blob:file:///338f368a-1fc4-4fb4-8bbc-f00fd22f09c3\",\"moduleSequenceNumber\":527508},{\"filename\":\"/actions/crime.js\",\"url\":\"blob:file:///92b34923-ac77-4fdc-85db-0ad22480e7c8\",\"moduleSequenceNumber\":527398},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///172f59f8-2d2f-4931-b0fd-eb706c9d654f\",\"moduleSequenceNumber\":527486},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///1a23c2c2-204d-41d3-9c1b-e641c1e7a57b\",\"moduleSequenceNumber\":527490},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///598bd4ac-684a-40da-940c-89f0eb933b8b\",\"moduleSequenceNumber\":527492},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///5ef4cb30-3148-46fa-94cc-7f415d2f4a00\",\"moduleSequenceNumber\":527504},{\"filename\":\"/ui/monitor.js\",\"url\":\"blob:file:///452a8804-8b89-46a3-b959-47a3dfb4260a\",\"moduleSequenceNumber\":527480},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///738d9913-053f-441b-9a91-5487707c7f6c\",\"moduleSequenceNumber\":527486},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///b3fb6290-d871-45bf-b70a-f8ea1f56c266\",\"moduleSequenceNumber\":527490},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///3cd9cf35-c1d4-446f-a3eb-ec6c995f27a7\",\"moduleSequenceNumber\":527492},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///0b33cb89-df18-49a4-83ad-d33d2a2ac5bc\",\"moduleSequenceNumber\":527504},{\"filename\":\"/batching/runSpawner.js\",\"url\":\"blob:file:///ba67f324-7e2d-49ac-918a-f9089cb98bb0\",\"moduleSequenceNumber\":527412},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///5f62df0b-2573-4ac3-a79a-d747e7e2d009\",\"moduleSequenceNumber\":527490},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///b2e1c9e3-a13f-4628-9379-b9daa6166bd9\",\"moduleSequenceNumber\":527488},{\"filename\":\"/batching/prepBatch.js\",\"url\":\"blob:file:///970e4392-5b12-4341-9d59-aabcf8767b32\",\"moduleSequenceNumber\":527410},{\"filename\":\"/phase1/prepare.js\",\"url\":\"blob:file:///7b9ad38b-cd65-4594-88ba-509820709640\",\"moduleSequenceNumber\":527547}],\"dependents\":[],\"ramUsage\":60.8,\"server\":\"home\",\"moduleSequenceNumber\":114488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\nimport { nukeAll } from \\\"nuker\\\";\\nimport { expandServer } from \\\"expandServer\\\";\\nimport { factionWatch } from \\\"factionWatch\\\";\\nimport { batch } from \\\"batching/batch\\\";\\nimport { commitCrime } from \\\"actions/crime\\\";\\nimport { purchaseServers, upgradeServers } from \\\"purchase\\\";\\nimport { monitor } from \\\"ui/monitor\\\";\\nimport { installBackdoors } from \\\"backdoor\\\";\\nimport { createPrograms } from \\\"programs\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const bestServer = ns.args[0];\\n    await batch(ns, bestServer);\\n    while (getHackableServers(ns)[0].hostname === bestServer) {\\n        ns.clearLog();\\n        await nukeAll(ns);\\n        await installBackdoors(ns);\\n        expandServer(ns);\\n        if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n            await purchaseServers(ns);\\n        else\\n            await upgradeServers(ns);\\n        factionWatch(ns);\\n        monitor(ns, ns.getServer(bestServer));\\n        await createPrograms(ns);\\n        await commitCrime(ns);\\n    }\\n    ns.spawn(\\\"phase1/restart.js\\\");\\n}\\n\",\"filename\":\"/phase1/batch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/actions/programming.js\",\"url\":\"blob:file:///92ee95ba-1a76-4762-8c21-bede03143c4f\",\"moduleSequenceNumber\":567393},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///b17b08de-a84e-4bc5-aeee-2d043faccbca\",\"moduleSequenceNumber\":567483},{\"filename\":\"programs.js\",\"url\":\"blob:file:///c095afc2-293e-4be8-b46a-7da37ae00cb9\",\"moduleSequenceNumber\":567523},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///bf1488df-95b7-4db4-8e22-5d4199daef62\",\"moduleSequenceNumber\":567487},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///e0862405-d4d1-435d-871c-8fa08d04788b\",\"moduleSequenceNumber\":567489},{\"filename\":\"bkdr.js\",\"url\":\"blob:file:///f242069b-8912-49a9-880c-af1eabf46005\",\"moduleSequenceNumber\":567497},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///8388c13c-1d7e-45f5-add5-9bf39bbe5fb0\",\"moduleSequenceNumber\":567487},{\"filename\":\"backdoor.js\",\"url\":\"blob:file:///c1fd4efb-cb7e-4425-911a-a36e218542f4\",\"moduleSequenceNumber\":567495},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///e0b0bda7-2b23-40c3-a5b2-653dbea31774\",\"moduleSequenceNumber\":567483},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///09623849-391b-4ca0-807c-b0c6da6e59f6\",\"moduleSequenceNumber\":567487},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///6cee05b6-5cc5-4fc5-9d6c-329f430292c3\",\"moduleSequenceNumber\":567489},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///6ef50ed9-2395-4573-9d26-db936dbb4435\",\"moduleSequenceNumber\":567501},{\"filename\":\"/ui/monitor.js\",\"url\":\"blob:file:///08516ce0-3072-4fb4-88d2-9f6dab054000\",\"moduleSequenceNumber\":567477},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///29ebde0b-3783-44ed-a3aa-cd6218cd606f\",\"moduleSequenceNumber\":567527},{\"filename\":\"/actions/crime.js\",\"url\":\"blob:file:///b95ebbfa-938c-4357-82e2-62efb56d9956\",\"moduleSequenceNumber\":567395},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///db3a3f4a-e02b-459c-a01c-4020696c4999\",\"moduleSequenceNumber\":567527},{\"filename\":\"/actions/crime.js\",\"url\":\"blob:file:///3c5807cb-2ac5-4d1f-a867-07ed88f2a277\",\"moduleSequenceNumber\":567395},{\"filename\":\"expandServer.js\",\"url\":\"blob:file:///e22de6eb-fe14-41c9-8247-acf1c7138cbb\",\"moduleSequenceNumber\":567503},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///20fd1c4c-aa03-47e9-b134-f7e7d858b01f\",\"moduleSequenceNumber\":567487},{\"filename\":\"ps.js\",\"url\":\"blob:file:///e8098585-e819-4713-b561-7739325e2665\",\"moduleSequenceNumber\":567525},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///8c0941fc-c9ea-4088-9289-63b7e41a62e8\",\"moduleSequenceNumber\":567483},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///ae1bcfff-131b-443a-ae92-71a05b0e22dc\",\"moduleSequenceNumber\":567487},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///684bab84-9afc-4bba-a6af-92773bfb8c0a\",\"moduleSequenceNumber\":567489},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///2713d76b-bdd1-4d4d-924c-6ad90e368a8d\",\"moduleSequenceNumber\":567501},{\"filename\":\"/batching/runSpawner.js\",\"url\":\"blob:file:///65663b77-272e-497a-a581-a7517b812efe\",\"moduleSequenceNumber\":567409},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///c048e145-2892-4e11-86c2-980abbb6c312\",\"moduleSequenceNumber\":567527},{\"filename\":\"factionWatch.js\",\"url\":\"blob:file:///ae1c3b63-9988-4c30-be13-e0e77f3a73a6\",\"moduleSequenceNumber\":567505},{\"filename\":\"/actions/crime.js\",\"url\":\"blob:file:///b2a6ecc0-29ea-445b-963a-6b8d91543c14\",\"moduleSequenceNumber\":567395},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///c7970d90-4113-43fc-b104-2c3f365e98cd\",\"moduleSequenceNumber\":567483},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///e622ba77-70e2-482b-8fdc-3a3cb65b35a7\",\"moduleSequenceNumber\":567487},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///ecd80653-490e-4e50-b44e-14ff8392340b\",\"moduleSequenceNumber\":567489},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///113d6d0e-0672-41b9-913d-8dc3bc731fc5\",\"moduleSequenceNumber\":567501},{\"filename\":\"/ui/monitor.js\",\"url\":\"blob:file:///f4fd01fb-b086-4609-82be-8b78f5ee5fe7\",\"moduleSequenceNumber\":567477},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///e0194252-c3d6-40ed-b66f-3d260a514be2\",\"moduleSequenceNumber\":567483},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///ba0efa2d-c417-47c3-8c81-f16db474233e\",\"moduleSequenceNumber\":567487},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///5cf0487b-4ded-4ce3-bf61-88191488e21f\",\"moduleSequenceNumber\":567489},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///5638a080-97f0-4e83-b28e-472e23b9b816\",\"moduleSequenceNumber\":567501},{\"filename\":\"/batching/runSpawner.js\",\"url\":\"blob:file:///c89560dc-0a65-4028-90b3-0e0e3401e92e\",\"moduleSequenceNumber\":567409},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///0eb30687-d79e-47f8-844f-9cb4f0299875\",\"moduleSequenceNumber\":567487},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///14a806e0-fd9e-43e5-ac7b-e1daf5f4b32a\",\"moduleSequenceNumber\":567485},{\"filename\":\"/batching/prepBatch.js\",\"url\":\"blob:file:///3f01989a-e790-42d6-80e5-daed5215aea3\",\"moduleSequenceNumber\":567407},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///60204c8e-a0ff-467d-aded-b207b1580d9d\",\"moduleSequenceNumber\":567487},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///398596ea-5779-403b-931d-e2d2e337bb5c\",\"moduleSequenceNumber\":567485},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///39835972-d869-4f2e-bc8d-1e83b586fd6c\",\"moduleSequenceNumber\":567483},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///0ded7c73-08fd-4bcf-a7d6-af720952c8d2\",\"moduleSequenceNumber\":567487},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///503b6c76-7bbf-4ad7-b1fe-215220daeac7\",\"moduleSequenceNumber\":567489},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///4549c3f0-8b88-4f0a-8e37-b356d54997e1\",\"moduleSequenceNumber\":567501},{\"filename\":\"/batching/batch.js\",\"url\":\"blob:file:///4cab76a3-89ad-4c30-b595-84863c26fbdb\",\"moduleSequenceNumber\":567399},{\"filename\":\"factionWatch.js\",\"url\":\"blob:file:///64b8d168-8da6-43c2-bae3-8a65768e1432\",\"moduleSequenceNumber\":567505},{\"filename\":\"expandServer.js\",\"url\":\"blob:file:///236d2702-8be1-48c0-82c5-fe4025195ce3\",\"moduleSequenceNumber\":567503},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///75e08489-6a73-40ee-af5c-83eb0a8e15f7\",\"moduleSequenceNumber\":567483},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///fd46e929-e4fe-4fc3-8a32-ea095ac01d66\",\"moduleSequenceNumber\":567487},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///0a7132e7-586e-4a3b-9aa8-d091c35e3266\",\"moduleSequenceNumber\":567489},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///53d9910d-0fb5-4cf6-a395-fffaf37a7581\",\"moduleSequenceNumber\":567501},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///f361f620-f493-4d43-a16f-d592a9da46fa\",\"moduleSequenceNumber\":567483},{\"filename\":\"/utils/nuke.js\",\"url\":\"blob:file:///d0a41b26-0ca4-49a3-87f7-42fd3ade3b97\",\"moduleSequenceNumber\":567481},{\"filename\":\"nuker.js\",\"url\":\"blob:file:///5d40db88-d226-467c-b6ee-e8d689f06da9\",\"moduleSequenceNumber\":567521},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///3da22851-a952-4c47-89b6-3b84684dd628\",\"moduleSequenceNumber\":567483},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///886eb06d-bee8-4cd2-abe5-0d1e2f4c07fe\",\"moduleSequenceNumber\":567487},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///c761a208-1b1b-4cca-9dec-f97dd6a969e6\",\"moduleSequenceNumber\":567489},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///3a448200-1fdf-4873-b755-fe34a057271b\",\"moduleSequenceNumber\":567501},{\"filename\":\"/phase1/batch.js\",\"url\":\"blob:file:///0bfefcc9-5921-4bf3-b6fd-44606f8b411e\",\"moduleSequenceNumber\":567918}],\"dependents\":[],\"ramUsage\":112.9,\"server\":\"home\",\"moduleSequenceNumber\":114482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    // Work for the given faction using the most expedient method (usually hacking)\\n    const faction = ns.args[0];\\n    await workForFaction(ns, faction);\\n}\\nexport async function workForFaction(ns, faction) {\\n    const goal = getFactionRepGoal(ns, faction);\\n    if (ns.singularity.isBusy() &&\\n        ns.getPlayer().workType.toLowerCase().includes(\\\"faction\\\") &&\\n        ns.getPlayer().currentWorkFactionName === faction) {\\n        if (ns.singularity.getFactionRep(faction) + ns.getPlayer().workRepGained >=\\n            goal) {\\n            ns.singularity.stopAction();\\n        }\\n        return;\\n    }\\n    if (ns.singularity.workForFaction(faction, \\\"Hacking Contracts\\\"))\\n        return;\\n    else if (ns.singularity.workForFaction(faction, \\\"Field Work\\\"))\\n        return;\\n    else if (ns.singularity.workForFaction(faction, \\\"Security Work\\\"))\\n        return;\\n    else\\n        ns.tprint(`ERROR! ${faction} does not offer any work!`);\\n}\\nexport function getFactionRepGoal(ns, faction) {\\n    const owned = ns.singularity.getOwnedAugmentations(true);\\n    let highestRep = 0;\\n    for (const aug of ns.singularity\\n        .getAugmentationsFromFaction(faction)\\n        .filter((a) => !owned.includes(a))) {\\n        const rep = ns.singularity.getAugmentationRepReq(aug);\\n        if (rep > highestRep)\\n            highestRep = rep;\\n    }\\n    return highestRep;\\n}\\n\",\"filename\":\"/actions/factionWork.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":20.1,\"server\":\"home\",\"moduleSequenceNumber\":114426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { commitCrime } from \\\"actions/crime\\\";\\nimport { getFactionRepGoal, workForFaction } from \\\"actions/factionWork\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      ENTER YOUR SCRIPT DESCRIPTION HERE!\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n}\\nexport function priciestAug(ns) {\\n    const owned = ns.singularity.getOwnedAugmentations(true);\\n    let allAugs = [];\\n    for (const faction of ns.getPlayer().factions) {\\n        for (const aug of ns.singularity\\n            .getAugmentationsFromFaction(faction)\\n            .filter((a) => {\\n            if (owned.includes(a))\\n                return false;\\n            for (const prereq of ns.singularity.getAugmentationPrereq(a)) {\\n                if (!owned.includes(prereq))\\n                    return false;\\n            }\\n            return true;\\n        })) {\\n            allAugs.push(aug);\\n        }\\n    }\\n    return allAugs.sort((a, b) => ns.singularity.getAugmentationPrice(b) -\\n        ns.singularity.getAugmentationPrice(a))[0];\\n}\\nexport async function farmRep(ns) {\\n    for (const faction of ns.getPlayer().factions) {\\n        if (ns.singularity.getFactionRep(faction) < getFactionRepGoal(ns, faction)) {\\n            await workForFaction(ns, faction);\\n        }\\n    }\\n}\\nexport async function purchasePricey(ns) {\\n    const targetAug = priciestAug(ns);\\n    ns.print(`target aug : ${targetAug}`);\\n    for (const faction of ns\\n        .getPlayer()\\n        .factions.sort((a, b) => ns.singularity.getFactionRep(b) - ns.singularity.getFactionRep(a))) {\\n        if (ns.singularity.getAugmentationsFromFaction(faction).includes(targetAug)) {\\n            if (ns.singularity.getAugmentationRepReq(targetAug) >\\n                ns.singularity.getFactionRep(faction)) {\\n                ns.print(`Need rep with ${faction}.`);\\n                await workForFaction(ns, faction);\\n            }\\n            else if (ns.getServerMoneyAvailable(\\\"home\\\") >=\\n                ns.singularity.getAugmentationPrice(targetAug)) {\\n                ns.print(`Purchasing ${targetAug} from ${faction}`);\\n                ns.singularity.purchaseAugmentation(faction, targetAug);\\n            }\\n            else {\\n                ns.print(`Commiting crime to afford ${targetAug} from ${faction}`);\\n                await commitCrime(ns);\\n            }\\n            break;\\n        }\\n    }\\n}\\n\",\"filename\":\"/actions/augmentations.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":51.8,\"server\":\"home\",\"moduleSequenceNumber\":114422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserver-1650412254811\",\"pserver-1650413089399\",\"pserver-1650413687370\",\"pserver-1650414626298\",\"pserver-1650414886313\",\"pserver-1650415090311\",\"pserver-1650415352780\",\"pserver-1650415598894\",\"pserver-1650415768717\",\"pserver-1650416024296\",\"pserver-1650416193434\",\"pserver-1650416448545\",\"pserver-1650416633694\",\"pserver-1650416872936\",\"pserver-1650417126282\",\"pserver-1650417297831\",\"pserver-1650417553825\",\"pserver-1650417723699\",\"pserver-1650417977090\",\"pserver-1650418148139\",\"pserver-1650418402545\",\"pserver-1650418573845\",\"pserver-1650418826548\",\"pserver-1650418996054\",\"pserver-1650419252736\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.196,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"27.1.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"ecorp\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"ecorp\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"ecorp\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":46066521099.75,\"moneyMax\":172749454124.0625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1357,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"76.9.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"megacorp\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"megacorp\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"megacorp\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":32817999500.25,\"moneyMax\":123067498125.9375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1289,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"71.9.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"b-and-a\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"b-and-a\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"b-and-a\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":11764024557.75,\"moneyMax\":44115092091.5625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1052,\"serverGrowth\":70}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"30.6.7.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"blade\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0f7155d8-6cd1-4720-b116-ad33697e118b\",\"moduleSequenceNumber\":102044}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"blade\",\"moduleSequenceNumber\":102044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///cb5d5c70-cee1-468b-b93b-2242df8eff6d\",\"moduleSequenceNumber\":94180}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"blade\",\"moduleSequenceNumber\":94180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":15171864292.5,\"moneyMax\":56894491096.875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1086,\"serverGrowth\":84}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"93.2.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nwo\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nwo\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nwo\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":23333690575.5,\"moneyMax\":87501339658.125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1195,\"serverGrowth\":74}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"34.8.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"clarkinc\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"clarkinc\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"clarkinc\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":17316814194.75,\"moneyMax\":64938053230.3125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1062,\"serverGrowth\":74}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"85.9.5.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnitek\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///5e51fe66-6d5d-4b35-8494-0bcc981fc379\",\"moduleSequenceNumber\":102038}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnitek\",\"moduleSequenceNumber\":102038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///248bdaeb-7b6e-459c-b102-53cd4c714929\",\"moduleSequenceNumber\":93787}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omnitek\",\"moduleSequenceNumber\":93787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":12116651035.5,\"moneyMax\":45437441383.125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":931,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"92.1.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"4sigma\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"4sigma\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"4sigma\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":11332758373.5,\"moneyMax\":42497843900.625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":902,\"serverGrowth\":99}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"19.6.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":22065628612.5,\"moneyMax\":82746107296.875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1134,\"serverGrowth\":95}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"48.6.1.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4431c985-5923-4955-9981-7dcd0ada59d9\",\"moduleSequenceNumber\":94184}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":94184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///1733aa17-3946-41ba-b766-d9da49e4e1b8\",\"moduleSequenceNumber\":102037}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":102037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///233f16c4-a241-4f40-be64-c35ffc3d302f\",\"moduleSequenceNumber\":93786}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":93786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":1299426025.5,\"moneyMax\":4872847595.625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":999,\"serverGrowth\":98}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"88.6.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1526,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"17.2.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"stormtech\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"stormtech\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"stormtech\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":790900788,\"moneyMax\":2965877955,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":885,\"serverGrowth\":73}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"7.7.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"defcomm\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"defcomm\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"defcomm\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":640689837,\"moneyMax\":2402586888.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1041,\"serverGrowth\":65}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"53.0.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"infocomm\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"infocomm\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"infocomm\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":598602384.75,\"moneyMax\":2244758942.8125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":936,\"serverGrowth\":52}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"11.9.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"helios\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3316f55e-2d36-4a49-b19e-10c6f353a148\",\"moduleSequenceNumber\":102052}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"helios\",\"moduleSequenceNumber\":102052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"helios\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":436005789.75,\"moneyMax\":1635021711.5625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":869,\"serverGrowth\":77}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"65.9.1.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"vitalife\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///f709c7da-4737-47b4-83a6-46b5449932e1\",\"moduleSequenceNumber\":102043}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"vitalife\",\"moduleSequenceNumber\":102043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///3861e3ed-13ae-4fb4-8042-f1463c50574d\",\"moduleSequenceNumber\":94179}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"vitalife\",\"moduleSequenceNumber\":94179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":589315063.5,\"moneyMax\":2209931488.125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":808,\"serverGrowth\":71}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"69.9.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"icarus\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"icarus\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"icarus\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":747630816,\"moneyMax\":2803615560,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":919,\"serverGrowth\":95}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"57.6.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"univ-energy\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0d9745a7-dbb3-4fe9-b912-229323426b07\",\"moduleSequenceNumber\":102045}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"univ-energy\",\"moduleSequenceNumber\":102045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///cde6295d-e798-495e-82c2-542d9e180d51\",\"moduleSequenceNumber\":94181}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"univ-energy\",\"moduleSequenceNumber\":94181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":873601968,\"moneyMax\":3276007380,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":86}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"65.1.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"titan-labs\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2be92c0d-25f3-445f-9215-5f3d3e4deba1\",\"moduleSequenceNumber\":102049}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"titan-labs\",\"moduleSequenceNumber\":102049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"titan-labs\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":655461701.25,\"moneyMax\":2457981379.6875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":858,\"serverGrowth\":62}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"45.6.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"microdyne\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///59657cfe-fbe5-4cc9-8fcb-1d862fc65db2\",\"moduleSequenceNumber\":102051}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"microdyne\",\"moduleSequenceNumber\":102051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"microdyne\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":458200275.75,\"moneyMax\":1718251034.0625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":864,\"serverGrowth\":82}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"27.6.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":625378911.75,\"moneyMax\":2345170919.0625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":920,\"serverGrowth\":74}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"44.4.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":585174519,\"moneyMax\":2194404446.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":72}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"13.4.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aerocorp\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aerocorp\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"aerocorp\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":794706329.25,\"moneyMax\":2980148734.6875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":866,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"90.6.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnia\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0bc390ac-4f6d-4f44-a99c-d179a4a77806\",\"moduleSequenceNumber\":102054}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnia\",\"moduleSequenceNumber\":102054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omnia\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":681982698.75,\"moneyMax\":2557435120.3125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":877,\"serverGrowth\":64}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"91.1.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-def\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-def\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zb-def\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"solaris\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":783447084,\"moneyMax\":2937926565,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":804,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"50.4.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":695841902.25,\"moneyMax\":2609407133.4375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":783,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-533278-Joe'sGuns.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[95,[2,4,7,9,10,11,13,14]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"58.9.3.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///aea538f8-e0bd-40d5-9c0a-e1b23cd04631\",\"moduleSequenceNumber\":102042}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"solaris\",\"moduleSequenceNumber\":102042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"solaris\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a78fc08d-5cbd-4796-8393-8a00b31a242c\",\"moduleSequenceNumber\":94178}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"solaris\",\"moduleSequenceNumber\":94178,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":655906999.5,\"moneyMax\":2459651248.125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":845,\"serverGrowth\":71}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"36.8.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"deltaone\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"deltaone\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"deltaone\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1223372450.25,\"moneyMax\":4587646688.4375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":805,\"serverGrowth\":54}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"65.4.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"global-pharm\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3aabb003-69a6-4bca-9b36-453f9ac8bab8\",\"moduleSequenceNumber\":102053}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"global-pharm\",\"moduleSequenceNumber\":102053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"global-pharm\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1136589085.5,\"moneyMax\":4262209070.625,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":818,\"serverGrowth\":80}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"75.4.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nova-med\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nova-med\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nova-med\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"univ-energy\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":855457359.75,\"moneyMax\":3207965099.0625,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":799,\"serverGrowth\":79}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"65.7.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zeus-med\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zeus-med\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zeus-med\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1049248548.75,\"moneyMax\":3934682057.8125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":806,\"serverGrowth\":80}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"10.8.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"unitalife\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9dae0ef9-b852-4113-ae27-84ce9916300a\",\"moduleSequenceNumber\":102050}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"unitalife\",\"moduleSequenceNumber\":102050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"unitalife\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aerocorp\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":804001291.5,\"moneyMax\":3015004843.125,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":783,\"serverGrowth\":73}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"79.5.2.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b5a708e9-c886-481b-b9e0-4d1d6d36520d\",\"moduleSequenceNumber\":102040}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":102040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///e2aefd84-c81a-410e-8d0c-cf8d00d3c34f\",\"moduleSequenceNumber\":93789}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":93789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":544852505.25,\"moneyMax\":2043196894.6875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":685,\"serverGrowth\":63}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"87.8.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9b96f832-97c0-42ee-81a7-66176a947bdb\",\"moduleSequenceNumber\":3347}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rho-construction\",\"moduleSequenceNumber\":3347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///dd93f3e5-b15c-4e98-9cd8-825964161626\",\"moduleSequenceNumber\":4874}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rho-construction\",\"moduleSequenceNumber\":4874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f1962e67-6472-46ba-b01f-34fa5abd7a50\",\"moduleSequenceNumber\":7552}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"rho-construction\",\"moduleSequenceNumber\":7552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":407924940.75,\"moneyMax\":1529718527.8125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":509,\"serverGrowth\":40}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"84.7.1.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///75b267ba-60ae-4e2c-be50-3885ce4332b0\",\"moduleSequenceNumber\":102041}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":102041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0ccbd2f9-81d6-4ab8-8c17-249fe71fe7d1\",\"moduleSequenceNumber\":102056}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":102056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///87b17733-f6f8-4c84-913c-a613d3ea6bbc\",\"moduleSequenceNumber\":93790}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":93790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":483430473,\"moneyMax\":1812864273.75,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":590,\"serverGrowth\":54}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"18.2.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aevum-police\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8ca6c696-f679-41e9-ab6a-7bf46b33c411\",\"moduleSequenceNumber\":102047}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aevum-police\",\"moduleSequenceNumber\":102047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///25222609-eca2-4b4a-b52e-dc6b2c5c2a87\",\"moduleSequenceNumber\":94183}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"aevum-police\",\"moduleSequenceNumber\":94183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":179076069,\"moneyMax\":671535258.75,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":424,\"serverGrowth\":40}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"64.8.5.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ee90f34a-8021-47ef-85bc-daa00708430b\",\"moduleSequenceNumber\":2940}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":2940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///81de4a51-6cdc-4c72-9696-5baaa70bfd9b\",\"moduleSequenceNumber\":5250}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":5250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///7b9730d8-d80e-4a97-87ed-24cdedbfc664\",\"moduleSequenceNumber\":7929}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":7929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":156353304,\"moneyMax\":586324890,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":409,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"56.4.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-institute\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2427e318-2aaf-44bf-998b-383911f56314\",\"moduleSequenceNumber\":102048}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-institute\",\"moduleSequenceNumber\":102048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zb-institute\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":815886123,\"moneyMax\":3059572961.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":763,\"serverGrowth\":76}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"19.7.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ef141172-2562-400c-8427-35ef1f056b22\",\"moduleSequenceNumber\":3346}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"summit-uni\",\"moduleSequenceNumber\":3346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///de8cfc5b-3553-4dc2-9a4c-42984e2c2962\",\"moduleSequenceNumber\":4873}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"summit-uni\",\"moduleSequenceNumber\":4873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///b7535513-06d5-4fba-9fe9-70cd24679634\",\"moduleSequenceNumber\":69157}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"summit-uni\",\"moduleSequenceNumber\":69157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":214476906.75,\"moneyMax\":804288400.3125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":439,\"serverGrowth\":52}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"86.9.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"syscore\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"syscore\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"syscore\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"computek\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":378513959.25,\"moneyMax\":1419427347.1875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":576,\"serverGrowth\":68}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"64.5.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///fe9accb8-b4c1-443f-9fc1-34611e3fa733\",\"moduleSequenceNumber\":3355}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"catalyst\",\"moduleSequenceNumber\":3355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///acdcce52-edd8-4075-a400-a2d50c2263ee\",\"moduleSequenceNumber\":5270}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"catalyst\",\"moduleSequenceNumber\":5270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///395f2fbc-2554-46d4-8663-cd7a8dbc7075\",\"moduleSequenceNumber\":6793}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"catalyst\",\"moduleSequenceNumber\":6793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":225345153.75,\"moneyMax\":845044326.5625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":420,\"serverGrowth\":51}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"55.4.9.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9d667195-48cd-4918-baab-550ded7614bb\",\"moduleSequenceNumber\":3315}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"the-hub\",\"moduleSequenceNumber\":3315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///aaf11914-4861-4727-968e-8b2210782639\",\"moduleSequenceNumber\":4479}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"the-hub\",\"moduleSequenceNumber\":4479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f27714fa-64d3-42e2-8e12-7c1d747fa2b7\",\"moduleSequenceNumber\":14705}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"the-hub\",\"moduleSequenceNumber\":14705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":114015737.25,\"moneyMax\":427559014.6875,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":323,\"serverGrowth\":47}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"3.5.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"computek\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"computek\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"computek\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":165246273,\"moneyMax\":619673523.75,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":379,\"serverGrowth\":47}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"61.6.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///cbfdda26-9c30-4e62-add8-66511c4ca21d\",\"moduleSequenceNumber\":3316}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"netlink\",\"moduleSequenceNumber\":3316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9759fc66-cab2-459a-8576-f9b2d48eeae0\",\"moduleSequenceNumber\":4480}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"netlink\",\"moduleSequenceNumber\":4480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///375ad190-2877-40c0-8a19-16ea30986c2d\",\"moduleSequenceNumber\":5652}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"netlink\",\"moduleSequenceNumber\":5652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":375,\"serverGrowth\":51}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"59.5.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":58735062,\"moneyMax\":220256482.5,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":256,\"serverGrowth\":49}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"9.9.1.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///f70898e9-4eec-4d67-a5ad-c2e3c9ef4c25\",\"moduleSequenceNumber\":3359}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":3359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///319b4600-faa0-4a7d-8ff6-40db14a9654f\",\"moduleSequenceNumber\":5274}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":5274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///26c1565a-7733-4652-a26c-5bce70885e7f\",\"moduleSequenceNumber\":5655}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"n00dles\",\"moduleSequenceNumber\":5655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":52500,\"moneyMax\":196875,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"63.4.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e38cdb30-e3b4-4b18-9dc2-c9379c58a73f\",\"moduleSequenceNumber\":3351}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":3351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a91a13d9-5d8e-4d7c-adba-a2924bb7f356\",\"moduleSequenceNumber\":5267}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":5267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///acf7fc48-c260-40d5-be2c-843ceb92067d\",\"moduleSequenceNumber\":7173}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":7173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":1500000,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"4.9.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8ecf745a-3008-43bc-b77c-4080c36a990b\",\"moduleSequenceNumber\":3353}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":3353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a2ced73-d2ad-4953-8ab0-9542b6ec881b\",\"moduleSequenceNumber\":4876}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":4876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f5dfad2c-a48a-487b-8505-9a1f2e5412e3\",\"moduleSequenceNumber\":6034}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":6034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":1725000,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"63.7.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///80c1719e-0181-4252-8fcc-4c0ad6a06e93\",\"moduleSequenceNumber\":3354}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":3354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///6f7f7883-ee8e-4ac1-97ce-15f56939b935\",\"moduleSequenceNumber\":5269}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":5269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///72735e71-79bf-4fa0-8b2d-3632d882e48d\",\"moduleSequenceNumber\":7934}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"joesguns\",\"moduleSequenceNumber\":7934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.032,\"minDifficulty\":5,\"moneyAvailable\":3561885.718685222,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"51.1.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9ca24198-524b-42ca-aec2-c9773662d634\",\"moduleSequenceNumber\":3343}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zer0\",\"moduleSequenceNumber\":3343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0b174cb1-fd3c-41f3-8d2e-3b499ebb6dfe\",\"moduleSequenceNumber\":4870}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zer0\",\"moduleSequenceNumber\":4870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///21e401ef-d05b-4f6b-b728-f2ad417a05ca\",\"moduleSequenceNumber\":6791}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zer0\",\"moduleSequenceNumber\":6791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5625000,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"43.9.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///07668663-9f45-4646-89d7-3286e568d183\",\"moduleSequenceNumber\":515387}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"nectar-net\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4d6552f8-3e7c-4a7b-a5fb-fe2ac7d21584\",\"moduleSequenceNumber\":3350}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nectar-net\",\"moduleSequenceNumber\":3350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///5549f63d-5df2-4134-9295-2dd0ca5b2418\",\"moduleSequenceNumber\":5266}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nectar-net\",\"moduleSequenceNumber\":5266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///aa8a139b-3e8e-4206-9def-e73e9f63134d\",\"moduleSequenceNumber\":8319}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nectar-net\",\"moduleSequenceNumber\":8319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2062500,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"84.2.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ccd9b1aa-c4c0-46a9-9d31-f4d622f9e052\",\"moduleSequenceNumber\":3341}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"neo-net\",\"moduleSequenceNumber\":3341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///54b4d9bd-35d3-4635-a14d-ac75102b03f1\",\"moduleSequenceNumber\":4868}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"neo-net\",\"moduleSequenceNumber\":4868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a556cb6c-5a9e-4515-a37e-5f34d3c34fe6\",\"moduleSequenceNumber\":9069}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"neo-net\",\"moduleSequenceNumber\":9069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":3750000,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"27.2.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e20754ae-7b6e-4363-bf57-74b13a37d9b1\",\"moduleSequenceNumber\":3314}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"silver-helix\",\"moduleSequenceNumber\":3314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///c9a12416-cf33-4625-8ef7-379d2e03cbbd\",\"moduleSequenceNumber\":5252}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"silver-helix\",\"moduleSequenceNumber\":5252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f24dfe27-086d-4d1b-8c3c-ae617e606b3a\",\"moduleSequenceNumber\":6796}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"silver-helix\",\"moduleSequenceNumber\":6796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":33750000,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"20.5.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///55d5075d-f5b2-4253-82f1-7153c632b3c1\",\"moduleSequenceNumber\":3356}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":3356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///cacc436a-bc8a-409d-825d-14a605dfc8f7\",\"moduleSequenceNumber\":5271}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":5271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///ab1a8e5e-b81d-4a56-8944-968bd191d19a\",\"moduleSequenceNumber\":6794}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":6794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2250000,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"34.6.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///395d98c2-f3d6-422e-ada4-b31f81afe22d\",\"moduleSequenceNumber\":3357}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":3357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///bc84f96d-91c2-4a6f-b7ee-42e2b4c5282f\",\"moduleSequenceNumber\":5272}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":5272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///e0fefc33-799c-4f36-8792-40e6126a8994\",\"moduleSequenceNumber\":70231}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":70231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":9783166.637150621,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"54.0.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///618c42b8-610f-4276-a9c2-58452dd24dbe\",\"moduleSequenceNumber\":3345}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"phantasy\",\"moduleSequenceNumber\":3345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///c87c9f7d-c169-4231-8713-20e72c23b5ea\",\"moduleSequenceNumber\":4872}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"phantasy\",\"moduleSequenceNumber\":4872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///0b532efb-fa46-4b2b-9070-4c8dc92a4db2\",\"moduleSequenceNumber\":7930}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"phantasy\",\"moduleSequenceNumber\":7930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"computek\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":67500000,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"45.2.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8886943a-237c-4b00-a164-6041d32b4543\",\"moduleSequenceNumber\":3344}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"max-hardware\",\"moduleSequenceNumber\":3344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ce463a6c-d71f-44e4-bda8-e6805ddb023b\",\"moduleSequenceNumber\":4871}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"max-hardware\",\"moduleSequenceNumber\":4871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///11608fef-afe2-4888-be96-e7878496aba4\",\"moduleSequenceNumber\":8694}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"max-hardware\",\"moduleSequenceNumber\":8694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":7500000,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"71.2.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///19a4669e-ee65-4302-8cfe-801416fb6919\",\"moduleSequenceNumber\":3342}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omega-net\",\"moduleSequenceNumber\":3342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ad9b84c5-a434-4f91-a651-7f94921357e2\",\"moduleSequenceNumber\":4869}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omega-net\",\"moduleSequenceNumber\":4869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6015fe7d-5b78-4f53-be6f-cdbd3f7d5312\",\"moduleSequenceNumber\":7932}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omega-net\",\"moduleSequenceNumber\":7932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":26,\"hackDifficulty\":9,\"minDifficulty\":9,\"moneyAvailable\":91427244.375,\"moneyMax\":190583004.375,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":206,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"73.2.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":41397315.75,\"moneyMax\":155239934.0625,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":241,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"57.0.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3cd97a26-1ac5-4af1-ba4d-6fc702425b88\",\"moduleSequenceNumber\":3349}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":3349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///c94e8da1-dfcf-43a8-bde2-db9516018b8a\",\"moduleSequenceNumber\":5265}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":5265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///90e31133-917a-43bd-a69d-9fe99b8e59ac\",\"moduleSequenceNumber\":6035}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"iron-gym\",\"moduleSequenceNumber\":6035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":15000000,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"14.5.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///2f7edf91-c6da-48af-a9b5-c326162786c0\",\"moduleSequenceNumber\":3348}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":3348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///c8dc48ec-c064-4568-972a-2532e5c6571c\",\"moduleSequenceNumber\":4875}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":4875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///bee9048b-d8b3-4df1-88ec-f45bc76ebb10\",\"moduleSequenceNumber\":5653}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":5653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":494,\"serverGrowth\":43}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"37.3.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///f81cf782-7c4c-4846-b076-de5367df439f\",\"moduleSequenceNumber\":102046}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":102046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///fa5a6ce8-0743-43cb-9408-cac23b331cf2\",\"moduleSequenceNumber\":94182}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":94182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1019,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"26.2.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":698,\"serverGrowth\":47}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"59.1.0.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///5f998c94-e926-44dc-a4d5-45cd42ef37f7\",\"moduleSequenceNumber\":102039}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":102039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///892e3e75-4ebd-4251-b3e4-5485176604ed\",\"moduleSequenceNumber\":93788}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":93788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nova-med\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":517,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"89.1.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e5753f8d-2169-4169-8afd-24b415485143\",\"moduleSequenceNumber\":3352}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":3352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///eb2b6bef-669c-47e0-9def-bf0bd3d58484\",\"moduleSequenceNumber\":5268}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":5268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///b14ba7ab-2263-4036-a54b-877d29e41285\",\"moduleSequenceNumber\":9071}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":9071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":342,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"88.3.9.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///28e489f3-1721-4b61-b7c7-9146d25e9cc8\",\"moduleSequenceNumber\":3313}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":3313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///623b2649-3b2e-48c9-b936-80d300d1de90\",\"moduleSequenceNumber\":5251}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":5251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///ebdbee48-2a49-43bd-8934-3089d9fc94f2\",\"moduleSequenceNumber\":7175}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":7175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":213,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"65.3.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\".\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///92b8b7dd-6e98-41df-8753-a1c35e904523\",\"moduleSequenceNumber\":102055}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\".\",\"moduleSequenceNumber\":102055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\".\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":526,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"65.7.2.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///50921b79-fcb9-419c-bbab-184ef3371687\",\"moduleSequenceNumber\":3358}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"CSEC\",\"moduleSequenceNumber\":3358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7a7f5be5-a8b5-466a-9bf2-bb48063da5b0\",\"moduleSequenceNumber\":5273}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"CSEC\",\"moduleSequenceNumber\":5273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///02930f89-3003-4ea0-a021-212070f98413\",\"moduleSequenceNumber\":5654}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"CSEC\",\"moduleSequenceNumber\":5654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":57,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"99.9.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"The-Cave\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"The-Cave\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"The-Cave\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"49.3.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":9000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"23.8.8.5\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"darkweb\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"darkweb\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"darkweb\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650412254811\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650412254811\",\"httpPortOpen\":false,\"ip\":\"48.9.6.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449167478],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":7994,\"ramUsage\":1.8,\"server\":\"pserver-1650412254811\",\"threads\":568,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///d326a772-23ab-44c9-a4cf-f3c0ad3117c7\",\"moduleSequenceNumber\":6788}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///d6297b77-03dd-45e1-a01e-94cd2e22d6f2\",\"moduleSequenceNumber\":2936}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1650412254811\",\"moduleSequenceNumber\":2936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9775723b-2e4f-4a53-8cc6-741d84347072\",\"moduleSequenceNumber\":2939}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650412254811\",\"moduleSequenceNumber\":2939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///de08b26e-d61a-4370-b589-1b1a2c99138a\",\"moduleSequenceNumber\":4478}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650412254811\",\"moduleSequenceNumber\":4478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///d326a772-23ab-44c9-a4cf-f3c0ad3117c7\",\"moduleSequenceNumber\":6788}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650412254811\",\"moduleSequenceNumber\":6788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650413089399\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650413089399\",\"httpPortOpen\":false,\"ip\":\"77.3.4.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":900.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449052893],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":119.41000000000115,\"pid\":7968,\"ramUsage\":1.85,\"server\":\"pserver-1650413089399\",\"threads\":487,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3a11127d-652d-49da-85cb-7d8b5c1e1b56\",\"moduleSequenceNumber\":8313}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3a11127d-652d-49da-85cb-7d8b5c1e1b56\",\"moduleSequenceNumber\":8313}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650413089399\",\"moduleSequenceNumber\":8313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///079fac4f-e023-4a1d-9ed1-e69eb7a1ffac\",\"moduleSequenceNumber\":10571}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650413089399\",\"moduleSequenceNumber\":10571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///e7fe1e95-f04b-4033-aa3c-2f35986c4a9e\",\"moduleSequenceNumber\":10196}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650413089399\",\"moduleSequenceNumber\":10196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///68851809-b376-4f5a-8c53-1df9b619d4a1\",\"moduleSequenceNumber\":14701}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1650413089399\",\"moduleSequenceNumber\":14701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650413687370\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650413687370\",\"httpPortOpen\":false,\"ip\":\"84.7.6.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":900.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449077621],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.61000000000081,\"pid\":7974,\"ramUsage\":1.85,\"server\":\"pserver-1650413687370\",\"threads\":487,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///6c099750-764c-4ced-b076-16ca3bd97faf\",\"moduleSequenceNumber\":12070}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///6c099750-764c-4ced-b076-16ca3bd97faf\",\"moduleSequenceNumber\":12070}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650413687370\",\"moduleSequenceNumber\":12070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///694bb3fb-f356-4a88-bbd8-b04ff0b6001e\",\"moduleSequenceNumber\":12825}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650413687370\",\"moduleSequenceNumber\":12825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///2440f8c9-2af8-4861-aa50-263dcc23801f\",\"moduleSequenceNumber\":12824}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650413687370\",\"moduleSequenceNumber\":12824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///f1a6d78f-61ea-4749-87fc-476bb1d0472f\",\"moduleSequenceNumber\":14704}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1650413687370\",\"moduleSequenceNumber\":14704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650414626298\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650414626298\",\"httpPortOpen\":false,\"ip\":\"74.4.6.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":900.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449102348],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.81000000000046,\"pid\":7980,\"ramUsage\":1.85,\"server\":\"pserver-1650414626298\",\"threads\":487,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///284bbf82-82f4-496b-a697-f3bc161f76cc\",\"moduleSequenceNumber\":20581}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///c799f350-1c0f-4f1a-94b8-6f99669ddce0\",\"moduleSequenceNumber\":18395}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650414626298\",\"moduleSequenceNumber\":18395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///284bbf82-82f4-496b-a697-f3bc161f76cc\",\"moduleSequenceNumber\":20581}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650414626298\",\"moduleSequenceNumber\":20581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///e9dd9900-a611-4d75-bc80-92c65132634c\",\"moduleSequenceNumber\":18400}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650414626298\",\"moduleSequenceNumber\":18400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///6a11d37d-3b08-4735-a3f1-6206e3d8bfcd\",\"moduleSequenceNumber\":63372}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1650414626298\",\"moduleSequenceNumber\":63372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650414886313\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650414886313\",\"httpPortOpen\":false,\"ip\":\"67.1.8.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":900.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449127060],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.21000000000011,\"pid\":7986,\"ramUsage\":1.85,\"server\":\"pserver-1650414886313\",\"threads\":487,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///bfc8969c-9c7c-4e70-8f10-748da69bf9ac\",\"moduleSequenceNumber\":20959}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///73fe761e-a8cc-4783-8336-9e60e2eef468\",\"moduleSequenceNumber\":20205}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650414886313\",\"moduleSequenceNumber\":20205,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///bfc8969c-9c7c-4e70-8f10-748da69bf9ac\",\"moduleSequenceNumber\":20959}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650414886313\",\"moduleSequenceNumber\":20959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///8e24ba16-5c11-469b-9060-fb4ec6b3a0ef\",\"moduleSequenceNumber\":21339}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650414886313\",\"moduleSequenceNumber\":21339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///9c8bf6cf-533e-431f-ab10-116a8fb43913\",\"moduleSequenceNumber\":21338}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1650414886313\",\"moduleSequenceNumber\":21338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650415090311\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650415090311\",\"httpPortOpen\":false,\"ip\":\"0.5.1.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":900.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449151825],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"pid\":7992,\"ramUsage\":1.85,\"server\":\"pserver-1650415090311\",\"threads\":487,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///dd3dc7b0-44bf-4da7-8675-ff4091ec3d33\",\"moduleSequenceNumber\":22472}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///48fac213-9c14-414f-abea-1acc2dc6768a\",\"moduleSequenceNumber\":21715}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650415090311\",\"moduleSequenceNumber\":21715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///50e77bc9-37bd-4f9c-b0a9-b59a2c1c0f21\",\"moduleSequenceNumber\":23984}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650415090311\",\"moduleSequenceNumber\":23984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///dd3dc7b0-44bf-4da7-8675-ff4091ec3d33\",\"moduleSequenceNumber\":22472}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650415090311\",\"moduleSequenceNumber\":22472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4f5b1f11-9567-4c23-ac17-bc15d520a971\",\"moduleSequenceNumber\":78122}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1650415090311\",\"moduleSequenceNumber\":78122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650415352780\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650415352780\",\"httpPortOpen\":false,\"ip\":\"22.7.6.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":244.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449031301],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":141.01000000000053,\"pid\":7963,\"ramUsage\":1.85,\"server\":\"pserver-1650415352780\",\"threads\":66,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///bfebcce3-a020-45fb-840e-29f17fa411ec\",\"moduleSequenceNumber\":23227}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449154985],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"pid\":7993,\"ramUsage\":1.85,\"server\":\"pserver-1650415352780\",\"threads\":66,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///bfebcce3-a020-45fb-840e-29f17fa411ec\",\"moduleSequenceNumber\":23227}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///bfebcce3-a020-45fb-840e-29f17fa411ec\",\"moduleSequenceNumber\":23227}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650415352780\",\"moduleSequenceNumber\":23227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a2d93c35-d585-46e1-ae5f-798e34fa6b8a\",\"moduleSequenceNumber\":23985}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650415352780\",\"moduleSequenceNumber\":23985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///133bf600-ed91-42a1-a34a-05929febd843\",\"moduleSequenceNumber\":65315}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650415352780\",\"moduleSequenceNumber\":65315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///1f980fdf-09d9-4d34-91c2-8c1134221fb0\",\"moduleSequenceNumber\":64144}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1650415352780\",\"moduleSequenceNumber\":64144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650415598894\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650415598894\",\"httpPortOpen\":false,\"ip\":\"30.5.8.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":122.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449146699],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.609999999999943,\"pid\":7990,\"ramUsage\":1.85,\"server\":\"pserver-1650415598894\",\"threads\":66,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///187ac86c-6058-47dd-9e55-b61a425ac932\",\"moduleSequenceNumber\":63757}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///187ac86c-6058-47dd-9e55-b61a425ac932\",\"moduleSequenceNumber\":63757}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650415598894\",\"moduleSequenceNumber\":63757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///cbfb4514-26f0-4b8c-89e1-d4d5af0fcc88\",\"moduleSequenceNumber\":66857}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650415598894\",\"moduleSequenceNumber\":66857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///37363627-d17e-4ddc-914f-c51f97c019d4\",\"moduleSequenceNumber\":25118}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650415598894\",\"moduleSequenceNumber\":25118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///568aa7c7-c163-4aec-8066-4ce2d55d62a0\",\"moduleSequenceNumber\":78125}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1650415598894\",\"moduleSequenceNumber\":78125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650415768717\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650415768717\",\"httpPortOpen\":false,\"ip\":\"87.1.6.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449151817],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"pid\":7991,\"ramUsage\":1.85,\"server\":\"pserver-1650415768717\",\"threads\":553,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///5955c993-ba92-4b55-883a-6e860bc79594\",\"moduleSequenceNumber\":25874}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///58d7b680-2314-4131-991a-4e3e389c6761\",\"moduleSequenceNumber\":63758}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650415768717\",\"moduleSequenceNumber\":63758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a4b39d28-9eaa-488a-aa46-fb61f9c4ecdf\",\"moduleSequenceNumber\":64929}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650415768717\",\"moduleSequenceNumber\":64929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///5955c993-ba92-4b55-883a-6e860bc79594\",\"moduleSequenceNumber\":25874}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650415768717\",\"moduleSequenceNumber\":25874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///532abb15-335f-4b70-8d41-c2b8d5327062\",\"moduleSequenceNumber\":64147}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1650415768717\",\"moduleSequenceNumber\":64147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650416024296\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650416024296\",\"httpPortOpen\":false,\"ip\":\"25.9.5.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":122.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449056047],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":116.21000000000112,\"pid\":7969,\"ramUsage\":1.85,\"server\":\"pserver-1650416024296\",\"threads\":66,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///52d68bba-3125-409a-9592-244b0b5a3aae\",\"moduleSequenceNumber\":63373}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///52d68bba-3125-409a-9592-244b0b5a3aae\",\"moduleSequenceNumber\":63373}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650416024296\",\"moduleSequenceNumber\":63373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///1468d81f-817d-4468-b85e-d35cf4d6396a\",\"moduleSequenceNumber\":66858}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650416024296\",\"moduleSequenceNumber\":66858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///aefccfdf-0243-444f-824c-2d8950478d22\",\"moduleSequenceNumber\":64148}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650416024296\",\"moduleSequenceNumber\":64148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///2de11237-5c13-4aaf-ad88-66adadfe7129\",\"moduleSequenceNumber\":90069}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1650416024296\",\"moduleSequenceNumber\":90069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650416193434\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650416193434\",\"httpPortOpen\":false,\"ip\":\"82.0.6.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":122.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449047842],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":124.4100000000012,\"pid\":7966,\"ramUsage\":1.85,\"server\":\"pserver-1650416193434\",\"threads\":66,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///cda4bb2e-4fdb-493b-ac68-15f68e113c99\",\"moduleSequenceNumber\":63374}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///cda4bb2e-4fdb-493b-ac68-15f68e113c99\",\"moduleSequenceNumber\":63374}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650416193434\",\"moduleSequenceNumber\":63374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f90b4e1a-e5f9-4da0-bbb1-ed470e28093a\",\"moduleSequenceNumber\":65703}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650416193434\",\"moduleSequenceNumber\":65703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a5a8c6c5-eb3f-4c0d-819f-2e52c862431a\",\"moduleSequenceNumber\":64149}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650416193434\",\"moduleSequenceNumber\":64149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650416448545\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650416448545\",\"httpPortOpen\":false,\"ip\":\"14.2.8.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449052849],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":119.41000000000115,\"pid\":7967,\"ramUsage\":1.85,\"server\":\"pserver-1650416448545\",\"threads\":553,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///4640a3d1-8b8c-48f0-81a2-fa40f51e6927\",\"moduleSequenceNumber\":65706}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9730685a-a3c6-4939-874b-c1fd8a08aa65\",\"moduleSequenceNumber\":63375}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650416448545\",\"moduleSequenceNumber\":63375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6c75e09e-6f47-4d0b-bb09-ec09d63463f3\",\"moduleSequenceNumber\":68006}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650416448545\",\"moduleSequenceNumber\":68006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///4640a3d1-8b8c-48f0-81a2-fa40f51e6927\",\"moduleSequenceNumber\":65706}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650416448545\",\"moduleSequenceNumber\":65706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///4a5f66fe-69ea-429e-a81f-7ce4c06f6e90\",\"moduleSequenceNumber\":90766}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1650416448545\",\"moduleSequenceNumber\":90766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650416633694\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650416633694\",\"httpPortOpen\":false,\"ip\":\"95.3.3.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":122.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449080837],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.41000000000076,\"pid\":7975,\"ramUsage\":1.85,\"server\":\"pserver-1650416633694\",\"threads\":66,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///808832b4-6349-44ec-9bb6-53b69cd5874b\",\"moduleSequenceNumber\":63376}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///808832b4-6349-44ec-9bb6-53b69cd5874b\",\"moduleSequenceNumber\":63376}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650416633694\",\"moduleSequenceNumber\":63376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///3f16fca3-9f9f-498e-b505-8699f06fcbf7\",\"moduleSequenceNumber\":66090}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650416633694\",\"moduleSequenceNumber\":66090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///541cb61b-6b80-4142-a99b-86c4f498b469\",\"moduleSequenceNumber\":64150}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650416633694\",\"moduleSequenceNumber\":64150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650416872936\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650416872936\",\"httpPortOpen\":false,\"ip\":\"96.3.5.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":122.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449072580],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":99.61000000000088,\"pid\":7972,\"ramUsage\":1.85,\"server\":\"pserver-1650416872936\",\"threads\":66,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///647768b8-7d53-4266-b054-c918e86d719f\",\"moduleSequenceNumber\":63755}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///647768b8-7d53-4266-b054-c918e86d719f\",\"moduleSequenceNumber\":63755}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650416872936\",\"moduleSequenceNumber\":63755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///084f63a7-50ac-4430-9349-4ea7cd18f1fe\",\"moduleSequenceNumber\":65704}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650416872936\",\"moduleSequenceNumber\":65704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///11277d1b-939e-41ed-8b4c-d9382be7da5a\",\"moduleSequenceNumber\":64151}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650416872936\",\"moduleSequenceNumber\":64151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///c9ea6678-29ba-4aed-bce8-b1442415124d\",\"moduleSequenceNumber\":78512}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1650416872936\",\"moduleSequenceNumber\":78512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650417126282\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650417126282\",\"httpPortOpen\":false,\"ip\":\"5.0.1.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449077612],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.61000000000081,\"pid\":7973,\"ramUsage\":1.85,\"server\":\"pserver-1650417126282\",\"threads\":553,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///38c12e8d-fd9d-485f-84e8-fe73348bafb1\",\"moduleSequenceNumber\":68007}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///c41058c0-8ae9-4d1f-b567-7f285874a104\",\"moduleSequenceNumber\":63756}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650417126282\",\"moduleSequenceNumber\":63756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///19451cd9-e962-46f8-8422-8c6badc2d849\",\"moduleSequenceNumber\":67241}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650417126282\",\"moduleSequenceNumber\":67241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///38c12e8d-fd9d-485f-84e8-fe73348bafb1\",\"moduleSequenceNumber\":68007}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650417126282\",\"moduleSequenceNumber\":68007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///34811ecd-a7f1-45d8-803e-d08d9f149b66\",\"moduleSequenceNumber\":95896}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1650417126282\",\"moduleSequenceNumber\":95896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650417297831\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650417297831\",\"httpPortOpen\":false,\"ip\":\"90.9.8.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":122.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449105555],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.61000000000041,\"pid\":7981,\"ramUsage\":1.85,\"server\":\"pserver-1650417297831\",\"threads\":66,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///f2870d11-2cb1-4182-9a1b-565c9b72cee5\",\"moduleSequenceNumber\":63759}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///f2870d11-2cb1-4182-9a1b-565c9b72cee5\",\"moduleSequenceNumber\":63759}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650417297831\",\"moduleSequenceNumber\":63759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///fa14b721-a7e2-4af8-8650-bee8abab6c39\",\"moduleSequenceNumber\":69158}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650417297831\",\"moduleSequenceNumber\":69158,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///fb1e265b-4448-4b0c-ab5e-7777334687da\",\"moduleSequenceNumber\":64533}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650417297831\",\"moduleSequenceNumber\":64533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650417553825\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650417553825\",\"httpPortOpen\":false,\"ip\":\"52.2.9.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":122.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449171376],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":7996,\"ramUsage\":1.85,\"server\":\"pserver-1650417553825\",\"threads\":66,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///447b64d7-d15b-495f-8023-2f2f04e2e708\",\"moduleSequenceNumber\":70615}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///447b64d7-d15b-495f-8023-2f2f04e2e708\",\"moduleSequenceNumber\":70615}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650417553825\",\"moduleSequenceNumber\":70615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///d2dbb874-ecd0-4f8f-a7a0-493069ca0763\",\"moduleSequenceNumber\":65316}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650417553825\",\"moduleSequenceNumber\":65316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///e7facb1d-ea75-4fa2-ae77-3499eec7f1bf\",\"moduleSequenceNumber\":64534}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650417553825\",\"moduleSequenceNumber\":64534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///6cdfe805-18ee-465c-a5b5-0ad0ea9f7a3e\",\"moduleSequenceNumber\":63762}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1650417553825\",\"moduleSequenceNumber\":63762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650417723699\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650417723699\",\"httpPortOpen\":false,\"ip\":\"31.2.1.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449167484],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":7995,\"ramUsage\":1.8,\"server\":\"pserver-1650417723699\",\"threads\":568,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6f6b6bd5-0a3d-49e9-a593-86e68cc1af21\",\"moduleSequenceNumber\":65314}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///2a630286-00db-447f-97a7-3dcd80213a07\",\"moduleSequenceNumber\":66089}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650417723699\",\"moduleSequenceNumber\":66089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6f6b6bd5-0a3d-49e9-a593-86e68cc1af21\",\"moduleSequenceNumber\":65314}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650417723699\",\"moduleSequenceNumber\":65314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0653a7f3-7745-4761-b33f-8b6bd4e18201\",\"moduleSequenceNumber\":68774}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650417723699\",\"moduleSequenceNumber\":68774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///d37747d6-3855-46ef-9c29-e8123eda456e\",\"moduleSequenceNumber\":64537}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1650417723699\",\"moduleSequenceNumber\":64537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650417977090\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650417977090\",\"httpPortOpen\":false,\"ip\":\"5.2.8.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":122.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449097250],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.01000000000053,\"pid\":7978,\"ramUsage\":1.85,\"server\":\"pserver-1650417977090\",\"threads\":66,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///35d4242d-3269-4c06-bbf9-02b41c75705d\",\"moduleSequenceNumber\":70998}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///35d4242d-3269-4c06-bbf9-02b41c75705d\",\"moduleSequenceNumber\":70998}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650417977090\",\"moduleSequenceNumber\":70998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///d12fd6ac-5e76-4b6c-8394-c89330c40092\",\"moduleSequenceNumber\":64538}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650417977090\",\"moduleSequenceNumber\":64538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///31e6bcce-b8b7-4046-bd11-8af04907ecbd\",\"moduleSequenceNumber\":64927}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650417977090\",\"moduleSequenceNumber\":64927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650418148139\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650418148139\",\"httpPortOpen\":false,\"ip\":\"23.7.2.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449102340],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.81000000000046,\"pid\":7979,\"ramUsage\":1.85,\"server\":\"pserver-1650418148139\",\"threads\":553,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///48856cdb-4cea-4786-889e-48ff6af75061\",\"moduleSequenceNumber\":64928}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4409b134-7e02-4f4b-995a-34a4211b9d10\",\"moduleSequenceNumber\":65317}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650418148139\",\"moduleSequenceNumber\":65317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///307d92df-19cf-4e3a-b360-929718f5a511\",\"moduleSequenceNumber\":64539}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650418148139\",\"moduleSequenceNumber\":64539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///48856cdb-4cea-4786-889e-48ff6af75061\",\"moduleSequenceNumber\":64928}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650418148139\",\"moduleSequenceNumber\":64928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650418402545\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650418402545\",\"httpPortOpen\":false,\"ip\":\"12.6.8.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":122.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449130287],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.01000000000006,\"pid\":7987,\"ramUsage\":1.85,\"server\":\"pserver-1650418402545\",\"threads\":66,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8a019942-a772-4725-8787-84885b535698\",\"moduleSequenceNumber\":64540}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8a019942-a772-4725-8787-84885b535698\",\"moduleSequenceNumber\":64540}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650418402545\",\"moduleSequenceNumber\":64540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///9859efa1-c3a7-4cd8-aa86-4f1915e571f1\",\"moduleSequenceNumber\":68008}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650418402545\",\"moduleSequenceNumber\":68008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///5c492eb1-6f26-4d32-a3bd-6649951bb42c\",\"moduleSequenceNumber\":65700}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650418402545\",\"moduleSequenceNumber\":65700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650418573845\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650418573845\",\"httpPortOpen\":false,\"ip\":\"96.8.0.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449142776],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.40999999999993,\"pid\":7988,\"ramUsage\":1.8,\"server\":\"pserver-1650418573845\",\"threads\":568,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///1fe46c2f-64e7-486c-93ff-2b2112a9fec4\",\"moduleSequenceNumber\":66473}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d923063b-af71-45ce-b409-2bb91c55f4f2\",\"moduleSequenceNumber\":66856}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650418573845\",\"moduleSequenceNumber\":66856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///1fe46c2f-64e7-486c-93ff-2b2112a9fec4\",\"moduleSequenceNumber\":66473}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650418573845\",\"moduleSequenceNumber\":66473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///24188111-f7c2-48ba-9701-abfcf0e0150a\",\"moduleSequenceNumber\":64541}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650418573845\",\"moduleSequenceNumber\":64541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, \\\"home\\\", host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        if (ns.getServerMaxRam(\\\"home\\\") < 1e9 && host.hostname === \\\"home\\\")\\n            continue;\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///7c7891d0-3c5c-4370-962f-9439fb800917\",\"moduleSequenceNumber\":94187}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"pserver-1650418573845\",\"moduleSequenceNumber\":94187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650418826548\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650418826548\",\"httpPortOpen\":false,\"ip\":\"55.9.8.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449142782],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.40999999999993,\"pid\":7989,\"ramUsage\":1.8,\"server\":\"pserver-1650418826548\",\"threads\":568,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///38831335-fcac-49a2-9088-2a107dbe81e3\",\"moduleSequenceNumber\":65701}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///77724134-7389-4ee4-b890-9367330ae437\",\"moduleSequenceNumber\":68391}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650418826548\",\"moduleSequenceNumber\":68391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///38831335-fcac-49a2-9088-2a107dbe81e3\",\"moduleSequenceNumber\":65701}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650418826548\",\"moduleSequenceNumber\":65701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///85b1a030-b489-4030-81fb-668bbcc595f9\",\"moduleSequenceNumber\":64542}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650418826548\",\"moduleSequenceNumber\":64542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650418996054\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650418996054\",\"httpPortOpen\":false,\"ip\":\"93.4.2.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":122.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449121990],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.21000000000018,\"pid\":7984,\"ramUsage\":1.85,\"server\":\"pserver-1650418996054\",\"threads\":66,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6dc1d97c-2953-43b0-b9ad-3c49ef05dba0\",\"moduleSequenceNumber\":65705}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6dc1d97c-2953-43b0-b9ad-3c49ef05dba0\",\"moduleSequenceNumber\":65705}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650418996054\",\"moduleSequenceNumber\":65705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a30f8ad0-69f6-4e09-b28e-43a4d108056d\",\"moduleSequenceNumber\":64543}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650418996054\",\"moduleSequenceNumber\":64543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ae369a05-955a-41cc-92a3-1cefb7e36ef4\",\"moduleSequenceNumber\":64930}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650418996054\",\"moduleSequenceNumber\":64930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1650419252736\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1650419252736\",\"httpPortOpen\":false,\"ip\":\"72.6.1.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",1650449127054],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.21000000000011,\"pid\":7985,\"ramUsage\":1.85,\"server\":\"pserver-1650419252736\",\"threads\":553,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///fe3f807e-ffd2-4d8e-aba2-f6ba060ce2e2\",\"moduleSequenceNumber\":64931}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///8da0364c-f31a-46b5-bcf7-3ffa7cb70c66\",\"moduleSequenceNumber\":65702}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650419252736\",\"moduleSequenceNumber\":65702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///9fe50308-07cb-4daa-b675-18571edd45d7\",\"moduleSequenceNumber\":64544}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1650419252736\",\"moduleSequenceNumber\":64544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///fe3f807e-ffd2-4d8e-aba2-f6ba060ce2e2\",\"moduleSequenceNumber\":64931}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1650419252736\",\"moduleSequenceNumber\":64931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":185055.8160459486,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":8995.829517719018}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":8211.655999998688}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":20370.88442376908}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":10626.56442376698}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":19522.11642376796}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":8938.831090434674}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"darkweb\":\"home;connect darkweb\",\"liquidate\":\"run stocks/liquidate.js\",\"scn\":\"cls;scan-analyze 10\",\"bkdr\":\"run bkdr.js\",\"hm\":\"home\",\"scn3\":\"cls; scan-analyze 3\",\"restart\":\"killall; run restart.js\",\"flight\":\"run fl1ght.exe\",\"scn5\":\"cls; scan-analyze 5\"}","GlobalAliasesSave":"{\"cnct\":\"run cnct.js\"}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":15279.213664070572,\"lastPrice\":15243.683379130445,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":false,\"otlkMag\":16.768062202366924,\"otlkMagForecast\":33.79777911120265,\"cap\":335379626,\"spreadPerc\":0.3,\"shareTxForMovement\":75140,\"shareTxUntilMovement\":75140,\"totalShares\":97300000,\"maxShares\":19500000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":39387.772817190664,\"lastPrice\":39495.25279688915,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.48,\"b\":false,\"otlkMag\":18.671607483416135,\"otlkMagForecast\":30.634244507930568,\"cap\":194727989,\"spreadPerc\":0.5,\"shareTxForMovement\":66955,\"shareTxUntilMovement\":66955,\"totalShares\":83400000,\"maxShares\":16700000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":88651.40012782431,\"lastPrice\":88275.02231563484,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":14.845152889547167,\"otlkMagForecast\":63.20242649999028,\"cap\":101816813,\"spreadPerc\":0.1,\"shareTxForMovement\":36588,\"shareTxUntilMovement\":36588,\"totalShares\":65100000,\"maxShares\":13000000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":19765.182586021434,\"lastPrice\":19838.21894277211,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":12.052284890385593,\"otlkMagForecast\":38.302919615419675,\"cap\":218472682,\"spreadPerc\":0.5,\"shareTxForMovement\":85903,\"shareTxUntilMovement\":85903,\"totalShares\":96700000,\"maxShares\":19300000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":51352.94986966701,\"lastPrice\":51531.03191904387,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":10.455273455637016,\"otlkMagForecast\":39.89476897814148,\"cap\":839362922,\"spreadPerc\":0.4,\"shareTxForMovement\":66324,\"shareTxUntilMovement\":66324,\"totalShares\":47500000,\"maxShares\":9500000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":52874.736463098634,\"lastPrice\":52566.932100928105,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.03,\"b\":false,\"otlkMag\":15.18734907238866,\"otlkMagForecast\":36.62057638607404,\"cap\":1056171377,\"spreadPerc\":0.1,\"shareTxForMovement\":47919,\"shareTxUntilMovement\":47919,\"totalShares\":27600000,\"maxShares\":5500000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":30768.656958161177,\"lastPrice\":30917.33689899784,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":false,\"otlkMag\":11.227175117174214,\"otlkMagForecast\":39.401523335711666,\"cap\":221195920,\"spreadPerc\":0.2,\"shareTxForMovement\":31387,\"shareTxUntilMovement\":31387,\"totalShares\":97200000,\"maxShares\":19400000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":32234.302127601346,\"lastPrice\":32467.02920046013,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":true,\"otlkMag\":17.12676109214253,\"otlkMagForecast\":69.7413589666377,\"cap\":172125927,\"spreadPerc\":0.4,\"shareTxForMovement\":74789,\"shareTxUntilMovement\":74789,\"totalShares\":55600000,\"maxShares\":11100000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":38453.414374386986,\"lastPrice\":38272.8244484922,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":true,\"otlkMag\":5.55222763356287,\"otlkMagForecast\":56.40635325215656,\"cap\":273152924,\"spreadPerc\":0.6,\"shareTxForMovement\":90541,\"shareTxUntilMovement\":90541,\"totalShares\":51000000,\"maxShares\":10200000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":18490.39662750832,\"lastPrice\":18426.49711681366,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":10.467429296416503,\"otlkMagForecast\":40.03288697334789,\"cap\":283346900,\"spreadPerc\":1,\"shareTxForMovement\":90705,\"shareTxUntilMovement\":90705,\"totalShares\":78000000,\"maxShares\":15600000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":8192.3430566761,\"lastPrice\":8163.106855275748,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":9.465495555101489,\"otlkMagForecast\":39.77448334056006,\"cap\":240391709,\"spreadPerc\":0.4,\"shareTxForMovement\":107556,\"shareTxUntilMovement\":107556,\"totalShares\":69600000,\"maxShares\":13900000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":13271.873586086891,\"lastPrice\":13213.282676146193,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":6.976171669211705,\"otlkMagForecast\":56.10201795740478,\"cap\":23180212,\"spreadPerc\":0.2,\"shareTxForMovement\":44224,\"shareTxUntilMovement\":44224,\"totalShares\":77800000,\"maxShares\":15600000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":14143.214087046346,\"lastPrice\":14094.337663353655,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":7.157067027480995,\"otlkMagForecast\":42.28043885338959,\"cap\":149368342,\"spreadPerc\":0.7,\"shareTxForMovement\":97187,\"shareTxUntilMovement\":97187,\"totalShares\":55500000,\"maxShares\":11100000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":29511.66068921633,\"lastPrice\":29426.34450853576,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":true,\"otlkMag\":8.874937647013054,\"otlkMagForecast\":58.88029414748261,\"cap\":587654637,\"spreadPerc\":0.4,\"shareTxForMovement\":73890,\"shareTxUntilMovement\":73890,\"totalShares\":37400000,\"maxShares\":7500000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":8631.346981953784,\"lastPrice\":8603.468229922302,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":5.875547408647542,\"otlkMagForecast\":45.672592210178436,\"cap\":141646817,\"spreadPerc\":0.6,\"shareTxForMovement\":75834,\"shareTxUntilMovement\":75834,\"totalShares\":61000000,\"maxShares\":12200000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":7314.447893795948,\"lastPrice\":7284.2184098463,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":6.819838796441951,\"otlkMagForecast\":56.12249077728695,\"cap\":144591324,\"spreadPerc\":0.8,\"shareTxForMovement\":73339,\"shareTxUntilMovement\":73339,\"totalShares\":62100000,\"maxShares\":12400000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":41685.465130543525,\"lastPrice\":41501.43765940636,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":7.47279580162345,\"otlkMagForecast\":58.627864682759586,\"cap\":373848516,\"spreadPerc\":0.5,\"shareTxForMovement\":88251,\"shareTxUntilMovement\":88251,\"totalShares\":37600000,\"maxShares\":7500000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":28425.062133848412,\"lastPrice\":28515.555004172995,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":9.663783113206746,\"otlkMagForecast\":40.80734789778087,\"cap\":180169970,\"spreadPerc\":1,\"shareTxForMovement\":111641,\"shareTxUntilMovement\":111641,\"totalShares\":24900000,\"maxShares\":5000000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":12735.485241696206,\"lastPrice\":12684.287672013974,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":5.511026547011805,\"otlkMagForecast\":54.91521223582057,\"cap\":265643549,\"spreadPerc\":0.6,\"shareTxForMovement\":59260,\"shareTxUntilMovement\":59260,\"totalShares\":38000000,\"maxShares\":7600000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":1543.8981710676096,\"lastPrice\":1521.836766113552,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.55,\"b\":false,\"otlkMag\":5.4379670341560855,\"otlkMagForecast\":39.22418532668278,\"cap\":83185137,\"spreadPerc\":1,\"shareTxForMovement\":43381,\"shareTxUntilMovement\":43381,\"totalShares\":93400000,\"maxShares\":18700000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":6149.950423248173,\"lastPrice\":6192.9537090297745,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.23,\"b\":false,\"otlkMag\":5.527351310261478,\"otlkMagForecast\":43.82576307318108,\"cap\":77331315,\"spreadPerc\":0.7,\"shareTxForMovement\":86607,\"shareTxUntilMovement\":86607,\"totalShares\":66600000,\"maxShares\":13300000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":5389.247947545308,\"lastPrice\":5368.494686240013,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":5.451779826723912,\"otlkMagForecast\":46.332982643517965,\"cap\":47656804,\"spreadPerc\":1,\"shareTxForMovement\":116901,\"shareTxUntilMovement\":116901,\"totalShares\":36500000,\"maxShares\":7300000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":1559.8985827547885,\"lastPrice\":1576.304216281542,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.85,\"b\":false,\"otlkMag\":12.147456199803903,\"otlkMagForecast\":39.659904039468316,\"cap\":139184013,\"spreadPerc\":1.3,\"shareTxForMovement\":78616,\"shareTxUntilMovement\":78616,\"totalShares\":36800000,\"maxShares\":7400000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":3130.6239475560274,\"lastPrice\":3102.404834132456,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.6,\"b\":false,\"otlkMag\":2.1467005872129845,\"otlkMagForecast\":52.6232928079204,\"cap\":65495857,\"spreadPerc\":0.8,\"shareTxForMovement\":21761,\"shareTxUntilMovement\":21761,\"totalShares\":58800000,\"maxShares\":11800000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":2140.631166157156,\"lastPrice\":2151.3401787773582,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.88,\"b\":false,\"otlkMag\":5.1652659708088,\"otlkMagForecast\":47.61997755982793,\"cap\":4488541,\"spreadPerc\":0.5,\"shareTxForMovement\":98420,\"shareTxUntilMovement\":98420,\"totalShares\":156600000,\"maxShares\":31300000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":1099.5558080854216,\"lastPrice\":1113.245267729025,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.19,\"b\":false,\"otlkMag\":6.785191283267418,\"otlkMagForecast\":41.85155480095395,\"cap\":47715186,\"spreadPerc\":0.6,\"shareTxForMovement\":52055,\"shareTxUntilMovement\":52055,\"totalShares\":25400000,\"maxShares\":5100000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":15149.037082165978,\"lastPrice\":15058.295448629635,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":true,\"otlkMag\":1.3234256733698129,\"otlkMagForecast\":51.67700873927236,\"cap\":35083754,\"spreadPerc\":1,\"shareTxForMovement\":82133,\"shareTxUntilMovement\":82133,\"totalShares\":9800000,\"maxShares\":2000000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2818.7786888903843,\"lastPrice\":2829.9958752049793,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":5.9676440152216905,\"otlkMagForecast\":46.28152922307269,\"cap\":27291863,\"spreadPerc\":0.8,\"shareTxForMovement\":78791,\"shareTxUntilMovement\":78791,\"totalShares\":31800000,\"maxShares\":6400000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":609.9411451577557,\"lastPrice\":616.6333643000163,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.93,\"b\":false,\"otlkMag\":6.730187099779625,\"otlkMagForecast\":42.317690267758394,\"cap\":10747380,\"spreadPerc\":1.1,\"shareTxForMovement\":53324,\"shareTxUntilMovement\":53324,\"totalShares\":9000000,\"maxShares\":1800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":63.29624864691634,\"lastPrice\":64.41893250828582,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.12,\"b\":true,\"otlkMag\":7.430009350762019,\"otlkMagForecast\":58.34507417395605,\"cap\":4170831,\"spreadPerc\":1.3,\"shareTxForMovement\":49926,\"shareTxUntilMovement\":49926,\"totalShares\":33000000,\"maxShares\":6600000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":202.53630065486337,\"lastPrice\":201.15261965566242,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":false,\"otlkMag\":8.362921201168414,\"otlkMagForecast\":38.22746476409995,\"cap\":4522490,\"spreadPerc\":1.4,\"shareTxForMovement\":52371,\"shareTxUntilMovement\":52371,\"totalShares\":84400000,\"maxShares\":16900000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":16009.81158129788,\"lastPrice\":16078.982688455715,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":7.565204404632586,\"otlkMagForecast\":42.68774073827056,\"cap\":507398058,\"spreadPerc\":0.8,\"shareTxForMovement\":94174,\"shareTxUntilMovement\":94174,\"totalShares\":16500000,\"maxShares\":3300000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":18683.855352644732,\"lastPrice\":18623.507579411016,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":8.735619217479266,\"otlkMagForecast\":60.47036294521151,\"cap\":264481887,\"spreadPerc\":0.4,\"shareTxForMovement\":172719,\"shareTxUntilMovement\":172719,\"totalShares\":23800000,\"maxShares\":4800000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":19,\"lastUpdate\":1650449168294,\"ticksUntilCycle\":16}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":7,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":24,\"MonacoVim\":true,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-34,\"y\":101,\"opened\":true}}","VersionSave":"13","AllGangsSave":"","LastExportBonus":"1650449172203","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}