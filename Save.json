{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":360,\"hp\":26,\"max_hp\":26,\"strength\":164,\"defense\":164,\"dexterity\":164,\"agility\":164,\"charisma\":162,\"intelligence\":0,\"hacking_chance_mult\":1.16,\"hacking_speed_mult\":1.16,\"hacking_money_mult\":1.16,\"hacking_grow_mult\":1.16,\"hacking_exp\":8558196.799228298,\"strength_exp\":42779.99403202296,\"defense_exp\":42779.99403202296,\"dexterity_exp\":42779.99403202296,\"agility_exp\":42779.99403202296,\"charisma_exp\":41083.9445755481,\"intelligence_exp\":0,\"hacking_mult\":1.16,\"strength_mult\":1.16,\"defense_mult\":1.16,\"dexterity_mult\":1.16,\"agility_mult\":1.16,\"charisma_mult\":1.16,\"hacking_exp_mult\":1.16,\"strength_exp_mult\":1.16,\"defense_exp_mult\":1.16,\"dexterity_exp_mult\":1.16,\"agility_exp_mult\":1.16,\"charisma_exp_mult\":1.16,\"company_rep_mult\":1.16,\"faction_rep_mult\":1.16,\"money\":68375362465.234085,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{\"Joe's Guns\":\"Part-time Employee\",\"Carmichael Security\":\"Security Guard\",\"Watchdog Security\":\"Software Engineering Intern\"},\"companyName\":\"Carmichael Security\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":220082.60000392806,\"ram\":64,\"totalMoneyGenerated\":2051578442.0693033,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":219629.40000390273,\"ram\":64,\"totalMoneyGenerated\":2039813056.157039,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":219623.40000390238,\"ram\":64,\"totalMoneyGenerated\":2039379573.2756314,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":216832.00000374476,\"ram\":64,\"totalMoneyGenerated\":2038844604.6311557,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":215133.0000036491,\"ram\":64,\"totalMoneyGenerated\":2038275639.1414595,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":213578.80000356145,\"ram\":64,\"totalMoneyGenerated\":2034987989.0707905,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":213578.80000356145,\"ram\":64,\"totalMoneyGenerated\":2034524513.0263932,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":213578.80000356145,\"ram\":64,\"totalMoneyGenerated\":2034066532.207278,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":213578.80000356145,\"ram\":64,\"totalMoneyGenerated\":2032946664.6090374,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":213578.80000356145,\"ram\":64,\"totalMoneyGenerated\":2031858091.4229696,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":213578.80000356145,\"ram\":64,\"totalMoneyGenerated\":2031530974.830643,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":213578.80000356145,\"ram\":64,\"totalMoneyGenerated\":2031050049.6631844,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":213578.80000356145,\"ram\":64,\"totalMoneyGenerated\":2030441774.018249,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":205173.00000309138,\"ram\":64,\"totalMoneyGenerated\":2025756236.6961346,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":205173.00000309138,\"ram\":64,\"totalMoneyGenerated\":2025152362.75931,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":198571.80000270743,\"ram\":64,\"totalMoneyGenerated\":1980741052.3967,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":189558.20000219077,\"ram\":64,\"totalMoneyGenerated\":1912412685.2000017,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":176960.6000014397,\"ram\":64,\"totalMoneyGenerated\":1806910658.3588076,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":148752.79999981943,\"ram\":64,\"totalMoneyGenerated\":1553377174.2860837,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":128416.19999872992,\"ram\":64,\"totalMoneyGenerated\":1351676803.5028281,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":81889.99999938226,\"ram\":64,\"totalMoneyGenerated\":157834278.14094183,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":75288.3999994827,\"ram\":64,\"totalMoneyGenerated\":157822791.35694188,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":53642.999999788604,\"ram\":64,\"totalMoneyGenerated\":157785128.3609421,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":32055.600000081078,\"ram\":64,\"totalMoneyGenerated\":157747566.28494227,\"name\":\"hacknet-node-23\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"The Black Hand\",\"NiteSec\",\"Aevum\",\"Sector-12\",\"Slum Snakes\",\"Netburners\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"}],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":21,\"karma\":-63,\"crime_money_mult\":1.16,\"crime_success_mult\":1.16,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":4,\"workExpMult\":3,\"currentWorkFactionName\":\"Aevum\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.174,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.4325907692307692,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":511.664400000021,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":1291.6419059539692,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":733600,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.16,\"hacknet_node_money_mult\":1.16,\"hacknet_node_purchase_cost_mult\":0.84,\"hacknet_node_ram_cost_mult\":0.84,\"hacknet_node_core_cost_mult\":0.84,\"hacknet_node_level_cost_mult\":0.84,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1648169167611,\"lastSave\":1648169124740,\"totalPlaytime\":3143014200,\"playtimeSinceLastAug\":220278600,\"playtimeSinceLastBitnode\":220278600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-130304,\"codingcontract\":8700000000,\"corporation\":0,\"crime\":1096200,\"gang\":0,\"hacking\":172329971440.7596,\"hacknet\":39756514631.75222,\"hacknet_expenses\":-10801597728.879635,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":68375361465.234085,\"work\":25746891.940164603,\"servers\":-110157120141.54443,\"other\":-285600000,\"augmentations\":-31193519553.929398}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-130304,\"codingcontract\":8700000000,\"corporation\":0,\"crime\":1096200,\"gang\":0,\"hacking\":172329971440.7596,\"hacknet\":39756514631.75222,\"hacknet_expenses\":-10801597728.879635,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":68375361465.234085,\"work\":25746891.940164603,\"servers\":-110157120141.54443,\"other\":-285600000,\"augmentations\":-31193519553.929398}},\"scriptProdSinceLastAug\":172297421014,\"exploits\":[],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1645026146788},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1645028434786},{\"ID\":\"NS2\",\"unlockedOn\":1645044319911},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1645045831181},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1645056200950},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1645056560955},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1645066283086},{\"ID\":\"TOR\",\"unlockedOn\":1645066643085},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1645070003093},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1645097626865},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1645155279886},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1645183682014},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1645190539010},{\"ID\":\"TRAVEL\",\"unlockedOn\":1645202118069},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1645206439756},{\"ID\":\"WORKOUT\",\"unlockedOn\":1645274022801},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1645310391987},{\"ID\":\"NITESEC\",\"unlockedOn\":1645372344826},{\"ID\":\"4S\",\"unlockedOn\":1645407697058},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1645449421121},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1645451161327},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1645492247503},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1645588414067},{\"ID\":\"DONATION\",\"unlockedOn\":1645808344381},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1645842991741},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1646071287225},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1646082477122},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1646132482080},{\"ID\":\"SF1.1\",\"unlockedOn\":1646609210207},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1647371428634}],\"terminalCommandHistory\":[\"cnct CSEC\",\"home;connect harakiri-sushi;connect CSEC;\",\"analyze\",\"home\",\"run phase1/basicHack.js\",\"run hacknet.js\",\"run contracts/start.js\",\"vim hacknet.js\",\"run phase2/batchHack.js\",\"free\",\"killall\",\"run phase2/batchHack.js\",\"run hacknet.js\",\"run contracts/start.js\",\"run phase2/batchHack.js\",\"run analyzeServer.js omega-net\",\"run phase2/batchHack.js\",\"home\",\"cls\",\"scn\",\"run phase2/basicHack.js\",\"run phase2/shareAll.js\",\"run phase2/basicHack.js\",\"ls\",\"ls remote/\",\"ls rep/\",\"ls story/\",\"ls utils/\",\"run utils/killeverything.js\",\"run hacknet.js\",\"run contracts/start.js\",\"run phase2/batchHack.js\",\"cnct the-hub\",\"home;connect sigma-cosmetics;connect max-hardware;connect omega-net;connect the-hub;\",\"analyze\",\"home\",\"scp analyzeServer.js the-hub\",\"cnct the-hub\",\"home;connect sigma-cosmetics;connect max-hardware;connect omega-net;connect the-hub;\",\"run analyzeServer.js the-hub\",\"vim analyzeServer.js\",\"run analyzeServer.js\",\"killall\",\"home\",\"ps\",\"killall\",\"run batching/batch.js n00dles\",\"ps\",\"run hacknet.js\",\"run contracts/start.js\"],\"identifier\":\"afc61675d036e\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"41.2.4.6\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":1564.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"weaken\",\"n00dles\",5,300],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2239.3800000000037,\"onlineMoneyMade\":0,\"onlineRunningTime\":139.6100000000006,\"pid\":6778,\"ramUsage\":5.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"grow\",\"n00dles\",6,300],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2733.191999999998,\"onlineMoneyMade\":0,\"onlineRunningTime\":138.61000000000067,\"pid\":6780,\"ramUsage\":5.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///670a8cdd-c060-4ce9-82b0-622509273a5e\",\"moduleSequenceNumber\":76024},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///86676444-51b2-4fdc-9559-0e5e48ee0d65\",\"moduleSequenceNumber\":76030},{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///fa260859-924a-4924-bac7-ee236328afd6\",\"moduleSequenceNumber\":80459}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hack\",\"n00dles\",105,300],\"dataMap\":{},\"filename\":\"/batching/spawner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":52252.20000000006,\"onlineMoneyMade\":71126265,\"onlineRunningTime\":137.8100000000007,\"pid\":6783,\"ramUsage\":5.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///670a8cdd-c060-4ce9-82b0-622509273a5e\",\"moduleSequenceNumber\":76024},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///86676444-51b2-4fdc-9559-0e5e48ee0d65\",\"moduleSequenceNumber\":76030},{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///fa260859-924a-4924-bac7-ee236328afd6\",\"moduleSequenceNumber\":80459}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hacknet.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":100.41000000000089,\"pid\":6902,\"ramUsage\":5.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///69504d13-6932-47d2-a58e-f56670d4eea5\",\"moduleSequenceNumber\":77536}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/contracts/start.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.61000000000085,\"pid\":6912,\"ramUsage\":24.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///6447c421-f0bc-4c52-aab1-7a0a17868cb2\",\"moduleSequenceNumber\":75962},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///3736d6fd-6e6a-4349-a041-bc932a5570b1\",\"moduleSequenceNumber\":75970},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///29f2383b-c304-442e-8f45-597ecaa9bcee\",\"moduleSequenceNumber\":75976},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///be55c79a-3d35-4033-b7b1-de83bfcded9e\",\"moduleSequenceNumber\":75980},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///5a4716f0-4464-4060-b6a8-b5500f203304\",\"moduleSequenceNumber\":75982},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///2b4651b6-942c-4b63-870a-d6819872af12\",\"moduleSequenceNumber\":75964},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///7344f632-97cd-4bfa-b9ac-8dabf1c68a43\",\"moduleSequenceNumber\":75960},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///f9e98c53-c3da-451f-b37a-ee9b43405e33\",\"moduleSequenceNumber\":75974},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///a0ec36c7-fae3-442b-9c33-18d1d05ffcfb\",\"moduleSequenceNumber\":75968},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///4443edd2-380b-43e6-880c-a89d6548dcd0\",\"moduleSequenceNumber\":75972},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///1ccf8dfc-0eb2-4155-bcf9-4bf6643ccba1\",\"moduleSequenceNumber\":75958},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///d7df79bf-4217-449e-bda3-c69337ce3f45\",\"moduleSequenceNumber\":75978},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///2e56d300-98d6-45d8-bb3a-a10fe8cd0ca3\",\"moduleSequenceNumber\":75966},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///f529ee13-c8ae-482f-a020-8058675ec258\",\"moduleSequenceNumber\":76024},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///be291109-24f0-4c10-b9e7-09b626e3c3f5\",\"moduleSequenceNumber\":76030},{\"filename\":\"/contracts/start.js\",\"url\":\"blob:file:///bafda1c1-7302-4408-bb73-32db632bed6c\",\"moduleSequenceNumber\":77537}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169146738],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":7131,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169147796],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.009999999999962,\"pid\":7134,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169148854],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.009999999999966,\"pid\":7137,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169149896],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":7140,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169150737],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.009999999999973,\"pid\":7142,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169150934],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999974,\"pid\":7143,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169151739],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":7145,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169151919],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.809999999999977,\"pid\":7146,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169152745],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.00999999999998,\"pid\":7148,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169152931],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.809999999999981,\"pid\":7149,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169153780],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999984,\"pid\":7151,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169153946],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.809999999999985,\"pid\":7152,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169154818],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.009999999999987,\"pid\":7154,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169155071],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.809999999999988,\"pid\":7155,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169155951],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":7157,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169156133],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.609999999999992,\"pid\":7158,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169156955],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.809999999999995,\"pid\":7160,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169157149],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"pid\":7161,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169157925],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999999,\"pid\":7163,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169158114],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"pid\":7164,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169158945],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.810000000000002,\"pid\":7166,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169159113],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"pid\":7167,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169159983],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.810000000000005,\"pid\":7169,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169160177],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.610000000000005,\"pid\":7170,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169161018],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.810000000000004,\"pid\":7172,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169161178],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"pid\":7173,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169162112],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":7175,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169162194],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"pid\":7176,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169162489],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000003,\"pid\":7177,\"ramUsage\":1.8,\"server\":\"home\",\"threads\":105,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///92a51846-7eb8-4c2a-8e59-399bf39271ab\",\"moduleSequenceNumber\":80875}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169163121],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":7178,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169163282],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":7179,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169163510],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"pid\":7180,\"ramUsage\":1.8,\"server\":\"home\",\"threads\":105,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///92a51846-7eb8-4c2a-8e59-399bf39271ab\",\"moduleSequenceNumber\":80875}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169164184],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.610000000000001,\"pid\":7181,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169164391],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"pid\":7182,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169164591],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"pid\":7183,\"ramUsage\":1.8,\"server\":\"home\",\"threads\":105,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///92a51846-7eb8-4c2a-8e59-399bf39271ab\",\"moduleSequenceNumber\":80875}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169165557],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"pid\":7184,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169165590],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"pid\":7185,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169165619],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"pid\":7186,\"ramUsage\":1.8,\"server\":\"home\",\"threads\":105,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///92a51846-7eb8-4c2a-8e59-399bf39271ab\",\"moduleSequenceNumber\":80875}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169166460],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":7187,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169166492],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":7188,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169166523],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":7189,\"ramUsage\":1.8,\"server\":\"home\",\"threads\":105,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///92a51846-7eb8-4c2a-8e59-399bf39271ab\",\"moduleSequenceNumber\":80875}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169167394],\"dataMap\":{},\"filename\":\"/batching/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":7190,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169167427],\"dataMap\":{},\"filename\":\"/batching/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":7191,\"ramUsage\":1.85,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1648169167430],\"dataMap\":{},\"filename\":\"/batching/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":7192,\"ramUsage\":1.8,\"server\":\"home\",\"threads\":105,\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///92a51846-7eb8-4c2a-8e59-399bf39271ab\",\"moduleSequenceNumber\":80875}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//GREATEST FACTOR\\nexport function factor(num) {\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\n        if (num % div != 0) {\\n            continue;\\n        }\\n        num = num / div;\\n        div = 1;\\n    }\\n    return num;\\n}\\n\",\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":75960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   let data = ns.args\\n//     .join(\\\" \\\")\\n//     .split(\\\" \\\")\\n//     .map((s) => parseInt(s));\\n//   // data = [0, 5, 3, 10, 0, 3, 10, 0, 4, 6, 6, 0, 0, 7, 0, 1, 1];\\n//   ns.tprint(solveJump(data));\\n//   ns.print(solveJump(data));\\n// }\\n//\\n// Array Jumping Game\\n//\\n// You are attempting to solve a Coding Contract. You have 1 tries remaining, after which the contract will self-destruct.\\n//\\n// You are given the following array of integers:\\n//\\n// 0,5,3,10,0,3,10,0,4,6,6,0,0,7,0,1,1 => 0\\n// 7,1,3,0,0,4,1,5,0,4,6,8,0,0,7,6,0,2,5,4,0=> 1\\n//\\n// Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n.\\n//\\n// Assuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\n//\\n// Your answer should be submitted as 1 or 0, representing true and false respectively\\nexport function solveJump(data) {\\n    if (data.length === 0)\\n        return 1;\\n    const maxJump = data[0];\\n    if (maxJump === 0)\\n        return 0;\\n    if (maxJump >= data.length)\\n        return 1;\\n    // find the best jump and solve it.\\n    let bestJump = [1, 1];\\n    for (let i = 1; i <= maxJump; i++) {\\n        const nextMax = data[i];\\n        const jumpValue = nextMax + i + 1;\\n        if (jumpValue >= data.length)\\n            return 1;\\n        if (jumpValue > bestJump[1])\\n            bestJump = [i, jumpValue];\\n    }\\n    return solveJump(data.slice(bestJump[0]));\\n}\\n\",\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///1836554b-f446-47ac-ba4e-005dd07b2609\",\"moduleSequenceNumber\":4479}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":75958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// export async function main(ns: any) {\\n//   const testData: [string, number] = [\\\"123\\\", 6];\\n//   ns.tprint(findMathExpression(testData));\\n// }\\nexport function findMathExpression(data) {\\n    const digits = data[0].split(\\\"\\\");\\n    const operators = [\\\"+\\\", \\\"-\\\", \\\"*\\\", \\\"\\\"];\\n    let expressions = [digits[0], \\\"-\\\" + digits[0]].flatMap((d) => operators.map((op) => d + op));\\n    for (let i = 1; i < digits.length - 1; i++) {\\n        expressions = expressions.flatMap((e) => operators.map((op) => e + digits[i] + op));\\n    }\\n    return expressions\\n        .map((e) => e + digits[digits.length - 1])\\n        .filter((e) => {\\n        try {\\n            return eval(e) === data[1];\\n        }\\n        catch (e) {\\n            return false;\\n        }\\n    });\\n}\\n\",\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":75962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//GENERATE IP ADDRESSES\\nexport function generateIps(num) {\\n    num = num.toString();\\n    const length = num.length;\\n    let ips = [];\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length),\\n                ];\\n                let isValid = true;\\n                ip.forEach((seg) => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n                if (isValid)\\n                    ips.push(ip.join(\\\".\\\"));\\n            }\\n        }\\n    }\\n    return ips;\\n}\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\")\\n        return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255)\\n        return false;\\n    return true;\\n}\\n\",\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":75964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export * from \\\"contracts/solvers/totalWaysToSum.js\\\";\\nexport * from \\\"contracts/solvers/arrayJumpingGame.js\\\";\\nexport * from \\\"contracts/solvers/solveSum.js\\\";\\nexport * from \\\"contracts/solvers/mergeOverlap.js\\\";\\nexport * from \\\"contracts/solvers/spiral.js\\\";\\nexport * from \\\"contracts/solvers/factor.js\\\";\\nexport * from \\\"contracts/solvers/generateIps.js\\\";\\nexport * from \\\"contracts/solvers/uniquePaths.js\\\";\\nexport * from \\\"contracts/solvers/triangleSum.js\\\";\\nexport * from \\\"contracts/solvers/stockSolver.js\\\";\\nexport * from \\\"contracts/solvers/sanitizeParentheses.js\\\";\\nexport * from \\\"contracts/solvers/findMathExpressions.js\\\";\\n\",\"filename\":\"/contracts/solvers/index.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":75966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Merge Overlapping Intervals\\nexport function mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\n\",\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":75968,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   let data = \\\"((a(a)(()(((a)a)))((\\\";\\n//   // data = ns.args[0].toString();\\n//   ns.tprint(sanitizeParentheses(data));\\n//   ns.print(sanitizeParentheses(data));\\n// }\\n// Given a string:\\n//\\n// ie.: '((a(a)(()(((a)a)))((' => [a(a)(()(((a)a))),(aa)(()(((a)a))),(a(a)()(((a)a))),(a(a)(()((a)a))),((aa)()(((a)a))),((aa)(()((a)a))),((a(a))(((a)a))),((a(a)()((a)a))),((a(a)(()(a)a)))]\\n//\\n// remove the minimum number of invalid parentheses in order to validate the\\n// string. If there are multiple ways to validate the string, provide all of the\\n// possible results. The answer should be provided as an array of strings. If it\\n// is impossible to validate the string the result should be an array with only\\n// an empty string.\\nexport function sanitizeParentheses(data) {\\n    var solution = Sanitize(data);\\n    if (solution == null) {\\n        return '[\\\"\\\"]';\\n    }\\n    else {\\n        return \\\"[\\\" + solution.join(\\\",\\\") + \\\"]\\\";\\n    }\\n}\\nfunction Sanitize_removeOneParth(item) {\\n    var possibleAnswers = [];\\n    for (let i = 0; i < item.length; i++) {\\n        if (item[i].toLowerCase().indexOf(\\\"(\\\") === -1 &&\\n            item[i].toLowerCase().indexOf(\\\")\\\") === -1) {\\n            continue;\\n        }\\n        let possible = item.substring(0, i) + item.substring(i + 1);\\n        possibleAnswers.push(possible);\\n    }\\n    return possibleAnswers;\\n}\\nfunction Sanitize_isValid(item) {\\n    var unclosed = 0;\\n    for (var i = 0; i < item.length; i++) {\\n        if (item[i] == \\\"(\\\") {\\n            unclosed++;\\n        }\\n        else if (item[i] == \\\")\\\") {\\n            unclosed--;\\n        }\\n        if (unclosed < 0) {\\n            return false;\\n        }\\n    }\\n    return unclosed == 0;\\n}\\nfunction Sanitize(data) {\\n    var currentPossible = [data];\\n    for (var i = 0; i < currentPossible.length; i++) {\\n        var newPossible = new Set();\\n        for (var j = 0; j < currentPossible.length; j++) {\\n            let newRemovedPossible = Sanitize_removeOneParth(currentPossible[j]);\\n            for (let item of newRemovedPossible) {\\n                newPossible.add(item);\\n            }\\n        }\\n        var validBoolList = [];\\n        for (const item of newPossible) {\\n            validBoolList.push(Sanitize_isValid(item));\\n        }\\n        if (validBoolList.includes(true)) {\\n            let finalList = [];\\n            newPossible = [...newPossible];\\n            for (var j = 0; j < validBoolList.length; j++) {\\n                if (validBoolList[j]) {\\n                    finalList.push(newPossible[j]);\\n                }\\n            }\\n            finalList = new Set(finalList);\\n            return [...finalList];\\n        }\\n        currentPossible = [...newPossible];\\n    }\\n    return null;\\n}\\n\",\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///d744f228-8f91-4660-9d12-d00944b8e4d0\",\"moduleSequenceNumber\":287808}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":75970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function solveSum(data) {\\n    const arrLength = data.length;\\n    let maxSum = -Infinity;\\n    for (let i = 0; i < arrLength; i++) {\\n        const sub = data.slice(0, i + 1);\\n        for (let j = 0; j < sub.length; j++) {\\n            const sub2 = sub.slice(j, sub.length);\\n            // ns.tprint(`i ${i} j ${j} ${JSON.stringify(sub)} ${JSON.stringify(sub2)}`);\\n            const sum = sub2.reduce((prev, cur) => (prev += cur), 0);\\n            if (sum > maxSum)\\n                maxSum = sum;\\n            // ns.tprint(`${sum}: ${sub2}`);\\n        }\\n    }\\n    return maxSum;\\n}\\n\",\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":75972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//SPIRALIZE Matrix\\nexport function spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift() || []);\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat((arr.pop() || []).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\nfunction column(arr, index) {\\n    let res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n\",\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":75974,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function maxProfit(arrayData) {\\n    let i, j, k;\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n    // WHY?\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n    let highestProfit = JSON.parse(tempArr);\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) {\\n            // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) {\\n                // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\",\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///3317a863-bbb6-46ab-9102-55587ce847a9\",\"moduleSequenceNumber\":270664}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":75976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   let data = 60;\\n//   // data = ns.args[0] as number;\\n//   ns.tprint(totalWaysToSum(data));\\n//   ns.print(totalWaysToSum(data));\\n// }\\n// Total Ways to Sum\\n// You are attempting to solve a Coding Contract. You have 10 tries remaining,\\n// after which the contract will self-destruct.\\n//\\n// It is possible write four as a sum in exactly four different ways:\\n//     3 + 1\\n//     2 + 2\\n//     2 + 1 + 1\\n//     1 + 1 + 1 + 1\\n//\\n//  How many different ways can the given number be written as a sum of at least\\n//  two positive integers?\\n//\\n//  60 => 966466\\nexport function totalWaysToSum(data) {\\n    let N = data;\\n    let K = data - 1;\\n    // Initialize a list\\n    let dp = Array.from({ length: N + 1 }, () => 0);\\n    // Update dp[0] to 1\\n    dp[0] = 1;\\n    // Iterate over the range [1, K + 1]\\n    for (let row = 1; row < K + 1; row++) {\\n        // Iterate over the range [1, N + 1]\\n        for (let col = 1; col < N + 1; col++) {\\n            // If col is greater\\n            // than or equal to row\\n            if (col >= row)\\n                // Update current\\n                // dp[col] state\\n                dp[col] = dp[col] + dp[col - row];\\n        }\\n    }\\n    // Return the total number of ways\\n    return dp[N];\\n}\\n\",\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///0511a33a-6f45-4133-a371-8392bfc4f2de\",\"moduleSequenceNumber\":288875}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":75978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   const data = [\\n//     [9],\\n//     [3, 3],\\n//     [1, 5, 1],\\n//     [6, 9, 4, 1],\\n//     [8, 9, 1, 4, 3],\\n//     [6, 2, 5, 5, 8, 2],\\n//     [6, 3, 6, 2, 7, 5, 1],\\n//     [9, 8, 2, 4, 5, 2, 3, 7],\\n//   ];\\n//   ns.tprint(triangleSum(data));\\n//   ns.print(triangleSum(data));\\n// }\\n//\\n//Minimum Path Sum in a Triangle\\n// You are attempting to solve a Coding Contract. You have 10 tries remaining, after which the contract will self-destruct.\\n// Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\n// [\\n//          [9],\\n//         [3,3],\\n//        [1,5,1],\\n//       [6,9,4,1],\\n//      [8,9,1,4,3],\\n//     [6,2,5,5,8,2],\\n//    [6,3,6,2,7,5,1],\\n//   [9,8,2,4,5,2,3,7]\\n// ] => 23\\n// Example: If you are given the following triangle:\\n// [\\n//      [2],\\n//     [3,4],\\n//    [6,5,7],\\n//   [4,1,8,3]\\n// ]\\n// The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\n//\\n//\\nexport function triangleSum(arrayData) {\\n    let triangle = arrayData;\\n    let nextArray = [];\\n    let previousArray = triangle[0];\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            }\\n            else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            }\\n            else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n        }\\n        previousArray = nextArray;\\n    }\\n    return Math.min.apply(null, nextArray);\\n}\\n\",\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///e31bc6e0-ce54-4e21-8616-21950cd33e44\",\"moduleSequenceNumber\":6234}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":75980,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//UNIQUE PATHS IN A GRID//UNIQUE PATHS IN A GRID\\nexport function uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\n}\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\nexport function uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n            if (grid[i][j] == 1 &&\\n                (!ignoreFirst || i != 0 || j != 0) &&\\n                (!ignoreLast || i != grid.length - 1 || j != grid[i].length - 1)) {\\n                let newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n    }\\n    return totalPossiblePaths;\\n}\\n\",\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":75982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nimport * as solvers from \\\"contracts/solvers/index.js\\\";\\nconst minuteInterval = 2;\\nfunction getAllServers(ns) {\\n    const tree = new ServerTree(ns);\\n    return tree.home.list();\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will automatically complete contracts that it finds on the network.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let failedContracts = [];\\n    let successfulContracts = [];\\n    function refreshLog() {\\n        ns.clearLog();\\n        for (const cnt of failedContracts) {\\n            ns.print(`\\n      =========================\\n        server: ${cnt.server}\\n        filename: ${cnt.contract}\\n        type: ${cnt.type}\\n      =========================\\n        `);\\n        }\\n        for (const cnt of successfulContracts) {\\n            ns.print(`\\n      =========================\\n        server: ${cnt.server}\\n        filename: ${cnt.contract}\\n        type: ${cnt.type}\\n        reward: \\n          ${cnt.reward}\\n      =========================\\n        `);\\n        }\\n        ns.print(`Contracts failed: ${failedContracts.length}`);\\n        ns.print(`Contracts Succeeded: ${successfulContracts.length}`);\\n    }\\n    while (true) {\\n        // await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\n        const contracts = getAllServers(ns).flatMap((server) => {\\n            const onServer = ns.ls(server.hostname, \\\".cct\\\").map((contract) => {\\n                const type = ns.codingcontract.getContractType(contract, server.hostname);\\n                const data = ns.codingcontract.getData(contract, server.hostname);\\n                const reward = solve(type, data, server.hostname, contract, ns);\\n                if (!reward) {\\n                    failedContracts.push({\\n                        server: server.hostname,\\n                        contract,\\n                        type,\\n                    });\\n                    refreshLog();\\n                }\\n                else {\\n                    successfulContracts.push({\\n                        server: server.hostname,\\n                        contract,\\n                        type,\\n                        reward,\\n                    });\\n                    refreshLog();\\n                }\\n                return `${server} - ${contract} - ${type} - ${reward || \\\"FAILED!\\\"}`;\\n            });\\n            return onServer;\\n        });\\n        if (contracts.length > 0)\\n            ns.print(`Found ${contracts.length} contracts`);\\n        await ns.sleep(minuteInterval * 60 * 1000);\\n    }\\n}\\nfunction solve(type, data, server, contract, ns) {\\n    let solution;\\n    ns.print(type);\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = solvers.maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = solvers.maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = solvers.maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = solvers.maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solvers.triangleSum(data);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = solvers.uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = solvers.uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = solvers.generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = solvers.factor(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = solvers.spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = solvers.mergeOverlap(data);\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            solution = solvers.solveSum(data);\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            solution = solvers.solveJump(data);\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            solution = solvers.totalWaysToSum(data);\\n            break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n            solution = solvers.sanitizeParentheses(data);\\n            break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n            solution = solvers.findMathExpression(data);\\n            break;\\n        default:\\n            ns.print(`Unknown contract type: ${type}`);\\n            return \\\"\\\";\\n    }\\n    if (solution != undefined)\\n        ns.print(`Submitting solution: ${solution} to ${type} - ${contract}`);\\n    return solution != undefined\\n        ? ns.codingcontract.attempt(solution, contract, server, {\\n            returnReward: true,\\n        })\\n        : \\\"\\\";\\n}\\n\",\"filename\":\"/contracts/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///6447c421-f0bc-4c52-aab1-7a0a17868cb2\",\"moduleSequenceNumber\":75962},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///3736d6fd-6e6a-4349-a041-bc932a5570b1\",\"moduleSequenceNumber\":75970},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///29f2383b-c304-442e-8f45-597ecaa9bcee\",\"moduleSequenceNumber\":75976},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///be55c79a-3d35-4033-b7b1-de83bfcded9e\",\"moduleSequenceNumber\":75980},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///5a4716f0-4464-4060-b6a8-b5500f203304\",\"moduleSequenceNumber\":75982},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///2b4651b6-942c-4b63-870a-d6819872af12\",\"moduleSequenceNumber\":75964},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///7344f632-97cd-4bfa-b9ac-8dabf1c68a43\",\"moduleSequenceNumber\":75960},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///f9e98c53-c3da-451f-b37a-ee9b43405e33\",\"moduleSequenceNumber\":75974},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///a0ec36c7-fae3-442b-9c33-18d1d05ffcfb\",\"moduleSequenceNumber\":75968},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///4443edd2-380b-43e6-880c-a89d6548dcd0\",\"moduleSequenceNumber\":75972},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///1ccf8dfc-0eb2-4155-bcf9-4bf6643ccba1\",\"moduleSequenceNumber\":75958},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///d7df79bf-4217-449e-bda3-c69337ce3f45\",\"moduleSequenceNumber\":75978},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///2e56d300-98d6-45d8-bb3a-a10fe8cd0ca3\",\"moduleSequenceNumber\":75966},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///f529ee13-c8ae-482f-a020-8058675ec258\",\"moduleSequenceNumber\":76024},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///be291109-24f0-4c10-b9e7-09b626e3c3f5\",\"moduleSequenceNumber\":76030},{\"filename\":\"/contracts/start.js\",\"url\":\"blob:file:///bafda1c1-7302-4408-bb73-32db632bed6c\",\"moduleSequenceNumber\":77537}],\"dependents\":[],\"ramUsage\":24.1,\"server\":\"home\",\"moduleSequenceNumber\":77537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { copyCmd, ServerTree } from \\\"utils\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d8549aa1-f32b-44ed-af87-6e32d701214c\",\"moduleSequenceNumber\":182781},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///3b42012c-5bc1-4399-93c6-64e6524b21da\",\"moduleSequenceNumber\":188265}],\"dependents\":[],\"ramUsage\":30.9,\"server\":\"home\",\"moduleSequenceNumber\":247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * This is a list of the keys for data that is stored in localStorage.\\n */\\nexport const keys = {\\n    // The complete list of servers with their data.\\n    serverList: \\\"serverList\\\",\\n    // The total number of ports the user can hack.\\n    hackablePorts: \\\"hackablePorts\\\",\\n    // The players current hacking level.\\n    hackingLevel: \\\"hacking level\\\",\\n    // The factions the player belongs to.\\n    factions: \\\"factions\\\",\\n    // The augmentations that the player has purchased ready for installation.\\n    augmentationsQueued: \\\"augmentationsQueued\\\",\\n    // The augmentations that the player has already installed.\\n    augmentationsInstalled: \\\"augmentationsInstalled\\\",\\n    // The sourceFiles the player has.\\n    sourceFiles: \\\"source files\\\",\\n    // Are we programming?\\n    isProgramming: \\\"Is Programming\\\",\\n};\\nexport const PortHackPrograms = [\\n    \\\"BruteSSH.exe\\\",\\n    \\\"FTPCrack.exe\\\",\\n    \\\"relaySMTP.exe\\\",\\n    \\\"HTTPWorm.exe\\\",\\n    \\\"SQLInject.exe\\\",\\n];\\nexport async function CreateHackPrograms(ns) {\\n    const hackPrograms = [\\n        {\\n            program: \\\"BruteSSH.exe\\\",\\n            hackingLevel: 50,\\n        },\\n        {\\n            program: \\\"FTPCrack.exe\\\",\\n            hackingLevel: 100,\\n        },\\n        {\\n            program: \\\"relaySMTP.exe\\\",\\n            hackingLevel: 250,\\n        },\\n        {\\n            program: \\\"HTTPWorm.exe\\\",\\n            hackingLevel: 500,\\n        },\\n        {\\n            program: \\\"SQLInject.exe\\\",\\n            hackingLevel: 750,\\n        },\\n    ];\\n    const hackingLevel = ns.getHackingLevel();\\n    for (const program of hackPrograms) {\\n        if (ns.fileExists(program.program))\\n            continue;\\n        if (hackingLevel >= program.hackingLevel) {\\n            localStorage.setItem(keys.isProgramming, \\\"true\\\");\\n            ns.createProgram(program.program);\\n            while (ns.isBusy())\\n                await ns.sleep(300);\\n            localStorage.setItem(keys.isProgramming, \\\"false\\\");\\n        }\\n    }\\n}\\nexport const crimes = [\\n    \\\"Heist\\\",\\n    \\\"Assassination\\\",\\n    \\\"Kidnap\\\",\\n    \\\"Grand Theft Auto\\\",\\n    \\\"Homicide\\\",\\n    \\\"Traffick Arms\\\",\\n    \\\"Bond Forgery\\\",\\n    \\\"Deal Drugs\\\",\\n    \\\"Larceny\\\",\\n    \\\"Mug\\\",\\n    \\\"Rob Store\\\",\\n    \\\"Shoplift\\\",\\n];\\n\",\"filename\":\"consts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":89.75,\"server\":\"home\",\"moduleSequenceNumber\":248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nconst pollingInterval = 6000; // time in ms to wait between polling\\nconst host = \\\"home\\\";\\nfunction getServers() {\\n    let data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nconst setupScripts = [\\n    \\\"/utils/updateStorage.js\\\",\\n    \\\"/hacking/nukeAll.js\\\",\\n];\\n// These are various money scripts in order of preference.\\nconst crimeFocused = [\\n    {\\n        script: \\\"/crime/start.js\\\",\\n        requires: {\\n            strength: 150,\\n            defense: 150,\\n            agility: 150,\\n            dexterity: 150,\\n        },\\n    },\\n    {\\n        script: \\\"/jobs/work.js\\\",\\n        requires: {\\n            strength: 300,\\n            defense: 300,\\n            dexterity: 300,\\n            agility: 300,\\n            charisma: 250,\\n        },\\n        args: [\\n            \\\"--company=MegaCorp\\\",\\n            \\\"--position=Security\\\",\\n            //\\n        ],\\n    },\\n    {\\n        script: \\\"/jobs/work.js\\\",\\n        requires: {\\n            strength: 200,\\n            defense: 200,\\n            dexterity: 200,\\n            agility: 200,\\n            charisma: 150,\\n        },\\n        args: [\\n            \\\"--company=National Security Agency\\\",\\n            \\\"--position=Security\\\",\\n            //\\n        ],\\n    },\\n    {\\n        script: \\\"/jobs/work.js\\\",\\n        requires: {\\n            strength: 175,\\n            defense: 175,\\n            dexterity: 175,\\n            agility: 175,\\n            charisma: 175,\\n            rep: 8000,\\n            company: \\\"Carmichael Security\\\",\\n        },\\n        args: [\\n            \\\"--company=Carmichael Security\\\",\\n            \\\"--position=Agent\\\",\\n            //\\n        ],\\n    },\\n    {\\n        script: \\\"/jobs/work.js\\\",\\n        requires: {\\n            strength: 125,\\n            defense: 125,\\n            dexterity: 125,\\n            agility: 125,\\n            charisma: 75,\\n        },\\n        args: [\\n            \\\"--company=Carmichael Security\\\",\\n            \\\"--position=Security\\\",\\n            //\\n        ],\\n    },\\n    {\\n        script: \\\"/gym/workout.js\\\",\\n        requires: {\\n            strength: 125,\\n            defense: 125,\\n            dexterity: 125,\\n            charisma: 75,\\n        },\\n        args: [\\\"--goal=125\\\", \\\"--stat=agi\\\"],\\n    },\\n    {\\n        script: \\\"/gym/workout.js\\\",\\n        requires: {\\n            strength: 125,\\n            defense: 125,\\n            charisma: 75,\\n        },\\n        args: [\\\"--goal=125\\\", \\\"--stat=dex\\\"],\\n    },\\n    {\\n        script: \\\"/gym/workout.js\\\",\\n        requires: {\\n            strength: 125,\\n            charisma: 75,\\n        },\\n        args: [\\\"--goal=125\\\", \\\"--stat=def\\\"],\\n    },\\n    {\\n        script: \\\"/gym/workout.js\\\",\\n        requires: {\\n            charisma: 75,\\n        },\\n        args: [\\\"--goal=125\\\", \\\"--stat=str\\\"],\\n    },\\n    {\\n        script: \\\"/jobs/work.js\\\",\\n        requires: {},\\n        args: [\\n            \\\"--company=Joe's Guns\\\",\\n            \\\"--position=part-time employee\\\",\\n            //\\n        ],\\n    },\\n];\\n// These are the moneyScripts we will actually use.\\nconst moneyScripts = crimeFocused;\\nconst lightScripts = [\\n    \\\"/hacking/distributedHack.js\\\",\\n    \\\"/hacking/program.js\\\",\\n    //\\n];\\nconst allScripts = [\\n    ...lightScripts,\\n    \\\"/contracts/start.js\\\",\\n    \\\"/story/backdoors.js\\\",\\n    //\\n];\\nconst repScript = \\\"/rep/grind.js\\\";\\nconst learningScript = \\\"/hacking/school.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || ns.getHostname() !== \\\"home\\\") {\\n        ns.tprint(`This is the main conductor script for running all your automation:\\n      hacks, nukes, contracts, crimes, etc. It should be run from your home computer and should always be running on home.`);\\n        ns.tprint(\\\"It requires no arguments so just run it!\\\");\\n        ns.tprint(`It currently uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.`);\\n        ns.tprint(`USAGE: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    const totalRam = (ns.getServerMaxRam(host) - ns.getScriptRam(ns.getScriptName())) * 1e9;\\n    ns.tprint(`You currently have ${ns.nFormat(totalRam, \\\"0.00b\\\")} RAM available for scripts.`);\\n    // Start by killing everything else.\\n    killAll(ns);\\n    // calculate memory required for allScripts\\n    let memory = 0;\\n    for (const script of [\\n        ...setupScripts,\\n        ...moneyScripts.map((s) => s.script),\\n        ...allScripts,\\n        repScript,\\n    ]) {\\n        await ns.sleep(1);\\n        memory += ns.getScriptRam(script);\\n    }\\n    const allScriptMem = memory * 1e9;\\n    ns.tprint(`In order to run all scripts you need ${ns.nFormat(allScriptMem, \\\"0.00b\\\")} of RAM.`);\\n    memory = 0;\\n    for (const script of [\\n        ...setupScripts,\\n        ...moneyScripts.map((s) => s.script),\\n        ...lightScripts,\\n        repScript,\\n    ]) {\\n        await ns.sleep(1);\\n        memory += ns.getScriptRam(script);\\n    }\\n    ns.tprint(`In order to run light scripts you need ${ns.nFormat(memory * 1e9, \\\"0.00b\\\")} of RAM.`);\\n    while (true) {\\n        await ns.sleep(pollingInterval);\\n        // Determine size of home PC.\\n        // Determine what scripts can run.\\n        // Run Appropriate scripts.\\n        // Always start by running setupScripts.\\n        for (const script of setupScripts) {\\n            await ns.sleep(1);\\n            if (!ns.scriptRunning(script, host))\\n                ns.run(script);\\n            while (ns.scriptRunning(script, ns.getHostname()))\\n                await ns.sleep(1);\\n        }\\n        if (totalRam >= allScriptMem) {\\n            for (const script of allScripts) {\\n                if (!ns.scriptRunning(script, host))\\n                    ns.run(script);\\n            }\\n        }\\n        else {\\n            for (const script of lightScripts) {\\n                if (!ns.scriptRunning(script, host))\\n                    ns.run(script);\\n            }\\n        }\\n        ns.clearLog();\\n        // Next check if we have outstanding faction invitations.\\n        for (const faction of ns.checkFactionInvitations()) {\\n            ns.print(`Joining ${faction}`);\\n            ns.joinFaction(faction);\\n        }\\n        ns.print(\\\"All factions joined!\\\");\\n        // // Now we get the augmentations that make crime pay!\\n        // // A good source of income.\\n        // if (\\n        //   !(await GetAugmentations(\\n        //     ns,\\n        //     (aug) =>\\n        //       !!ns.getAugmentationStats(aug.name).crime_money_mult ||\\n        //       !!ns.getAugmentationStats(aug.name).crime_success_mult\\n        //   ))\\n        // )\\n        //   continue;\\n        // ns.print(\\\"Purchased all crime augmentations!\\\");\\n        // // Now for augmentations that improve hacking.\\n        // if (\\n        //   !(await GetAugmentations(ns, (aug) => {\\n        //     let stats = ns.getAugmentationStats(aug.name);\\n        //     return (\\n        //       !!stats.hacking_mult ||\\n        //       !!stats.hacking_exp_mult ||\\n        //       !!stats.hacking_money_mult ||\\n        //       !!stats.hacking_speed_mult ||\\n        //       !!stats.hacking_grow_mult ||\\n        //       !!stats.hacking_chance_mult\\n        //     );\\n        //   }))\\n        // )\\n        //   continue;\\n        // ns.print(\\\"Purchased all hacking augmentations!\\\");\\n        // Now go for broke and install everything else!\\n        if (!(await GetAugmentations(ns)))\\n            continue;\\n        ns.print(\\\"Purchased all available augmentations!\\\");\\n        // check if we have augmentations to install\\n        if (ns.getOwnedAugmentations(true).length -\\n            ns.getOwnedAugmentations(false).length >\\n            0) {\\n            ns.installAugmentations(\\\"/start.js\\\");\\n        }\\n        else {\\n            //nothing to install so just focus on hacking\\n            if (!ns.scriptRunning(learningScript, host))\\n                ns.run(learningScript);\\n        }\\n    }\\n}\\nasync function GetAugmentations(ns, filter = (_) => true) {\\n    await ns.sleep(pollingInterval);\\n    // only do this stuff if we are not busy programming.\\n    if (localStorage.getItem(keys.isProgramming) === \\\"true\\\") {\\n        ns.print(`Waiting for programming to finish before continuing.`);\\n        return false;\\n    }\\n    // if we are taking a class stop\\n    if (ns.scriptRunning(learningScript, host)) {\\n        ns.scriptKill(learningScript, host);\\n        ns.stopAction();\\n    }\\n    // determine if we are part of any factions with uninstalled\\n    // augmentations.\\n    const { factions } = ns.getPlayer();\\n    if (factions.length === 0) {\\n        // We aren't in any factions!\\n        return true;\\n    }\\n    const ownedAugs = ns.getOwnedAugmentations(true);\\n    const neededAugs = factions.flatMap((faction) => {\\n        let augmentations = [];\\n        for (const aug of ns.getAugmentationsFromFaction(faction)) {\\n            if (ownedAugs.includes(aug) || aug.startsWith(\\\"NeuroFlux\\\"))\\n                continue;\\n            augmentations.push(aug);\\n        }\\n        return augmentations.map((name) => {\\n            const price = ns.getAugmentationPrice(name);\\n            const rep = ns.getAugmentationRepReq(name);\\n            const preReqs = ns\\n                .getAugmentationPrereq(name)\\n                .filter((aug) => !ownedAugs.includes(aug));\\n            return {\\n                name,\\n                price,\\n                faction,\\n                rep,\\n                preReqs,\\n            };\\n        });\\n    });\\n    if (neededAugs.length === 0) {\\n        // We don't need anything our factions have to offer!\\n        return true;\\n    }\\n    // find the most expensive augmentation and work to earn it.\\n    let targetAug = {\\n        name: \\\"\\\",\\n        price: 0,\\n        faction: \\\"\\\",\\n        rep: 0,\\n        preReqs: [],\\n    };\\n    for (let aug of neededAugs) {\\n        await ns.sleep(1);\\n        if (aug.price > targetAug.price &&\\n            aug.preReqs.length === 0 &&\\n            filter(aug)) {\\n            targetAug = aug;\\n        }\\n    }\\n    if (targetAug.name === \\\"\\\") {\\n        // none of the augmentations match our filter.\\n        return true;\\n    }\\n    if (targetAug.price > ns.getServerMoneyAvailable(host)) {\\n        // get enough money for augmentation.\\n        ns.print(`\\n        Working to be able to afford ${targetAug.name} from ${targetAug.faction}.\\n        `);\\n        ns.enableLog(\\\"run\\\");\\n        for (const ms of moneyScripts) {\\n            const { requires } = ms;\\n            const { rep, company } = requires;\\n            const { hacking, strength, defense, dexterity, agility, charisma } = ns.getPlayer();\\n            if (company && rep) {\\n                const playerRep = ns.getCompanyRep(company);\\n                if (playerRep < rep)\\n                    continue;\\n            }\\n            if ((!requires.hacking || requires.hacking <= hacking) &&\\n                (!requires.strength || requires.strength <= strength) &&\\n                (!requires.defense || requires.defense <= defense) &&\\n                (!requires.dexterity || requires.dexterity <= dexterity) &&\\n                (!requires.agility || requires.agility <= agility) &&\\n                (!requires.charisma || requires.charisma <= charisma)) {\\n                ns.tail();\\n                // kill any other running moneyScripts\\n                // And stop their coresponding actions.\\n                for (const { script, args } of moneyScripts) {\\n                    if (script === ms.script && args === ms.args)\\n                        continue;\\n                    if (ns.isRunning(script, host, `--goal=${targetAug.price}`, ...(args || []))) {\\n                        ns.kill(script, host, `--goal=${targetAug.price}`, ...(args || []));\\n                        ns.stopAction();\\n                    }\\n                }\\n                // Also kill any repScript that may be running.\\n                if (ns.scriptRunning(repScript, host)) {\\n                    ns.scriptKill(repScript, host);\\n                    ns.stopAction();\\n                }\\n                const script = ms.script;\\n                if (!ns.scriptRunning(script, host))\\n                    ns.run(script, 1, `--goal=${targetAug.price}`, ...(ms.args || []));\\n                break;\\n            }\\n        }\\n        return false;\\n    }\\n    else if (targetAug.rep > ns.getFactionRep(targetAug.faction)) {\\n        ns.tail();\\n        ns.print(`\\n        Working for ${targetAug.faction} until we have ${ns.nFormat(targetAug.rep, \\\"0.00a\\\")} so we can buy ${targetAug.name}\\n        `);\\n        // kill any running moneyScripts\\n        // And stop their coresponding actions.\\n        for (const { script } of moneyScripts) {\\n            if (ns.scriptRunning(script, host)) {\\n                ns.scriptKill(script, host);\\n                ns.stopAction();\\n            }\\n        }\\n        if (!ns.scriptRunning(repScript, host)) {\\n            ns.run(repScript, 1, `--goal=${targetAug.rep}`, targetAug.faction);\\n        }\\n        return false;\\n    }\\n    else {\\n        ns.print(`\\n        Purchasing ${targetAug.name} from ${targetAug.faction} for ${ns.nFormat(targetAug.price, \\\"$0.00a\\\")}\\n        `);\\n        ns.enableLog(\\\"purchaseAugmentation\\\");\\n        ns.purchaseAugmentation(targetAug.faction, targetAug.name);\\n        return false;\\n    }\\n}\\nfunction killAll(ns) {\\n    for (const host of getServers()) {\\n        if (host.hostname === \\\"home\\\") {\\n            for (const ps of ns.ps(host.hostname)) {\\n                if (ps.filename === ns.getScriptName())\\n                    continue;\\n                ns.scriptKill(ps.filename, host.hostname);\\n            }\\n        }\\n        else {\\n            ns.killall(host.hostname);\\n        }\\n    }\\n}\\n\",\"filename\":\"start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///320f9135-3d0b-40bd-93eb-f6e3b4cda065\",\"moduleSequenceNumber\":1127},{\"filename\":\"start.js\",\"url\":\"blob:file:///21982a9e-372f-412a-a35b-155bda7e21c1\",\"moduleSequenceNumber\":1261}],\"dependents\":[],\"ramUsage\":630.7,\"server\":\"home\",\"moduleSequenceNumber\":249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":48},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"installAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":40},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":40},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getCompanyRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys, PortHackPrograms } from \\\"consts\\\";\\nlet servers = [];\\nfunction recursiveScan(ns, parent = \\\"home\\\", server = \\\"home\\\") {\\n    const children = ns.scan(server);\\n    if (!servers.map((s) => s.hostname).includes(server))\\n        servers.push(ns.getServer(server));\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        recursiveScan(ns, server, child);\\n    }\\n}\\n/**\\n * Get server data and save it to localStorage.\\n */\\nfunction getServers(ns) {\\n    recursiveScan(ns);\\n    localStorage.setItem(keys.serverList, JSON.stringify(servers));\\n}\\n/**\\n * Get the number of ports the user can hack and store it in localStorage.\\n */\\nfunction getPorts(ns) {\\n    // get the ports\\n    let ports = 0;\\n    let programs = PortHackPrograms;\\n    for (const p of programs) {\\n        if (ns.fileExists(p))\\n            ports++;\\n    }\\n    localStorage.setItem(keys.hackablePorts, JSON.stringify(ports));\\n}\\n/**\\n * Get the users installed and purchased augmentations\\n */\\nfunction getAugs(ns) {\\n    let allAugs = ns.getOwnedAugmentations(true);\\n    let installedAugs = ns.getOwnedAugmentations(false);\\n    let queuedAugs = allAugs.filter((a) => !installedAugs.includes(a));\\n    localStorage.setItem(keys.augmentationsQueued, JSON.stringify(queuedAugs));\\n    localStorage.setItem(keys.augmentationsInstalled, JSON.stringify(installedAugs));\\n}\\n/**\\n * Get the factions the player belongs to and store them.\\n */\\nfunction getFactions(ns) {\\n    let factions = ns.getPlayer().factions;\\n    let data = factions.map((f) => ({\\n        name: f,\\n        rep: ns.getFactionRep(f),\\n        favor: ns.getFactionFavor(f),\\n        augs: ns\\n            .getAugmentationsFromFaction(f)\\n            .map((a) => ns.getAugmentationStats(a)),\\n    }));\\n    localStorage.setItem(keys.factions, JSON.stringify(data));\\n}\\n/** Get the source files owned by the player */\\nfunction getSourceFiles(ns) {\\n    let sourceFiles = ns.getOwnedSourceFiles();\\n    localStorage.setItem(keys.sourceFiles, JSON.stringify(sourceFiles));\\n}\\n/**\\n * The main entry point for the program.\\n */\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will update the list of servers on the network as well as some other player data for use in other scripts. It should be run regularly to ensure accurate data in other scripts.\\n\\n      Usage: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    getServers(ns);\\n    getPorts(ns);\\n    getFactions(ns);\\n    getAugs(ns);\\n    getSourceFiles(ns);\\n}\\n\",\"filename\":\"/utils/updateStorage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///7b283da6-b7d4-41e7-9d81-22998241d3e7\",\"moduleSequenceNumber\":163507},{\"filename\":\"/utils/updateStorage.js\",\"url\":\"blob:file:///f88f180a-f6a7-494d-9f48-1be770b8e0e6\",\"moduleSequenceNumber\":164476}],\"dependents\":[],\"ramUsage\":281.4,\"server\":\"home\",\"moduleSequenceNumber\":250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nfunction getServers() {\\n    const data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nfunction getHackablePorts() {\\n    const data = localStorage.getItem(keys.hackablePorts);\\n    if (!data)\\n        return 0;\\n    return JSON.parse(data);\\n}\\nfunction getNukableServers() {\\n    return getServers().filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= getHackablePorts());\\n}\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will nuke all servers possible.\\n\\n      This script currently uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    nukeAllServers(ns);\\n}\\nfunction nukeAllServers(ns) {\\n    const servers = getNukableServers();\\n    let programs = [\\n        {\\n            name: \\\"BruteSSH.exe\\\",\\n            exec: ns.brutessh,\\n        },\\n        {\\n            name: \\\"FTPCrack.exe\\\",\\n            exec: ns.ftpcrack,\\n        },\\n        {\\n            name: \\\"relaySMTP.exe\\\",\\n            exec: ns.relaysmtp,\\n        },\\n        {\\n            name: \\\"HTTPWorm.exe\\\",\\n            exec: ns.httpworm,\\n        },\\n        {\\n            name: \\\"SQLInject.exe\\\",\\n            exec: ns.sqlinject,\\n        },\\n    ];\\n    for (const host of servers) {\\n        for (const program of programs) {\\n            if (ns.fileExists(program.name))\\n                program.exec(host.hostname);\\n        }\\n        ns.print(`NUKEing ${host.hostname}`);\\n        ns.nuke(host.hostname);\\n    }\\n}\\n\",\"filename\":\"/hacking/nukeAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///9b9901d1-76b5-4ede-a682-840448e032ba\",\"moduleSequenceNumber\":163507},{\"filename\":\"/hacking/nukeAll.js\",\"url\":\"blob:file:///1589b997-3efc-492f-8fbc-4c6f3c1e72d5\",\"moduleSequenceNumber\":163566}],\"dependents\":[],\"ramUsage\":3.4,\"server\":\"home\",\"moduleSequenceNumber\":251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nfunction getServers() {\\n    const data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nfunction getRichestServer(hackingLevel) {\\n    let servers = getServers();\\n    let richest;\\n    for (const server of servers) {\\n        if ((!richest || richest.moneyMax < server.moneyMax) &&\\n            server.hasAdminRights &&\\n            server.requiredHackingSkill <= hackingLevel) {\\n            richest = server;\\n        }\\n    }\\n    return richest;\\n}\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = getRichestServer(ns.getHackingLevel());\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will generate money by hacking the richest server possible.\\n      It automatically finds the richest server that the user can hack.\\n      If you are seeing this message and didn't use the --help flag then\\n      you either haven't run the /utils/updateServers.ts script since you installed augmentations\\n      or you haven't nuked any servers yet.\\n\\n      This script currently uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    await originalHack(ns, hostname.hostname);\\n}\\nasync function originalHack(ns, hostname) {\\n    while (true) {\\n        if (ns.getServerSecurityLevel(hostname) >\\n            ns.getServerMinSecurityLevel(hostname)) {\\n            await ns.weaken(hostname);\\n        }\\n        else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n            await ns.grow(hostname);\\n        }\\n        else {\\n            await ns.hack(hostname);\\n        }\\n    }\\n}\\n\",\"filename\":\"/hacking/cheapHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///7d3ba7d4-b5b5-4323-a3fb-e96e36249da3\",\"moduleSequenceNumber\":163507},{\"filename\":\"/hacking/cheapHack.js\",\"url\":\"blob:file:///f8941a40-9771-4e74-b848-7226c48d14d1\",\"moduleSequenceNumber\":163643}],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nconst workTypes = [\\n    \\\"Hacking\\\",\\n    \\\"Field\\\",\\n    \\\"Security\\\",\\n    //\\n];\\nfunction getServers() {\\n    const data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const faction = args._.join(\\\" \\\");\\n    const targetRep = args.goal;\\n    if (args.help || !faction) {\\n        ns.tprint(`\\n      This program will grind reputation from a given faction using every available\\n      system's resources.\\n\\n      Can optionally take a goal reputation to stop.\\n      USAGE: run ${ns.getScriptName()} [--goal=TARGET_REP] FACTION_NAME\\n      `);\\n        return;\\n    }\\n    let servers = getServers();\\n    let { factions } = ns.getPlayer();\\n    if (!factions.includes(faction)) {\\n        ns.tprint(`You are not a member of ${faction}`);\\n    }\\n    for (const server of servers) {\\n        const host = server.hostname;\\n        if (host === \\\"home\\\")\\n            continue;\\n        ns.killall(host);\\n        await ns.scp(\\\"/remote/share.js\\\", host);\\n        ns.exec(\\\"/remote/share.js\\\", host);\\n        await ns.sleep(1);\\n    }\\n    let workType;\\n    if (ns.isBusy())\\n        ns.stopAction();\\n    while (targetRep === 0 ||\\n        ns.getFactionRep(faction) + ns.getPlayer().workRepGained < targetRep) {\\n        await ns.sleep(500);\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(`Working for ${faction} until you have ${ns.nFormat(targetRep, \\\"0.00a\\\")} rep.`);\\n        if (workType) {\\n            ns.print(`Doing ${workType} Work for ${faction}`);\\n        }\\n        if (!ns.isBusy()) {\\n            if (workType) {\\n                ns.workForFaction(faction, workType, false);\\n            }\\n            else if (!ns.workForFaction(faction, \\\"Hacking\\\", false)) {\\n                ns.print(`${faction} does not support hacking - trying Field Work.`);\\n                if (!ns.workForFaction(faction, \\\"Field\\\", false)) {\\n                    ns.print(`${faction} does not support Field Work - trying Security Work.`);\\n                    if (!ns.workForFaction(faction, \\\"Security\\\", false)) {\\n                        ns.print(`What kind of faction is ${faction} that doesn't support anything!?!`);\\n                    }\\n                    else {\\n                        workType = \\\"Security\\\";\\n                        ns.print(`Doing Security Work for ${faction}`);\\n                    }\\n                }\\n                else {\\n                    workType = \\\"Field\\\";\\n                    ns.print(`Doing Field Work for ${faction}`);\\n                }\\n            }\\n            else {\\n                workType = \\\"Hacking\\\";\\n                ns.print(`Doing Hacking Contracts for ${faction}`);\\n            }\\n        }\\n    }\\n    ns.stopAction();\\n}\\nexport function autocomplete() {\\n    let data = localStorage.getItem(keys.factions);\\n    if (!data)\\n        return [];\\n    let factions = JSON.parse(data);\\n    return factions.map((f) => f.name);\\n}\\n\",\"filename\":\"/rep/grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///83e7e932-bcda-4751-bc1f-1d84cd973587\",\"moduleSequenceNumber\":904},{\"filename\":\"/rep/grind.js\",\"url\":\"blob:file:///0245f87d-577b-4766-ae71-f434903684cc\",\"moduleSequenceNumber\":918}],\"dependents\":[],\"ramUsage\":92.5,\"server\":\"home\",\"moduleSequenceNumber\":253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { crimes } from \\\"consts\\\";\\n// The time to sample to find how long before we reach our goal.\\n// The larger this number the more time you need to wait for an estimate.\\n// But the more accurate that estimate will be.\\nconst deltaTimeSample = 1 * 60e3;\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const crimeName = args._.join(\\\" \\\");\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    const { help, goal } = args;\\n    if (help) {\\n        ns.tprint(`\\n      This script will generate money by commiting crimes.\\n      You will not be able to do anything else while this is happening.\\n      The log will automatically pop up so you can kill the script at\\n      any time. You may optionally provide a crime name to focus on that particular crime.\\n      Otherwise the best money making crime that can reasonably be accomplished will be chosen.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      You can also provide a 'goal' in cash and crime will stop once that is achieved.\\n      USAGE: run ${ns.getScriptName()} --goal=[CASH_AMOUNT] [CRIME_NAME]\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    ns.tail();\\n    ns.enableLog(\\\"commitCrime\\\");\\n    function getCrimeData(crime) {\\n        const stats = ns.getCrimeStats(crime);\\n        const time = stats.time;\\n        return {\\n            name: crime,\\n            profit: (stats.money / time) * 1000,\\n            hackGrowth: (stats.hacking_exp / time) * 1000,\\n            strGrowth: (stats.strength_exp / time) * 1000,\\n            defGrowth: (stats.defense_exp / time) * 1000,\\n            dexGrowth: (stats.dexterity_exp / time) * 1000,\\n            agiGrowth: (stats.agility_exp / time) * 1000,\\n            chaGrowth: (stats.charisma_exp / time) * 1000,\\n            successChance: ns.getCrimeChance(crime),\\n        };\\n    }\\n    function getAllCrimeData() {\\n        const result = [];\\n        for (const crime of crimes) {\\n            result.push(getCrimeData(crime));\\n        }\\n        return result;\\n    }\\n    function getCommitableCrimes() {\\n        return getAllCrimeData().filter((c) => \\n        // either there is 100% chance of success\\n        c.successChance >= 1 ||\\n            // Or the the attempt takes less than a minute and there is at least a 50%\\n            // success rate.\\n            (ns.getCrimeStats(c.name).time < 60000 && c.successChance > 0.5));\\n    }\\n    let deltaTimeStart = Date.now();\\n    let deltaCashStart = ns.getServerMoneyAvailable(\\\"home\\\");\\n    let deltaTime = 0;\\n    let deltaCash = 0;\\n    let cashPerMs = 0;\\n    function resetTimer() {\\n        deltaTime = Date.now() - deltaTimeStart;\\n        deltaCash = ns.getServerMoneyAvailable(\\\"home\\\") - deltaCashStart;\\n        if (cashPerMs !== 0) {\\n            cashPerMs = (cashPerMs + deltaCash / deltaTime) / 2;\\n        }\\n        else {\\n            cashPerMs = deltaCash / deltaTime;\\n        }\\n        deltaTimeStart = Date.now();\\n        deltaCashStart = ns.getServerMoneyAvailable(\\\"home\\\");\\n    }\\n    function crimeBreakdown(crimeString) {\\n        const crime = getCrimeData(crimeString);\\n        const combatGrowth = crime.strGrowth + crime.defGrowth + crime.dexGrowth + crime.agiGrowth;\\n        if (goal > 0) {\\n            let timeToGoal;\\n            if (Date.now() - deltaTimeStart >= deltaTimeSample) {\\n                resetTimer();\\n            }\\n            if (cashPerMs > 0) {\\n                timeToGoal = (goal - ns.getServerMoneyAvailable(\\\"home\\\")) / cashPerMs;\\n            }\\n            ns.print(`\\nCommiting '${crime.name}' until you have ${ns.nFormat(goal, \\\"$0.00a\\\")}\\n${ns.nFormat(ns.getServerMoneyAvailable(\\\"home\\\") / goal, \\\"0.00%\\\")} complete.\\nEstimated Time to Completion: ${timeToGoal ? ns.tFormat(timeToGoal) : \\\"Calculating...\\\"}\\n      `);\\n        }\\n    }\\n    function mostProfitableCrime() {\\n        const crimes = getCommitableCrimes();\\n        let best;\\n        for (const crime of crimes) {\\n            if (!best || best.profit < crime.profit) {\\n                best = crime;\\n            }\\n        }\\n        return best?.name;\\n    }\\n    const easiestCrime = \\\"Shoplift\\\";\\n    if (crimeName) {\\n        if (crimes.includes(crimeName)) {\\n            if (ns.isBusy())\\n                ns.stopAction();\\n            resetTimer();\\n            while (ns.getServerMoneyAvailable(\\\"home\\\") < goal || !goal) {\\n                ns.tail();\\n                ns.tail(\\\"/start.js\\\");\\n                ns.clearLog();\\n                crimeBreakdown(crimeName);\\n                if (!ns.isBusy())\\n                    ns.commitCrime(crimeName);\\n                await ns.sleep(ns.getCrimeStats(crimeName).time + 3000);\\n            }\\n        }\\n        else\\n            ns.tprint(`${crimeName} is not a crime! You can use autocomplete to enter a crime name.`);\\n    }\\n    else {\\n        const crime = mostProfitableCrime() || easiestCrime;\\n        if (ns.isBusy())\\n            ns.stopAction();\\n        resetTimer();\\n        while (ns.getServerMoneyAvailable(\\\"home\\\") < goal || !goal) {\\n            ns.clearLog();\\n            ns.tail();\\n            crimeBreakdown(crime);\\n            if (!ns.isBusy())\\n                ns.commitCrime(crime);\\n            await ns.sleep(ns.getCrimeStats(crime).time + 3000);\\n        }\\n    }\\n}\\nexport function autocomplete() {\\n    return [...crimes, \\\"--goal\\\"];\\n}\\n\",\"filename\":\"/crime/start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///4f417f94-ff6e-4c60-9120-951e2e6f1a02\",\"moduleSequenceNumber\":1127},{\"filename\":\"/crime/start.js\",\"url\":\"blob:file:///7011739b-0a18-4949-9e48-58ef821e1f4f\",\"moduleSequenceNumber\":1266}],\"dependents\":[],\"ramUsage\":265.8,\"server\":\"home\",\"moduleSequenceNumber\":255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nconst maxServers = 50;\\nconst remoteHackScript = \\\"/remote/hackLoop.js\\\";\\nfunction getServers() {\\n    const data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nfunction getServerWithMemory(ns, memory) {\\n    let servers = getServers().filter((s) => {\\n        // update host\\n        s = ns.getServer(s.hostname);\\n        // need admin rights on any server.\\n        if (!s.hasAdminRights)\\n            return false;\\n        // Don't hog the home pc\\n        if (s.hostname.includes(\\\"home\\\"))\\n            return false;\\n        const total = s.maxRam;\\n        const used = s.ramUsed;\\n        const free = (total - used) * 1e9;\\n        return free >= memory;\\n    });\\n    return servers[0];\\n}\\nasync function getRichestServers(ns) {\\n    let cutoff = 1;\\n    let servers = getServers().filter((server) => server.hasAdminRights &&\\n        server.requiredHackingSkill <= ns.getHackingLevel() &&\\n        server.moneyMax >= cutoff);\\n    while (servers.length > maxServers) {\\n        cutoff += 1e3;\\n        servers = servers.filter((server) => server.moneyMax >= cutoff);\\n        await ns.sleep(1);\\n    }\\n    return servers;\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const targets = await getRichestServers(ns);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || targets.length === 0) {\\n        ns.tprint(`\\n      This script will generate money by hacking the richest server possible.\\n      It automatically finds the richest server that the user can hack.\\n      If you are seeing this message and didn't use the --help flag then\\n      you either haven't run the /utils/updateServers.ts script since you installed augmentations\\n      or you haven't nuked any servers yet.\\n\\n      This script currently uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    await distributedHack(ns, targets);\\n}\\nasync function distributedHack(ns, targets) {\\n    while (true) {\\n        await ns.sleep(500);\\n        ns.clearLog();\\n        // if (!ns.isBusy()) {\\n        //   ns.universityCourse(\\n        //     \\\"Rothman University\\\",\\n        //     \\\"Study Computer Science\\\",\\n        //     false\\n        //   );\\n        // }\\n        for (const target of targets) {\\n            ns.print(`Hacking ${target.hostname}`);\\n            const memory = ns.getScriptRam(remoteHackScript) * 1e9;\\n            ns.print(`Requires ${ns.nFormat(memory, \\\"0.00b\\\")} of RAM`);\\n            const host = getServerWithMemory(ns, memory);\\n            if (host) {\\n                const updatedHost = ns.getServer(host.hostname);\\n                ns.print(`${host.hostname} found to hack ${target.hostname}`);\\n                await ns.scp(remoteHackScript, host.hostname);\\n                const threads = Math.floor((updatedHost.maxRam - updatedHost.ramUsed) /\\n                    ns.getScriptRam(remoteHackScript));\\n                if (threads === 0)\\n                    continue;\\n                ns.enableLog(\\\"exec\\\");\\n                ns.exec(remoteHackScript, host.hostname, threads, target.hostname);\\n            }\\n            else {\\n                ns.print(`couldn't find a server to hack ${target.hostname}`);\\n            }\\n            await ns.sleep(3000);\\n        }\\n    }\\n}\\n\",\"filename\":\"/hacking/distributedHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///3d969a0f-d319-41bd-84a3-10f0faaa1329\",\"moduleSequenceNumber\":163507},{\"filename\":\"/hacking/distributedHack.js\",\"url\":\"blob:file:///4de3063b-b33d-4d1b-8d5b-656386ef48f0\",\"moduleSequenceNumber\":163642}],\"dependents\":[],\"ramUsage\":5.65,\"server\":\"home\",\"moduleSequenceNumber\":256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///8bf4c60c-a714-4302-a346-5242b0ff40c5\",\"moduleSequenceNumber\":7259}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"home\",\"moduleSequenceNumber\":257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { crimes } from \\\"consts\\\";\\n// The time to sample to find how long before we reach our goal.\\n// The larger this number the more time you need to wait for an estimate.\\n// But the more accurate that estimate will be.\\nconst deltaTimeSample = 1 * 60e3;\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const crimeName = args._.join(\\\" \\\");\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    const { help, goal } = args;\\n    if (help) {\\n        ns.tprint(`\\r\\n      This script will generate money by commiting crimes.\\r\\n      You will not be able to do anything else while this is happening.\\r\\n      The log will automatically pop up so you can kill the script at\\r\\n      any time. You may optionally provide a crime name to focus on that particular crime.\\r\\n      Otherwise the best money making crime that can reasonably be accomplished will be chosen.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n\\r\\n      You can also provide a 'goal' in cash and crime will stop once that is achieved.\\r\\n      USAGE: run ${ns.getScriptName()} --goal=[CASH_AMOUNT] [CRIME_NAME]\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    ns.tail();\\n    ns.enableLog(\\\"commitCrime\\\");\\n    function getCrimeData(crime) {\\n        const stats = ns.getCrimeStats(crime);\\n        const time = stats.time;\\n        return {\\n            name: crime,\\n            profit: (stats.money / time) * 1000,\\n            hackGrowth: (stats.hacking_exp / time) * 1000,\\n            strGrowth: (stats.strength_exp / time) * 1000,\\n            defGrowth: (stats.defense_exp / time) * 1000,\\n            dexGrowth: (stats.dexterity_exp / time) * 1000,\\n            agiGrowth: (stats.agility_exp / time) * 1000,\\n            chaGrowth: (stats.charisma_exp / time) * 1000,\\n            successChance: ns.getCrimeChance(crime),\\n        };\\n    }\\n    function getAllCrimeData() {\\n        const result = [];\\n        for (const crime of crimes) {\\n            result.push(getCrimeData(crime));\\n        }\\n        return result;\\n    }\\n    function getCommitableCrimes() {\\n        return getAllCrimeData().filter((c) => \\n        // either there is 100% chance of success\\n        c.successChance >= 1 ||\\n            // Or the the attempt takes less than a minute and there is at least a 50%\\n            // success rate.\\n            (ns.getCrimeStats(c.name).time < 60000 && c.successChance > 0.5));\\n    }\\n    let deltaTimeStart = Date.now();\\n    let deltaCashStart = ns.getServerMoneyAvailable(\\\"home\\\");\\n    let deltaTime = 0;\\n    let deltaCash = 0;\\n    let cashPerMs = 0;\\n    function resetTimer() {\\n        deltaTime = Date.now() - deltaTimeStart;\\n        deltaCash = ns.getServerMoneyAvailable(\\\"home\\\") - deltaCashStart;\\n        if (cashPerMs !== 0) {\\n            cashPerMs = (cashPerMs + deltaCash / deltaTime) / 2;\\n        }\\n        else {\\n            cashPerMs = deltaCash / deltaTime;\\n        }\\n        deltaTimeStart = Date.now();\\n        deltaCashStart = ns.getServerMoneyAvailable(\\\"home\\\");\\n    }\\n    function crimeBreakdown(crimeString) {\\n        const crime = getCrimeData(crimeString);\\n        const combatGrowth = crime.strGrowth + crime.defGrowth + crime.dexGrowth + crime.agiGrowth;\\n        if (goal > 0) {\\n            let timeToGoal;\\n            if (Date.now() - deltaTimeStart >= deltaTimeSample) {\\n                resetTimer();\\n            }\\n            if (cashPerMs > 0) {\\n                timeToGoal = (goal - ns.getServerMoneyAvailable(\\\"home\\\")) / cashPerMs;\\n            }\\n            ns.print(`\\r\\nCommiting '${crime.name}' until you have ${ns.nFormat(goal, \\\"$0.00a\\\")}\\r\\n${ns.nFormat(ns.getServerMoneyAvailable(\\\"home\\\") / goal, \\\"0.00%\\\")} complete.\\r\\nEstimated Time to Completion: ${timeToGoal ? ns.tFormat(timeToGoal) : \\\"Calculating...\\\"}\\r\\n      `);\\n        }\\n    }\\n    function mostProfitableCrime() {\\n        const crimes = getCommitableCrimes();\\n        let best;\\n        for (const crime of crimes) {\\n            if (!best || best.profit < crime.profit) {\\n                best = crime;\\n            }\\n        }\\n        return best?.name;\\n    }\\n    const easiestCrime = \\\"Shoplift\\\";\\n    if (crimeName) {\\n        if (crimes.includes(crimeName)) {\\n            if (ns.isBusy())\\n                ns.stopAction();\\n            resetTimer();\\n            while (ns.getServerMoneyAvailable(\\\"home\\\") < goal || !goal) {\\n                ns.tail();\\n                ns.clearLog();\\n                crimeBreakdown(crimeName);\\n                if (!ns.isBusy())\\n                    ns.commitCrime(crimeName);\\n                await ns.sleep(ns.getCrimeStats(crimeName).time + 3000);\\n            }\\n        }\\n        else\\n            ns.tprint(`${crimeName} is not a crime! You can use autocomplete to enter a crime name.`);\\n    }\\n    else {\\n        const crime = mostProfitableCrime() || easiestCrime;\\n        if (ns.isBusy())\\n            ns.stopAction();\\n        resetTimer();\\n        while (ns.getServerMoneyAvailable(\\\"home\\\") < goal || !goal) {\\n            ns.clearLog();\\n            ns.tail();\\n            crimeBreakdown(crime);\\n            if (!ns.isBusy())\\n                ns.commitCrime(crime);\\n            await ns.sleep(ns.getCrimeStats(crime).time + 3000);\\n        }\\n    }\\n}\\nexport function autocomplete() {\\n    return [...crimes, \\\"--goal\\\"];\\n}\\n\",\"filename\":\"/jobs/start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":265.8,\"server\":\"home\",\"moduleSequenceNumber\":258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// The time to sample to find how long before we reach our goal.\\n// The larger this number the more time you need to wait for an estimate.\\n// But the more accurate that estimate will be.\\nconst deltaTimeSample = 1 * 60e3;\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    const { help, goal } = args;\\n    if (help) {\\n        ns.tprint(`\\r\\n      This script will generate money by working for Joe's Guns.\\r\\n      You will not be able to do anything else while this is happening.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n\\r\\n      You can also provide a 'goal' in cash and will stop working once that is achieved.\\r\\n      USAGE: run ${ns.getScriptName()} --goal=[CASH_AMOUNT]\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const company = \\\"Joe's Guns\\\";\\n    const position = \\\"part-time employee\\\";\\n    // apply to work at joe's guns if necessary.\\n    const jobs = Object.keys(ns.getPlayer().jobs);\\n    if (!jobs.includes(company))\\n        ns.applyToCompany(company, position);\\n    // work at joes guns on a loop.\\n    while (goal === 0 || ns.getServerMoneyAvailable(\\\"home\\\") < goal) {\\n        await ns.sleep(300);\\n        ns.tail();\\n        ns.clearLog();\\n        ns.enableLog(\\\"workForCompany\\\");\\n        ns.print(`Working at ${company} until we have ${ns.nFormat(goal, \\\"$0.00a\\\")}`);\\n        if (!ns.isBusy())\\n            ns.workForCompany(company, false);\\n    }\\n}\\nexport function autocomplete() {\\n    return [\\\"--goal=\\\"];\\n}\\n\",\"filename\":\"/jobs/joesGuns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/jobs/joesGuns.js\",\"url\":\"blob:file:///4942e989-8691-4518-a397-2c965b789a7e\",\"moduleSequenceNumber\":6891}],\"dependents\":[],\"ramUsage\":106.3,\"server\":\"home\",\"moduleSequenceNumber\":259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"workForCompany\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nfunction getServers() {\\n    const data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script kills every script everywhere.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    for (const server of getServers()) {\\n        if (server.hostname === ns.getHostname())\\n            continue;\\n        ns.killall(server.hostname);\\n    }\\n    ns.killall(ns.getHostname());\\n}\\n\",\"filename\":\"/utils/killeverything.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///5e52b9c6-9126-4311-afe2-fb120d8381d6\",\"moduleSequenceNumber\":248},{\"filename\":\"/utils/killeverything.js\",\"url\":\"blob:file:///8ad8732b-b3a6-4bf2-afe5-041786ee5fbc\",\"moduleSequenceNumber\":77245}],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":77245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will have you study computer science with every free moment.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    const school = \\\"Rothman University\\\";\\n    const course = \\\"Study Computer Science\\\";\\n    while (true) {\\n        await ns.sleep(300);\\n        if (!ns.isBusy()) {\\n            ns.universityCourse(school, course, false);\\n        }\\n    }\\n}\\n\",\"filename\":\"/hacking/school.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/hacking/school.js\",\"url\":\"blob:file:///448fe044-49fe-4229-af9e-430201fa33ad\",\"moduleSequenceNumber\":224}],\"dependents\":[],\"ramUsage\":41.7,\"server\":\"home\",\"moduleSequenceNumber\":261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"universityCourse\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PortHackPrograms } from \\\"consts\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script will generate any possible hacking programs.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.sleep(300);\\n        let programCount = 0;\\n        for (const program of PortHackPrograms) {\\n            if (ns.fileExists(program)) {\\n                programCount++;\\n                continue;\\n            }\\n            if (!ns.isBusy())\\n                ns.createProgram(program, false);\\n        }\\n        if (programCount === PortHackPrograms.length)\\n            return;\\n    }\\n}\\n\",\"filename\":\"/hacking/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":89.8,\"server\":\"home\",\"moduleSequenceNumber\":262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys, CreateHackPrograms, PortHackPrograms } from \\\"consts\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will generate any possible hacking programs.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // simple trick to let others know when I need to program.\\n    localStorage.setItem(keys.isProgramming, \\\"\\\");\\n    while (true) {\\n        await ns.sleep(300);\\n        ns.clearLog();\\n        let count = 0;\\n        await CreateHackPrograms(ns);\\n        for (const program of PortHackPrograms) {\\n            if (ns.fileExists(program))\\n                count++;\\n        }\\n        if (count === PortHackPrograms.length)\\n            return;\\n    }\\n}\\n\",\"filename\":\"/hacking/program.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///8b8c726a-06fc-4ac4-8931-e3e1338cb03f\",\"moduleSequenceNumber\":1127},{\"filename\":\"/hacking/program.js\",\"url\":\"blob:file:///8ec7ccc1-51e1-40db-b857-55b4d39a0d89\",\"moduleSequenceNumber\":1263}],\"dependents\":[],\"ramUsage\":89.85,\"server\":\"home\",\"moduleSequenceNumber\":263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PortHackPrograms } from \\\"consts\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will purchase any possible hacking programs.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.sleep(300);\\n        if (!ns.getPlayer().tor) {\\n            if (!ns.purchaseTor())\\n                continue;\\n        }\\n        let programCount = 0;\\n        for (const program of PortHackPrograms) {\\n            if (ns.fileExists(program)) {\\n                programCount++;\\n                continue;\\n            }\\n            if (!ns.isBusy())\\n                ns.purchaseProgram(program);\\n        }\\n        if (programCount === PortHackPrograms.length)\\n            return;\\n    }\\n}\\n\",\"filename\":\"/buying/program.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":74.3,\"server\":\"home\",\"moduleSequenceNumber\":264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GM } from \\\"gameManager/earlyGM\\\";\\nconst FactionData = [\\n    {\\n        faction: \\\"CyberSec\\\",\\n        server: \\\"CSEC\\\",\\n    },\\n    {\\n        faction: \\\"NiteSec\\\",\\n        server: \\\"avmnite-02h\\\",\\n    },\\n    {\\n        faction: \\\"The Black Hand\\\",\\n        server: \\\"I.I.I.I\\\",\\n    },\\n    {\\n        faction: \\\"BitRunners\\\",\\n        server: \\\"run4theh111z\\\",\\n    },\\n    {\\n        faction: \\\"Fulcrum Secret Technologies\\\",\\n        server: \\\"fulcrumassets\\\",\\n    },\\n];\\nexport async function main(ns) {\\n    const gm = new GM(ns);\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script automatically tries to backdoor the main story line servers if you are not a member of their faction.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.sleep(300);\\n        ns.clearLog();\\n        const { factions } = ns.getPlayer();\\n        for (const fd of FactionData) {\\n            if (factions.includes(fd.faction))\\n                continue;\\n            await gm.backdoor(fd.server);\\n        }\\n    }\\n}\\n\",\"filename\":\"/story/backdoors.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/gameManager/earlyGM.js\",\"url\":\"blob:file:///b95ef4c2-d7ef-40bc-9766-8b085c4153a5\",\"moduleSequenceNumber\":1097},{\"filename\":\"/story/backdoors.js\",\"url\":\"blob:file:///f295c76e-afb8-49c5-8c2c-25e2847c9a8f\",\"moduleSequenceNumber\":1265}],\"dependents\":[],\"ramUsage\":243.95,\"server\":\"home\",\"moduleSequenceNumber\":265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// The time to sample to find how long before we reach our goal.\\n// The larger this number the more time you need to wait for an estimate.\\n// But the more accurate that estimate will be.\\nconst deltaTimeSample = 1 * 60e3;\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    const { help, goal } = args;\\n    if (help) {\\n        ns.tprint(`\\r\\n      This script will generate money by working for MegaCorp.\\r\\n      You will not be able to do anything else while this is happening.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n\\r\\n      You can also provide a 'goal' in cash and will stop working once that is achieved.\\r\\n      USAGE: run ${ns.getScriptName()} --goal=[CASH_AMOUNT]\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const company = \\\"MegaCorp\\\";\\n    const position = \\\"Business\\\";\\n    // apply to work at joe's guns if necessary.\\n    const jobs = Object.keys(ns.getPlayer().jobs);\\n    if (!jobs.includes(company))\\n        ns.applyToCompany(company, position);\\n    // work at joes guns on a loop.\\n    while (goal === 0 || ns.getServerMoneyAvailable(\\\"home\\\") < goal) {\\n        await ns.sleep(300);\\n        ns.tail();\\n        ns.clearLog();\\n        ns.enableLog(\\\"workForCompany\\\");\\n        ns.print(`Working at ${company} until we have ${ns.nFormat(goal, \\\"$0.00a\\\")}`);\\n        if (!ns.isBusy())\\n            ns.workForCompany(company, false);\\n    }\\n}\\nexport function autocomplete() {\\n    return [\\\"--goal=\\\"];\\n}\\n\",\"filename\":\"/jobs/megaCorp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":106.3,\"server\":\"home\",\"moduleSequenceNumber\":266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"workForCompany\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// The time to sample to find how long before we reach our goal.\\n// The larger this number the more time you need to wait for an estimate.\\n// But the more accurate that estimate will be.\\nconst deltaTimeSample = 1 * 60e3;\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"company\\\", \\\"MegaCorp\\\"],\\n        [\\\"position\\\", \\\"Business\\\"],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    const { help, goal } = args;\\n    if (help) {\\n        ns.tprint(`\\n      This script will generate money by working for the provided company (default MegaCorp)\\n      doing the given job (default Business) until you reach the given goal (default 0=indefinite).\\n      You will not be able to do anything else while this is happening.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      You can also provide a 'goal' in cash and will stop working once that is achieved.\\n      USAGE: run ${ns.getScriptName()} [--goal=CASH_AMOUNT] [--company=\\\"COMPANY_NAME\\\"] [--position=\\\"POSITION_NAME\\\"]\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"workForCompany\\\");\\n    ns.clearLog();\\n    const company = args.company.trim('\\\"');\\n    const position = args.position.trim('\\\"');\\n    // work at joes guns on a loop.\\n    while (goal === 0 || ns.getServerMoneyAvailable(\\\"home\\\") < goal) {\\n        await ns.sleep(300);\\n        ns.tail();\\n        ns.clearLog();\\n        ns.print(`Working at ${company} until we have ${ns.nFormat(goal, \\\"$0.00a\\\")}`);\\n        if (!ns.isBusy()) {\\n            // apply to work or for promotion.\\n            ns.applyToCompany(company, position);\\n            ns.workForCompany(company, false);\\n        }\\n    }\\n}\\nexport function autocomplete() {\\n    return ['--goal=\\\"', '--company=\\\"', '--position=\\\"'];\\n}\\n\",\"filename\":\"/jobs/work.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/jobs/work.js\",\"url\":\"blob:file:///f84e9138-660f-4aa4-99a9-33a6942ce318\",\"moduleSequenceNumber\":46055}],\"dependents\":[],\"ramUsage\":105.8,\"server\":\"home\",\"moduleSequenceNumber\":267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"workForCompany\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GM } from \\\"gameManager/earlyGM\\\";\\nconst gyms = [\\n    {\\n        gym: \\\"Powerhouse Gym\\\",\\n        server: \\\"powerhouse-fitness\\\",\\n    },\\n    {\\n        gym: \\\"Iron Gym\\\",\\n        server: \\\"iron-gym\\\",\\n    },\\n];\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n        [\\\"stat\\\", \\\"str\\\"],\\n        [\\\"nodebt\\\", false],\\n    ]);\\n    const { goal, stat, nodebt, } = args;\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This scripts works out at the most efficient gym.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      Option            | Description\\n      ==========================\\n      --help              Displays this help message.\\n\\n      --goal=value        Stops when your chosen stat reaches a certain value.\\n\\n      --stat=value        The stat you wish to train (str|def|dex|agi).\\n\\n      --nodebt            Stop working out when you run out of money.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    function statCheck(goal) {\\n        if (stat.toLowerCase().startsWith(\\\"str\\\"))\\n            return ns.getPlayer().strength < goal;\\n        if (stat.toLowerCase().startsWith(\\\"def\\\"))\\n            return ns.getPlayer().defense < goal;\\n        if (stat.toLowerCase().startsWith(\\\"dex\\\"))\\n            return ns.getPlayer().dexterity < goal;\\n        if (stat.toLowerCase().startsWith(\\\"agi\\\"))\\n            return ns.getPlayer().agility < goal;\\n        return true;\\n    }\\n    const gm = new GM(ns);\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.stopAction();\\n    while (goal === 0 || statCheck(goal)) {\\n        await ns.sleep(300);\\n        ns.clearLog();\\n        if (nodebt && ns.getServerMoneyAvailable(\\\"home\\\") <= 0) {\\n            ns.stopAction();\\n            return;\\n        }\\n        for (const g of gyms) {\\n            const { server, gym } = g;\\n            if (await gm.backdoor(server)) {\\n                // now work out here.\\n                if (goal > 0) {\\n                    if (nodebt) {\\n                        ns.print(`Working out at ${gym} until you run out of money or your ${stat} reaches ${goal}`);\\n                    }\\n                    else {\\n                        ns.print(`Working out at ${gym} until your ${stat} reaches ${goal}`);\\n                    }\\n                }\\n                else {\\n                    ns.tail();\\n                    ns.print(`Working out at ${gym} to train your ${stat} until you manually stop this script.`);\\n                }\\n                if (!ns.isBusy())\\n                    ns.gymWorkout(gym, stat, false);\\n            }\\n        }\\n        // check if we are busy.\\n        if (!ns.isBusy()) {\\n            // we couldn't find a gym we could backdoor.\\n            // we should workout at the last gym as it is the cheapest.\\n            const { gym } = gyms[gyms.length - 1];\\n            ns.gymWorkout(gym, stat, false);\\n        }\\n    }\\n}\\nexport function autocomplete() {\\n    return [\\n        \\\"--help\\\",\\n        \\\"--goal=\\\",\\n        \\\"--stat=str\\\",\\n        \\\"--stat=def\\\",\\n        \\\"--stat=dex\\\",\\n        \\\"--stat=agi\\\",\\n        \\\"--nodebt\\\",\\n    ];\\n}\\n\",\"filename\":\"/gym/workout.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/gameManager/earlyGM.js\",\"url\":\"blob:file:///9fc6138a-0815-4710-8d36-0df3fd85b683\",\"moduleSequenceNumber\":1166},{\"filename\":\"/gym/workout.js\",\"url\":\"blob:file:///908e3652-5bf2-43e8-89e3-18dfbb64b36b\",\"moduleSequenceNumber\":1201}],\"dependents\":[],\"ramUsage\":292.05,\"server\":\"home\",\"moduleSequenceNumber\":268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":32},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function setData(key, data) {\\n    localStorage.setItem(key, JSON.stringify(data));\\n}\\nfunction getData(key) {\\n    JSON.parse(localStorage.getItem(key) || JSON.stringify(undefined));\\n}\\n// The keys for localStorage.\\nconst keys = {\\n    // The complete list of servers with their data.\\n    serverList: \\\"serverList\\\",\\n    // Are we programming?\\n    isProgramming: \\\"Is Programming\\\",\\n};\\nexport async function main(ns) {\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    ns.tprint(`\\n      This file is not meant to be called. It holds the wrapper class for game managed functions.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      `);\\n}\\n/**\\n * This is the main wrapper Game Manager class.\\n * It holds all the data and functionality of common actions in the game.\\n */\\nexport class GM {\\n    /**\\n     * The primary constructor loads basic data for the gm.\\n     */\\n    constructor(ns) {\\n        this._ns = ns;\\n        this.updateStorage();\\n    }\\n    /**\\n     * These are the HackPrograms used to open ports for hacking and executing\\n     * scripts.\\n     *\\n     * It is an array of simple objects holding:\\n     * filename: the name of the file.\\n     * execute: the ns fuction to use the program.\\n     * programmingLevel: the required programmingLevel to create the program.\\n     */\\n    get HackPrograms() {\\n        return [\\n            {\\n                filename: \\\"BruteSSH.exe\\\",\\n                execute: this.ns.brutessh,\\n                programmingLevel: 50,\\n            },\\n            {\\n                filename: \\\"FTPCrack.exe\\\",\\n                execute: this.ns.ftpcrack,\\n                programmingLevel: 100,\\n            },\\n            {\\n                filename: \\\"relaySMTP.exe\\\",\\n                execute: this.ns.relaysmtp,\\n                programmingLevel: 250,\\n            },\\n            {\\n                filename: \\\"HTTPWorm.exe\\\",\\n                execute: this.ns.httpworm,\\n                programmingLevel: 500,\\n            },\\n            {\\n                filename: \\\"SQLInject.exe\\\",\\n                execute: this.ns.sqlinject,\\n                programmingLevel: 750,\\n            },\\n        ];\\n    }\\n    /**\\n     * This function creates hacking programs if it can. Does nothing if it can't\\n     * or if they are already created.\\n     */\\n    async createPrograms() {\\n        // check if we have nothing to program.\\n        if (this.hackablePorts === this.HackPrograms.length)\\n            return;\\n        // otherwise create hack programs.\\n        for (const p of this.HackPrograms) {\\n            if (this.ns.fileExists(p.filename))\\n                continue;\\n            if (p.programmingLevel > this.ns.getHackingLevel())\\n                break;\\n            // here we know we have the programming chops and the file doesn't already\\n            // exist.\\n            this.isProgramming = true;\\n            while (!this.ns.fileExists(p.filename)) {\\n                if (!this.ns.isBusy())\\n                    this.ns.createProgram(p.filename);\\n                await this.ns.sleep(500);\\n            }\\n            this.isProgramming = false;\\n        }\\n    }\\n    /**\\n     * This is the Netscript instance used to create the Game Manager.\\n     */\\n    get ns() {\\n        return this._ns;\\n    }\\n    /**\\n     * The list of all available servers. Used for hacking purposes.\\n     */\\n    get serverList() {\\n        return getData(keys.serverList) || [];\\n    }\\n    set serverList(data) {\\n        setData(keys.serverList, data);\\n    }\\n    /**\\n     * This is simply the count of all our hacking programs.\\n     */\\n    get hackablePorts() {\\n        let count = 0;\\n        for (const p of this.HackPrograms.map((p) => p.filename)) {\\n            if (this.ns.fileExists(p))\\n                count++;\\n        }\\n        return count;\\n    }\\n    /**\\n     * The augmentations that we currently have. This is split into:\\n     * installed: those augmentations we have installed.\\n     * queued: those augmentations we have purchased and have not yet installed.\\n     *\\n     * There is also a helper method:\\n     * includes(aug) -> boolean\\n     * This tests if an augmentation is in either {installed} or {queued} lists.\\n     */\\n    get augmentations() {\\n        let installed = this.ns.getOwnedAugmentations(false);\\n        let queued = this.ns\\n            .getOwnedAugmentations(true)\\n            .filter((a) => !installed.includes(a));\\n        return {\\n            installed,\\n            queued,\\n            includes(value) {\\n                return this.installed.includes(value) || this.queued.includes(value);\\n            },\\n        };\\n    }\\n    /**\\n     * This is a flag to let other operations know if we are working on a program.\\n     */\\n    get isProgramming() {\\n        return getData(keys.isProgramming);\\n    }\\n    set isProgramming(data) {\\n        setData(keys.isProgramming, data);\\n    }\\n    /**\\n     * This updates the stored variables.\\n     * Currently it only updates the serverList.\\n     */\\n    updateStorage() {\\n        // This method will pull data from localStorage and update it if necessary.\\n        // The only data that should be stored are things that take some time to\\n        // calculate - or things that can't be calculated.\\n        //\\n        // Generate serverList if necessary.\\n        this.recursiveScan();\\n    }\\n    /**\\n     * This will return true if the server is nuked.\\n     * If the server is not nuked but can be this will nuke it and return true.\\n     * If the server cannot be nuked this will return false.\\n     *\\n     * TLDR; true = you have root access. false = you can't get root access yet.\\n     */\\n    nuke(host) {\\n        if (this.ns.hasRootAccess(host)) {\\n            // already nuked\\n            return true;\\n        }\\n        if (this.ns.getServerNumPortsRequired(host) > this.hackablePorts) {\\n            // cannot nuke\\n            return false;\\n        }\\n        for (const p of this.HackPrograms) {\\n            if (this.ns.fileExists(p.filename))\\n                p.execute(host);\\n        }\\n        this.ns.nuke(host);\\n        return true;\\n    }\\n    /**\\n     * This will return true if a backdoor is installed.\\n     * If not and a backdoor can be installed this installs it and returns true.\\n     * If we can't backdoor the server yet this returns false.\\n     *\\n     * TLDR; true = this server has the backdoor installed. false = we can't\\n     * install the backdoor yet.\\n     */\\n    async backdoor(host) {\\n        // check if the backdoor is already installed.\\n        if (this.ns.getServer(host).backdoorInstalled)\\n            return true;\\n        // check if we have/can get admin priviledges.\\n        if (!this.nuke(host))\\n            return false;\\n        // We know we have admin priviledges now...\\n        if (this.ns.getServerRequiredHackingLevel(host) > this.ns.getHackingLevel())\\n            // We can't backdoor the server yet.\\n            return false;\\n        await this.connect(host);\\n        await this.ns.installBackdoor();\\n        await this.connect(\\\"home\\\");\\n        return true;\\n    }\\n    /**\\n     * This kills every script on every host - including the script that calls it.\\n     */\\n    killEverything() {\\n        for (const { hostname } of this.serverList) {\\n            this.ns.killall(hostname);\\n        }\\n    }\\n    /**\\n     * This kills every script on every host except the script that calls it.\\n     */\\n    killEverythingElse() {\\n        for (const { hostname } of this.serverList) {\\n            for (const ps of this.ns.ps(hostname)) {\\n                if (this.ns.getScriptName() === ps.filename &&\\n                    this.ns.getHostname() === hostname)\\n                    continue;\\n                this.ns.scriptKill(ps.filename, hostname);\\n            }\\n        }\\n    }\\n    /**\\n     * This connects to any valid server regardless of path.\\n     */\\n    async connect(target) {\\n        // always start from home\\n        this.ns.connect(\\\"home\\\");\\n        // check if our job is done?\\n        if (target === \\\"home\\\")\\n            return true;\\n        let route = [];\\n        if (!this.ns.serverExists(target))\\n            return;\\n        if (!this.find(target, route)) {\\n            this.ns.print(`Could not find server ${target}`);\\n            return false;\\n        }\\n        for (const i of route) {\\n            if (this.ns.serverExists(i))\\n                this.ns.connect(i);\\n            await this.ns.sleep(1);\\n        }\\n        return true;\\n    }\\n    /**\\n     * This is a helper method to find the path to a server.\\n     * Used by connect()\\n     */\\n    find(target, route = [], parent = \\\"\\\", server = \\\"home\\\") {\\n        const children = this.ns.scan(server);\\n        for (let child of children) {\\n            if (parent == child) {\\n                continue;\\n            }\\n            if (child == target) {\\n                route.unshift(child);\\n                route.unshift(server);\\n                return true;\\n            }\\n            if (this.find(target, route, server, child)) {\\n                route.unshift(server);\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    /**\\n     * This is a helper method used to generate the exhaustive server list.\\n     */\\n    recursiveScan(parent = \\\"\\\", server = \\\"home\\\") {\\n        const children = this.ns.scan(server);\\n        if (!this.serverList.map((s) => s.hostname).includes(server))\\n            this.serverList.push(this.ns.getServer(server));\\n        for (const child of children) {\\n            if (parent == child)\\n                continue;\\n            this.recursiveScan(server, child);\\n        }\\n    }\\n}\\n\",\"filename\":\"/gameManager/earlyGM.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":243.45,\"server\":\"home\",\"moduleSequenceNumber\":269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const scripts = [\\n    \\\"hacknet.js\\\",\\n    \\\"/contracts/list.js\\\",\\n    \\\"/phase1/cnct.js\\\",\\n    \\\"/phase1/backdoor.js\\\",\\n    \\\"/phase1/programs.js\\\",\\n    \\\"/phase1/basicHack.js\\\",\\n    // `expandServer.js` and `actions/programming.js` is currently failing until we can level up Source File 4\\n    // '/phase1/expandServer.js',\\n    // '/actions/programming.js',\\n];\\nconst maxRam = 32e9;\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will test all phase 1 scripts memory requirements.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let pass = true;\\n    let failedScripts = [];\\n    for (const script of scripts) {\\n        const ram = ns.getScriptRam(script, \\\"home\\\") * 1e9;\\n        if (ram > maxRam) {\\n            pass = false;\\n            failedScripts.push(script);\\n            ns.tprint(`${script} requires ${ns.nFormat(ram, \\\"0.00b\\\")} RAM - that's too much!`);\\n        }\\n        else {\\n            ns.tprint(`${script} only requires ${ns.nFormat(ram, \\\"0.00b\\\")} RAM`);\\n        }\\n    }\\n    if (!pass) {\\n        ns.tprint(`FAIL! You still need to work on these scripts:\\n      ${failedScripts}`);\\n    }\\n    else {\\n        ns.tprint(\\\"SUCCESS!\\\");\\n    }\\n}\\n\",\"filename\":\"/phase1/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/phase1/test.js\",\"url\":\"blob:file:///83cee65f-3940-4ca6-bc91-92cee5032825\",\"moduleSequenceNumber\":202056}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":76004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const allowancePercentage = 0.01;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        ns.disableLog(\\\"ALL\\\");\\n        ns.clearLog();\\n        for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n            let gain = [0, 0, 0];\\n            let currentCash = ns.getServerMoneyAvailable(\\\"home\\\");\\n            currentCash *= allowancePercentage;\\n            if (ns.hacknet.getPurchaseNodeCost() <= currentCash) {\\n                ns.hacknet.purchaseNode();\\n                continue;\\n            }\\n            else {\\n                ns.print(`Cannot afford a new node with ${ns.nFormat(currentCash, \\\"$0.00a\\\")}`);\\n            }\\n            const node = ns.hacknet.getNodeStats(i);\\n            if (node.level < 200) {\\n                gain[0] =\\n                    ((node.level + 1) *\\n                        1.6 *\\n                        Math.pow(1.035, node.ram - 1) *\\n                        ((node.cores + 5) / 6)) /\\n                        ns.hacknet.getLevelUpgradeCost(i, 1);\\n            }\\n            else {\\n                gain[0] = 0;\\n            }\\n            if (node.ram < 64) {\\n                gain[1] =\\n                    (node.level *\\n                        1.6 *\\n                        Math.pow(1.035, node.ram * 2 - 1) *\\n                        ((node.cores + 5) / 6)) /\\n                        ns.hacknet.getRamUpgradeCost(i, 1);\\n            }\\n            else {\\n                gain[1] = 0;\\n            }\\n            if (node.cores < 16) {\\n                gain[2] =\\n                    (node.level *\\n                        1.6 *\\n                        Math.pow(1.035, node.ram - 1) *\\n                        ((node.cores + 6) / 6)) /\\n                        ns.hacknet.getCoreUpgradeCost(i, 1);\\n            }\\n            else {\\n                gain[2] = 0;\\n            }\\n            // ns.print(`Level Upgrade: ${gain[0]}`);\\n            // ns.print(`Ram Upgrade: ${gain[1]}`);\\n            // ns.print(`Core Upgrade: ${gain[2]}`);\\n            let topgain = 0;\\n            for (let g of gain) {\\n                if (g > topgain) {\\n                    topgain = g;\\n                }\\n            }\\n            if (topgain === 0) {\\n                ns.print(`All Gains maxed on Node ${i}`);\\n                continue;\\n            }\\n            if (topgain === gain[0] &&\\n                ns.hacknet.getLevelUpgradeCost(i, 1) < currentCash) {\\n                ns.print(`Upgrading Level on Node ${i}`);\\n                ns.hacknet.upgradeLevel(i, 1);\\n            }\\n            if (topgain === gain[1] &&\\n                ns.hacknet.getRamUpgradeCost(i, 1) < currentCash) {\\n                ns.print(`Upgrading Ram on Node ${i}`);\\n                ns.hacknet.upgradeRam(i, 1);\\n            }\\n            if (topgain === gain[2] &&\\n                ns.hacknet.getCoreUpgradeCost(i, 1) < currentCash) {\\n                ns.print(`Upgrading Cores on Node ${i}`);\\n                ns.hacknet.upgradeCore(i, 1);\\n            }\\n            else {\\n                ns.print(`Cannot afford to upgrade Node ${i} with ${ns.nFormat(currentCash, \\\"$0.00a\\\")}`);\\n            }\\n        }\\n        await ns.sleep(1);\\n    }\\n}\\n\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///69504d13-6932-47d2-a58e-f56670d4eea5\",\"moduleSequenceNumber\":77536}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":77536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const C = {\\n    keys: {\\n        serverNodes: \\\"ServerNodes\\\",\\n    },\\n    // This is a cheaper alternative to get the serverNodes.\\n    // Requires initialization using `new ServerTree(ns)`\\n    getHomeServerNode() {\\n        return get(C.keys.serverNodes);\\n    },\\n};\\nexport function copyCmd(ns, cmd) {\\n    const terminalInput = document.getElementById(\\\"terminal-input\\\");\\n    if (!terminalInput) {\\n        ns.tprint(\\\"Couldn't get terminal-input field.\\\");\\n        return;\\n    }\\n    terminalInput.value = cmd;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({ target: terminalInput });\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\nexport function runCmd(ns, cmd) {\\n    copyCmd(ns, cmd);\\n    document.dispatchEvent(new KeyboardEvent(\\\"keydown\\\", { keyCode: 13 }));\\n}\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return branch;\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n        store(C.keys.serverNodes, this.home);\\n    }\\n    // This is a cheaper alternative to get the serverNodes.\\n    // Requires initialization using `new ServerTree(ns)`\\n    static getHomeServerNode() {\\n        return get(C.keys.serverNodes);\\n    }\\n}\\n// localStorage Functions\\nfunction store(key, value) {\\n    localStorage.setItem(key, JSON.stringify(value));\\n}\\nfunction get(key) {\\n    JSON.parse(localStorage.getItem(key) || JSON.stringify(undefined));\\n}\\n\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":30.8,\"server\":\"home\",\"moduleSequenceNumber\":272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase1/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///e4500bab-bcec-41e9-bb9a-fde077292959\",\"moduleSequenceNumber\":266900},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///79382e5a-9cad-4fa5-b719-04a9204b8022\",\"moduleSequenceNumber\":266896},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///7663fef2-37bb-4f43-af55-01fe3aeceb61\",\"moduleSequenceNumber\":266902},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///de3d3753-8a3e-48d4-8b9a-841a3d360438\",\"moduleSequenceNumber\":266904},{\"filename\":\"/phase1/cnct.js\",\"url\":\"blob:file:///e11001da-4ac5-4534-86fb-31b7a6651170\",\"moduleSequenceNumber\":267228}],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"home\",\"moduleSequenceNumber\":75994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ProgramData {\\n    constructor(ns) {\\n        this.programs = [\\n            {\\n                filename: \\\"BruteSSH.exe\\\",\\n                hackingLevel: 50,\\n                execute: ns.brutessh,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"FTPCrack.exe\\\",\\n                hackingLevel: 100,\\n                execute: ns.ftpcrack,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"relaySMTP.exe\\\",\\n                hackingLevel: 250,\\n                execute: ns.relaysmtp,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"HTTPWorm.exe\\\",\\n                hackingLevel: 500,\\n                execute: ns.httpworm,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"SQLInject.exe\\\",\\n                hackingLevel: 750,\\n                execute: ns.sqlinject,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n        ];\\n    }\\n    get hackablePorts() {\\n        let total = 0;\\n        for (const p of this.programs) {\\n            if (p.exists)\\n                total++;\\n        }\\n        return total;\\n    }\\n}\\n\",\"filename\":\"/utils/ProgramData.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":76028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function copyCmd(ns, cmd) {\\n    const terminalInput = document.getElementById(\\\"terminal-input\\\");\\n    if (!terminalInput) {\\n        ns.tprint(\\\"Couldn't get terminal-input field.\\\");\\n        return;\\n    }\\n    terminalInput.value = cmd;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({ target: terminalInput });\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\nexport function runCmd(ns, cmd) {\\n    copyCmd(ns, cmd);\\n    document.dispatchEvent(new KeyboardEvent(\\\"keydown\\\", { keyCode: 13 }));\\n}\\n\",\"filename\":\"/utils/terminal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":76032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const keys = {\\n    serverNodes: \\\"ServerNodes\\\",\\n};\\n// localStorage Functions\\nexport function setItem(key, value) {\\n    localStorage.setItem(key, JSON.stringify(value));\\n}\\nexport function getItem(key) {\\n    JSON.parse(localStorage.getItem(key) || JSON.stringify(undefined));\\n}\\n\",\"filename\":\"/utils/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const keys = {\\n    serverNodes: \\\"ServerNodes\\\",\\n};\\n// localStorage Functions\\nexport function setItem(key, value) {\\n    localStorage.setItem(key, JSON.stringify(value));\\n}\\nexport function getItem(key) {\\n    JSON.parse(localStorage.getItem(key) || JSON.stringify(undefined));\\n}\\n\",\"filename\":\"/utils/localStorage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":76024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setItem, keys } from \\\"utils/localStorage.js\\\";\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n        setItem(keys.serverNodes, this.home);\\n    }\\n}\\n\",\"filename\":\"/utils/ServerTree.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":76030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export * from \\\"utils/localStorage.js\\\";\\nexport * from \\\"utils/ProgramData.js\\\";\\nexport * from \\\"utils/ServerTree.js\\\";\\nexport * from \\\"utils/terminal.js\\\";\\nexport * from \\\"utils/nuke.js\\\";\\n\",\"filename\":\"/utils/index.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { ServerNode } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script will monitor for servers that need a backdoor installed.\\r\\n      It will also nuke any server that needs it.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    const programs = new ProgramData(ns);\\n    while (true) {\\n        // 30 seconds should be a perfectly reasonable update time.\\n        await ns.sleep(30000);\\n        let servers = new ServerNode(ns);\\n        // find nukable servers.\\n        for (const server of servers\\n            .list()\\n            .filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts)) {\\n            // nuke them.\\n            ns.print(`nuking ${server.hostname}`);\\n            nuke(ns, server.hostname);\\n        }\\n        // clear the log.\\n        ns.clearLog();\\n        let backdoors = servers\\n            .list()\\n            .filter((s) => s.hasAdminRights &&\\n            !s.backdoorInstalled &&\\n            s.requiredHackingSkill < ns.getHackingLevel() &&\\n            s.hostname !== \\\"home\\\");\\n        // show the log if we have servers to backdoor\\n        if (backdoors.length === 0) {\\n            ns.print(\\\"No servers require a backdoor at this time.\\\");\\n            continue;\\n        }\\n        ns.tail();\\n        ns.print(`The following servers need to have the backdoor installed:`);\\n        ns.print(`==========================================================`);\\n        // find backdoorable servers.\\n        for (const server of backdoors) {\\n            // list them.\\n            ns.print(server.hostname);\\n        }\\n        ns.print(`==========================================================`);\\n    }\\n}\\n\",\"filename\":\"/phase1/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///e2e108f6-96c6-4ae9-b80e-8de4ab2bc1b8\",\"moduleSequenceNumber\":195489},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///d3af3b7d-f623-40c4-a969-8872a42ff91a\",\"moduleSequenceNumber\":195485},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///637c3dea-1a97-47f0-8a22-743a38042db7\",\"moduleSequenceNumber\":195491},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///3384ae04-0077-4d96-a246-5e0ebc6c5e84\",\"moduleSequenceNumber\":195489},{\"filename\":\"/utils/nuke.js\",\"url\":\"blob:file:///0a514da2-94c9-4c39-9c5e-5d6b3544e49e\",\"moduleSequenceNumber\":195487},{\"filename\":\"/phase1/backdoor.js\",\"url\":\"blob:file:///9e9549de-7d66-49c5-8ede-459c25ade9b7\",\"moduleSequenceNumber\":198227}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"home\",\"moduleSequenceNumber\":75990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ProgramData } from \\\"utils/ProgramData\\\";\\nexport function nuke(ns, target) {\\n    const programs = new ProgramData(ns);\\n    for (const p of programs.programs) {\\n        if (p.exists)\\n            p.execute(target);\\n    }\\n    ns.nuke(target);\\n}\\n\",\"filename\":\"/utils/nuke.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":76026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///9bc5306b-8612-431d-bebb-b070cde5f699\",\"moduleSequenceNumber\":6445}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":76034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers, getRunnableServers } from \\\"phase1/cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      Hacks the richest server from every available server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = undefined;\\n    for (const server of getHackableServers(ns)) {\\n        if (!richest || richest.moneyMax < server.moneyMax)\\n            richest = server;\\n    }\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    // copy the hack script to all the servers we have admin priveledges to.\\n    for (const server of getRunnableServers(ns)) {\\n        if (!server || server.hostname === \\\"home\\\")\\n            continue;\\n        ns.killall(server.hostname);\\n        const hackScript = \\\"hack.js\\\";\\n        await ns.scp(hackScript, server.hostname);\\n        // calculate the maximum number of threads.\\n        let maxThreads = Math.floor(server.maxRam / ns.getScriptRam(hackScript, server.hostname));\\n        // hack the richest server\\n        if (maxThreads > 0)\\n            ns.exec(hackScript, server.hostname, maxThreads, richest.hostname);\\n    }\\n}\\n\",\"filename\":\"/phase1/basicHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///35f3b1f2-da8a-4d7c-a389-9cf8ab5b773e\",\"moduleSequenceNumber\":13643},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///8f1d4f1f-bb23-4fbe-9486-ee6c8c67d6a3\",\"moduleSequenceNumber\":13639},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///50b4c0af-dbb3-404c-9ca3-a29ee1dc0cab\",\"moduleSequenceNumber\":13645},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///63892eb6-9c90-41da-a6ea-8f472812c731\",\"moduleSequenceNumber\":13647},{\"filename\":\"/phase1/cnct.js\",\"url\":\"blob:file:///ef754a51-55ac-487b-952a-14e3b5f3db21\",\"moduleSequenceNumber\":13609},{\"filename\":\"/phase1/basicHack.js\",\"url\":\"blob:file:///0cd0bd54-6825-478a-a323-bea9b21f2764\",\"moduleSequenceNumber\":13891}],\"dependents\":[],\"ramUsage\":6.7,\"server\":\"home\",\"moduleSequenceNumber\":75992,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This monitors for programs that need created and creates the program if\\r\\n      you have Source File 4. If not it prompts the user to create the program.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    const data = new ProgramData(ns);\\n    while (true) {\\n        await ns.sleep(30 * 1000);\\n        ns.clearLog();\\n        for (const program of data.programs) {\\n            if (!program.exists && program.hackingLevel <= ns.getHackingLevel()) {\\n                // this program needs created.\\n                if (ns\\n                    .getOwnedSourceFiles()\\n                    .map((s) => s.n)\\n                    .includes(4) ||\\n                    ns.getPlayer().bitNodeN === 4) {\\n                    // we have source file 4 or we are in bitNodeN 4\\n                    if (!ns.scriptRunning(\\\"phase1/actions/programming.js\\\", ns.getHostname()))\\n                        ns.run(\\\"phase1/actions/programming.js\\\", 1, program.filename);\\n                }\\n                else {\\n                    // we don't have access to singularity.\\n                    ns.tail();\\n                    ns.print(`Please create ${program.filename}`);\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase1/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///0fc5d33a-c573-48e1-bb90-bd886ba935d8\",\"moduleSequenceNumber\":203262},{\"filename\":\"/phase1/programs.js\",\"url\":\"blob:file:///62be8b22-6e17-47a7-a23a-6dd2c5a516d5\",\"moduleSequenceNumber\":203563}],\"dependents\":[],\"ramUsage\":9.65,\"server\":\"home\",\"moduleSequenceNumber\":76000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script will run continuously and expand your server for you. It will\\r\\n      only work with Source File 4.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMaxRam(\\\"home\\\") < 1e9) {\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeRamCost()) {\\n            ns.upgradeHomeRam();\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeCoresCost()) {\\n            ns.upgradeHomeCores();\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase1/expandServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":145.85,\"server\":\"home\",\"moduleSequenceNumber\":75996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const programName = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !programName) {\\n        ns.tprint(`\\r\\n      This script will create a program for you.\\r\\n      It requires Source File 4 to work.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} PROGRAM_NAME\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    while (!ns.fileExists(programName)) {\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(`Creating ${programName}`);\\n        await ns.sleep(1);\\n        if (!ns.isBusy() || !ns.getPlayer().workType.includes(\\\"Program\\\"))\\n            ns.createProgram(programName);\\n    }\\n}\\n\",\"filename\":\"/phase1/actions/programming.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":90.3,\"server\":\"home\",\"moduleSequenceNumber\":75988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const programName = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !programName) {\\n        ns.tprint(`\\r\\n      This script will create a program for you.\\r\\n      It requires Source File 4 to work.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} PROGRAM_NAME\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    while (!ns.fileExists(programName)) {\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(`Creating ${programName}`);\\n        await ns.sleep(1);\\n        if (!ns.isBusy() || !ns.getPlayer().workType.includes(\\\"Program\\\"))\\n            ns.createProgram(programName);\\n    }\\n}\\n\",\"filename\":\"/phase2/actions/programming.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":90.3,\"server\":\"home\",\"moduleSequenceNumber\":76006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script will run continuously and expand your server for you. It will\\r\\n      only work with Source File 4.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMaxRam(\\\"home\\\") < 1e9) {\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeRamCost()) {\\n            ns.upgradeHomeRam();\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeCoresCost()) {\\n            ns.upgradeHomeCores();\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase2/expandServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":145.85,\"server\":\"home\",\"moduleSequenceNumber\":76014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { ServerNode } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script will monitor for servers that need a backdoor installed.\\r\\n      It will also nuke any server that needs it.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    const programs = new ProgramData(ns);\\n    while (true) {\\n        // 30 seconds should be a perfectly reasonable update time.\\n        await ns.sleep(30000);\\n        let servers = new ServerNode(ns);\\n        // find nukable servers.\\n        for (const server of servers\\n            .list()\\n            .filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts)) {\\n            // nuke them.\\n            ns.print(`nuking ${server.hostname}`);\\n            nuke(ns, server.hostname);\\n        }\\n        // clear the log.\\n        ns.clearLog();\\n        let backdoors = servers\\n            .list()\\n            .filter((s) => s.hasAdminRights &&\\n            !s.backdoorInstalled &&\\n            s.requiredHackingSkill < ns.getHackingLevel() &&\\n            s.hostname !== \\\"home\\\");\\n        // show the log if we have servers to backdoor\\n        if (backdoors.length === 0) {\\n            ns.print(\\\"No servers require a backdoor at this time.\\\");\\n            continue;\\n        }\\n        ns.tail();\\n        ns.print(`The following servers need to have the backdoor installed:`);\\n        ns.print(`==========================================================`);\\n        // find backdoorable servers.\\n        for (const server of backdoors) {\\n            // list them.\\n            ns.print(server.hostname);\\n        }\\n        ns.print(`==========================================================`);\\n    }\\n}\\n\",\"filename\":\"/phase2/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///86dfef0c-b2fc-40fa-b750-99995bb9e828\",\"moduleSequenceNumber\":198},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///08f10b56-dc46-4dc9-a388-5b59a98c0db5\",\"moduleSequenceNumber\":201},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///7c42a480-df54-46db-b3d1-46e6ae6ac244\",\"moduleSequenceNumber\":202},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///dcadc262-da6f-4437-b0d0-f22bd2ec4ffb\",\"moduleSequenceNumber\":198},{\"filename\":\"/utils/nuke.js\",\"url\":\"blob:file:///da5a8641-85c2-4c91-998d-008a18642555\",\"moduleSequenceNumber\":205},{\"filename\":\"/phase2/backdoor.js\",\"url\":\"blob:file:///61ae1875-e12d-459b-bf4e-c30b4b604901\",\"moduleSequenceNumber\":313}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"home\",\"moduleSequenceNumber\":76008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers, getRunnableServers } from \\\"phase2/cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      Hacks the richest server from every available server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = undefined;\\n    for (const server of getHackableServers(ns)) {\\n        if (!richest || richest.moneyMax < server.moneyMax)\\n            richest = server;\\n    }\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    // copy the hack script to all the servers we have admin priveledges to.\\n    for (const server of getRunnableServers(ns)) {\\n        if (!server || server.hostname === \\\"home\\\")\\n            continue;\\n        ns.killall(server.hostname);\\n        const hackScript = \\\"hack.js\\\";\\n        await ns.scp(hackScript, server.hostname);\\n        // calculate the maximum number of threads.\\n        let maxThreads = Math.floor(server.maxRam / ns.getScriptRam(hackScript, server.hostname));\\n        // hack the richest server\\n        if (maxThreads > 0)\\n            ns.exec(hackScript, server.hostname, maxThreads, richest.hostname);\\n    }\\n}\\n\",\"filename\":\"/phase2/basicHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///ce0f75a9-5551-4623-a103-65c0bda14117\",\"moduleSequenceNumber\":76028},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///7c96b9a7-a3a2-4b44-91b2-ee15aa8d7635\",\"moduleSequenceNumber\":76024},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///11dabf01-322d-43a2-a18a-b7e0e763ffaf\",\"moduleSequenceNumber\":76030},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///5e24328f-9b71-4273-932f-8fc39d2c21e0\",\"moduleSequenceNumber\":76032},{\"filename\":\"/phase2/cnct.js\",\"url\":\"blob:file:///1a280702-3ed0-42ba-b6c6-2b92f8587278\",\"moduleSequenceNumber\":76012},{\"filename\":\"/phase2/basicHack.js\",\"url\":\"blob:file:///ccb0ecb1-4b96-4755-a5c3-2c793b650d57\",\"moduleSequenceNumber\":76519}],\"dependents\":[],\"ramUsage\":6.7,\"server\":\"home\",\"moduleSequenceNumber\":76519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///2a704c9c-50ec-4aa8-9cd0-794da7ad0100\",\"moduleSequenceNumber\":76028},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///6fc4c3a7-be83-4fcb-819e-127ca84cd79e\",\"moduleSequenceNumber\":76024},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///164b220c-9d7a-47fc-9ee5-5ac2ef6aab89\",\"moduleSequenceNumber\":76030},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///9cb2aa3f-8e69-4c6f-93b3-74a5f1e882b9\",\"moduleSequenceNumber\":76032},{\"filename\":\"/phase2/cnct.js\",\"url\":\"blob:file:///08075250-4f48-4d9a-9498-99d1a01b65ad\",\"moduleSequenceNumber\":77539}],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"home\",\"moduleSequenceNumber\":77539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This monitors for programs that need created and creates the program if\\r\\n      you have Source File 4. If not it prompts the user to create the program.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    const data = new ProgramData(ns);\\n    while (true) {\\n        await ns.sleep(30 * 1000);\\n        ns.clearLog();\\n        for (const program of data.programs) {\\n            if (!program.exists && program.hackingLevel <= ns.getHackingLevel()) {\\n                // this program needs created.\\n                if (ns\\n                    .getOwnedSourceFiles()\\n                    .map((s) => s.n)\\n                    .includes(4) ||\\n                    ns.getPlayer().bitNodeN === 4) {\\n                    // we have source file 4 or we are in bitNodeN 4\\n                    if (!ns.scriptRunning(\\\"phase2/actions/programming.js\\\", ns.getHostname()))\\n                        ns.run(\\\"phase2/actions/programming.js\\\", 1, program.filename);\\n                }\\n                else {\\n                    // we don't have access to singularity.\\n                    ns.tail();\\n                    ns.print(`Please create ${program.filename}`);\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase2/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///23f8e217-f66f-4008-a239-094d31293f62\",\"moduleSequenceNumber\":1100},{\"filename\":\"/phase2/programs.js\",\"url\":\"blob:file:///cf064dc1-d360-4b82-9efd-eab9565855a1\",\"moduleSequenceNumber\":1340}],\"dependents\":[],\"ramUsage\":9.65,\"server\":\"home\",\"moduleSequenceNumber\":76018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const scripts = [\\n    \\\"hacknet.js\\\",\\n    \\\"/phase2/cnct.js\\\",\\n    \\\"/phase2/backdoor.js\\\",\\n    \\\"/phase2/programs.js\\\",\\n    \\\"/phase2/basicHack.js\\\",\\n    \\\"/phase2/expandServer.js\\\",\\n    \\\"/actions/programming.js\\\",\\n];\\nconst maxRam = 1e12;\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will test all phase 1 scripts memory requirements.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let pass = true;\\n    let failedScripts = [];\\n    for (const script of scripts) {\\n        const ram = ns.getScriptRam(script, \\\"home\\\") * 1e9;\\n        if (ram > maxRam) {\\n            pass = false;\\n            failedScripts.push(script);\\n            ns.tprint(`${script} requires ${ns.nFormat(ram, \\\"0.00b\\\")} RAM - that's too much!`);\\n        }\\n        else {\\n            ns.tprint(`${script} only requires ${ns.nFormat(ram, \\\"0.00b\\\")} RAM`);\\n        }\\n    }\\n    if (!pass) {\\n        ns.tprint(`FAIL! You still need to work on these scripts:\\n      ${failedScripts}`);\\n    }\\n    else {\\n        ns.tprint(\\\"SUCCESS!\\\");\\n    }\\n}\\n\",\"filename\":\"/phase2/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/phase2/test.js\",\"url\":\"blob:file:///82634db5-4448-4f1d-9536-f8004ab15d87\",\"moduleSequenceNumber\":211289}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":76022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":76038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"phase1/cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      Shares all the servers possible.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    // copy the share script to all the servers we have admin priveledges to.\\n    for (const server of getRunnableServers(ns)) {\\n        if (!server || server.hostname === \\\"home\\\")\\n            continue;\\n        ns.killall(server.hostname);\\n        const shareScript = \\\"share.js\\\";\\n        await ns.scp(shareScript, server.hostname);\\n        // calculate the maximum number of threads.\\n        let maxThreads = Math.floor(server.maxRam / ns.getScriptRam(shareScript, server.hostname));\\n        // hack the richest server\\n        if (maxThreads > 0)\\n            ns.exec(shareScript, server.hostname, maxThreads);\\n    }\\n}\\n\",\"filename\":\"/phase1/shareAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///7db7606b-c887-4d55-873a-5dedb01c4f34\",\"moduleSequenceNumber\":208017},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///d02536dc-b7f5-4e76-b7e1-f81c87d7517c\",\"moduleSequenceNumber\":208013},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///8c1fdc0b-7431-466f-a2b9-e4dc0bad31f6\",\"moduleSequenceNumber\":208019},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///77fb067a-7ac2-4fec-8202-3ca3a476814f\",\"moduleSequenceNumber\":208021},{\"filename\":\"/phase1/cnct.js\",\"url\":\"blob:file:///618a1956-0244-4fbb-8150-1029404447d3\",\"moduleSequenceNumber\":207989},{\"filename\":\"/phase1/shareAll.js\",\"url\":\"blob:file:///a144d7f0-d74f-42ee-b15f-9728f5149dca\",\"moduleSequenceNumber\":208028}],\"dependents\":[],\"ramUsage\":6.65,\"server\":\"home\",\"moduleSequenceNumber\":76002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"phase1/cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      Hacks the richest server using the rest of your RAM.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = undefined;\\n    for (const server of getHackableServers(ns)) {\\n        if (!richest || richest.moneyMax < server.moneyMax)\\n            richest = server;\\n    }\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    const hackScript = \\\"hack.js\\\";\\n    // calculate the maximum number of threads.\\n    let maxThreads = Math.floor((ns.getServerMaxRam(ns.getHostname()) -\\n        ns.getServerUsedRam(ns.getHostname()) +\\n        ns.getScriptRam(ns.getScriptName(), ns.getHostname())) /\\n        ns.getScriptRam(hackScript, ns.getHostname()));\\n    // hack the richest server\\n    if (maxThreads > 0)\\n        ns.spawn(hackScript, maxThreads, richest.hostname);\\n    else {\\n        ns.tprint(\\\"ERROR! Cannot spawn hack script. Out of memory.\\\");\\n    }\\n}\\n\",\"filename\":\"/phase1/hackRichest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///1615351e-dbd4-4fdf-9b5b-189f840ead9d\",\"moduleSequenceNumber\":209822},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///3988558a-e4a2-46b4-a833-1a0267be10b6\",\"moduleSequenceNumber\":209818},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///9ace0e54-3f9c-4c7e-8b42-7c0c5ff1eda1\",\"moduleSequenceNumber\":209824},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///5244965e-7ea7-4892-958c-e7349d5e584d\",\"moduleSequenceNumber\":209826},{\"filename\":\"/phase1/cnct.js\",\"url\":\"blob:file:///c1647b5f-f630-423c-91a6-999a767e6c07\",\"moduleSequenceNumber\":209792},{\"filename\":\"/phase1/hackRichest.js\",\"url\":\"blob:file:///04c0524a-5787-4ca1-8fe0-2aa45dacf43b\",\"moduleSequenceNumber\":209833}],\"dependents\":[],\"ramUsage\":6.45,\"server\":\"home\",\"moduleSequenceNumber\":75998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"phase2/cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      Hacks the richest server using the rest of your RAM.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = undefined;\\n    for (const server of getHackableServers(ns)) {\\n        if (!richest || richest.moneyMax < server.moneyMax)\\n            richest = server;\\n    }\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    const hackScript = \\\"hack.js\\\";\\n    // calculate the maximum number of threads.\\n    let maxThreads = Math.floor((ns.getServerMaxRam(ns.getHostname()) -\\n        ns.getServerUsedRam(ns.getHostname()) +\\n        ns.getScriptRam(ns.getScriptName(), ns.getHostname())) /\\n        ns.getScriptRam(hackScript, ns.getHostname()));\\n    // hack the richest server\\n    if (maxThreads > 0)\\n        ns.spawn(hackScript, maxThreads, richest.hostname);\\n    else {\\n        ns.tprint(\\\"ERROR! Cannot spawn hack script. Out of memory.\\\");\\n    }\\n}\\n\",\"filename\":\"/phase2/hackRichest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///1c98c22f-b76c-4d96-a621-efa3994a2b1f\",\"moduleSequenceNumber\":198},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///5818e4a4-7f97-4627-b655-e2792ed0e1fc\",\"moduleSequenceNumber\":201},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///1adcdec4-a962-49d1-9da4-06a767536e15\",\"moduleSequenceNumber\":202},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///109ef1a5-991c-4080-b12f-33e0db8091e0\",\"moduleSequenceNumber\":199},{\"filename\":\"/phase2/cnct.js\",\"url\":\"blob:file:///6bfc5639-0b29-4f34-a645-53844b29796b\",\"moduleSequenceNumber\":44354},{\"filename\":\"/phase2/hackRichest.js\",\"url\":\"blob:file:///17a8c39e-1bfa-46b4-bfbf-91feb05dc5d9\",\"moduleSequenceNumber\":44979}],\"dependents\":[],\"ramUsage\":6.45,\"server\":\"home\",\"moduleSequenceNumber\":76016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"phase2/cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      Shares all the servers possible.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    // copy the share script to all the servers we have admin priveledges to.\\n    for (const server of getRunnableServers(ns)) {\\n        if (!server || server.hostname === \\\"home\\\")\\n            continue;\\n        ns.killall(server.hostname);\\n        const shareScript = \\\"share.js\\\";\\n        await ns.scp(shareScript, server.hostname);\\n        // calculate the maximum number of threads.\\n        let maxThreads = Math.floor(server.maxRam / ns.getScriptRam(shareScript, server.hostname));\\n        // hack the richest server\\n        if (maxThreads > 0)\\n            ns.exec(shareScript, server.hostname, maxThreads);\\n    }\\n}\\n\",\"filename\":\"/phase2/shareAll.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///a39066dc-667b-4c98-aa29-21591099a5c6\",\"moduleSequenceNumber\":76028},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///d822e429-41c9-464c-85a9-bde7314a1627\",\"moduleSequenceNumber\":76024},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///7b562374-94f1-47c9-8831-986e03e9f872\",\"moduleSequenceNumber\":76030},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///0db6332d-af3c-4cf6-b195-d9d85e9ad01b\",\"moduleSequenceNumber\":76032},{\"filename\":\"/phase2/cnct.js\",\"url\":\"blob:file:///58c33e17-13fa-4f2f-a7ee-562b3a2dbe5c\",\"moduleSequenceNumber\":76012},{\"filename\":\"/phase2/shareAll.js\",\"url\":\"blob:file:///b7831928-67b3-4f7d-84a0-53066b57ab66\",\"moduleSequenceNumber\":76520}],\"dependents\":[],\"ramUsage\":6.65,\"server\":\"home\",\"moduleSequenceNumber\":76520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nconst minuteInterval = 2;\\nfunction getAllServers(ns) {\\n    const tree = new ServerTree(ns);\\n    return tree.home.list();\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will automatically list contracts that it finds on the network.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let contracts;\\n    function refreshLog() {\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(\\\"Contracts\\\");\\n        ns.print(\\\"=========\\\");\\n        for (const c of contracts)\\n            ns.print(c);\\n        ns.print(\\\"=========\\\");\\n    }\\n    while (true) {\\n        // await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\n        contracts = getAllServers(ns).flatMap((server) => {\\n            const onServer = ns.ls(server.hostname, \\\".cct\\\").map((contract) => {\\n                const type = ns.codingcontract.getContractType(contract, server.hostname);\\n                return `${server.hostname} - ${contract} - ${type}`;\\n            });\\n            return onServer;\\n        });\\n        if (contracts.length > 0)\\n            refreshLog();\\n        await ns.sleep(minuteInterval * 60 * 1000);\\n    }\\n}\\n\",\"filename\":\"/contracts/list.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///42e9bc7e-8a53-42ea-a8ae-606cff713861\",\"moduleSequenceNumber\":4944},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///a3673a72-1e5f-43b2-86a0-6524167775ff\",\"moduleSequenceNumber\":4950},{\"filename\":\"/contracts/list.js\",\"url\":\"blob:file:///e2dadfa8-4f48-4fd2-b69a-044ea6f53c45\",\"moduleSequenceNumber\":5025}],\"dependents\":[],\"ramUsage\":9.1,\"server\":\"home\",\"moduleSequenceNumber\":75984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\n// - batchHack.js: This is your bread and butter batching script. It will calculate\\n//   the richest server that can be effectively hacked with the memory you have\\n//   available. Copy 'batch.js' to the source server and start a batch based\\n//   attack on the target server.\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script will start your batch hacking.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    const tree = new ServerTree(ns);\\n    // Step 1: Kill all scripts on remote servers.\\n    killAll(ns, tree);\\n    // Step 3: Find the richest server that we have enough memory to effectively\\n    // batch.\\n    const targetServer = await getTargetServer(ns, tree);\\n    // Step 4: start batching!\\n    if (!targetServer) {\\n        ns.tprint(\\\"Can't batch yet!\\\");\\n        return;\\n    }\\n    ns.spawn(\\\"/batching/batch.js\\\", 1, targetServer.hostname);\\n}\\nfunction killAll(ns, tree) {\\n    for (const s of tree.home.list()) {\\n        if (s.hostname === ns.getHostname())\\n            continue;\\n        ns.killall(s.hostname);\\n    }\\n}\\nasync function getTargetServer(ns, tree) {\\n    let bestServer = undefined;\\n    for (const s of tree.home.filter((s) => s.hasAdminRights && s.requiredHackingSkill <= ns.getHackingLevel())) {\\n        if (!bestServer) {\\n            bestServer = s;\\n            continue;\\n        }\\n        if (bestServer.moneyMax < s.moneyMax)\\n            bestServer = s;\\n    }\\n    return bestServer;\\n}\\n\",\"filename\":\"/phase2/batchHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///7d8a27b5-232f-40c1-b6c9-b528dd0bcb24\",\"moduleSequenceNumber\":76024},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///817b0362-7e99-4129-8c0a-414e15f49bf5\",\"moduleSequenceNumber\":76030},{\"filename\":\"/phase2/batchHack.js\",\"url\":\"blob:file:///2da068e2-abdf-4a54-99f9-ecfcf4da7bc6\",\"moduleSequenceNumber\":77538}],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"home\",\"moduleSequenceNumber\":77538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///92a51846-7eb8-4c2a-8e59-399bf39271ab\",\"moduleSequenceNumber\":80875}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":80875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0a73e1c5-78b4-4bff-9c0a-80f86fc23a6c\",\"moduleSequenceNumber\":76279}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":76279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///772f5f5d-b632-4b46-a828-278c85a5b17c\",\"moduleSequenceNumber\":80598}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":80598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const scriptName = \\\"/batching/spawner.js\\\";\\nconst growScript = \\\"/batching/grow.js\\\";\\nconst weakenScript = \\\"/batching/weaken.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"exec\\\");\\n    ns.enableLog(\\\"run\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      This will continuously batch hack a target from a host.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET\\r\\n      `);\\n        return;\\n    }\\n    // now find the required number of threads for each action.\\n    const growThreads = Math.ceil(ns.growthAnalyze(target, 2));\\n    const hackThreads = Math.ceil(0.5 / ns.hackAnalyze(target));\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    const hackSecurityDelta = ns.hackAnalyzeSecurity(hackThreads);\\n    let weakenThreads = 0;\\n    while (ns.weakenAnalyze(weakenThreads) <\\n        growSecurityDelta + hackSecurityDelta) {\\n        await ns.sleep(1);\\n        weakenThreads += 1;\\n        ns.clearLog();\\n        ns.print(`Calculating Weaken Threads: ${weakenThreads}`);\\n        ns.print(`${weakenThreads} threads will cut security by ${ns.weakenAnalyze(weakenThreads)}`);\\n        ns.print(`Target security is ${growSecurityDelta + hackSecurityDelta}`);\\n    }\\n    // calculate timing\\n    const hackTime = ns.getHackTime(target);\\n    const growTime = ns.getGrowTime(target);\\n    const weakenTime = ns.getWeakenTime(target);\\n    // sanity check\\n    if (hackTime > growTime || hackTime > weakenTime || growTime > weakenTime) {\\n        ns.tprint(`Something screwing going on with ${target} timing`);\\n        return;\\n    }\\n    const bufferTime = 300;\\n    // Prepare the server\\n    ns.clearLog();\\n    ns.print(`Preparing ${target} for hacking...`);\\n    ns.print(\\\"Growing...\\\");\\n    while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n        ns.run(growScript, 1, target, Date.now());\\n        await ns.sleep(100);\\n    }\\n    ns.scriptKill(growScript, ns.getHostname());\\n    ns.print(\\\"Weakening...\\\");\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n        ns.run(weakenScript, 1, target, Date.now());\\n        await ns.sleep(100);\\n    }\\n    ns.scriptKill(weakenScript, ns.getHostname());\\n    ns.print(\\\"Hacking...\\\");\\n    ns.run(scriptName, 1, \\\"weaken\\\", target, weakenThreads, bufferTime);\\n    await ns.sleep(bufferTime * 3);\\n    ns.run(scriptName, 1, \\\"grow\\\", target, growThreads, bufferTime);\\n    await ns.sleep(bufferTime * 3);\\n    ns.run(scriptName, 1, \\\"hack\\\", target, hackThreads, bufferTime);\\n}\\n\",\"filename\":\"/batching/batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/batch.js\",\"url\":\"blob:file:///56f9fcc7-aba8-414d-9d2c-90b5d990be8c\",\"moduleSequenceNumber\":76278}],\"dependents\":[],\"ramUsage\":9.3,\"server\":\"home\",\"moduleSequenceNumber\":76278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const server = ns.args[0];\\n    if (args.help || !server) {\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    const ram = ns.getServerRam(server);\\n    const money = ns.getServerMoneyAvailable(server);\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    const minSec = ns.getServerMinSecurityLevel(server);\\n    const sec = ns.getServerSecurityLevel(server);\\n    ns.tprint(`\\n\\n${server}:\\n    RAM        : ${ram[1]} / ${ram[0]} (${ram[1] / ram[0] * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"analyzeServer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"analyzeServer.js\",\"url\":\"blob:file:///47cd211f-3b39-459e-99cf-af3b24f0f01c\",\"moduleSequenceNumber\":7223}],\"dependents\":[],\"ramUsage\":5.35,\"server\":\"home\",\"moduleSequenceNumber\":7223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const scriptName = \\\"/batching/weaken.js\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const host = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !host || !target || !threads || !bufferTime) {\\n        ns.tprint(`\\r\\n      Repeatedly spawns weakens on a server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\r\\n      `);\\n        return;\\n    }\\n    await ns.scp(scriptName, host);\\n    while (true) {\\n        ns.exec(scriptName, host, threads, target, Date.now());\\n        await ns.sleep(bufferTime * 3);\\n    }\\n}\\n\",\"filename\":\"/batching/weakenSpawner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weakenSpawner.js\",\"url\":\"blob:file:///4248baa4-8232-4a05-b13b-0dbbe6df6ea8\",\"moduleSequenceNumber\":55957}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":71023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const scriptName = \\\"/batching/hack.js\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const host = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !host || !target || !threads || !bufferTime) {\\n        ns.tprint(`\\r\\n      Repeatedly spawns weakens on a server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\r\\n      `);\\n        return;\\n    }\\n    await ns.scp(scriptName, host);\\n    while (true) {\\n        ns.exec(scriptName, host, threads, target, Date.now());\\n        await ns.sleep(bufferTime * 3);\\n    }\\n}\\n\",\"filename\":\"/batching/hackSpawner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hackSpawner.js\",\"url\":\"blob:file:///3cccb3b0-9b77-4b96-b412-23e2dd92bc37\",\"moduleSequenceNumber\":55961}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":71017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const scriptName = \\\"/batching/grow.js\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const host = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !host || !target || !threads || !bufferTime) {\\n        ns.tprint(`\\r\\n      Repeatedly spawns weakens on a server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\r\\n      `);\\n        return;\\n    }\\n    await ns.scp(scriptName, host);\\n    while (true) {\\n        ns.exec(scriptName, host, threads, target, Date.now());\\n        await ns.sleep(bufferTime * 3);\\n    }\\n}\\n\",\"filename\":\"/batching/growSpawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/growSpawner.js\",\"url\":\"blob:file:///f01cb4f2-c5fd-4e4a-a3c9-54a7c50609cd\",\"moduleSequenceNumber\":75707}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":75707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\r\\n      Repeatedly spawns weakens on a server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\r\\n      `);\\n        return;\\n    }\\n    const tree = new ServerTree(ns);\\n    let scriptName = `/batching/${cmd}.js`;\\n    for (const host of tree.home.list()) {\\n        await ns.scp(scriptName, host.hostname);\\n    }\\n    // calculate the memory.\\n    const memory = threads * ns.getScriptRam(scriptName);\\n    while (true) {\\n        const host = tree.home.filter((s) => {\\n            if (!s.hasAdminRights)\\n                return false;\\n            const { hostname } = s;\\n            return (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname) >= memory);\\n        })[0];\\n        ns.clearLog();\\n        if (!host) {\\n            ns.print(`No host with enough ram to run ${scriptName} with ${threads} threads.`);\\n            await ns.sleep(bufferTime);\\n            continue;\\n        }\\n        ns.print(`Launching ${scriptName} on ${host.hostname} with target ${target}`);\\n        ns.exec(scriptName, host.hostname, threads, target, Date.now());\\n        await ns.sleep(bufferTime * 3);\\n    }\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///670a8cdd-c060-4ce9-82b0-622509273a5e\",\"moduleSequenceNumber\":76024},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///86676444-51b2-4fdc-9559-0e5e48ee0d65\",\"moduleSequenceNumber\":76030},{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///fa260859-924a-4924-bac7-ee236328afd6\",\"moduleSequenceNumber\":80459}],\"dependents\":[],\"ramUsage\":5.9,\"server\":\"home\",\"moduleSequenceNumber\":80459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"87.3.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"ecorp\",\"moduleSequenceNumber\":306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"ecorp\",\"moduleSequenceNumber\":307}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"ecorp\",\"moduleSequenceNumber\":76554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"ecorp\",\"moduleSequenceNumber\":80497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"ecorp\",\"moduleSequenceNumber\":80636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"ecorp\",\"moduleSequenceNumber\":80774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":35749522647,\"moneyMax\":893738066175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1106,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"61.9.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"megacorp\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"megacorp\",\"moduleSequenceNumber\":309}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"megacorp\",\"moduleSequenceNumber\":76570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"megacorp\",\"moduleSequenceNumber\":80511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"megacorp\",\"moduleSequenceNumber\":80650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"megacorp\",\"moduleSequenceNumber\":80788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":55076237884,\"moneyMax\":1376905947100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1342,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"54.7.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"b-and-a\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"b-and-a\",\"moduleSequenceNumber\":311}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"b-and-a\",\"moduleSequenceNumber\":76552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"b-and-a\",\"moduleSequenceNumber\":80495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"b-and-a\",\"moduleSequenceNumber\":80634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"b-and-a\",\"moduleSequenceNumber\":80772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":29855325752,\"moneyMax\":746383143800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":997,\"serverGrowth\":77}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"5.5.6.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c1c2275b-be70-420f-aea8-fb5095a91deb\",\"moduleSequenceNumber\":8178}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"blade\",\"moduleSequenceNumber\":8178,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"blade\",\"moduleSequenceNumber\":313}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///c226d5ee-9aeb-4e17-98b5-582a89c74811\",\"moduleSequenceNumber\":76560}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"blade\",\"moduleSequenceNumber\":76560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"blade\",\"moduleSequenceNumber\":80501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"blade\",\"moduleSequenceNumber\":80640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"blade\",\"moduleSequenceNumber\":80778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":29788052332,\"moneyMax\":744701308300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":979,\"serverGrowth\":71}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"91.8.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"nwo\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"nwo\",\"moduleSequenceNumber\":315}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"nwo\",\"moduleSequenceNumber\":76563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nwo\",\"moduleSequenceNumber\":80505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nwo\",\"moduleSequenceNumber\":80644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nwo\",\"moduleSequenceNumber\":80782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":37963789511,\"moneyMax\":949094737775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1068,\"serverGrowth\":89}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"7.5.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"clarkinc\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"clarkinc\",\"moduleSequenceNumber\":317}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"clarkinc\",\"moduleSequenceNumber\":76565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"clarkinc\",\"moduleSequenceNumber\":80507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"clarkinc\",\"moduleSequenceNumber\":80646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"clarkinc\",\"moduleSequenceNumber\":80784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":15012567788,\"moneyMax\":375314194700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1202,\"serverGrowth\":48}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"97.5.4.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///642dee8f-67eb-458c-81a9-c00ce0357473\",\"moduleSequenceNumber\":8200}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"omnitek\",\"moduleSequenceNumber\":8200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"omnitek\",\"moduleSequenceNumber\":319}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///2cd857cd-fb12-4414-833f-82ab1c61cf7b\",\"moduleSequenceNumber\":76646}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"omnitek\",\"moduleSequenceNumber\":76646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnitek\",\"moduleSequenceNumber\":80581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnitek\",\"moduleSequenceNumber\":80720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omnitek\",\"moduleSequenceNumber\":80858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":16621539176,\"moneyMax\":415538479400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":963,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"73.7.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"4sigma\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"4sigma\",\"moduleSequenceNumber\":321}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"4sigma\",\"moduleSequenceNumber\":76550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"4sigma\",\"moduleSequenceNumber\":80493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"4sigma\",\"moduleSequenceNumber\":80632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"4sigma\",\"moduleSequenceNumber\":80770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":15597831215,\"moneyMax\":389945780375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1215,\"serverGrowth\":91}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"1.2.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":323}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":76561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":80503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":80642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":80780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":25546532808,\"moneyMax\":638663320200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1126,\"serverGrowth\":93}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"32.7.2.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///35d307e2-b7ed-4294-8078-e88a4b7a9081\",\"moduleSequenceNumber\":8198}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":8198,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":325}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///1741716a-3d5b-4647-af22-c11bce332195\",\"moduleSequenceNumber\":76638}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":76638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":80575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":80714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":80852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1519070828,\"moneyMax\":37976770700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":989,\"serverGrowth\":81}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"77.5.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":327}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":76572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":80513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":80652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":80790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1181,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"45.8.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"stormtech\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"stormtech\",\"moduleSequenceNumber\":329}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"stormtech\",\"moduleSequenceNumber\":76639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"stormtech\",\"moduleSequenceNumber\":80577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"stormtech\",\"moduleSequenceNumber\":80716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"stormtech\",\"moduleSequenceNumber\":80854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1062655567,\"moneyMax\":26566389175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1014,\"serverGrowth\":81}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"72.7.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"defcomm\",\"moduleSequenceNumber\":330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"defcomm\",\"moduleSequenceNumber\":331}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"defcomm\",\"moduleSequenceNumber\":76540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"defcomm\",\"moduleSequenceNumber\":80485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"defcomm\",\"moduleSequenceNumber\":80624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"defcomm\",\"moduleSequenceNumber\":80762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":844575841,\"moneyMax\":21114396025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":863,\"serverGrowth\":65}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"47.9.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"infocomm\",\"moduleSequenceNumber\":332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"infocomm\",\"moduleSequenceNumber\":333}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"infocomm\",\"moduleSequenceNumber\":76579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"infocomm\",\"moduleSequenceNumber\":80519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"infocomm\",\"moduleSequenceNumber\":80658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"infocomm\",\"moduleSequenceNumber\":80796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":819808935,\"moneyMax\":20495223375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":944,\"serverGrowth\":75}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"81.0.1.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///feaf5fa1-26da-4a0c-aeb8-b6c6556535c7\",\"moduleSequenceNumber\":8199}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"helios\",\"moduleSequenceNumber\":8199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"helios\",\"moduleSequenceNumber\":335}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///1126629f-ba8e-46c0-83c2-074d89a7f33e\",\"moduleSequenceNumber\":76643}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"helios\",\"moduleSequenceNumber\":76643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"helios\",\"moduleSequenceNumber\":80579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"helios\",\"moduleSequenceNumber\":80718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"helios\",\"moduleSequenceNumber\":80856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":673992045,\"moneyMax\":16849801125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":814,\"serverGrowth\":72}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"20.2.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///3dd8cb0d-22c4-4597-846b-ec19e4a242e6\",\"moduleSequenceNumber\":8177}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"vitalife\",\"moduleSequenceNumber\":8177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"vitalife\",\"moduleSequenceNumber\":337}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///1d663e16-3373-4053-8c77-fde3e50226ec\",\"moduleSequenceNumber\":76549}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"vitalife\",\"moduleSequenceNumber\":76549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"vitalife\",\"moduleSequenceNumber\":80491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"vitalife\",\"moduleSequenceNumber\":80630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"vitalife\",\"moduleSequenceNumber\":80768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":770878672,\"moneyMax\":19271966800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":836,\"serverGrowth\":77}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"62.3.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"icarus\",\"moduleSequenceNumber\":338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"icarus\",\"moduleSequenceNumber\":339}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"icarus\",\"moduleSequenceNumber\":76626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"icarus\",\"moduleSequenceNumber\":80567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"icarus\",\"moduleSequenceNumber\":80706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"icarus\",\"moduleSequenceNumber\":80844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":900861983,\"moneyMax\":22521549575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":912,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"18.1.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6af77713-d13c-4f88-93ed-210b5a7bbcaf\",\"moduleSequenceNumber\":8201}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"univ-energy\",\"moduleSequenceNumber\":8201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"univ-energy\",\"moduleSequenceNumber\":341}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///7f994eb0-6804-4185-b4c1-c5b6513c2f54\",\"moduleSequenceNumber\":76649}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"univ-energy\",\"moduleSequenceNumber\":76649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"univ-energy\",\"moduleSequenceNumber\":80583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"univ-energy\",\"moduleSequenceNumber\":80722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"univ-energy\",\"moduleSequenceNumber\":80860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1131442856,\"moneyMax\":28286071400,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":860,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"76.8.1.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b2c4a24a-0fd0-43f3-a559-842daa927082\",\"moduleSequenceNumber\":8176}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"titan-labs\",\"moduleSequenceNumber\":8176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"titan-labs\",\"moduleSequenceNumber\":343}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///0359435c-2fb0-47bb-afe8-a5808b7fb202\",\"moduleSequenceNumber\":76546}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"titan-labs\",\"moduleSequenceNumber\":76546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"titan-labs\",\"moduleSequenceNumber\":80489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"titan-labs\",\"moduleSequenceNumber\":80628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"titan-labs\",\"moduleSequenceNumber\":80766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":769846018,\"moneyMax\":19246150450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":853,\"serverGrowth\":61}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"80.3.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a42734f8-3898-494a-ac92-eda75c9d2cb9\",\"moduleSequenceNumber\":8196}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"microdyne\",\"moduleSequenceNumber\":8196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"microdyne\",\"moduleSequenceNumber\":345}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///0a292016-137f-4d48-a5b9-e96f1c84d750\",\"moduleSequenceNumber\":76632}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"microdyne\",\"moduleSequenceNumber\":76632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"microdyne\",\"moduleSequenceNumber\":80571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"microdyne\",\"moduleSequenceNumber\":80710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"microdyne\",\"moduleSequenceNumber\":80848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":668622513,\"moneyMax\":16715562825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":801,\"serverGrowth\":84}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"82.4.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":347}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":76628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":80569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":80708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":80846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":839705732,\"moneyMax\":20992643300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":884,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"1.4.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":349}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":76584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":80523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":80662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":80800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":824953713,\"moneyMax\":20623842825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":78}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"53.4.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"aerocorp\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"aerocorp\",\"moduleSequenceNumber\":351}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"aerocorp\",\"moduleSequenceNumber\":76595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aerocorp\",\"moduleSequenceNumber\":80533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aerocorp\",\"moduleSequenceNumber\":80672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"aerocorp\",\"moduleSequenceNumber\":80810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1136147360,\"moneyMax\":28403684000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":62}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"50.9.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///13fda847-9f83-4647-a088-cc618e650a26\",\"moduleSequenceNumber\":8195}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"omnia\",\"moduleSequenceNumber\":8195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"omnia\",\"moduleSequenceNumber\":353}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///0eb374e7-ac4e-47b9-840c-e68a2e318a90\",\"moduleSequenceNumber\":76625}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"omnia\",\"moduleSequenceNumber\":76625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnia\",\"moduleSequenceNumber\":80565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnia\",\"moduleSequenceNumber\":80704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omnia\",\"moduleSequenceNumber\":80842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":984533593,\"moneyMax\":24613339825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":946,\"serverGrowth\":61}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"39.1.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"zb-def\",\"moduleSequenceNumber\":354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"zb-def\",\"moduleSequenceNumber\":355}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"zb-def\",\"moduleSequenceNumber\":76591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-def\",\"moduleSequenceNumber\":80529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-def\",\"moduleSequenceNumber\":80668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zb-def\",\"moduleSequenceNumber\":80806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"solaris\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":903316327,\"moneyMax\":22582908175,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":794,\"serverGrowth\":70}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"44.2.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":357}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":76593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":80531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":80670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":80808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":719574631,\"moneyMax\":17989365775,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":845,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"24.7.4.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de09dcdc-1aff-43ef-828a-ed33ededef58\",\"moduleSequenceNumber\":8182}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"solaris\",\"moduleSequenceNumber\":8182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"solaris\",\"moduleSequenceNumber\":359}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///067f8448-111d-4097-a050-18fefe49e613\",\"moduleSequenceNumber\":76590}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"solaris\",\"moduleSequenceNumber\":76590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"solaris\",\"moduleSequenceNumber\":80527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"solaris\",\"moduleSequenceNumber\":80666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"solaris\",\"moduleSequenceNumber\":80804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":835674176,\"moneyMax\":20891854400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":791,\"serverGrowth\":74}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"57.4.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"deltaone\",\"moduleSequenceNumber\":360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"deltaone\",\"moduleSequenceNumber\":361}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"deltaone\",\"moduleSequenceNumber\":76586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"deltaone\",\"moduleSequenceNumber\":80525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"deltaone\",\"moduleSequenceNumber\":80664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"deltaone\",\"moduleSequenceNumber\":80802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1642564247,\"moneyMax\":41064106175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":67}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"92.5.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///1434deb5-5e99-4e37-a923-6905b95e0296\",\"moduleSequenceNumber\":8194}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"global-pharm\",\"moduleSequenceNumber\":8194,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"global-pharm\",\"moduleSequenceNumber\":363}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///049ffc6e-4913-4003-9a93-c12ca827474c\",\"moduleSequenceNumber\":76622}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"global-pharm\",\"moduleSequenceNumber\":76622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"global-pharm\",\"moduleSequenceNumber\":80563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"global-pharm\",\"moduleSequenceNumber\":80702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"global-pharm\",\"moduleSequenceNumber\":80840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1506968441,\"moneyMax\":37674211025,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":765,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"51.9.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"nova-med\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"nova-med\",\"moduleSequenceNumber\":365}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"nova-med\",\"moduleSequenceNumber\":76542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nova-med\",\"moduleSequenceNumber\":80487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nova-med\",\"moduleSequenceNumber\":80626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nova-med\",\"moduleSequenceNumber\":80764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":1194832510,\"moneyMax\":29870812750,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":76}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"18.7.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"zeus-med\",\"moduleSequenceNumber\":366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"zeus-med\",\"moduleSequenceNumber\":367}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"zeus-med\",\"moduleSequenceNumber\":76577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zeus-med\",\"moduleSequenceNumber\":80517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zeus-med\",\"moduleSequenceNumber\":80656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zeus-med\",\"moduleSequenceNumber\":80794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1449194389,\"moneyMax\":36229859725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":814,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"18.1.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///0697cf75-8aeb-470e-8a4b-75148ffc78ac\",\"moduleSequenceNumber\":8175}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"unitalife\",\"moduleSequenceNumber\":8175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"unitalife\",\"moduleSequenceNumber\":369}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///d776f20f-8fc1-4e7d-aa80-4edcadbe9773\",\"moduleSequenceNumber\":76539}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"unitalife\",\"moduleSequenceNumber\":76539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"unitalife\",\"moduleSequenceNumber\":80483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"unitalife\",\"moduleSequenceNumber\":80622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"unitalife\",\"moduleSequenceNumber\":80760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1086347247,\"moneyMax\":27158681175,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":794,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"98.2.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///0af3fc06-b4a7-4879-a83e-7ab157e2df32\",\"moduleSequenceNumber\":8174}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":8174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":371}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///1c1341cb-3cbc-4a0b-b203-c51acbf05496\",\"moduleSequenceNumber\":76534}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":76534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":80479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":80618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":80756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":709919733,\"moneyMax\":17747993325,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":660,\"serverGrowth\":60}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"63.8.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///51b92f39-3dfd-46be-bfc3-64ea13321db7\",\"moduleSequenceNumber\":8181}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"rho-construction\",\"moduleSequenceNumber\":8181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"rho-construction\",\"moduleSequenceNumber\":373}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///ba4e3dcf-a4cb-4ba7-a7f0-26b7c9aacdd6\",\"moduleSequenceNumber\":76583}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"rho-construction\",\"moduleSequenceNumber\":76583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rho-construction\",\"moduleSequenceNumber\":80521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rho-construction\",\"moduleSequenceNumber\":80660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"rho-construction\",\"moduleSequenceNumber\":80798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":556584369,\"moneyMax\":13914609225,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":520,\"serverGrowth\":50}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"97.8.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///117b62aa-c3fc-4577-b06c-b724391b654d\",\"moduleSequenceNumber\":8193}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":8193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":375}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///47ac1f38-3fa7-4a0c-9e91-609b1657a561\",\"moduleSequenceNumber\":76619}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":76619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":80561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":80700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":80838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":744553452,\"moneyMax\":18613836300,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":597,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"55.9.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ee35a0a9-0700-4057-89d2-3e27a06b7c86\",\"moduleSequenceNumber\":8205}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"aevum-police\",\"moduleSequenceNumber\":8205,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"aevum-police\",\"moduleSequenceNumber\":377}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///bdc6f028-7a4d-4001-8d38-d0c7d0a36849\",\"moduleSequenceNumber\":76659}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"aevum-police\",\"moduleSequenceNumber\":76659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aevum-police\",\"moduleSequenceNumber\":80591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aevum-police\",\"moduleSequenceNumber\":80730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"aevum-police\",\"moduleSequenceNumber\":80868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":242995207,\"moneyMax\":6074880175,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":431,\"serverGrowth\":37}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"18.6.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///91bb8732-9dc5-4779-8ce2-4aa7c9f6cf3a\",\"moduleSequenceNumber\":8204}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":8204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":379}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///7d4b28a0-f25a-4a01-88f9-2ed33db4c1f4\",\"moduleSequenceNumber\":76656}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":76656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":80589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":80728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":80866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":227183774,\"moneyMax\":5679594350,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":413,\"serverGrowth\":44}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"79.0.4.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6b55dd66-7dd1-4065-bd95-980fdb8a8a2c\",\"moduleSequenceNumber\":8173}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"zb-institute\",\"moduleSequenceNumber\":8173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"zb-institute\",\"moduleSequenceNumber\":381}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///ef251ce8-a7f0-4bf4-a3a7-b4332cfd6b13\",\"moduleSequenceNumber\":76531}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"zb-institute\",\"moduleSequenceNumber\":76531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-institute\",\"moduleSequenceNumber\":80477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-institute\",\"moduleSequenceNumber\":80616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zb-institute\",\"moduleSequenceNumber\":80754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":974156923,\"moneyMax\":24353923075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":749,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"70.5.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///12080ca3-dac1-43a2-9d74-2d7d17d252ab\",\"moduleSequenceNumber\":8206}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"summit-uni\",\"moduleSequenceNumber\":8206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"summit-uni\",\"moduleSequenceNumber\":383}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///37a793a0-a1dc-4637-8d69-adc0257f911c\",\"moduleSequenceNumber\":76661}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"summit-uni\",\"moduleSequenceNumber\":76661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"summit-uni\",\"moduleSequenceNumber\":80593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"summit-uni\",\"moduleSequenceNumber\":80732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"summit-uni\",\"moduleSequenceNumber\":80870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":237670242,\"moneyMax\":5941756050,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":437,\"serverGrowth\":51}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"45.4.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"syscore\",\"moduleSequenceNumber\":384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"syscore\",\"moduleSequenceNumber\":385}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"syscore\",\"moduleSequenceNumber\":76612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"syscore\",\"moduleSequenceNumber\":80557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"syscore\",\"moduleSequenceNumber\":80696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"syscore\",\"moduleSequenceNumber\":80834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":426802742,\"moneyMax\":10670068550,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":618,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"52.8.9.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///37a2d76e-a7fb-48b2-8436-2d6996eddd23\",\"moduleSequenceNumber\":8191}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"catalyst\",\"moduleSequenceNumber\":8191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"catalyst\",\"moduleSequenceNumber\":387}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///b36f9d13-3a92-444b-aafc-adeef8a868ab\",\"moduleSequenceNumber\":76610}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"catalyst\",\"moduleSequenceNumber\":76610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"catalyst\",\"moduleSequenceNumber\":80553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"catalyst\",\"moduleSequenceNumber\":80692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"catalyst\",\"moduleSequenceNumber\":80830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":435867009,\"moneyMax\":10896675225,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":409,\"serverGrowth\":26}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"19.7.8.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///176392ef-4ae4-483a-84c3-78f49c9d084b\",\"moduleSequenceNumber\":76528}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"the-hub\",\"moduleSequenceNumber\":76528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///29c609f5-eaa7-4ac5-987f-cddce05b171f\",\"moduleSequenceNumber\":8172}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"the-hub\",\"moduleSequenceNumber\":8172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"the-hub\",\"moduleSequenceNumber\":390}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const server = 'the-hub';\\n    if (args.help ) {\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    while (true) {\\n        await ns.sleep(1000);\\n    const ram = ns.getServerRam(server);\\n    const money = ns.getServerMoneyAvailable(server);\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    const minSec = ns.getServerMinSecurityLevel(server);\\n    const sec = ns.getServerSecurityLevel(server);\\n    ns.tprint(`\\n\\n${server}:\\n    RAM        : ${ram[1]} / ${ram[0]} (${ram[1] / ram[0] * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"analyzeServer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"analyzeServer.js\",\"url\":\"blob:file:///07138bbb-dcb8-4ab9-80d8-47428bfd5576\",\"moduleSequenceNumber\":79294}],\"dependents\":[],\"ramUsage\":5.35,\"server\":\"the-hub\",\"moduleSequenceNumber\":79294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"the-hub\",\"moduleSequenceNumber\":80475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"the-hub\",\"moduleSequenceNumber\":80614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"the-hub\",\"moduleSequenceNumber\":80752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":41,\"hackDifficulty\":67.85999999999997,\"minDifficulty\":14,\"moneyAvailable\":1668839648.8238873,\"moneyMax\":4929592100,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":316,\"serverGrowth\":48}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"75.2.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"computek\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"computek\",\"moduleSequenceNumber\":392}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"computek\",\"moduleSequenceNumber\":76597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"computek\",\"moduleSequenceNumber\":80535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"computek\",\"moduleSequenceNumber\":80674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"computek\",\"moduleSequenceNumber\":80812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":224525311,\"moneyMax\":5613132775,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":398,\"serverGrowth\":55}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"96.6.3.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///47ea7364-0a8c-4ee7-b395-516c73e8fb29\",\"moduleSequenceNumber\":8186}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"netlink\",\"moduleSequenceNumber\":8186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"netlink\",\"moduleSequenceNumber\":394}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///c2b85309-6c25-40d4-bf0f-55a1647a25ed\",\"moduleSequenceNumber\":76603}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"netlink\",\"moduleSequenceNumber\":76603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"netlink\",\"moduleSequenceNumber\":80541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"netlink\",\"moduleSequenceNumber\":80680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"netlink\",\"moduleSequenceNumber\":80818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":424,\"serverGrowth\":55}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"53.2.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":397}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":80551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":80690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":80828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":55,\"hackDifficulty\":75.53999999999998,\"minDifficulty\":18,\"moneyAvailable\":315085462.7858209,\"moneyMax\":1947890950,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":300,\"serverGrowth\":50}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"33.0.3.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6929a053-297b-4bfd-86e4-ecccafa18f5a\",\"moduleSequenceNumber\":8165}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"n00dles\",\"moduleSequenceNumber\":8165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"n00dles\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/phase2/cnct.js\",\"url\":\"blob:file:///f948b85d-3101-48f0-b3db-54252ad2dc1a\",\"moduleSequenceNumber\":178366}],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"n00dles\",\"moduleSequenceNumber\":400}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":80461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":80600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"n00dles\",\"moduleSequenceNumber\":80738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.021,\"minDifficulty\":1,\"moneyAvailable\":871675,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"55.9.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///7e588d7f-cbfd-4298-b3a3-4e70a9b84081\",\"moduleSequenceNumber\":8166}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":8166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///aefbfa95-a3f9-4615-bba1-cbd71fec506f\",\"moduleSequenceNumber\":76521}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":76521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":403}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":80463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":80602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":80740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":9.549999999999994,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"3.1.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8b7287fa-31be-4d47-86aa-f83813ddd8cf\",\"moduleSequenceNumber\":8167}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":8167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///ac8dbb42-8296-402f-88fc-8d01e23af900\",\"moduleSequenceNumber\":76522}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":76522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":406}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":80465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":80604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":80742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"56.9.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///28f8a0bc-4c23-44ab-ae53-505487281407\",\"moduleSequenceNumber\":8183}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"joesguns\",\"moduleSequenceNumber\":8183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///6be16aca-ef0d-4eca-8a76-d40eca0cb4e1\",\"moduleSequenceNumber\":76598}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"joesguns\",\"moduleSequenceNumber\":76598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"joesguns\",\"moduleSequenceNumber\":409}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":80537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":80676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"joesguns\",\"moduleSequenceNumber\":80814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":8.351999999999906,\"minDifficulty\":5,\"moneyAvailable\":2497433,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"81.6.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///bdc4c19e-2889-4f70-a985-cfceecc9a426\",\"moduleSequenceNumber\":8184}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"zer0\",\"moduleSequenceNumber\":8184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///8b445137-4764-45ad-ace7-12335640f56c\",\"moduleSequenceNumber\":76599}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"zer0\",\"moduleSequenceNumber\":76599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"zer0\",\"moduleSequenceNumber\":412}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zer0\",\"moduleSequenceNumber\":80539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zer0\",\"moduleSequenceNumber\":80678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zer0\",\"moduleSequenceNumber\":80816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"75.4.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///12372506-e2fc-409e-b8d7-3f4cb963e0f6\",\"moduleSequenceNumber\":8168}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"nectar-net\",\"moduleSequenceNumber\":8168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///d659f0da-6ce3-4d58-84a1-a271a76ad3e8\",\"moduleSequenceNumber\":76523}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"nectar-net\",\"moduleSequenceNumber\":76523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"nectar-net\",\"moduleSequenceNumber\":415}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nectar-net\",\"moduleSequenceNumber\":80467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nectar-net\",\"moduleSequenceNumber\":80606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nectar-net\",\"moduleSequenceNumber\":80744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"12.5.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///3086235f-8c2f-46f9-a7cb-f63696a7a413\",\"moduleSequenceNumber\":8169}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"neo-net\",\"moduleSequenceNumber\":8169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///7d77ff7a-97e9-497c-b4e3-0402b6c6a44d\",\"moduleSequenceNumber\":76524}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"neo-net\",\"moduleSequenceNumber\":76524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"neo-net\",\"moduleSequenceNumber\":418}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"neo-net\",\"moduleSequenceNumber\":80469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"neo-net\",\"moduleSequenceNumber\":80608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"neo-net\",\"moduleSequenceNumber\":80746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"27.7.4.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///760fd0d7-6599-4bf5-ac74-196cd6d2289f\",\"moduleSequenceNumber\":76601}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"silver-helix\",\"moduleSequenceNumber\":76601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///85683ae0-1ff6-476b-a993-6c6177ef1dbe\",\"moduleSequenceNumber\":8185}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"silver-helix\",\"moduleSequenceNumber\":8185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"silver-helix\",\"moduleSequenceNumber\":421}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"silver-helix\",\"moduleSequenceNumber\":7924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a40066b4-fd22-4ac6-92e8-6598981f01df\",\"moduleSequenceNumber\":7928}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"silver-helix\",\"moduleSequenceNumber\":7928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a52a98e0-6a2e-4a3d-be05-985a4d51891c\",\"moduleSequenceNumber\":7927}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"silver-helix\",\"moduleSequenceNumber\":7927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":70.76799999999996,\"minDifficulty\":10,\"moneyAvailable\":439514224.6371372,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"94.0.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///47e15118-2919-46ac-9ec4-fe3054643ece\",\"moduleSequenceNumber\":8187}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":8187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///da183cb7-2c03-4fbf-b829-3e4f15438692\",\"moduleSequenceNumber\":76604}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":76604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":424}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":80543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":80682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":80820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"30.0.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///29f553b1-4f1f-4e73-9a47-d415ff346645\",\"moduleSequenceNumber\":8188}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":8188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///c2fe6cd7-b89c-409b-8931-02c6c0a8e5c8\",\"moduleSequenceNumber\":76605}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":76605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":427}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":80545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":80684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":80822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":16.820000000000004,\"minDifficulty\":5,\"moneyAvailable\":5958533.325888473,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"14.0.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///4f088951-8adf-442f-b524-ede601056f0d\",\"moduleSequenceNumber\":76607}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"phantasy\",\"moduleSequenceNumber\":76607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///18040134-b887-4f2e-a52b-a95f4c1cd5b1\",\"moduleSequenceNumber\":8190}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"phantasy\",\"moduleSequenceNumber\":8190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"phantasy\",\"moduleSequenceNumber\":430}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"phantasy\",\"moduleSequenceNumber\":80549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"phantasy\",\"moduleSequenceNumber\":80688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"phantasy\",\"moduleSequenceNumber\":80826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":53.40800000000063,\"minDifficulty\":7,\"moneyAvailable\":485324868.53332144,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"8.6.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///9371d945-6a1c-4267-996b-e0a33bd8c587\",\"moduleSequenceNumber\":8170}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"max-hardware\",\"moduleSequenceNumber\":8170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///74572df0-d189-4686-96fa-958404caf233\",\"moduleSequenceNumber\":76525}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"max-hardware\",\"moduleSequenceNumber\":76525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"max-hardware\",\"moduleSequenceNumber\":433}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"max-hardware\",\"moduleSequenceNumber\":80471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"max-hardware\",\"moduleSequenceNumber\":80610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"max-hardware\",\"moduleSequenceNumber\":80748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":20.27999999999999,\"minDifficulty\":5,\"moneyAvailable\":21976192.602261204,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"68.2.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///f3713b54-c0ce-4123-9618-9cf5241d72cd\",\"moduleSequenceNumber\":76526}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"omega-net\",\"moduleSequenceNumber\":76526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///974035a7-0e94-48c9-ba33-a11297cea24f\",\"moduleSequenceNumber\":8171}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"omega-net\",\"moduleSequenceNumber\":8171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"omega-net\",\"moduleSequenceNumber\":436}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omega-net\",\"moduleSequenceNumber\":80473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omega-net\",\"moduleSequenceNumber\":80612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omega-net\",\"moduleSequenceNumber\":80750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":98273.44382220885,\"moneyMax\":1631467375,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":204,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"11.3.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":439}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":80555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":80694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":80832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":47080228,\"moneyMax\":1177005700,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":225,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"43.5.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///227f8849-491b-4ff1-85fe-72e051bd7002\",\"moduleSequenceNumber\":8207}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"iron-gym\",\"moduleSequenceNumber\":8207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///344d900f-ea82-432f-979a-8a0c27446b75\",\"moduleSequenceNumber\":76663}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"iron-gym\",\"moduleSequenceNumber\":76663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"iron-gym\",\"moduleSequenceNumber\":442}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":80595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":80734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"iron-gym\",\"moduleSequenceNumber\":80872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":31.072000000000006,\"minDifficulty\":10,\"moneyAvailable\":21260314.22242811,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"81.9.4.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///57b7cac1-8412-45b5-8539-69eacec74cbc\",\"moduleSequenceNumber\":8202}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":8202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":444}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///cc3713b2-453b-4ac2-86d1-a3b342864643\",\"moduleSequenceNumber\":76651}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":76651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":80585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":80724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":80862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":487,\"serverGrowth\":28}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"79.5.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e47ef175-3601-428d-a6d7-4c749711e4c8\",\"moduleSequenceNumber\":8179}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":8179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":446}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///846c5338-22a3-4a65-9eb3-3561e7e17d61\",\"moduleSequenceNumber\":76569}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":76569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":80509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":80648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":80786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1015,\"serverGrowth\":52}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"64.5.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":448}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":76535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":80481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":80620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":80758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":737,\"serverGrowth\":58}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"14.6.0.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///7779e654-c537-4aaa-bc21-fa0bd69d2698\",\"moduleSequenceNumber\":8197}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":8197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":450}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///07fbee70-1c34-40dc-b337-24edbcee7fa2\",\"moduleSequenceNumber\":76635}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":76635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":80573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":80712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":80850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":526,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"38.4.6.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///d620dd7b-11be-427d-8d3a-5665e9ab1424\",\"moduleSequenceNumber\":8192}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":8192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":452}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///2cb14cab-d815-4b3a-a5d2-b040e841cb58\",\"moduleSequenceNumber\":76616}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":76616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":80559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":80698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":80836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":350,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"72.0.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///3d9ae0db-b661-49a2-8744-836538305e60\",\"moduleSequenceNumber\":76653}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":76653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ffeb25c0-4c30-4a19-9daa-a09082575a3b\",\"moduleSequenceNumber\":8203}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":8203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":455}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":80587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":80726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":80864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":212,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"24.6.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///dab6ce16-4614-4246-9a03-935a2759f418\",\"moduleSequenceNumber\":8180}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\".\",\"moduleSequenceNumber\":8180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\".\",\"moduleSequenceNumber\":457}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///a29c07a6-503b-4e1c-83ac-25fff1d89ad5\",\"moduleSequenceNumber\":76576}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\".\",\"moduleSequenceNumber\":76576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\".\",\"moduleSequenceNumber\":80515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\".\",\"moduleSequenceNumber\":80654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\".\",\"moduleSequenceNumber\":80792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":519,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"42.4.0.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///558f159d-bec6-4a42-a08f-9555d277ffd6\",\"moduleSequenceNumber\":8189}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"CSEC\",\"moduleSequenceNumber\":8189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///08198d6b-c78b-47d5-8499-091e5a8616c5\",\"moduleSequenceNumber\":76606}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"CSEC\",\"moduleSequenceNumber\":76606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"CSEC\",\"moduleSequenceNumber\":460}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"CSEC\",\"moduleSequenceNumber\":80547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"CSEC\",\"moduleSequenceNumber\":80686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"CSEC\",\"moduleSequenceNumber\":80824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":59,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"99.0.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"The-Cave\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"The-Cave\",\"moduleSequenceNumber\":462}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"The-Cave\",\"moduleSequenceNumber\":76556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"The-Cave\",\"moduleSequenceNumber\":80499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"The-Cave\",\"moduleSequenceNumber\":80638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"The-Cave\",\"moduleSequenceNumber\":80776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"93.7.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"3.7.5.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      This script will prepare and then continuously hack a given server.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    let time = Date.now();\\n    // prepare\\n    async function prepare(host) {\\n        ns.print(\\\"Preparing the server.\\\");\\n        while (ns.getServerMoneyAvailable(host) < ns.getServerMaxMoney(host))\\n            await ns.grow(host);\\n        while (ns.getServerSecurityLevel(host) > ns.getServerMinSecurityLevel(host))\\n            await ns.weaken(host);\\n        time = Date.now();\\n    }\\n    await prepare(hostname);\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n        // reprepare every 5 minutes.\\n        if (Date.now() - time > 5 * 60 * 1000)\\n            await prepare(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"darkweb\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    // first copy the cnct.ts script to all the servers if necessary\\n    for (const s of tree.home.list()) {\\n        if (!ns.fileExists(ns.getScriptName(), s.hostname))\\n            await ns.scp(ns.getScriptName(), s.hostname);\\n    }\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() && s.hasAdminRights);\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree.list().filter((s) => s.hasAdminRights);\\n}\\n\",\"filename\":\"/phase2/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.9,\"server\":\"darkweb\",\"moduleSequenceNumber\":464}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This will grind faction rep.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"darkweb\",\"moduleSequenceNumber\":76664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Weaken the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"darkweb\",\"moduleSequenceNumber\":80597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Grow the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"darkweb\",\"moduleSequenceNumber\":80736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\r\\n      Hack the given host and stop. Used for batching.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\r\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"darkweb\",\"moduleSequenceNumber\":80874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":278025.2331406154,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":92569.83731056275,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":284443.44168697734,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":12629.427000010899}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":49310.51699989706}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":86402.29184263758}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":98390.84632229227}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":21020.075000015855}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":131102.12177557897}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":57352.81366658699}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"track\":\"run fl1ght.exe\",\"darkweb\":\"home;connect darkweb\",\"liquidate\":\"run stocks/liquidate.js\",\"cnct\":\"run phase2/cnct.js\",\"scn\":\"cls;scan-analyze 10\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as NiteSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for The Black Hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":7,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":24,\"MonacoVim\":true,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-48,\"y\":352,\"opened\":true}}","VersionSave":"11","AllGangsSave":"","LastExportBonus":"1648169167791","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}