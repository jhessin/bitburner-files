{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":419,\"hp\":17,\"max_hp\":17,\"strength\":78,\"defense\":78,\"dexterity\":131,\"agility\":99,\"charisma\":134,\"intelligence\":0,\"hacking_chance_mult\":1.291689,\"hacking_speed_mult\":1.29341673789984,\"hacking_money_mult\":1.684175,\"hacking_grow_mult\":1.1716,\"hacking_exp\":1624666.835570143,\"strength_exp\":2659.46026292998,\"defense_exp\":2659.46026292998,\"dexterity_exp\":5931.13861793724,\"agility_exp\":5931.13861793724,\"charisma_exp\":9872.6862615739,\"intelligence_exp\":0,\"hacking_mult\":1.6270166311560001,\"strength_mult\":1.34734,\"defense_mult\":1.34734,\"dexterity_mult\":1.6238376,\"agility_mult\":1.2301799999999998,\"charisma_mult\":1.4059199999999998,\"hacking_exp_mult\":1.5561776999999999,\"strength_exp_mult\":1.4820740000000001,\"defense_exp_mult\":1.4820740000000001,\"dexterity_exp_mult\":1.4820740000000001,\"agility_exp_mult\":1.4820740000000001,\"charisma_exp_mult\":1.4820740000000001,\"company_rep_mult\":1.1716,\"faction_rep_mult\":1.1716,\"money\":2058861842.2028039,\"city\":\"Sector-12\",\"location\":\"Joe's Guns\",\"jobs\":{\"Joe's Guns\":\"Part-time Employee\",\"National Security Agency\":\"IT Intern\",\"MegaCorp\":\"IT Intern\"},\"companyName\":\"Joe's Guns\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Sector-12\",\"NiteSec\",\"The Black Hand\",\"Slum Snakes\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Neuralstimulator\"}],\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"BrachiBlades\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":-134425.59999999992,\"crime_money_mult\":1.34734,\"crime_success_mult\":1.2887600000000001,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"Slum Snakes\",\"currentWorkFactionDescription\":\"carrying out field missions\",\"workHackExpGainRate\":0.077808885,\"workStrExpGainRate\":0.07410370000000001,\"workDefExpGainRate\":0.07410370000000001,\"workDexExpGainRate\":0.07410370000000001,\"workAgiExpGainRate\":0.07410370000000001,\"workChaExpGainRate\":0.07410370000000001,\"workRepGainRate\":0.18919370007035244,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":965.4682068569243,\"workStrExpGained\":919.4935303401858,\"workDefExpGained\":919.4935303401858,\"workDexExpGained\":919.4935303401858,\"workAgiExpGained\":919.4935303401858,\"workChaExpGained\":919.4935303401858,\"workRepGained\":2287.9145390322287,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":2489200,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.1716,\"hacknet_node_money_mult\":1.1716,\"hacknet_node_purchase_cost_mult\":0.8316,\"hacknet_node_ram_cost_mult\":0.8316,\"hacknet_node_core_cost_mult\":0.8316,\"hacknet_node_level_cost_mult\":0.8316,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"lastUpdate\":1647358335808,\"lastSave\":1647358335412,\"totalPlaytime\":2332184200,\"playtimeSinceLastAug\":133181000,\"playtimeSinceLastBitnode\":738427600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":7200000000,\"corporation\":0,\"crime\":9279400.04800003,\"gang\":0,\"hacking\":797900257.4543366,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2057861842.2028039,\"work\":682184.720160699,\"servers\":0,\"other\":0,\"augmentations\":-5950000000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2592,\"codingcontract\":23925000000,\"corporation\":0,\"crime\":577037871.3273913,\"gang\":0,\"hacking\":1363410431.6320746,\"hacknet\":4140081.525547835,\"hacknet_expenses\":-533916369.2356355,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":3399600925.0904317,\"work\":912576.4196009913,\"servers\":-1466177482.087522,\"other\":-1145800000,\"augmentations\":-19325003592.5}},\"scriptProdSinceLastAug\":788420916,\"exploits\":[],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1645026146788},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1645028434786},{\"ID\":\"NS2\",\"unlockedOn\":1645044319911},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1645045831181},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1645056200950},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1645056560955},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1645066283086},{\"ID\":\"TOR\",\"unlockedOn\":1645066643085},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1645070003093},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1645097626865},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1645155279886},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1645183682014},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1645190539010},{\"ID\":\"TRAVEL\",\"unlockedOn\":1645202118069},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1645206439756},{\"ID\":\"WORKOUT\",\"unlockedOn\":1645274022801},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1645310391987},{\"ID\":\"NITESEC\",\"unlockedOn\":1645372344826},{\"ID\":\"4S\",\"unlockedOn\":1645407697058},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1645449421121},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1645451161327},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1645492247503},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1645588414067},{\"ID\":\"DONATION\",\"unlockedOn\":1645808344381},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1645842991741},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1646071287225},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1646082477122},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1646132482080},{\"ID\":\"SF1.1\",\"unlockedOn\":1646609210207}],\"terminalCommandHistory\":[\"run hacking/distributedHack.js\",\"run utils/killeverything.js\",\"run start.js\",\"mem crime/start.js\",\"mem jobs/joesGuns.js\",\"mem hacking/distributedHack.js\",\"mem contracts/start.js\",\"mem story/backdoors.js\",\"mem hacking/program\",\"mem hacking/program.js\",\"mem hacking/school.js\",\"cat start.js\",\"ps\",\"run start.js\",\"killall\",\"run start.js\",\"tail start.js\",\"killall\",\"run start.js\",\"killall\",\"run start.js\",\"home\",\"run start.js\",\"home\",\"run start.js\",\"killall\",\"run start.js\",\"home\",\"killall\",\"run start.js\",\"killall\",\"run start.js\",\"killall\",\"run start.js\",\"killall\",\"run start.js\",\"killall\",\"run start.js\",\"killall\",\"run start.js\",\"killall\",\"run start.js\",\"killall\",\"run start.js\",\"cnct powerhouse-fitness\",\"analyze\",\"home\",\"cnct iron-gym\",\"home\",\"run start.js\"],\"identifier\":\"afc61675d036e\",\"factionWorkType\":\"Faction Field Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"41.2.4.6\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\"],\"ramUsed\":101.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"start.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3937.0099999988515,\"pid\":2586,\"ramUsage\":50.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///265d7be6-c785-45e7-90dd-34cecd5118de\",\"moduleSequenceNumber\":6591},{\"filename\":\"start.js\",\"url\":\"blob:file:///53e3480e-c7d2-47fe-858d-c1669d72c83e\",\"moduleSequenceNumber\":6721}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/hacking/distributedHack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2496.2099999999855,\"pid\":2589,\"ramUsage\":5.65,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///b39f766c-47b7-4b31-ac93-48cebab8a0db\",\"moduleSequenceNumber\":2056},{\"filename\":\"/hacking/distributedHack.js\",\"url\":\"blob:file:///73fd034a-2fde-4e18-9b45-073d6ce7e81f\",\"moduleSequenceNumber\":2190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/hacking/program.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2496.2099999999855,\"pid\":2590,\"ramUsage\":7.35,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///7e48ff83-8147-453d-ab32-d034742bfc7d\",\"moduleSequenceNumber\":2056},{\"filename\":\"/hacking/program.js\",\"url\":\"blob:file:///60484bb4-ed2f-4686-91a1-6b3ae7159c6d\",\"moduleSequenceNumber\":2191}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/contracts/start.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2496.2099999999855,\"pid\":2591,\"ramUsage\":21.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///8f8ef2a5-3170-41ba-b6bb-47122261cc62\",\"moduleSequenceNumber\":2000},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///7ea3fd63-ebd8-4f51-8dd5-1ef5cff330af\",\"moduleSequenceNumber\":2010},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///12135e66-7df1-43e3-8167-aac37c65c816\",\"moduleSequenceNumber\":2016},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///f9513e6e-92ef-463e-a0c9-eec461559186\",\"moduleSequenceNumber\":2020},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///4e81d7e3-6308-4b2b-84e5-c7f74cbc462a\",\"moduleSequenceNumber\":2022},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///fc26d6fb-9a9a-446c-b69a-c8535b91cd5a\",\"moduleSequenceNumber\":2004},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///ac347df8-5c51-4b00-87cb-e4bba4551392\",\"moduleSequenceNumber\":2002},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///cbafd36c-f349-4f12-8c89-407dc9dcfb53\",\"moduleSequenceNumber\":2014},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///5f26dd74-4c1a-4e63-aa8e-2353dae88a8b\",\"moduleSequenceNumber\":2008},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///98523477-681e-4dd1-ab8e-41c6491d30c2\",\"moduleSequenceNumber\":2012},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///c0125676-60c0-49c5-8b36-4d4ca0773ed2\",\"moduleSequenceNumber\":1996},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///fc97ddf7-d546-4552-a6df-3b358363b1d6\",\"moduleSequenceNumber\":2018},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///7c23bed7-d6dc-41df-84bb-0ddbf7bdce79\",\"moduleSequenceNumber\":2006},{\"filename\":\"consts.js\",\"url\":\"blob:file:///fea565c7-be2f-4596-a388-af271982cc72\",\"moduleSequenceNumber\":2056},{\"filename\":\"/contracts/start.js\",\"url\":\"blob:file:///836f296c-e4c0-4d8b-98cc-5c9b2ef9a42c\",\"moduleSequenceNumber\":2192}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/story/backdoors.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2496.2099999999855,\"pid\":2592,\"ramUsage\":6.5,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///e08c14aa-8225-4829-80bc-a6690cefb668\",\"moduleSequenceNumber\":2056},{\"filename\":\"/story/backdoors.js\",\"url\":\"blob:file:///0e290e53-8f63-41a9-ba3d-20dbf1f8aeab\",\"moduleSequenceNumber\":2193}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--goal=22500\",\"Slum Snakes\"],\"dataMap\":{},\"filename\":\"/rep/grind.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2490.20999999999,\"pid\":2595,\"ramUsage\":10,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///2c358b75-b0f2-4203-acd8-3d943d6ad786\",\"moduleSequenceNumber\":4574},{\"filename\":\"/rep/grind.js\",\"url\":\"blob:file:///959f518d-3268-471f-a7fb-3cddbb31f67e\",\"moduleSequenceNumber\":4579}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//GREATEST FACTOR\\nexport function factor(num) {\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\n        if (num % div != 0) {\\n            continue;\\n        }\\n        num = num / div;\\n        div = 1;\\n    }\\n    return num;\\n}\\n\",\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Array jumping game solver\\nexport function solveJump(data) {\\n    // ns.tprint(JSON.stringify(data))\\n    for (let i = data[0] - 1; i > -1; i--) {\\n        if (i + 1 >= data.length)\\n            return 1;\\n        return solveJump(data.slice(i + 1));\\n    }\\n    return 0;\\n}\\n\",\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const testData = [\\\"123\\\", 6];\\n    ns.tprint(findMathExpression(testData));\\n}\\nexport function findMathExpression(data) {\\n    const digits = data[0].split(\\\"\\\");\\n    const operators = [\\\"+\\\", \\\"-\\\", \\\"*\\\", \\\"\\\"];\\n    let expressions = [digits[0], \\\"-\\\" + digits[0]].flatMap((d) => operators.map((op) => d + op));\\n    for (let i = 1; i < digits.length - 1; i++) {\\n        expressions = expressions.flatMap((e) => operators.map((op) => e + digits[i] + op));\\n    }\\n    return expressions\\n        .map((e) => e + digits[digits.length - 1])\\n        .filter((e) => {\\n        try {\\n            return eval(e) === data[1];\\n        }\\n        catch (e) {\\n            return false;\\n        }\\n    });\\n}\\n\",\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//GENERATE IP ADDRESSES\\nexport function generateIps(num) {\\n    num = num.toString();\\n    const length = num.length;\\n    let ips = [];\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length),\\n                ];\\n                let isValid = true;\\n                ip.forEach((seg) => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n                if (isValid)\\n                    ips.push(ip.join(\\\".\\\"));\\n            }\\n        }\\n    }\\n    return ips;\\n}\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\")\\n        return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255)\\n        return false;\\n    return true;\\n}\\n\",\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export * from \\\"contracts/solvers/totalWaysToSum.js\\\";\\nexport * from \\\"contracts/solvers/arrayJumpingGame.js\\\";\\nexport * from \\\"contracts/solvers/solveSum.js\\\";\\nexport * from \\\"contracts/solvers/mergeOverlap.js\\\";\\nexport * from \\\"contracts/solvers/spiral.js\\\";\\nexport * from \\\"contracts/solvers/factor.js\\\";\\nexport * from \\\"contracts/solvers/generateIps.js\\\";\\nexport * from \\\"contracts/solvers/uniquePaths.js\\\";\\nexport * from \\\"contracts/solvers/triangleSum.js\\\";\\nexport * from \\\"contracts/solvers/stockSolver.js\\\";\\nexport * from \\\"contracts/solvers/sanitizeParentheses.js\\\";\\nexport * from \\\"contracts/solvers/findMathExpressions.js\\\";\\n\",\"filename\":\"/contracts/solvers/index.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Merge Overlapping Intervals\\nexport function mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\n\",\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function sanitizeParentheses(data) {\\n    var solution = Sanitize(data);\\n    if (solution == null) {\\n        return '[\\\"\\\"]';\\n    }\\n    else {\\n        return \\\"[\\\" + solution.join(\\\",\\\") + \\\"]\\\";\\n    }\\n}\\nfunction Sanitize_removeOneParth(item) {\\n    var possibleAnswers = [];\\n    for (let i = 0; i < item.length; i++) {\\n        if (item[i].toLowerCase().indexOf(\\\"(\\\") === -1 &&\\n            item[i].toLowerCase().indexOf(\\\")\\\") === -1) {\\n            continue;\\n        }\\n        let possible = item.substring(0, i) + item.substring(i + 1);\\n        possibleAnswers.push(possible);\\n    }\\n    return possibleAnswers;\\n}\\nfunction Sanitize_isValid(item) {\\n    var unclosed = 0;\\n    for (var i = 0; i < item.length; i++) {\\n        if (item[i] == \\\"(\\\") {\\n            unclosed++;\\n        }\\n        else if (item[i] == \\\")\\\") {\\n            unclosed--;\\n        }\\n        if (unclosed < 0) {\\n            return false;\\n        }\\n    }\\n    return unclosed == 0;\\n}\\nfunction Sanitize(data) {\\n    var currentPossible = [data];\\n    for (var i = 0; i < currentPossible.length; i++) {\\n        var newPossible = new Set();\\n        for (var j = 0; j < currentPossible.length; j++) {\\n            let newRemovedPossible = Sanitize_removeOneParth(currentPossible[j]);\\n            for (let item of newRemovedPossible) {\\n                newPossible.add(item);\\n            }\\n        }\\n        var validBoolList = [];\\n        for (const item of newPossible) {\\n            validBoolList.push(Sanitize_isValid(item));\\n        }\\n        if (validBoolList.includes(true)) {\\n            let finalList = [];\\n            newPossible = [...newPossible];\\n            for (var j = 0; j < validBoolList.length; j++) {\\n                if (validBoolList[j]) {\\n                    finalList.push(newPossible[j]);\\n                }\\n            }\\n            finalList = new Set(finalList);\\n            return [...finalList];\\n        }\\n        currentPossible = [...newPossible];\\n    }\\n    return null;\\n}\\n\",\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function solveSum(data) {\\n    const arrLength = data.length;\\n    let maxSum = -Infinity;\\n    for (let i = 0; i < arrLength; i++) {\\n        const sub = data.slice(0, i + 1);\\n        for (let j = 0; j < sub.length; j++) {\\n            const sub2 = sub.slice(j, sub.length);\\n            // ns.tprint(`i ${i} j ${j} ${JSON.stringify(sub)} ${JSON.stringify(sub2)}`);\\n            const sum = sub2.reduce((prev, cur) => (prev += cur), 0);\\n            if (sum > maxSum)\\n                maxSum = sum;\\n            // ns.tprint(`${sum}: ${sub2}`);\\n        }\\n    }\\n    return maxSum;\\n}\\n\",\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//SPIRALIZE Matrix\\nexport function spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift() || []);\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat((arr.pop() || []).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\nfunction column(arr, index) {\\n    let res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n\",\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function maxProfit(arrayData) {\\n    let i, j, k;\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n    // WHY?\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n    let highestProfit = JSON.parse(tempArr);\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) {\\n            // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) {\\n                // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\",\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Total Ways to Sum\\nexport function totalWaysToSum(data) {\\n    let N = data;\\n    let K = data - 1;\\n    // Initialize a list\\n    let dp = Array.from({ length: N + 1 }, () => 0);\\n    // Update dp[0] to 1\\n    dp[0] = 1;\\n    // Iterate over the range [1, K + 1]\\n    for (let row = 1; row < K + 1; row++) {\\n        // Iterate over the range [1, N + 1]\\n        for (let col = 1; col < N + 1; col++) {\\n            // If col is greater\\n            // than or equal to row\\n            if (col >= row)\\n                // Update current\\n                // dp[col] state\\n                dp[col] = dp[col] + dp[col - row];\\n        }\\n    }\\n    // Return the total number of ways\\n    return dp[N];\\n}\\n\",\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function triangleSum(arrayData) {\\n    let triangle = arrayData;\\n    let nextArray = [];\\n    let previousArray = triangle[0];\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            }\\n            else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            }\\n            else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n        }\\n        previousArray = nextArray;\\n    }\\n    return Math.min.apply(null, nextArray);\\n}\\n\",\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//UNIQUE PATHS IN A GRID//UNIQUE PATHS IN A GRID\\nexport function uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\n}\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\nexport function uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n            if (grid[i][j] == 1 &&\\n                (!ignoreFirst || i != 0 || j != 0) &&\\n                (!ignoreLast || i != grid.length - 1 || j != grid[i].length - 1)) {\\n                let newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n    }\\n    return totalPossiblePaths;\\n}\\n\",\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":4735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nimport * as solvers from \\\"contracts/solvers/index.js\\\";\\nconst minuteInterval = 2;\\nfunction getAllServers() {\\n    let data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will automatically complete contracts that it finds on the network.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let failedContracts = [];\\n    let successfulContracts = [];\\n    function refreshLog() {\\n        ns.clearLog();\\n        for (const cnt of failedContracts) {\\n            ns.print(`\\n      =========================\\n        server: ${cnt.server}\\n        filename: ${cnt.contract}\\n        type: ${cnt.type}\\n      =========================\\n        `);\\n        }\\n        for (const cnt of successfulContracts) {\\n            ns.print(`\\n      =========================\\n        server: ${cnt.server}\\n        filename: ${cnt.contract}\\n        type: ${cnt.type}\\n        reward: \\n          ${cnt.reward}\\n      =========================\\n        `);\\n        }\\n        ns.print(`Contracts failed: ${failedContracts.length}`);\\n        ns.print(`Contracts Succeeded: ${successfulContracts.length}`);\\n    }\\n    while (true) {\\n        // await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\n        const contracts = getAllServers().flatMap((server) => {\\n            const onServer = ns.ls(server.hostname, \\\".cct\\\").map((contract) => {\\n                const type = ns.codingcontract.getContractType(contract, server.hostname);\\n                const data = ns.codingcontract.getData(contract, server.hostname);\\n                const reward = solve(type, data, server.hostname, contract, ns);\\n                if (!reward) {\\n                    failedContracts.push({\\n                        server: server.hostname,\\n                        contract,\\n                        type,\\n                    });\\n                    refreshLog();\\n                }\\n                else {\\n                    successfulContracts.push({\\n                        server: server.hostname,\\n                        contract,\\n                        type,\\n                        reward,\\n                    });\\n                    refreshLog();\\n                }\\n                return `${server} - ${contract} - ${type} - ${reward || \\\"FAILED!\\\"}`;\\n            });\\n            return onServer;\\n        });\\n        if (contracts.length > 0)\\n            ns.print(`Found ${contracts.length} contracts`);\\n        await ns.sleep(minuteInterval * 60 * 1000);\\n    }\\n}\\nfunction solve(type, data, server, contract, ns) {\\n    let solution;\\n    ns.print(type);\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = solvers.maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = solvers.maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = solvers.maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = solvers.maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solvers.triangleSum(data);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = solvers.uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = solvers.uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = solvers.generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = solvers.factor(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = solvers.spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = solvers.mergeOverlap(data);\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            solution = solvers.solveSum(data);\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            solution = solvers.solveJump(data);\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            solution = solvers.totalWaysToSum(data);\\n            break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n            solution = solvers.sanitizeParentheses(data);\\n            break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n            solution = solvers.findMathExpression(data);\\n            break;\\n        default:\\n            ns.print(`Unknown contract type: ${type}`);\\n            return \\\"\\\";\\n    }\\n    if (solution != undefined)\\n        ns.print(`Submitting solution: ${solution} to ${type} - ${contract}`);\\n    return solution != undefined\\n        ? ns.codingcontract.attempt(solution, contract, server, {\\n            returnReward: true,\\n        })\\n        : \\\"\\\";\\n}\\n\",\"filename\":\"/contracts/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///bf1c7cef-79e1-45fd-991f-9aeeaf71632f\",\"moduleSequenceNumber\":4715},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///6eb050e7-717f-44f6-91c1-d8be6ef33a58\",\"moduleSequenceNumber\":4723},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///8c88406e-19dc-481f-8a4f-f3e035f765cb\",\"moduleSequenceNumber\":4729},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///dfc3154a-aa3e-4f2b-a903-ab1cfdb4fe53\",\"moduleSequenceNumber\":4733},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///db91deca-497c-4102-807e-619a6b98c8dc\",\"moduleSequenceNumber\":4735},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///c47475bf-5bc3-40ee-b8d3-8abffbb00536\",\"moduleSequenceNumber\":4717},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///e432c9cd-47b8-40a2-bee0-3321466f4af9\",\"moduleSequenceNumber\":4713},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///9016db9d-9136-4aa3-811b-8d62fe3aa040\",\"moduleSequenceNumber\":4727},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///bd43da44-3de5-4234-9756-cbf9ff83e045\",\"moduleSequenceNumber\":4721},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///c3bedbcb-3ee9-422d-bd0d-09c82060de04\",\"moduleSequenceNumber\":4725},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///3b980a0c-e456-4d7f-918a-98897527e5b4\",\"moduleSequenceNumber\":4711},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///31a9ce69-a58e-45d3-8b84-6200fb11e23f\",\"moduleSequenceNumber\":4731},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///1006dfad-d1e4-402b-a48c-c064bbbd2d55\",\"moduleSequenceNumber\":4719},{\"filename\":\"consts.js\",\"url\":\"blob:file:///6f116ce2-14b0-470c-b72d-07bb0338f82d\",\"moduleSequenceNumber\":4769},{\"filename\":\"/contracts/start.js\",\"url\":\"blob:file:///dcac6a67-9486-4dca-8224-0c15a57d43fd\",\"moduleSequenceNumber\":4905}],\"dependents\":[],\"ramUsage\":21.9,\"server\":\"home\",\"moduleSequenceNumber\":4905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        if (child == target) {\\n            route.unshift(child);\\n            route.unshift(server);\\n            return true;\\n        }\\n        if (recursiveScan(ns, server, child, target, route)) {\\n            route.unshift(server);\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    let route = [];\\n    let server = args._[0];\\n    if (!server || args.help) {\\n        ns.tprint(\\\"This script helps you connect to any server on the network.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    if (!recursiveScan(ns, \\\"\\\", \\\"home\\\", server, route)) {\\n        ns.tprint(`Could not find server ${server}!`);\\n        return;\\n    }\\n    for (const i of route) {\\n        if (ns.serverExists(i))\\n            ns.connect(i);\\n        await ns.sleep(500);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"cnct.js\",\"url\":\"blob:file:///bea73bdb-c903-4e36-a7c0-e775b0124637\",\"moduleSequenceNumber\":12014}],\"dependents\":[],\"ramUsage\":3.9,\"server\":\"home\",\"moduleSequenceNumber\":4767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * This is a list of the keys for data that is stored in localStorage.\\n */\\nexport const keys = {\\n    // The complete list of servers with their data.\\n    serverList: \\\"serverList\\\",\\n    // The total number of ports the user can hack.\\n    hackablePorts: \\\"hackablePorts\\\",\\n    // The players current hacking level.\\n    hackingLevel: \\\"hacking level\\\",\\n    // The factions the player belongs to.\\n    factions: \\\"factions\\\",\\n    // The augmentations that the player has purchased ready for installation.\\n    augmentationsQueued: \\\"augmentationsQueued\\\",\\n    // The augmentations that the player has already installed.\\n    augmentationsInstalled: \\\"augmentationsInstalled\\\",\\n    // The sourceFiles the player has.\\n    sourceFiles: \\\"source files\\\",\\n    // Are we programming?\\n    isProgramming: \\\"Is Programming\\\",\\n};\\nexport const PortHackPrograms = [\\n    \\\"BruteSSH.exe\\\",\\n    \\\"FTPCrack.exe\\\",\\n    \\\"relaySMTP.exe\\\",\\n    \\\"HTTPWorm.exe\\\",\\n    \\\"SQLInject.exe\\\",\\n];\\nexport async function CreateHackPrograms(ns) {\\n    const hackPrograms = [\\n        {\\n            program: \\\"BruteSSH.exe\\\",\\n            hackingLevel: 50,\\n        },\\n        {\\n            program: \\\"FTPCrack.exe\\\",\\n            hackingLevel: 100,\\n        },\\n        {\\n            program: \\\"relaySMTP.exe\\\",\\n            hackingLevel: 250,\\n        },\\n        {\\n            program: \\\"HTTPWorm.exe\\\",\\n            hackingLevel: 500,\\n        },\\n        {\\n            program: \\\"SQLInject.exe\\\",\\n            hackingLevel: 750,\\n        },\\n    ];\\n    const hackingLevel = ns.getHackingLevel();\\n    for (const program of hackPrograms) {\\n        if (ns.fileExists(program.program))\\n            continue;\\n        if (hackingLevel >= program.hackingLevel) {\\n            localStorage.setItem(keys.isProgramming, \\\"true\\\");\\n            ns.createProgram(program.program);\\n            while (ns.isBusy())\\n                await ns.sleep(300);\\n            localStorage.setItem(keys.isProgramming, \\\"false\\\");\\n        }\\n    }\\n}\\nexport const crimes = [\\n    \\\"Heist\\\",\\n    \\\"Assassination\\\",\\n    \\\"Kidnap\\\",\\n    \\\"Grand Theft Auto\\\",\\n    \\\"Homicide\\\",\\n    \\\"Traffick Arms\\\",\\n    \\\"Bond Forgery\\\",\\n    \\\"Deal Drugs\\\",\\n    \\\"Larceny\\\",\\n    \\\"Mug\\\",\\n    \\\"Rob Store\\\",\\n    \\\"Shoplift\\\",\\n];\\n\",\"filename\":\"consts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.25,\"server\":\"home\",\"moduleSequenceNumber\":4769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nconst pollingInterval = 6000; // time in ms to wait between polling\\nconst host = \\\"home\\\";\\nfunction getServers() {\\n    let data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nconst setupScripts = [\\n    \\\"/utils/updateStorage.js\\\",\\n    \\\"/hacking/nukeAll.js\\\",\\n];\\n// These are various money scripts in order of preference.\\nconst crimeFocused = [\\n    {\\n        script: \\\"/crime/start.js\\\",\\n        requires: {\\n            strength: 350,\\n            defense: 350,\\n            agility: 350,\\n            dexterity: 350,\\n        },\\n    },\\n    {\\n        script: \\\"/jobs/work.js\\\",\\n        requires: {\\n            strength: 300,\\n            defense: 300,\\n            dexterity: 300,\\n            agility: 300,\\n            charisma: 250,\\n        },\\n        args: [\\n            \\\"--company=MegaCorp\\\",\\n            \\\"--position=Security\\\",\\n            //\\n        ],\\n    },\\n    {\\n        script: \\\"/jobs/work.js\\\",\\n        requires: {\\n            strength: 200,\\n            defense: 200,\\n            dexterity: 200,\\n            agility: 200,\\n            charisma: 150,\\n        },\\n        args: [\\n            \\\"--company=National Security Agency\\\",\\n            \\\"--position=Security\\\",\\n            //\\n        ],\\n    },\\n    {\\n        script: \\\"/jobs/work.js\\\",\\n        requires: {\\n            strength: 175,\\n            defense: 175,\\n            dexterity: 175,\\n            agility: 175,\\n            charisma: 175,\\n            rep: 8000,\\n            company: \\\"Carmichael Security\\\",\\n        },\\n        args: [\\n            \\\"--company=Carmichael Security\\\",\\n            \\\"--position=Agent\\\",\\n            //\\n        ],\\n    },\\n    {\\n        script: \\\"/jobs/work.js\\\",\\n        requires: {\\n            strength: 125,\\n            defense: 125,\\n            dexterity: 125,\\n            agility: 125,\\n            charisma: 75,\\n        },\\n        args: [\\n            \\\"--company=Carmichael Security\\\",\\n            \\\"--position=Security\\\",\\n            //\\n        ],\\n    },\\n    {\\n        script: \\\"/jobs/work.js\\\",\\n        requires: {},\\n        args: [\\n            \\\"--company=Joe's Guns\\\",\\n            \\\"--position=part-time employee\\\",\\n            //\\n        ],\\n    },\\n];\\n// These are the moneyScripts we will actually use.\\nconst moneyScripts = crimeFocused;\\nconst lightScripts = [\\n    \\\"/hacking/distributedHack.js\\\",\\n    \\\"/hacking/program.js\\\",\\n    //\\n];\\nconst allScripts = [\\n    ...lightScripts,\\n    \\\"/contracts/start.js\\\",\\n    \\\"/story/backdoors.js\\\",\\n    //\\n];\\nconst repScript = \\\"/rep/grind.js\\\";\\nconst learningScript = \\\"/hacking/school.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || ns.getHostname() !== \\\"home\\\") {\\n        ns.tprint(`This is the main conductor script for running all your automation:\\r\\n      hacks, nukes, contracts, crimes, etc. It should be run from your home computer and should always be running on home.`);\\n        ns.tprint(\\\"It requires no arguments so just run it!\\\");\\n        ns.tprint(`It currently uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.`);\\n        ns.tprint(`USAGE: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    const totalRam = (ns.getServerMaxRam(host) - ns.getScriptRam(ns.getScriptName())) * 1e9;\\n    ns.tprint(`You currently have ${ns.nFormat(totalRam, \\\"0.00b\\\")} RAM available for scripts.`);\\n    // Start by killing everything else.\\n    killAll(ns);\\n    // calculate memory required for allScripts\\n    let memory = 0;\\n    for (const script of [\\n        ...setupScripts,\\n        ...moneyScripts.map((s) => s.script),\\n        ...allScripts,\\n        repScript,\\n    ]) {\\n        await ns.sleep(1);\\n        memory += ns.getScriptRam(script);\\n    }\\n    const allScriptMem = memory * 1e9;\\n    ns.tprint(`In order to run all scripts you need ${ns.nFormat(allScriptMem, \\\"0.00b\\\")} of RAM.`);\\n    memory = 0;\\n    for (const script of [\\n        ...setupScripts,\\n        ...moneyScripts.map((s) => s.script),\\n        ...lightScripts,\\n        repScript,\\n    ]) {\\n        await ns.sleep(1);\\n        memory += ns.getScriptRam(script);\\n    }\\n    ns.tprint(`In order to run light scripts you need ${ns.nFormat(memory * 1e9, \\\"0.00b\\\")} of RAM.`);\\n    while (true) {\\n        await ns.sleep(pollingInterval);\\n        // Determine size of home PC.\\n        // Determine what scripts can run.\\n        // Run Appropriate scripts.\\n        // Always start by running setupScripts.\\n        for (const script of setupScripts) {\\n            await ns.sleep(1);\\n            if (!ns.scriptRunning(script, host))\\n                ns.run(script);\\n            while (ns.scriptRunning(script, ns.getHostname()))\\n                await ns.sleep(1);\\n        }\\n        if (totalRam >= allScriptMem) {\\n            for (const script of allScripts) {\\n                if (!ns.scriptRunning(script, host))\\n                    ns.run(script);\\n            }\\n        }\\n        else {\\n            for (const script of lightScripts) {\\n                if (!ns.scriptRunning(script, host))\\n                    ns.run(script);\\n            }\\n        }\\n        ns.clearLog();\\n        // Next check if we have outstanding faction invitations.\\n        for (const faction of ns.checkFactionInvitations()) {\\n            ns.print(`Joining ${faction}`);\\n            ns.joinFaction(faction);\\n        }\\n        ns.print(\\\"All factions joined!\\\");\\n        // Now we get the augmentations that make crime pay!\\n        // A good source of income.\\n        if (!(await GetAugmentations(ns, (aug) => !!ns.getAugmentationStats(aug.name).crime_money_mult ||\\n            !!ns.getAugmentationStats(aug.name).crime_success_mult)))\\n            continue;\\n        ns.print(\\\"Purchased all crime augmentations!\\\");\\n        // Now for augmentations that improve hacking.\\n        if (!(await GetAugmentations(ns, (aug) => {\\n            let stats = ns.getAugmentationStats(aug.name);\\n            return (!!stats.hacking_mult ||\\n                !!stats.hacking_exp_mult ||\\n                !!stats.hacking_money_mult ||\\n                !!stats.hacking_speed_mult ||\\n                !!stats.hacking_grow_mult ||\\n                !!stats.hacking_chance_mult);\\n        })))\\n            continue;\\n        ns.print(\\\"Purchased all hacking augmentations!\\\");\\n        // Now go for broke and install everything else!\\n        if (!(await GetAugmentations(ns)))\\n            continue;\\n        ns.print(\\\"Purchased all available augmentations!\\\");\\n        // check if we have augmentations to install\\n        if (ns.getOwnedAugmentations(true).length -\\n            ns.getOwnedAugmentations(false).length >\\n            0) {\\n            ns.installAugmentations(\\\"/start.js\\\");\\n        }\\n        else {\\n            //nothing to install so just focus on hacking\\n            if (!ns.scriptRunning(learningScript, host))\\n                ns.run(learningScript);\\n        }\\n    }\\n}\\nasync function GetAugmentations(ns, filter = (_) => true) {\\n    await ns.sleep(pollingInterval);\\n    // only do this stuff if we are not busy programming.\\n    if (localStorage.getItem(keys.isProgramming) === \\\"true\\\") {\\n        ns.print(`Waiting for programming to finish before continuing.`);\\n        return false;\\n    }\\n    // determine if we are part of any factions with uninstalled\\n    // augmentations.\\n    const { factions } = ns.getPlayer();\\n    if (factions.length === 0) {\\n        // We aren't in any factions!\\n        return true;\\n    }\\n    const ownedAugs = ns.getOwnedAugmentations(true);\\n    const neededAugs = factions.flatMap((faction) => {\\n        let augmentations = [];\\n        for (const aug of ns.getAugmentationsFromFaction(faction)) {\\n            if (ownedAugs.includes(aug) || aug.startsWith(\\\"NeuroFlux\\\"))\\n                continue;\\n            augmentations.push(aug);\\n        }\\n        return augmentations.map((name) => {\\n            const price = ns.getAugmentationPrice(name);\\n            const rep = ns.getAugmentationRepReq(name);\\n            const preReqs = ns\\n                .getAugmentationPrereq(name)\\n                .filter((aug) => !ownedAugs.includes(aug));\\n            return {\\n                name,\\n                price,\\n                faction,\\n                rep,\\n                preReqs,\\n            };\\n        });\\n    });\\n    if (neededAugs.length === 0) {\\n        // We don't need anything our factions have to offer!\\n        return true;\\n    }\\n    // find the most expensive augmentation and work to earn it.\\n    let targetAug = {\\n        name: \\\"\\\",\\n        price: 0,\\n        faction: \\\"\\\",\\n        rep: 0,\\n        preReqs: [],\\n    };\\n    for (let aug of neededAugs) {\\n        await ns.sleep(1);\\n        if (aug.price > targetAug.price &&\\n            aug.preReqs.length === 0 &&\\n            filter(aug)) {\\n            targetAug = aug;\\n        }\\n    }\\n    if (targetAug.name === \\\"\\\") {\\n        // none of the augmentations match our filter.\\n        return true;\\n    }\\n    if (targetAug.price > ns.getServerMoneyAvailable(host)) {\\n        // get enough money for augmentation.\\n        ns.print(`\\r\\n        Working to be able to afford ${targetAug.name} from ${targetAug.faction}.\\r\\n        `);\\n        ns.enableLog(\\\"run\\\");\\n        for (const ms of moneyScripts) {\\n            const { requires } = ms;\\n            const { rep, company } = requires;\\n            const { hacking, strength, defense, dexterity, agility, charisma } = ns.getPlayer();\\n            if (company && rep) {\\n                const playerRep = ns.getCompanyRep(company);\\n                if (playerRep < rep)\\n                    continue;\\n            }\\n            if ((!requires.hacking || requires.hacking <= hacking) &&\\n                (!requires.strength || requires.strength <= strength) &&\\n                (!requires.defense || requires.defense <= defense) &&\\n                (!requires.dexterity || requires.dexterity <= dexterity) &&\\n                (!requires.agility || requires.agility <= agility) &&\\n                (!requires.charisma || requires.charisma <= charisma)) {\\n                const script = ms.script;\\n                ns.tail();\\n                ns.print(`running ${script}`);\\n                if (!ns.scriptRunning(script, host))\\n                    ns.run(script, 1, `--goal=${targetAug.price}`, ...(ms.args || []));\\n                break;\\n            }\\n        }\\n        return false;\\n    }\\n    else if (targetAug.rep > ns.getFactionRep(targetAug.faction)) {\\n        ns.tail();\\n        ns.print(`\\r\\n        Working for ${targetAug.faction} until we have ${ns.nFormat(targetAug.rep, \\\"0.00a\\\")} so we can buy ${targetAug.name}\\r\\n        `);\\n        if (!ns.scriptRunning(repScript, host)) {\\n            ns.run(repScript, 1, `--goal=${targetAug.rep}`, targetAug.faction);\\n        }\\n        return false;\\n    }\\n    else {\\n        ns.print(`\\r\\n        Purchasing ${targetAug.name} from ${targetAug.faction} for ${ns.nFormat(targetAug.price, \\\"$0.00a\\\")}\\r\\n        `);\\n        ns.enableLog(\\\"purchaseAugmentation\\\");\\n        ns.purchaseAugmentation(targetAug.faction, targetAug.name);\\n        return false;\\n    }\\n}\\nfunction killAll(ns) {\\n    ns.stopAction();\\n    for (const host of getServers()) {\\n        if (host.hostname === \\\"home\\\") {\\n            for (const ps of ns.ps(host.hostname)) {\\n                if (ps.filename === ns.getScriptName())\\n                    continue;\\n                ns.scriptKill(ps.filename, host.hostname);\\n            }\\n        }\\n        else {\\n            ns.killall(host.hostname);\\n        }\\n    }\\n}\\n\",\"filename\":\"start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///04d6cadd-44b0-421f-a455-4389db99431e\",\"moduleSequenceNumber\":4769},{\"filename\":\"start.js\",\"url\":\"blob:file:///f1bd5ee7-0402-4b5e-b384-336a601d67f6\",\"moduleSequenceNumber\":4902}],\"dependents\":[],\"ramUsage\":50.1,\"server\":\"home\",\"moduleSequenceNumber\":4902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"installAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getCompanyRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys, PortHackPrograms } from \\\"consts\\\";\\nlet servers = [];\\nfunction recursiveScan(ns, parent = \\\"home\\\", server = \\\"home\\\") {\\n    const children = ns.scan(server);\\n    if (!servers.map((s) => s.hostname).includes(server))\\n        servers.push(ns.getServer(server));\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        recursiveScan(ns, server, child);\\n    }\\n}\\n/**\\n * Get server data and save it to localStorage.\\n */\\nfunction getServers(ns) {\\n    recursiveScan(ns);\\n    localStorage.setItem(keys.serverList, JSON.stringify(servers));\\n}\\n/**\\n * Get the number of ports the user can hack and store it in localStorage.\\n */\\nfunction getPorts(ns) {\\n    // get the ports\\n    let ports = 0;\\n    let programs = PortHackPrograms;\\n    for (const p of programs) {\\n        if (ns.fileExists(p))\\n            ports++;\\n    }\\n    localStorage.setItem(keys.hackablePorts, JSON.stringify(ports));\\n}\\n/**\\n * Get the users installed and purchased augmentations\\n */\\nfunction getAugs(ns) {\\n    let allAugs = ns.getOwnedAugmentations(true);\\n    let installedAugs = ns.getOwnedAugmentations(false);\\n    let queuedAugs = allAugs.filter((a) => !installedAugs.includes(a));\\n    localStorage.setItem(keys.augmentationsQueued, JSON.stringify(queuedAugs));\\n    localStorage.setItem(keys.augmentationsInstalled, JSON.stringify(installedAugs));\\n}\\n/**\\n * Get the factions the player belongs to and store them.\\n */\\nfunction getFactions(ns) {\\n    let factions = ns.getPlayer().factions;\\n    let data = factions.map((f) => ({\\n        name: f,\\n        rep: ns.getFactionRep(f),\\n        favor: ns.getFactionFavor(f),\\n        augs: ns\\n            .getAugmentationsFromFaction(f)\\n            .map((a) => ns.getAugmentationStats(a)),\\n    }));\\n    localStorage.setItem(keys.factions, JSON.stringify(data));\\n}\\n/** Get the source files owned by the player */\\nfunction getSourceFiles(ns) {\\n    let sourceFiles = ns.getOwnedSourceFiles();\\n    localStorage.setItem(keys.sourceFiles, JSON.stringify(sourceFiles));\\n}\\n/**\\n * The main entry point for the program.\\n */\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will update the list of servers on the network as well as some other player data for use in other scripts. It should be run regularly to ensure accurate data in other scripts.\\n\\n      Usage: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    getServers(ns);\\n    getPorts(ns);\\n    getFactions(ns);\\n    getAugs(ns);\\n    getSourceFiles(ns);\\n}\\n\",\"filename\":\"/utils/updateStorage.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///27170a9e-5e85-4ad9-8407-722d67182604\",\"moduleSequenceNumber\":4769},{\"filename\":\"/utils/updateStorage.js\",\"url\":\"blob:file:///3f3b4e85-65bb-421f-933f-1a51d707f3f1\",\"moduleSequenceNumber\":4772}],\"dependents\":[],\"ramUsage\":26.4,\"server\":\"home\",\"moduleSequenceNumber\":4772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nfunction getServers() {\\n    const data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nfunction getHackablePorts() {\\n    const data = localStorage.getItem(keys.hackablePorts);\\n    if (!data)\\n        return 0;\\n    return JSON.parse(data);\\n}\\nfunction getNukableServers() {\\n    return getServers().filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= getHackablePorts());\\n}\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will nuke all servers possible.\\n\\n      This script currently uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    nukeAllServers(ns);\\n}\\nfunction nukeAllServers(ns) {\\n    const servers = getNukableServers();\\n    let programs = [\\n        {\\n            name: \\\"BruteSSH.exe\\\",\\n            exec: ns.brutessh,\\n        },\\n        {\\n            name: \\\"FTPCrack.exe\\\",\\n            exec: ns.ftpcrack,\\n        },\\n        {\\n            name: \\\"relaySMTP.exe\\\",\\n            exec: ns.relaysmtp,\\n        },\\n        {\\n            name: \\\"HTTPWorm.exe\\\",\\n            exec: ns.httpworm,\\n        },\\n        {\\n            name: \\\"SQLInject.exe\\\",\\n            exec: ns.sqlinject,\\n        },\\n    ];\\n    for (const host of servers) {\\n        for (const program of programs) {\\n            if (ns.fileExists(program.name))\\n                program.exec(host.hostname);\\n        }\\n        ns.print(`NUKEing ${host.hostname}`);\\n        ns.nuke(host.hostname);\\n    }\\n}\\n\",\"filename\":\"/hacking/nukeAll.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///583b8669-af34-46ad-b83d-660b0c603025\",\"moduleSequenceNumber\":4769},{\"filename\":\"/hacking/nukeAll.js\",\"url\":\"blob:file:///f4855c94-5eec-4620-a86e-1dee3d7987e2\",\"moduleSequenceNumber\":4773}],\"dependents\":[],\"ramUsage\":3.4,\"server\":\"home\",\"moduleSequenceNumber\":4773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nfunction getServers() {\\n    const data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nfunction getRichestServer(hackingLevel) {\\n    let servers = getServers();\\n    let richest;\\n    for (const server of servers) {\\n        if ((!richest || richest.moneyMax < server.moneyMax) &&\\n            server.hasAdminRights &&\\n            server.requiredHackingSkill <= hackingLevel) {\\n            richest = server;\\n        }\\n    }\\n    return richest;\\n}\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = getRichestServer(ns.getHackingLevel());\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will generate money by hacking the richest server possible.\\n      It automatically finds the richest server that the user can hack.\\n      If you are seeing this message and didn't use the --help flag then\\n      you either haven't run the /utils/updateServers.ts script since you installed augmentations\\n      or you haven't nuked any servers yet.\\n\\n      This script currently uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    await originalHack(ns, hostname.hostname);\\n}\\nasync function originalHack(ns, hostname) {\\n    while (true) {\\n        if (ns.getServerSecurityLevel(hostname) >\\n            ns.getServerMinSecurityLevel(hostname)) {\\n            await ns.weaken(hostname);\\n        }\\n        else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n            await ns.grow(hostname);\\n        }\\n        else {\\n            await ns.hack(hostname);\\n        }\\n    }\\n}\\n\",\"filename\":\"/hacking/cheapHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///d848e638-98b5-4312-8219-4b44887868d9\",\"moduleSequenceNumber\":1285194},{\"filename\":\"/hacking/cheapHack.js\",\"url\":\"blob:file:///69ce5de2-210d-448c-ab37-dfea50af743f\",\"moduleSequenceNumber\":1285197}],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":4743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nconst workTypes = [\\n    \\\"Hacking\\\",\\n    \\\"Field\\\",\\n    \\\"Security\\\",\\n    //\\n];\\nfunction getServers() {\\n    const data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const faction = args._.join(\\\" \\\");\\n    const targetRep = args.goal;\\n    if (args.help || !faction) {\\n        ns.tprint(`\\r\\n      This program will grind reputation from a given faction using every available\\r\\n      system's resources.\\r\\n\\r\\n      Can optionally take a goal reputation to stop.\\r\\n      USAGE: run ${ns.getScriptName()} [--goal=TARGET_REP] FACTION_NAME\\r\\n      `);\\n        return;\\n    }\\n    let servers = getServers();\\n    let { factions } = ns.getPlayer();\\n    if (!factions.includes(faction)) {\\n        ns.tprint(`You are not a member of ${faction}`);\\n    }\\n    for (const server of servers) {\\n        const host = server.hostname;\\n        if (host === \\\"home\\\")\\n            continue;\\n        ns.killall(host);\\n        await ns.scp(\\\"/remote/share.js\\\", host);\\n        ns.exec(\\\"/remote/share.js\\\", host);\\n        await ns.sleep(1);\\n    }\\n    let workType;\\n    if (ns.isBusy())\\n        ns.stopAction();\\n    while (targetRep === 0 ||\\n        ns.getFactionRep(faction) + ns.getPlayer().workRepGained < targetRep) {\\n        await ns.sleep(500);\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(`Working for ${faction} until you have ${ns.nFormat(targetRep, \\\"0.00a\\\")} rep.`);\\n        if (workType) {\\n            ns.print(`Doing ${workType} Work for ${faction}`);\\n        }\\n        if (!ns.isBusy()) {\\n            if (workType) {\\n                ns.workForFaction(faction, workType, false);\\n            }\\n            else if (!ns.workForFaction(faction, \\\"Hacking\\\", false)) {\\n                ns.print(`${faction} does not support hacking - trying Field Work.`);\\n                if (!ns.workForFaction(faction, \\\"Field\\\", false)) {\\n                    ns.print(`${faction} does not support Field Work - trying Security Work.`);\\n                    if (!ns.workForFaction(faction, \\\"Security\\\", false)) {\\n                        ns.print(`What kind of faction is ${faction} that doesn't support anything!?!`);\\n                    }\\n                    else {\\n                        workType = \\\"Security\\\";\\n                        ns.print(`Doing Security Work for ${faction}`);\\n                    }\\n                }\\n                else {\\n                    workType = \\\"Field\\\";\\n                    ns.print(`Doing Field Work for ${faction}`);\\n                }\\n            }\\n            else {\\n                workType = \\\"Hacking\\\";\\n                ns.print(`Doing Hacking Contracts for ${faction}`);\\n            }\\n        }\\n    }\\n    ns.stopAction();\\n}\\nexport function autocomplete() {\\n    let data = localStorage.getItem(keys.factions);\\n    if (!data)\\n        return [];\\n    let factions = JSON.parse(data);\\n    return factions.map((f) => f.name);\\n}\\n\",\"filename\":\"/rep/grind.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///dfaa3dff-008a-4fc1-83d2-e0bcb730b629\",\"moduleSequenceNumber\":4769},{\"filename\":\"/rep/grind.js\",\"url\":\"blob:file:///fe6dd308-6b55-48b3-9b57-a425a65dc2f7\",\"moduleSequenceNumber\":4907}],\"dependents\":[],\"ramUsage\":10,\"server\":\"home\",\"moduleSequenceNumber\":4907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":4757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { crimes } from \\\"consts\\\";\\n// The time to sample to find how long before we reach our goal.\\n// The larger this number the more time you need to wait for an estimate.\\n// But the more accurate that estimate will be.\\nconst deltaTimeSample = 1 * 60e3;\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const crimeName = args._.join(\\\" \\\");\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    const { help, goal } = args;\\n    if (help) {\\n        ns.tprint(`\\r\\n      This script will generate money by commiting crimes.\\r\\n      You will not be able to do anything else while this is happening.\\r\\n      The log will automatically pop up so you can kill the script at\\r\\n      any time. You may optionally provide a crime name to focus on that particular crime.\\r\\n      Otherwise the best money making crime that can reasonably be accomplished will be chosen.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n\\r\\n      You can also provide a 'goal' in cash and crime will stop once that is achieved.\\r\\n      USAGE: run ${ns.getScriptName()} --goal=[CASH_AMOUNT] [CRIME_NAME]\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    ns.tail();\\n    ns.enableLog(\\\"commitCrime\\\");\\n    function getCrimeData(crime) {\\n        const stats = ns.getCrimeStats(crime);\\n        const time = stats.time;\\n        return {\\n            name: crime,\\n            profit: (stats.money / time) * 1000,\\n            hackGrowth: (stats.hacking_exp / time) * 1000,\\n            strGrowth: (stats.strength_exp / time) * 1000,\\n            defGrowth: (stats.defense_exp / time) * 1000,\\n            dexGrowth: (stats.dexterity_exp / time) * 1000,\\n            agiGrowth: (stats.agility_exp / time) * 1000,\\n            chaGrowth: (stats.charisma_exp / time) * 1000,\\n            successChance: ns.getCrimeChance(crime),\\n        };\\n    }\\n    function getAllCrimeData() {\\n        const result = [];\\n        for (const crime of crimes) {\\n            result.push(getCrimeData(crime));\\n        }\\n        return result;\\n    }\\n    function getCommitableCrimes() {\\n        return getAllCrimeData().filter((c) => \\n        // either there is 100% chance of success\\n        c.successChance >= 1 ||\\n            // Or the the attempt takes less than a minute and there is at least a 50%\\n            // success rate.\\n            (ns.getCrimeStats(c.name).time < 60000 && c.successChance > 0.5));\\n    }\\n    let deltaTimeStart = Date.now();\\n    let deltaCashStart = ns.getServerMoneyAvailable(\\\"home\\\");\\n    let deltaTime = 0;\\n    let deltaCash = 0;\\n    let cashPerMs = 0;\\n    function resetTimer() {\\n        deltaTime = Date.now() - deltaTimeStart;\\n        deltaCash = ns.getServerMoneyAvailable(\\\"home\\\") - deltaCashStart;\\n        if (cashPerMs !== 0) {\\n            cashPerMs = (cashPerMs + deltaCash / deltaTime) / 2;\\n        }\\n        else {\\n            cashPerMs = deltaCash / deltaTime;\\n        }\\n        deltaTimeStart = Date.now();\\n        deltaCashStart = ns.getServerMoneyAvailable(\\\"home\\\");\\n    }\\n    function crimeBreakdown(crimeString) {\\n        const crime = getCrimeData(crimeString);\\n        const combatGrowth = crime.strGrowth + crime.defGrowth + crime.dexGrowth + crime.agiGrowth;\\n        if (goal > 0) {\\n            let timeToGoal;\\n            if (Date.now() - deltaTimeStart >= deltaTimeSample) {\\n                resetTimer();\\n            }\\n            if (cashPerMs > 0) {\\n                timeToGoal = (goal - ns.getServerMoneyAvailable(\\\"home\\\")) / cashPerMs;\\n            }\\n            ns.print(`\\r\\nCommiting '${crime.name}' until you have ${ns.nFormat(goal, \\\"$0.00a\\\")}\\r\\n${ns.nFormat(ns.getServerMoneyAvailable(\\\"home\\\") / goal, \\\"0.00%\\\")} complete.\\r\\nEstimated Time to Completion: ${timeToGoal ? ns.tFormat(timeToGoal) : \\\"Calculating...\\\"}\\r\\n      `);\\n        }\\n    }\\n    function mostProfitableCrime() {\\n        const crimes = getCommitableCrimes();\\n        let best;\\n        for (const crime of crimes) {\\n            if (!best || best.profit < crime.profit) {\\n                best = crime;\\n            }\\n        }\\n        return best?.name;\\n    }\\n    const easiestCrime = \\\"Shoplift\\\";\\n    if (crimeName) {\\n        if (crimes.includes(crimeName)) {\\n            if (ns.isBusy())\\n                ns.stopAction();\\n            resetTimer();\\n            while (ns.getServerMoneyAvailable(\\\"home\\\") < goal || !goal) {\\n                ns.tail();\\n                ns.tail(\\\"/start.js\\\");\\n                ns.clearLog();\\n                crimeBreakdown(crimeName);\\n                if (!ns.isBusy())\\n                    ns.commitCrime(crimeName);\\n                await ns.sleep(ns.getCrimeStats(crimeName).time + 3000);\\n            }\\n        }\\n        else\\n            ns.tprint(`${crimeName} is not a crime! You can use autocomplete to enter a crime name.`);\\n    }\\n    else {\\n        const crime = mostProfitableCrime() || easiestCrime;\\n        if (ns.isBusy())\\n            ns.stopAction();\\n        resetTimer();\\n        while (ns.getServerMoneyAvailable(\\\"home\\\") < goal || !goal) {\\n            ns.clearLog();\\n            ns.tail();\\n            crimeBreakdown(crime);\\n            if (!ns.isBusy())\\n                ns.commitCrime(crime);\\n            await ns.sleep(ns.getCrimeStats(crime).time + 3000);\\n        }\\n    }\\n}\\nexport function autocomplete() {\\n    return [...crimes, \\\"--goal\\\"];\\n}\\n\",\"filename\":\"/crime/start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///cf932444-5a22-484b-93ff-40e1f34f7d4e\",\"moduleSequenceNumber\":6147},{\"filename\":\"/crime/start.js\",\"url\":\"blob:file:///c66b3d83-6c55-46d8-9346-2074b5a06932\",\"moduleSequenceNumber\":6150}],\"dependents\":[],\"ramUsage\":18.3,\"server\":\"home\",\"moduleSequenceNumber\":4739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nconst maxServers = 50;\\nconst remoteHackScript = \\\"/remote/hackLoop.js\\\";\\nfunction getServers() {\\n    const data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nfunction getServerWithMemory(ns, memory) {\\n    let servers = getServers().filter((s) => {\\n        // update host\\n        s = ns.getServer(s.hostname);\\n        // need admin rights on any server.\\n        if (!s.hasAdminRights)\\n            return false;\\n        // Don't hog the home pc\\n        if (s.hostname.includes(\\\"home\\\"))\\n            return false;\\n        const total = s.maxRam;\\n        const used = s.ramUsed;\\n        const free = (total - used) * 1e9;\\n        return free >= memory;\\n    });\\n    return servers[0];\\n}\\nasync function getRichestServers(ns) {\\n    let cutoff = 1;\\n    let servers = getServers().filter((server) => server.hasAdminRights &&\\n        server.requiredHackingSkill <= ns.getHackingLevel() &&\\n        server.moneyMax >= cutoff);\\n    while (servers.length > maxServers) {\\n        cutoff += 1e3;\\n        servers = servers.filter((server) => server.moneyMax >= cutoff);\\n        await ns.sleep(1);\\n    }\\n    return servers;\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const targets = await getRichestServers(ns);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || targets.length === 0) {\\n        ns.tprint(`\\n      This script will generate money by hacking the richest server possible.\\n      It automatically finds the richest server that the user can hack.\\n      If you are seeing this message and didn't use the --help flag then\\n      you either haven't run the /utils/updateServers.ts script since you installed augmentations\\n      or you haven't nuked any servers yet.\\n\\n      This script currently uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    await distributedHack(ns, targets);\\n}\\nasync function distributedHack(ns, targets) {\\n    while (true) {\\n        await ns.sleep(500);\\n        ns.clearLog();\\n        // if (!ns.isBusy()) {\\n        //   ns.universityCourse(\\n        //     \\\"Rothman University\\\",\\n        //     \\\"Study Computer Science\\\",\\n        //     false\\n        //   );\\n        // }\\n        for (const target of targets) {\\n            ns.print(`Hacking ${target.hostname}`);\\n            const memory = ns.getScriptRam(remoteHackScript) * 1e9;\\n            ns.print(`Requires ${ns.nFormat(memory, \\\"0.00b\\\")} of RAM`);\\n            const host = getServerWithMemory(ns, memory);\\n            if (host) {\\n                const updatedHost = ns.getServer(host.hostname);\\n                ns.print(`${host.hostname} found to hack ${target.hostname}`);\\n                await ns.scp(remoteHackScript, host.hostname);\\n                const threads = Math.floor((updatedHost.maxRam - updatedHost.ramUsed) /\\n                    ns.getScriptRam(remoteHackScript));\\n                if (threads === 0)\\n                    continue;\\n                ns.enableLog(\\\"exec\\\");\\n                ns.exec(remoteHackScript, host.hostname, threads, target.hostname);\\n            }\\n            else {\\n                ns.print(`couldn't find a server to hack ${target.hostname}`);\\n            }\\n            await ns.sleep(3000);\\n        }\\n    }\\n}\\n\",\"filename\":\"/hacking/distributedHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///8dc2c7f0-4559-4a6b-bc65-aab8deb489fe\",\"moduleSequenceNumber\":4769},{\"filename\":\"/hacking/distributedHack.js\",\"url\":\"blob:file:///b1bfb3e3-a847-4c6d-a0d8-4b2c6b1a2cd8\",\"moduleSequenceNumber\":4903}],\"dependents\":[],\"ramUsage\":5.65,\"server\":\"home\",\"moduleSequenceNumber\":4903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///8bf4c60c-a714-4302-a346-5242b0ff40c5\",\"moduleSequenceNumber\":7259}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"home\",\"moduleSequenceNumber\":4755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { crimes } from \\\"consts\\\";\\n// The time to sample to find how long before we reach our goal.\\n// The larger this number the more time you need to wait for an estimate.\\n// But the more accurate that estimate will be.\\nconst deltaTimeSample = 1 * 60e3;\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const crimeName = args._.join(\\\" \\\");\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    const { help, goal } = args;\\n    if (help) {\\n        ns.tprint(`\\r\\n      This script will generate money by commiting crimes.\\r\\n      You will not be able to do anything else while this is happening.\\r\\n      The log will automatically pop up so you can kill the script at\\r\\n      any time. You may optionally provide a crime name to focus on that particular crime.\\r\\n      Otherwise the best money making crime that can reasonably be accomplished will be chosen.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n\\r\\n      You can also provide a 'goal' in cash and crime will stop once that is achieved.\\r\\n      USAGE: run ${ns.getScriptName()} --goal=[CASH_AMOUNT] [CRIME_NAME]\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    ns.tail();\\n    ns.enableLog(\\\"commitCrime\\\");\\n    function getCrimeData(crime) {\\n        const stats = ns.getCrimeStats(crime);\\n        const time = stats.time;\\n        return {\\n            name: crime,\\n            profit: (stats.money / time) * 1000,\\n            hackGrowth: (stats.hacking_exp / time) * 1000,\\n            strGrowth: (stats.strength_exp / time) * 1000,\\n            defGrowth: (stats.defense_exp / time) * 1000,\\n            dexGrowth: (stats.dexterity_exp / time) * 1000,\\n            agiGrowth: (stats.agility_exp / time) * 1000,\\n            chaGrowth: (stats.charisma_exp / time) * 1000,\\n            successChance: ns.getCrimeChance(crime),\\n        };\\n    }\\n    function getAllCrimeData() {\\n        const result = [];\\n        for (const crime of crimes) {\\n            result.push(getCrimeData(crime));\\n        }\\n        return result;\\n    }\\n    function getCommitableCrimes() {\\n        return getAllCrimeData().filter((c) => \\n        // either there is 100% chance of success\\n        c.successChance >= 1 ||\\n            // Or the the attempt takes less than a minute and there is at least a 50%\\n            // success rate.\\n            (ns.getCrimeStats(c.name).time < 60000 && c.successChance > 0.5));\\n    }\\n    let deltaTimeStart = Date.now();\\n    let deltaCashStart = ns.getServerMoneyAvailable(\\\"home\\\");\\n    let deltaTime = 0;\\n    let deltaCash = 0;\\n    let cashPerMs = 0;\\n    function resetTimer() {\\n        deltaTime = Date.now() - deltaTimeStart;\\n        deltaCash = ns.getServerMoneyAvailable(\\\"home\\\") - deltaCashStart;\\n        if (cashPerMs !== 0) {\\n            cashPerMs = (cashPerMs + deltaCash / deltaTime) / 2;\\n        }\\n        else {\\n            cashPerMs = deltaCash / deltaTime;\\n        }\\n        deltaTimeStart = Date.now();\\n        deltaCashStart = ns.getServerMoneyAvailable(\\\"home\\\");\\n    }\\n    function crimeBreakdown(crimeString) {\\n        const crime = getCrimeData(crimeString);\\n        const combatGrowth = crime.strGrowth + crime.defGrowth + crime.dexGrowth + crime.agiGrowth;\\n        if (goal > 0) {\\n            let timeToGoal;\\n            if (Date.now() - deltaTimeStart >= deltaTimeSample) {\\n                resetTimer();\\n            }\\n            if (cashPerMs > 0) {\\n                timeToGoal = (goal - ns.getServerMoneyAvailable(\\\"home\\\")) / cashPerMs;\\n            }\\n            ns.print(`\\r\\nCommiting '${crime.name}' until you have ${ns.nFormat(goal, \\\"$0.00a\\\")}\\r\\n${ns.nFormat(ns.getServerMoneyAvailable(\\\"home\\\") / goal, \\\"0.00%\\\")} complete.\\r\\nEstimated Time to Completion: ${timeToGoal ? ns.tFormat(timeToGoal) : \\\"Calculating...\\\"}\\r\\n      `);\\n        }\\n    }\\n    function mostProfitableCrime() {\\n        const crimes = getCommitableCrimes();\\n        let best;\\n        for (const crime of crimes) {\\n            if (!best || best.profit < crime.profit) {\\n                best = crime;\\n            }\\n        }\\n        return best?.name;\\n    }\\n    const easiestCrime = \\\"Shoplift\\\";\\n    if (crimeName) {\\n        if (crimes.includes(crimeName)) {\\n            if (ns.isBusy())\\n                ns.stopAction();\\n            resetTimer();\\n            while (ns.getServerMoneyAvailable(\\\"home\\\") < goal || !goal) {\\n                ns.tail();\\n                ns.clearLog();\\n                crimeBreakdown(crimeName);\\n                if (!ns.isBusy())\\n                    ns.commitCrime(crimeName);\\n                await ns.sleep(ns.getCrimeStats(crimeName).time + 3000);\\n            }\\n        }\\n        else\\n            ns.tprint(`${crimeName} is not a crime! You can use autocomplete to enter a crime name.`);\\n    }\\n    else {\\n        const crime = mostProfitableCrime() || easiestCrime;\\n        if (ns.isBusy())\\n            ns.stopAction();\\n        resetTimer();\\n        while (ns.getServerMoneyAvailable(\\\"home\\\") < goal || !goal) {\\n            ns.clearLog();\\n            ns.tail();\\n            crimeBreakdown(crime);\\n            if (!ns.isBusy())\\n                ns.commitCrime(crime);\\n            await ns.sleep(ns.getCrimeStats(crime).time + 3000);\\n        }\\n    }\\n}\\nexport function autocomplete() {\\n    return [...crimes, \\\"--goal\\\"];\\n}\\n\",\"filename\":\"/jobs/start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":18.3,\"server\":\"home\",\"moduleSequenceNumber\":154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// The time to sample to find how long before we reach our goal.\\n// The larger this number the more time you need to wait for an estimate.\\n// But the more accurate that estimate will be.\\nconst deltaTimeSample = 1 * 60e3;\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    const { help, goal } = args;\\n    if (help) {\\n        ns.tprint(`\\r\\n      This script will generate money by working for Joe's Guns.\\r\\n      You will not be able to do anything else while this is happening.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n\\r\\n      You can also provide a 'goal' in cash and will stop working once that is achieved.\\r\\n      USAGE: run ${ns.getScriptName()} --goal=[CASH_AMOUNT]\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const company = \\\"Joe's Guns\\\";\\n    const position = \\\"part-time employee\\\";\\n    // apply to work at joe's guns if necessary.\\n    const jobs = Object.keys(ns.getPlayer().jobs);\\n    if (!jobs.includes(company))\\n        ns.applyToCompany(company, position);\\n    // work at joes guns on a loop.\\n    while (goal === 0 || ns.getServerMoneyAvailable(\\\"home\\\") < goal) {\\n        await ns.sleep(300);\\n        ns.tail();\\n        ns.clearLog();\\n        ns.enableLog(\\\"workForCompany\\\");\\n        ns.print(`Working at ${company} until we have ${ns.nFormat(goal, \\\"$0.00a\\\")}`);\\n        if (!ns.isBusy())\\n            ns.workForCompany(company, false);\\n    }\\n}\\nexport function autocomplete() {\\n    return [\\\"--goal=\\\"];\\n}\\n\",\"filename\":\"/jobs/joesGuns.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/jobs/joesGuns.js\",\"url\":\"blob:file:///4942e989-8691-4518-a397-2c965b789a7e\",\"moduleSequenceNumber\":6891}],\"dependents\":[],\"ramUsage\":8.8,\"server\":\"home\",\"moduleSequenceNumber\":155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"workForCompany\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nfunction getServers() {\\n    const data = localStorage.getItem(keys.serverList);\\n    if (!data)\\n        return [];\\n    return JSON.parse(data);\\n}\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script kills every script everywhere.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    for (const server of getServers()) {\\n        if (server.hostname === ns.getHostname())\\n            continue;\\n        ns.killall(server.hostname);\\n    }\\n    ns.killall(ns.getHostname());\\n}\\n\",\"filename\":\"/utils/killeverything.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///1c3329b5-c70b-4836-8d2f-9bfc42eb8651\",\"moduleSequenceNumber\":2055},{\"filename\":\"/utils/killeverything.js\",\"url\":\"blob:file:///c16e33a1-3b72-47fc-9ed7-b798c4c213db\",\"moduleSequenceNumber\":2058}],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":4763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script will have you study computer science with every free moment.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    const school = \\\"Rothman University\\\";\\n    const course = \\\"Study Computer Science\\\";\\n    while (true) {\\n        if (!ns.isBusy()) {\\n            ns.universityCourse(school, course, false);\\n        }\\n    }\\n}\\n\",\"filename\":\"/hacking/school.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"home\",\"moduleSequenceNumber\":4751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"universityCourse\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PortHackPrograms } from \\\"consts\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script will generate any possible hacking programs.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.sleep(300);\\n        let programCount = 0;\\n        for (const program of PortHackPrograms) {\\n            if (ns.fileExists(program)) {\\n                programCount++;\\n                continue;\\n            }\\n            if (!ns.isBusy())\\n                ns.createProgram(program, false);\\n        }\\n        if (programCount === PortHackPrograms.length)\\n            return;\\n    }\\n}\\n\",\"filename\":\"/hacking/programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.3,\"server\":\"home\",\"moduleSequenceNumber\":158,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys, CreateHackPrograms, PortHackPrograms } from \\\"consts\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script will generate any possible hacking programs.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    // simple trick to let others know when I need to program.\\n    localStorage.setItem(keys.isProgramming, \\\"\\\");\\n    while (true) {\\n        await ns.sleep(300);\\n        ns.clearLog();\\n        let count = 0;\\n        await CreateHackPrograms(ns);\\n        for (const program of PortHackPrograms) {\\n            if (ns.fileExists(program))\\n                count++;\\n        }\\n        if (count === PortHackPrograms.length)\\n            return;\\n    }\\n}\\n\",\"filename\":\"/hacking/program.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///b213c779-05ef-4a75-b48a-0506ddc696b4\",\"moduleSequenceNumber\":4769},{\"filename\":\"/hacking/program.js\",\"url\":\"blob:file:///bbcfc6a4-01d3-4861-8b75-c3e2cc46e389\",\"moduleSequenceNumber\":4904}],\"dependents\":[],\"ramUsage\":7.35,\"server\":\"home\",\"moduleSequenceNumber\":4904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PortHackPrograms } from \\\"consts\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script will purchase any possible hacking programs.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.sleep(300);\\n        if (!ns.getPlayer().tor) {\\n            if (!ns.purchaseTor())\\n                continue;\\n        }\\n        let programCount = 0;\\n        for (const program of PortHackPrograms) {\\n            if (ns.fileExists(program)) {\\n                programCount++;\\n                continue;\\n            }\\n            if (!ns.isBusy())\\n                ns.purchaseProgram(program);\\n        }\\n        if (programCount === PortHackPrograms.length)\\n            return;\\n    }\\n}\\n\",\"filename\":\"/buying/program.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.8,\"server\":\"home\",\"moduleSequenceNumber\":4709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { keys } from \\\"consts\\\";\\nconst FactionData = [\\n    {\\n        faction: \\\"CyberSec\\\",\\n        server: \\\"CSEC\\\",\\n    },\\n    {\\n        faction: \\\"NiteSec\\\",\\n        server: \\\"avmnite-02h\\\",\\n    },\\n    {\\n        faction: \\\"The Black Hand\\\",\\n        server: \\\"I.I.I.I\\\",\\n    },\\n    {\\n        faction: \\\"BitRunners\\\",\\n        server: \\\"run4theh111z\\\",\\n    },\\n    {\\n        faction: \\\"Fulcrum Secret Technologies\\\",\\n        server: \\\"fulcrumassets\\\",\\n    },\\n];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This script automatically tries to backdoor the main story line servers if you are not a member of their faction.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.sleep(300);\\n        ns.clearLog();\\n        const { factions } = ns.getPlayer();\\n        const hackingLevel = ns.getHackingLevel();\\n        const portHacks = getPortHacks();\\n        for (const fd of FactionData) {\\n            if (factions.includes(fd.faction))\\n                continue;\\n            if (ns.getServerRequiredHackingLevel(fd.server) > hackingLevel ||\\n                ns.getServerNumPortsRequired(fd.server) > portHacks) {\\n                // can't backdoor the server\\n                ns.print(`\\r\\n          cannot backdoor ${fd.server} because it needs ${ns.getServerNumPortsRequired(fd.server)} ports openned\\r\\n          and ${ns.getServerRequiredHackingLevel(fd.server)} hacking level.\\r\\n          `);\\n                continue;\\n            }\\n            // We can backdoor the server.\\n            // first make sure we have nuked everything!\\n            ns.run(\\\"/hacking/nukeAll.js\\\");\\n            ns.run(\\\"/cnct.js\\\", 1, fd.server);\\n            // make sure we are connected and nuked.\\n            while (ns.scriptRunning(\\\"/cnct.js\\\", ns.getHostname()) ||\\n                ns.scriptRunning(\\\"/hacking/nukeAll.js\\\", ns.getHostname()))\\n                await ns.sleep(1);\\n            await ns.installBackdoor();\\n            ns.run(\\\"/cnct.js\\\", 1, \\\"home\\\");\\n        }\\n    }\\n}\\nfunction getPortHacks() {\\n    const data = localStorage.getItem(keys.hackablePorts);\\n    if (!data)\\n        return 0;\\n    return JSON.parse(data);\\n}\\n\",\"filename\":\"/story/backdoors.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"consts.js\",\"url\":\"blob:file:///98291295-d1b5-479d-bbd0-596835a45414\",\"moduleSequenceNumber\":4769},{\"filename\":\"/story/backdoors.js\",\"url\":\"blob:file:///a8e373e8-e878-421e-bc55-98b465092392\",\"moduleSequenceNumber\":4906}],\"dependents\":[],\"ramUsage\":6.5,\"server\":\"home\",\"moduleSequenceNumber\":4906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// The time to sample to find how long before we reach our goal.\\n// The larger this number the more time you need to wait for an estimate.\\n// But the more accurate that estimate will be.\\nconst deltaTimeSample = 1 * 60e3;\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    const { help, goal } = args;\\n    if (help) {\\n        ns.tprint(`\\r\\n      This script will generate money by working for MegaCorp.\\r\\n      You will not be able to do anything else while this is happening.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n\\r\\n      You can also provide a 'goal' in cash and will stop working once that is achieved.\\r\\n      USAGE: run ${ns.getScriptName()} --goal=[CASH_AMOUNT]\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const company = \\\"MegaCorp\\\";\\n    const position = \\\"Business\\\";\\n    // apply to work at joe's guns if necessary.\\n    const jobs = Object.keys(ns.getPlayer().jobs);\\n    if (!jobs.includes(company))\\n        ns.applyToCompany(company, position);\\n    // work at joes guns on a loop.\\n    while (goal === 0 || ns.getServerMoneyAvailable(\\\"home\\\") < goal) {\\n        await ns.sleep(300);\\n        ns.tail();\\n        ns.clearLog();\\n        ns.enableLog(\\\"workForCompany\\\");\\n        ns.print(`Working at ${company} until we have ${ns.nFormat(goal, \\\"$0.00a\\\")}`);\\n        if (!ns.isBusy())\\n            ns.workForCompany(company, false);\\n    }\\n}\\nexport function autocomplete() {\\n    return [\\\"--goal=\\\"];\\n}\\n\",\"filename\":\"/jobs/megaCorp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.8,\"server\":\"home\",\"moduleSequenceNumber\":162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"workForCompany\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// The time to sample to find how long before we reach our goal.\\n// The larger this number the more time you need to wait for an estimate.\\n// But the more accurate that estimate will be.\\nconst deltaTimeSample = 1 * 60e3;\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"company\\\", \\\"MegaCorp\\\"],\\n        [\\\"position\\\", \\\"Business\\\"],\\n        [\\\"goal\\\", 0],\\n    ]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    const { help, goal } = args;\\n    if (help) {\\n        ns.tprint(`\\r\\n      This script will generate money by working for the provided company (default MegaCorp)\\r\\n      doing the given job (default Business) until you reach the given goal (default 0=indefinite).\\r\\n      You will not be able to do anything else while this is happening.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n\\r\\n      You can also provide a 'goal' in cash and will stop working once that is achieved.\\r\\n      USAGE: run ${ns.getScriptName()} [--goal=CASH_AMOUNT] [--company=\\\"COMPANY_NAME\\\"] [--position=\\\"POSITION_NAME\\\"]\\r\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const company = args.company.trim('\\\"');\\n    const position = args.position.trim('\\\"');\\n    // apply to work or for promotion.\\n    ns.applyToCompany(company, position);\\n    // work at joes guns on a loop.\\n    while (goal === 0 || ns.getServerMoneyAvailable(\\\"home\\\") < goal) {\\n        await ns.sleep(300);\\n        ns.tail();\\n        ns.clearLog();\\n        ns.enableLog(\\\"workForCompany\\\");\\n        ns.print(`Working at ${company} until we have ${ns.nFormat(goal, \\\"$0.00a\\\")}`);\\n        if (!ns.isBusy())\\n            ns.workForCompany(company, false);\\n    }\\n}\\nexport function autocomplete() {\\n    return ['--goal=\\\"', '--company=\\\"', '--position=\\\"'];\\n}\\n\",\"filename\":\"/jobs/work.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/jobs/work.js\",\"url\":\"blob:file:///c95e37bf-2a35-4386-9e96-c555736f5897\",\"moduleSequenceNumber\":6728}],\"dependents\":[],\"ramUsage\":8.3,\"server\":\"home\",\"moduleSequenceNumber\":4753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"workForCompany\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const gyms = [\\n    {\\n        gym: \\\"Powerhouse Gym\\\",\\n        server: \\\"powerhouse-fitness\\\",\\n    },\\n    {\\n        gym: \\\"Iron Gym\\\",\\n        server: \\\"iron-gym\\\",\\n    },\\n];\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        [\\\"help\\\", false],\\n        [\\\"goal\\\", 0],\\n        [\\\"stat\\\", \\\"str\\\"],\\n    ]);\\n    const { goal, stat } = args;\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\r\\n      This scripts works out at the most efficient gym.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()}\\r\\n      `);\\n        return;\\n    }\\n    function statCheck(goal) {\\n        if (stat.toLowerCase().startsWith(\\\"str\\\"))\\n            return ns.getPlayer().strength < goal;\\n        if (stat.toLowerCase().startsWith(\\\"def\\\"))\\n            return ns.getPlayer().defense < goal;\\n        if (stat.toLowerCase().startsWith(\\\"dex\\\"))\\n            return ns.getPlayer().dexterity < goal;\\n        if (stat.toLowerCase().startsWith(\\\"agi\\\"))\\n            return ns.getPlayer().agility < goal;\\n        return true;\\n    }\\n    while (goal === 0 || statCheck(goal)) {\\n        await ns.sleep(300);\\n        for (const g of gyms) {\\n            const { server, gym } = g;\\n            const serverData = ns.getServer(server);\\n            if (!serverData.backdoorInstalled) {\\n                // the backdoor is not installed.\\n                // TODO: determine if the backdoor can be installed.\\n                // if not - continue;\\n                // if so do it and work out in that gym.\\n            }\\n        }\\n    }\\n}\\nexport function autocomplete() {\\n    return [\\n        \\\"--help\\\",\\n        \\\"--goal=\\\",\\n        \\\"--stat=str\\\",\\n        \\\"--stat=def\\\",\\n        \\\"--stat=dex\\\",\\n        \\\"--stat=agi\\\",\\n    ];\\n}\\n\",\"filename\":\"/gym/workout.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"home\",\"moduleSequenceNumber\":4741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"53.3.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"ecorp\",\"moduleSequenceNumber\":165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":45204073083,\"moneyMax\":169515274061.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1179,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"46.7.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"megacorp\",\"moduleSequenceNumber\":166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":32587341963,\"moneyMax\":122202532361.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1206,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"20.7.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":12192518893.5,\"moneyMax\":45721945850.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":997,\"serverGrowth\":63}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"73.5.9.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"blade\",\"moduleSequenceNumber\":168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":24308751879.75,\"moneyMax\":91157819549.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1153,\"serverGrowth\":59}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"34.9.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nwo\",\"moduleSequenceNumber\":169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":26485203612,\"moneyMax\":99319513545,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1178,\"serverGrowth\":69}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"59.3.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":13076414715.75,\"moneyMax\":49036555184.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":980,\"serverGrowth\":57}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"56.3.7.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnitek\",\"moduleSequenceNumber\":171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":13789348972.5,\"moneyMax\":51710058646.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":989,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"34.5.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"4sigma\",\"moduleSequenceNumber\":172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":15847819177.5,\"moneyMax\":59429321915.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":902,\"serverGrowth\":82}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"80.0.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"blade\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":19388939128.5,\"moneyMax\":72708521731.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1167,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"62.7.9.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1179277123.5,\"moneyMax\":4422289213.125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1047,\"serverGrowth\":94}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"95.8.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1391,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"86.6.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"stormtech\",\"moduleSequenceNumber\":176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":892805462.25,\"moneyMax\":3348020483.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":963,\"serverGrowth\":77}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"82.8.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"defcomm\",\"moduleSequenceNumber\":177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":641506605,\"moneyMax\":2405649768.75,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1045,\"serverGrowth\":47}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"71.7.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"infocomm\",\"moduleSequenceNumber\":178,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":511758194.25,\"moneyMax\":1919093228.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":898,\"serverGrowth\":60}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"12.9.3.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"helios\",\"moduleSequenceNumber\":179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":438443426.25,\"moneyMax\":1644162848.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":75}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"7.9.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"vitalife\",\"moduleSequenceNumber\":180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":550795791.75,\"moneyMax\":2065484219.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":891,\"serverGrowth\":63}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"71.0.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"icarus\",\"moduleSequenceNumber\":181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":737228535,\"moneyMax\":2764607006.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":89}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"0.2.8.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":830473006.5,\"moneyMax\":3114273774.375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":877,\"serverGrowth\":88}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"76.7.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\",\"stormtech\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":598075236.75,\"moneyMax\":2242782137.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":863,\"serverGrowth\":73}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"92.4.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"microdyne\",\"moduleSequenceNumber\":184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":409310751.75,\"moneyMax\":1534915319.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":79}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"96.4.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":613113773.25,\"moneyMax\":2299176649.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":80}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"47.0.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":604694381.25,\"moneyMax\":2267603929.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":873,\"serverGrowth\":77}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"82.4.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":863990415.75,\"moneyMax\":3239964059.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":886,\"serverGrowth\":62}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"67.6.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnia\",\"moduleSequenceNumber\":188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aerocorp\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":747445688.25,\"moneyMax\":2802921330.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":896,\"serverGrowth\":67}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"96.0.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-def\",\"moduleSequenceNumber\":189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":818520452.25,\"moneyMax\":3069451695.9375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":796,\"serverGrowth\":70}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"48.0.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":728099996.25,\"moneyMax\":2730374985.9375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":828,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"37.2.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"solaris\",\"moduleSequenceNumber\":191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":664012776,\"moneyMax\":2490047910,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":845,\"serverGrowth\":72}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"19.6.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"deltaone\",\"moduleSequenceNumber\":192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":980549342.25,\"moneyMax\":3677060033.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":889,\"serverGrowth\":64}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"94.4.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1128816117,\"moneyMax\":4233060438.75,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":847,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"11.9.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nova-med\",\"moduleSequenceNumber\":194,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":851821740.75,\"moneyMax\":3194331527.8125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":77}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"77.5.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1123412989.5,\"moneyMax\":4212798710.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":846,\"serverGrowth\":76}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"38.5.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"unitalife\",\"moduleSequenceNumber\":196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aerocorp\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":764138999.25,\"moneyMax\":2865521247.1875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":793,\"serverGrowth\":78}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"61.7.1.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":568471346.25,\"moneyMax\":2131767548.4375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":692,\"serverGrowth\":56}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"49.8.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":59,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2490.00999999999,\"pid\":2608,\"ramUsage\":4,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///42f4dac1-c020-4346-9649-45030888df59\",\"moduleSequenceNumber\":918}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[7396460,110,110,210]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2408.9630795999974,\"onlineMoneyMade\":7396460,\"onlineRunningTime\":2456.6100000000133,\"pid\":2637,\"ramUsage\":5.5,\"server\":\"rho-construction\",\"threads\":10,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///e7a90802-e782-4696-acc6-eb9b1fc37606\",\"moduleSequenceNumber\":940}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///42f4dac1-c020-4346-9649-45030888df59\",\"moduleSequenceNumber\":918}],\"dependents\":[],\"ramUsage\":4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///e7a90802-e782-4696-acc6-eb9b1fc37606\",\"moduleSequenceNumber\":940}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"rho-construction\",\"moduleSequenceNumber\":940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}}],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":425202072.75,\"moneyMax\":1594507772.8125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":489,\"serverGrowth\":41}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"51.1.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":561175843.5,\"moneyMax\":2104409413.125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":537,\"serverGrowth\":59}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"73.0.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":216533431.5,\"moneyMax\":812000368.125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":410,\"serverGrowth\":35}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"86.0.8.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":59,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2489.6099999999906,\"pid\":2614,\"ramUsage\":4,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///f67d61f5-b275-4972-b842-9908f3f6123f\",\"moduleSequenceNumber\":924}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[3253370,60,100,150]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2315.5924176000003,\"onlineMoneyMade\":3253370,\"onlineRunningTime\":2438.410000000027,\"pid\":2645,\"ramUsage\":5.5,\"server\":\"rothman-uni\",\"threads\":10,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///03263cc1-2b8e-4868-abcb-885e7d95a554\",\"moduleSequenceNumber\":1074}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///f67d61f5-b275-4972-b842-9908f3f6123f\",\"moduleSequenceNumber\":924}],\"dependents\":[],\"ramUsage\":4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///03263cc1-2b8e-4868-abcb-885e7d95a554\",\"moduleSequenceNumber\":1074}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":47.9,\"minDifficulty\":16,\"moneyAvailable\":133778397,\"moneyMax\":501668988.75,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":375,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"37.2.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":688222799.25,\"moneyMax\":2580835497.1875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":738,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"63.1.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":59,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2490.00999999999,\"pid\":2607,\"ramUsage\":4,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///b92f66ae-bd91-47a8-a1d8-1372ffb14980\",\"moduleSequenceNumber\":917}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,0,20]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":242.76372120000002,\"onlineMoneyMade\":0,\"onlineRunningTime\":2459.610000000012,\"pid\":2636,\"ramUsage\":5.5,\"server\":\"summit-uni\",\"threads\":10,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///31520bc3-7a01-42c8-95fc-9fe50cf398e7\",\"moduleSequenceNumber\":939}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///b92f66ae-bd91-47a8-a1d8-1372ffb14980\",\"moduleSequenceNumber\":917}],\"dependents\":[],\"ramUsage\":4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///31520bc3-7a01-42c8-95fc-9fe50cf398e7\",\"moduleSequenceNumber\":939}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"summit-uni\",\"moduleSequenceNumber\":939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}}],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":169263870.75,\"moneyMax\":634739515.3125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":432,\"serverGrowth\":54}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"57.3.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"syscore\",\"moduleSequenceNumber\":207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":394860282,\"moneyMax\":1480726057.5,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":635,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"65.5.6.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":125,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2489.8099999999904,\"pid\":2612,\"ramUsage\":4,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///d34a5fdd-6e43-4fc9-ac20-95f7e34bb5e6\",\"moduleSequenceNumber\":922}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4145680,396,748,1144]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10681.603732799978,\"onlineMoneyMade\":4145680,\"onlineRunningTime\":2444.6100000000224,\"pid\":2643,\"ramUsage\":5.5,\"server\":\"catalyst\",\"threads\":22,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///2801d562-6048-40f3-952f-33d7cf61b2f1\",\"moduleSequenceNumber\":1072}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///d34a5fdd-6e43-4fc9-ac20-95f7e34bb5e6\",\"moduleSequenceNumber\":922}],\"dependents\":[],\"ramUsage\":4,\"server\":\"catalyst\",\"moduleSequenceNumber\":922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///2801d562-6048-40f3-952f-33d7cf61b2f1\",\"moduleSequenceNumber\":1072}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"catalyst\",\"moduleSequenceNumber\":1072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":307351385.25,\"moneyMax\":1152567694.6875,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":422,\"serverGrowth\":28}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"8.8.3.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":59,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2490.00999999999,\"pid\":2602,\"ramUsage\":4,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///4723b183-e123-452a-a7b0-98425d9eb55a\",\"moduleSequenceNumber\":912}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,0,30]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":252.1007874,\"onlineMoneyMade\":0,\"onlineRunningTime\":2474.610000000001,\"pid\":2627,\"ramUsage\":5.5,\"server\":\"the-hub\",\"threads\":10,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///389ab79c-dcc4-49e7-8a50-2daa78164209\",\"moduleSequenceNumber\":934}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///389ab79c-dcc4-49e7-8a50-2daa78164209\",\"moduleSequenceNumber\":934}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"the-hub\",\"moduleSequenceNumber\":934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///4723b183-e123-452a-a7b0-98425d9eb55a\",\"moduleSequenceNumber\":912}],\"dependents\":[],\"ramUsage\":4,\"server\":\"the-hub\",\"moduleSequenceNumber\":912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":26.649999999999906,\"minDifficulty\":12,\"moneyAvailable\":141294766.5,\"moneyMax\":529855374.375,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":299,\"serverGrowth\":52}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"2.2.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"comptek\",\"moduleSequenceNumber\":212,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":38.05000000000008,\"minDifficulty\":18,\"moneyAvailable\":173208372,\"moneyMax\":649531395,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":352,\"serverGrowth\":57}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"47.4.5.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":125,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2490.00999999999,\"pid\":2603,\"ramUsage\":4,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///d4fe955e-2545-42cc-923b-13e5dd39fc10\",\"moduleSequenceNumber\":913}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,0,22]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":336.88134849599993,\"onlineMoneyMade\":0,\"onlineRunningTime\":2471.6100000000038,\"pid\":2630,\"ramUsage\":5.5,\"server\":\"netlink\",\"threads\":22,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///e1b80c54-4a68-4d73-8145-aa6430cdc907\",\"moduleSequenceNumber\":935}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///d4fe955e-2545-42cc-923b-13e5dd39fc10\",\"moduleSequenceNumber\":913}],\"dependents\":[],\"ramUsage\":4,\"server\":\"netlink\",\"moduleSequenceNumber\":913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///e1b80c54-4a68-4d73-8145-aa6430cdc907\",\"moduleSequenceNumber\":935}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"netlink\",\"moduleSequenceNumber\":935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":70.9,\"minDifficulty\":24,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":378,\"serverGrowth\":54}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"0.3.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":26.250000000000114,\"minDifficulty\":16,\"moneyAvailable\":55663770,\"moneyMax\":208739137.5,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":253,\"serverGrowth\":56}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"77.5.9.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2490.00999999999,\"pid\":2596,\"ramUsage\":4,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///a839e337-95b9-4646-90e2-b9c5cee2f219\",\"moduleSequenceNumber\":906}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///a839e337-95b9-4646-90e2-b9c5cee2f219\",\"moduleSequenceNumber\":906}],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.004,\"minDifficulty\":1,\"moneyAvailable\":196329,\"moneyMax\":196875,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"26.8.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2490.00999999999,\"pid\":2599,\"ramUsage\":4,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///c9d45e5b-47ba-4d30-b490-a364a4ba82d3\",\"moduleSequenceNumber\":909}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[61256,8,160,166]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1247.4320443200002,\"onlineMoneyMade\":61256,\"onlineRunningTime\":2483.6099999999947,\"pid\":2624,\"ramUsage\":5.5,\"server\":\"foodnstuff\",\"threads\":2,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///f588393e-eacc-46fd-81d5-a4aaaf34157f\",\"moduleSequenceNumber\":931}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///f588393e-eacc-46fd-81d5-a4aaaf34157f\",\"moduleSequenceNumber\":931}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///c9d45e5b-47ba-4d30-b490-a364a4ba82d3\",\"moduleSequenceNumber\":909}],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.008,\"minDifficulty\":3,\"moneyAvailable\":5623492.700613279,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"61.7.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2490.00999999999,\"pid\":2604,\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///f4c7c62c-09be-4d8d-bca1-a67edc3bced6\",\"moduleSequenceNumber\":914}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[244216,28,136,162]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1217.5534324799999,\"onlineMoneyMade\":244216,\"onlineRunningTime\":2468.6100000000056,\"pid\":2631,\"ramUsage\":5.5,\"server\":\"sigma-cosmetics\",\"threads\":2,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///1de2a656-2a4f-46a4-a020-97259dc4661f\",\"moduleSequenceNumber\":936}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///1de2a656-2a4f-46a4-a020-97259dc4661f\",\"moduleSequenceNumber\":936}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///f4c7c62c-09be-4d8d-bca1-a67edc3bced6\",\"moduleSequenceNumber\":914}],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.004,\"minDifficulty\":3,\"moneyAvailable\":6468750,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"4.1.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2489.6099999999906,\"pid\":2615,\"ramUsage\":4,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///08f47cc2-aa36-40c1-8379-a23df9a6c762\",\"moduleSequenceNumber\":925}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[26208,96,96,192]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":788.7953525759967,\"onlineMoneyMade\":26208,\"onlineRunningTime\":2435.010000000029,\"pid\":2648,\"ramUsage\":5.5,\"server\":\"joesguns\",\"threads\":2,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///32e7b2ad-8cde-48f4-8df8-bd3b032cef01\",\"moduleSequenceNumber\":1075}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///32e7b2ad-8cde-48f4-8df8-bd3b032cef01\",\"moduleSequenceNumber\":1075}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"joesguns\",\"moduleSequenceNumber\":1075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///08f47cc2-aa36-40c1-8379-a23df9a6c762\",\"moduleSequenceNumber\":925}],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.02,\"minDifficulty\":5,\"moneyAvailable\":7014042.883814202,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"21.1.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2490.00999999999,\"pid\":2597,\"ramUsage\":4,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///b2faf804-2a3d-40f9-a4f6-51ae54574e80\",\"moduleSequenceNumber\":907}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,45,50]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":709.6170312,\"onlineMoneyMade\":0,\"onlineRunningTime\":2489.6099999999906,\"pid\":2620,\"ramUsage\":5.5,\"server\":\"zer0\",\"threads\":5,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///58ec0409-a599-44b7-a549-b6f6ddc3604b\",\"moduleSequenceNumber\":904}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///58ec0409-a599-44b7-a549-b6f6ddc3604b\",\"moduleSequenceNumber\":904}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"zer0\",\"moduleSequenceNumber\":904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///b2faf804-2a3d-40f9-a4f6-51ae54574e80\",\"moduleSequenceNumber\":907}],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.004,\"minDifficulty\":8,\"moneyAvailable\":21048898,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"94.0.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2490.00999999999,\"pid\":2605,\"ramUsage\":4,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///805867d9-830f-4cae-8db6-f53d150eb01b\",\"moduleSequenceNumber\":915}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[327626,34,72,108]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1198.8793000799983,\"onlineMoneyMade\":327626,\"onlineRunningTime\":2465.6100000000074,\"pid\":2632,\"ramUsage\":5.5,\"server\":\"nectar-net\",\"threads\":2,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///6ad4648c-b279-4413-bbc9-299b012c3f85\",\"moduleSequenceNumber\":937}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///6ad4648c-b279-4413-bbc9-299b012c3f85\",\"moduleSequenceNumber\":937}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"nectar-net\",\"moduleSequenceNumber\":937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///805867d9-830f-4cae-8db6-f53d150eb01b\",\"moduleSequenceNumber\":915}],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":7715101,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"95.1.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2490.00999999999,\"pid\":2606,\"ramUsage\":4,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///609ff6db-769e-44e2-824e-b1179363df09\",\"moduleSequenceNumber\":916}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[721290,45,105,150]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1960.783902000002,\"onlineMoneyMade\":721290,\"onlineRunningTime\":2462.6100000000097,\"pid\":2633,\"ramUsage\":5.5,\"server\":\"neo-net\",\"threads\":5,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///940b4e00-70bd-4931-832f-75aba6857d23\",\"moduleSequenceNumber\":938}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///940b4e00-70bd-4931-832f-75aba6857d23\",\"moduleSequenceNumber\":938}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"neo-net\",\"moduleSequenceNumber\":938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///609ff6db-769e-44e2-824e-b1179363df09\",\"moduleSequenceNumber\":916}],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":14054063.17599149,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"64.2.8.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":59,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2490.00999999999,\"pid\":2598,\"ramUsage\":4,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///42c4ebb1-50af-45fd-ad1b-26f53567fba0\",\"moduleSequenceNumber\":908}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,0,40]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":433.23987167999996,\"onlineMoneyMade\":0,\"onlineRunningTime\":2486.6099999999924,\"pid\":2621,\"ramUsage\":5.5,\"server\":\"silver-helix\",\"threads\":10,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///d7de45c9-253a-4f07-8193-30ef31b26f7d\",\"moduleSequenceNumber\":930}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///d7de45c9-253a-4f07-8193-30ef31b26f7d\",\"moduleSequenceNumber\":930}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"silver-helix\",\"moduleSequenceNumber\":930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///42c4ebb1-50af-45fd-ad1b-26f53567fba0\",\"moduleSequenceNumber\":908}],\"dependents\":[],\"ramUsage\":4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":56942945.8079022,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"49.9.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2489.6099999999906,\"pid\":2616,\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///c135b4d6-833f-4920-a436-9a173b707733\",\"moduleSequenceNumber\":926}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[358672,16,30,44]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":588.2351706000004,\"onlineMoneyMade\":358672,\"onlineRunningTime\":2432.010000000031,\"pid\":2649,\"ramUsage\":5.5,\"server\":\"hong-fang-tea\",\"threads\":2,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///427ed62d-c3b5-41f7-93ff-404632aeea49\",\"moduleSequenceNumber\":1076}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///427ed62d-c3b5-41f7-93ff-404632aeea49\",\"moduleSequenceNumber\":1076}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///c135b4d6-833f-4920-a436-9a173b707733\",\"moduleSequenceNumber\":926}],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.044,\"minDifficulty\":5,\"moneyAvailable\":8207138,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"56.8.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2489.6099999999906,\"pid\":2617,\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///c381b53c-23bb-4cb3-94d9-ba7483538479\",\"moduleSequenceNumber\":927}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,18,20]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":283.84681248000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":2429.0100000000334,\"pid\":2650,\"ramUsage\":5.5,\"server\":\"harakiri-sushi\",\"threads\":2,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///5254022e-27e7-47da-bc86-72051b5b72d5\",\"moduleSequenceNumber\":1077}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///5254022e-27e7-47da-bc86-72051b5b72d5\",\"moduleSequenceNumber\":1077}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///c381b53c-23bb-4cb3-94d9-ba7483538479\",\"moduleSequenceNumber\":927}],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":10950734,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"50.7.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2489.8099999999904,\"pid\":2611,\"ramUsage\":4,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///ad23a950-8f0a-4d84-90d6-6dfa4757a38d\",\"moduleSequenceNumber\":921}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1008935,110,250,360]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3361.3438319999927,\"onlineMoneyMade\":1008935,\"onlineRunningTime\":2447.6100000000206,\"pid\":2642,\"ramUsage\":5.5,\"server\":\"phantasy\",\"threads\":5,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///3134059e-bcf9-489c-b7a7-2a5813144433\",\"moduleSequenceNumber\":1071}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///3134059e-bcf9-489c-b7a7-2a5813144433\",\"moduleSequenceNumber\":1071}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"phantasy\",\"moduleSequenceNumber\":1071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///ad23a950-8f0a-4d84-90d6-6dfa4757a38d\",\"moduleSequenceNumber\":921}],\"dependents\":[],\"ramUsage\":4,\"server\":\"phantasy\",\"moduleSequenceNumber\":921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nectar-net\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.02,\"minDifficulty\":7,\"moneyAvailable\":66827140,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"69.6.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2490.00999999999,\"pid\":2600,\"ramUsage\":4,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///d2d78af0-1da3-47a5-a1d1-c31a85005b1a\",\"moduleSequenceNumber\":910}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[2280975,75,85,160]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1493.9305920000004,\"onlineMoneyMade\":2280975,\"onlineRunningTime\":2480.609999999997,\"pid\":2625,\"ramUsage\":5.5,\"server\":\"max-hardware\",\"threads\":5,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///29e8abb2-9d7b-49b8-86f1-843853a65ba0\",\"moduleSequenceNumber\":932}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///29e8abb2-9d7b-49b8-86f1-843853a65ba0\",\"moduleSequenceNumber\":932}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"max-hardware\",\"moduleSequenceNumber\":932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///d2d78af0-1da3-47a5-a1d1-c31a85005b1a\",\"moduleSequenceNumber\":910}],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":910,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.02,\"minDifficulty\":5,\"moneyAvailable\":28125000,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"45.2.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2490.00999999999,\"pid\":2601,\"ramUsage\":4,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///c8c140d8-c92f-47bb-85f0-5e024ea92d6b\",\"moduleSequenceNumber\":911}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[2959785,25,25,50]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":653.5946340000002,\"onlineMoneyMade\":2959785,\"onlineRunningTime\":2477.6099999999988,\"pid\":2626,\"ramUsage\":5.5,\"server\":\"omega-net\",\"threads\":5,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///3b9b7611-41e2-4669-b0e4-f28b6067d096\",\"moduleSequenceNumber\":933}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///3b9b7611-41e2-4669-b0e4-f28b6067d096\",\"moduleSequenceNumber\":933}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"omega-net\",\"moduleSequenceNumber\":933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///c8c140d8-c92f-47bb-85f0-5e024ea92d6b\",\"moduleSequenceNumber\":911}],\"dependents\":[],\"ramUsage\":4,\"server\":\"omega-net\",\"moduleSequenceNumber\":911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.01,\"minDifficulty\":8,\"moneyAvailable\":190941538.4375,\"moneyMax\":191534723.4375,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":219,\"serverGrowth\":33}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"27.8.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":36.849999999999916,\"minDifficulty\":15,\"moneyAvailable\":34471713,\"moneyMax\":129268923.75,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":253,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"32.3.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2489.6099999999906,\"pid\":2619,\"ramUsage\":4,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///5ebc914a-2987-4b1d-8565-61d7b9db15d8\",\"moduleSequenceNumber\":929}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,0,20]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":216.61993583999998,\"onlineMoneyMade\":0,\"onlineRunningTime\":2426.0100000000357,\"pid\":2651,\"ramUsage\":5.5,\"server\":\"iron-gym\",\"threads\":5,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///2a2b375a-082c-42af-8f93-0ca692da9371\",\"moduleSequenceNumber\":1078}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///2a2b375a-082c-42af-8f93-0ca692da9371\",\"moduleSequenceNumber\":1078}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///5ebc914a-2987-4b1d-8565-61d7b9db15d8\",\"moduleSequenceNumber\":929}],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.02,\"minDifficulty\":10,\"moneyAvailable\":55707370,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"41.0.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2489.8099999999904,\"pid\":2610,\"ramUsage\":4,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///da7bf781-603f-494b-9563-1126cdfa75a3\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,0,2]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21.661993583999998,\"onlineMoneyMade\":0,\"onlineRunningTime\":2450.610000000018,\"pid\":2639,\"ramUsage\":5.5,\"server\":\"millenium-fitness\",\"threads\":2,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///69dbea26-34c1-4a86-9ed6-168e1f272eef\",\"moduleSequenceNumber\":942}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///da7bf781-603f-494b-9563-1126cdfa75a3\",\"moduleSequenceNumber\":920}],\"dependents\":[],\"ramUsage\":4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///69dbea26-34c1-4a86-9ed6-168e1f272eef\",\"moduleSequenceNumber\":942}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":525,\"serverGrowth\":30}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"43.0.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1050,\"serverGrowth\":60}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"21.5.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":691,\"serverGrowth\":46}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"60.0.6.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":518,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"25.1.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2489.8099999999904,\"pid\":2609,\"ramUsage\":4,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///299df8a9-839e-496d-8530-45def5a90b41\",\"moduleSequenceNumber\":919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,0,15]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":151.26047244,\"onlineMoneyMade\":0,\"onlineRunningTime\":2453.610000000016,\"pid\":2638,\"ramUsage\":5.5,\"server\":\"I.I.I.I\",\"threads\":5,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///6d1b7ce5-4745-4bf8-acae-f341c4005186\",\"moduleSequenceNumber\":941}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///299df8a9-839e-496d-8530-45def5a90b41\",\"moduleSequenceNumber\":919}],\"dependents\":[],\"ramUsage\":4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///6d1b7ce5-4745-4bf8-acae-f341c4005186\",\"moduleSequenceNumber\":941}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}}],\"serversOnNetwork\":[\"comptek\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":346,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"71.9.9.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":125,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2489.8099999999904,\"pid\":2613,\"ramUsage\":4,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///7ac48815-87fa-4db3-b28d-ec72a86131ef\",\"moduleSequenceNumber\":923}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[7180734,528,528,1056]},\"filename\":\"/remote/hackLoop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9859.941907199986,\"onlineMoneyMade\":7180734,\"onlineRunningTime\":2441.410000000025,\"pid\":2644,\"ramUsage\":5.5,\"server\":\"avmnite-02h\",\"threads\":22,\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///34f72f85-1d7e-4267-9c32-66192b178e6c\",\"moduleSequenceNumber\":1073}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///34f72f85-1d7e-4267-9c32-66192b178e6c\",\"moduleSequenceNumber\":1073}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///7ac48815-87fa-4db3-b28d-ec72a86131ef\",\"moduleSequenceNumber\":923}],\"dependents\":[],\"ramUsage\":4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":217,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"44.8.2.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\".\",\"moduleSequenceNumber\":253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":549,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"71.7.8.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/remote/share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2489.6099999999906,\"pid\":2618,\"ramUsage\":4,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///a2868206-0f37-4d90-bc04-91ff1d088ef7\",\"moduleSequenceNumber\":928}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\r\\n      Runs the basic hack loop to hack the provided target using the maximum amount of threads required.\\r\\n\\r\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\r\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER.\\r\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n            await ns.weaken(target, {\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\n            });\\n        }\\n        else if (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n            await ns.grow(target, {\\n                threads: Math.min(growThreads(ns, target), this.threads),\\n            });\\n        }\\n        else {\\n            await ns.hack(target, {\\n                threads: Math.min(hackThreads(ns, target), this.threads),\\n            });\\n        }\\n    }\\n}\\nexport function hackThreads(ns, server) {\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\n}\\nexport function growThreads(ns, s) {\\n    // get the percentage of the server that is full\\n    return ns.growthAnalyze(s, 10);\\n}\\nexport function weakenThreads(ns, server) {\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\n        ns.getServerMinSecurityLevel(server)) /\\n        ns.weakenAnalyze(1)), 1);\\n}\\n\",\"filename\":\"/remote/hackLoop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/remote/hackLoop.js\",\"url\":\"blob:file:///b25d472b-94cc-4d69-b6c6-17c12aad1c66\",\"moduleSequenceNumber\":538}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"CSEC\",\"moduleSequenceNumber\":254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/remote/share.js\",\"url\":\"blob:file:///a2868206-0f37-4d90-bc04-91ff1d088ef7\",\"moduleSequenceNumber\":928}],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":59,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"73.0.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will share computer resources with your faction until manually stopped.\\\");\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/remote/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"66.8.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":9000,\"serverGrowth\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":40720.18499375526,\"favor\":0.008,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":28165.692066267053,\"favor\":0.008,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":148544.20608290733,\"favor\":151.5777,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":15299.93446134672}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":128.0563,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":101761.229856733}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":152.2518,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":84517.18305268932}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":37.5798,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":83.1646,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":2971.6189328586215}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":7.5862,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":138.715,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":90504.95047904892}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"track\":\"run fl1ght.exe\",\"darkweb\":\"home;connect darkweb\",\"killeverything\":\"killall;run advanced/killall.js\",\"listall\":\"run advanced/listall.js\",\"liquidate\":\"run stocks/liquidate.js\",\"nukeall\":\"run advanced/nukeall.js\",\"cnct\":\"run cnct.js\",\"scn\":\"cls;scan-analyze 10\",\"hackall\":\"killall; run hackGrind.js\",\"expand\":\"killall; run expand.js\",\"repGrind\":\"killall; run repGrind.js\",\"as\":\"run lib/analyze_server.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":24,\"MonacoVim\":true,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Fira Code, Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-95,\"y\":101,\"opened\":true}}","VersionSave":"11","AllGangsSave":"","LastExportBonus":"1647358335847","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}