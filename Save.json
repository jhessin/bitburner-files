{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":883,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":174,\"intelligence\":0,\"hacking_chance_mult\":1.5188481000000003,\"hacking_speed_mult\":1.4102702500825153,\"hacking_money_mult\":1.800325,\"hacking_grow_mult\":1.2524,\"hacking_exp\":1262657596.9241061,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":18903.425678382293,\"intelligence_exp\":0,\"hacking_mult\":1.8783626486587208,\"strength_mult\":1.2524,\"defense_mult\":1.2524,\"dexterity_mult\":1.7358264,\"agility_mult\":1.31502,\"charisma_mult\":1.50288,\"hacking_exp_mult\":2.678235483,\"strength_exp_mult\":1.5842860000000003,\"defense_exp_mult\":1.5842860000000003,\"dexterity_exp_mult\":1.5842860000000003,\"agility_exp_mult\":1.5842860000000003,\"charisma_exp_mult\":1.5842860000000003,\"company_rep_mult\":1.2524,\"faction_rep_mult\":1.2524,\"money\":28042614538297.387,\"city\":\"Sector-12\",\"location\":\"MegaCorp\",\"jobs\":{\"Clarke Incorporated\":\"IT Intern\",\"MegaCorp\":\"IT Analyst\"},\"companyName\":\"MegaCorp\",\"currentServer\":\"galactic-cyber\",\"purchasedServers\":[\"pserver-1648915035422\",\"pserver-1648915036425\",\"pserver-1648915037429\",\"pserver-1648915038430\",\"pserver-1648915039432\",\"pserver-1648915040436\",\"pserver-1648915041440\",\"pserver-1648909803739\",\"pserver-1648910658582\",\"pserver-1648911513471\",\"pserver-1648912368095\",\"pserver-1648913222139\",\"pserver-1648914076673\",\"pserver-1648914931293\",\"pserver-1648915024351\",\"pserver-1648915025372\",\"pserver-1648915026394\",\"pserver-1648915027408\",\"pserver-1648915028409\",\"pserver-1648915029412\",\"pserver-1648915030413\",\"pserver-1648915031413\",\"pserver-1648915032415\",\"pserver-1648915033416\",\"pserver-1648915034420\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":177424.40000154483,\"ram\":64,\"totalMoneyGenerated\":4818305833.545475,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":177424.40000154483,\"ram\":64,\"totalMoneyGenerated\":4818452661.988121,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":177424.40000154483,\"ram\":64,\"totalMoneyGenerated\":4816968671.281304,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":177424.40000154483,\"ram\":64,\"totalMoneyGenerated\":4816967083.4288435,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":177424.40000154483,\"ram\":64,\"totalMoneyGenerated\":4816965768.398001,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":176495.80000149913,\"ram\":64,\"totalMoneyGenerated\":4816513395.644432,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":175397.00000142393,\"ram\":64,\"totalMoneyGenerated\":4815979407.51553,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":169193.6000010118,\"ram\":64,\"totalMoneyGenerated\":4773573845.94913,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":169193.6000010118,\"ram\":64,\"totalMoneyGenerated\":4773573855.776294,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":169193.6000010118,\"ram\":64,\"totalMoneyGenerated\":4773422544.42812,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":169193.6000010118,\"ram\":64,\"totalMoneyGenerated\":4773422544.42812,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":169193.6000010118,\"ram\":64,\"totalMoneyGenerated\":4773273560.273271,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":169193.6000010118,\"ram\":64,\"totalMoneyGenerated\":4773263903.892864,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":169193.6000010118,\"ram\":64,\"totalMoneyGenerated\":4773263903.892864,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":169193.6000010118,\"ram\":64,\"totalMoneyGenerated\":4773217001.473743,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":165605.60000078243,\"ram\":64,\"totalMoneyGenerated\":4752230181.355446,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":165050.8000007459,\"ram\":64,\"totalMoneyGenerated\":4741633476.438998,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":163709.20000066093,\"ram\":64,\"totalMoneyGenerated\":4712393952.341,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":156463.00000030204,\"ram\":64,\"totalMoneyGenerated\":4532528351.652877,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":156463.00000030204,\"ram\":64,\"totalMoneyGenerated\":4532528351.652877,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":156463.00000030204,\"ram\":64,\"totalMoneyGenerated\":4532528351.652877,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":156463.00000030204,\"ram\":64,\"totalMoneyGenerated\":4532528351.652877,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":154937.6000002272,\"ram\":64,\"totalMoneyGenerated\":4488358134.136315,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":153621.60000016302,\"ram\":64,\"totalMoneyGenerated\":4450240243.2353,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":152558.000000112,\"ram\":64,\"totalMoneyGenerated\":4419426087.093128,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":149230.39999995762,\"ram\":64,\"totalMoneyGenerated\":4323031244.41609,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":146995.19999984922,\"ram\":64,\"totalMoneyGenerated\":4258271114.687454,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":145254.1999997679,\"ram\":64,\"totalMoneyGenerated\":4207838177.6094933,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":131287.59999900268,\"ram\":64,\"totalMoneyGenerated\":3803218858.687369,\"name\":\"hacknet-node-28\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":126113.99999906133,\"ram\":64,\"totalMoneyGenerated\":3653373790.023418,\"name\":\"hacknet-node-29\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":117201.1999991871,\"ram\":64,\"totalMoneyGenerated\":3395173145.304948,\"name\":\"hacknet-node-30\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":54960.59999977469,\"ram\":64,\"totalMoneyGenerated\":1592110914.8718495,\"name\":\"hacknet-node-31\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":30338.200000071185,\"ram\":64,\"totalMoneyGenerated\":878774336.5757859,\"name\":\"hacknet-node-32\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":101.60000000000085,\"ram\":64,\"totalMoneyGenerated\":2476073.2955680694,\"name\":\"hacknet-node-33\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":28969.141219696572,\"onlineTimeSeconds\":75.80000000000052,\"ram\":64,\"totalMoneyGenerated\":2028954.7405003465,\"name\":\"hacknet-node-34\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"MegaCorp\",\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"Aevum\",\"Sector-12\",\"Netburners\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"}],\"augmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"}],\"sourceFiles\":[{\"lvl\":2,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.2524,\"crime_success_mult\":1.2524,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":18,\"workExpMult\":10,\"currentWorkFactionName\":\"BitRunners\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.40173532245,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":1.7798110682646038,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":203.9208496756183,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":903.4320982511198,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":500,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":126400,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.2524,\"hacknet_node_money_mult\":3.1586702125,\"hacknet_node_purchase_cost_mult\":0.5755859999999999,\"hacknet_node_ram_cost_mult\":0.7524,\"hacknet_node_core_cost_mult\":0.7524,\"hacknet_node_level_cost_mult\":0.63954,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"entropy\":0,\"lastUpdate\":1649084218161,\"lastSave\":1649084161449,\"totalPlaytime\":4058062000,\"playtimeSinceLastAug\":177452600,\"playtimeSinceLastBitnode\":383937800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":2625000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":29962070861307.89,\"hacknet\":143717856120.53622,\"hacknet_expenses\":-1530153165577.3528,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":28042613538297.387,\"work\":49135181.26314838,\"servers\":-154904640000,\"other\":-5307600000,\"augmentations\":-375483906574.99994}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":5400000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":30832923023438.734,\"hacknet\":193073846615.83395,\"hacknet_expenses\":-1559215862472.6382,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":28570676229633.363,\"work\":85804875.4230248,\"servers\":-294338584857.3783,\"other\":-10586500000,\"augmentations\":-596665495772.2703}},\"scriptProdSinceLastAug\":27841298918662.703,\"exploits\":[],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1645026146788},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1645028434786},{\"ID\":\"NS2\",\"unlockedOn\":1645044319911},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1645045831181},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1645056200950},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1645056560955},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1645066283086},{\"ID\":\"TOR\",\"unlockedOn\":1645066643085},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1645070003093},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1645097626865},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1645155279886},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1645183682014},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1645190539010},{\"ID\":\"TRAVEL\",\"unlockedOn\":1645202118069},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1645206439756},{\"ID\":\"WORKOUT\",\"unlockedOn\":1645274022801},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1645310391987},{\"ID\":\"NITESEC\",\"unlockedOn\":1645372344826},{\"ID\":\"4S\",\"unlockedOn\":1645407697058},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1645449421121},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1645451161327},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1645492247503},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1645588414067},{\"ID\":\"DONATION\",\"unlockedOn\":1645808344381},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1645842991741},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1646071287225},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1646082477122},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1646132482080},{\"ID\":\"SF1.1\",\"unlockedOn\":1646609210207},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1647371428634},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1648434173382},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1648692192627},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1648692192635},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1648695732622},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1648698912619}],\"terminalCommandHistory\":[\"rm phase3/actions/programming.js\",\"rm phase3/backdoor.js\",\"rm phase3/batchHack.js\",\"rm phase3/cnct.js\",\"rm phase3/expandServer.js\",\"rm phase3/hackRichest.js\",\"rm phase3/programs.js\",\"rm phase3/purchase.js\",\"rm phase3/shareAll.js\",\"rm phase3/test.js\",\"rm phase3/restart.js\",\"ls\",\"killall\",\"run contracts/start.js\",\"alias\",\"alias flight=\\\"run fl1ght.exe\\\"\",\"flight\",\"unalias track\",\"flight\",\"ls\",\"cat j4.msg\",\"cat 19dfj3l1nd.msg\",\"flight\",\"bkdr megacorp\",\"home;connect joesguns;connect max-hardware;connect silver-helix;connect computek;connect syscore;connect lexo-corp;connect snap-fitness;connect deltaone;connect zeus-med;connect taiyang-digital;connect microdyne;connect vitalife;connect 4sigma;connect powerhouse-fitness;connect megacorp;backdoor;\",\"analyze\",\"hm\",\"run shareOnly.js\",\"restart\",\"run shareAll.js\",\"bkdr zb-institute\",\"ls\",\"run serverWealth.js\",\"free\",\"run batching/batch.js omega-net\",\"tail batching/batch.js omega-net\",\"run contracts/solvers/findMathExpressions.js\",\"run killShare.js\",\"run batching/spawner.js grow rho-construction 1507 9000\",\"run batching/spawner.js hack rho-construction 209 9000\",\"run shareOnly.js\",\"bkdr zb-institute\",\"home;connect sigma-cosmetics;connect nectar-net;connect phantasy;connect johnson-ortho;connect zb-institute;backdoor;\",\"hm\",\"bkdr aerocorp\",\"home;connect sigma-cosmetics;connect nectar-net;connect phantasy;connect johnson-ortho;connect I.I.I.I;connect millenium-fitness;connect aerocorp;backdoor;\",\"hm\",\"bkdr galactic-cyber\",\"home;connect joesguns;connect max-hardware;connect silver-helix;connect computek;connect syscore;connect lexo-corp;connect galactic-cyber;backdoor;\",\"flight\"],\"identifier\":\"afc61675d036e\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"41.2.4.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"Formulas.exe\"],\"ramUsed\":85.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hacknet.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45931,\"ramUsage\":5.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///2bc0041c-8963-49a9-bd99-d2062181538f\",\"moduleSequenceNumber\":498709}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/contracts/start.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45932,\"ramUsage\":24.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///442f45ac-4985-455e-bd0b-887662bb8abc\",\"moduleSequenceNumber\":498097},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///20eb46b4-357a-4846-ae92-37f25fe81561\",\"moduleSequenceNumber\":498105},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///c186647b-70d7-4770-b9cf-169ff1761587\",\"moduleSequenceNumber\":498111},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///ea740caf-3ac0-458d-b31d-de1b67fe4ba9\",\"moduleSequenceNumber\":498115},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///7624ba50-3df9-4705-a014-7a58050de020\",\"moduleSequenceNumber\":498117},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///649cece5-5b4c-408c-985a-31cfd4a34064\",\"moduleSequenceNumber\":498099},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///f2b87133-be29-4e66-b8bd-401fa4bb2ecc\",\"moduleSequenceNumber\":498095},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///7bfcf493-fe46-462b-8bc3-b84eea71f540\",\"moduleSequenceNumber\":498109},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///1db0eb9a-b4f4-47cf-86a5-2a1263c41414\",\"moduleSequenceNumber\":498103},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///cb7499cd-7e2a-4412-8553-b5263d39e5b3\",\"moduleSequenceNumber\":498107},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///4d3f5e24-4cf1-49a6-861e-37acd01adf05\",\"moduleSequenceNumber\":498093},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///14a3b47b-df22-419c-a51c-0f89a12b1721\",\"moduleSequenceNumber\":498113},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///fa030599-f4a7-4523-a68e-2553b28d8838\",\"moduleSequenceNumber\":498101},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///6af73c1f-bdbb-4da3-908d-6ab485746d0d\",\"moduleSequenceNumber\":498161},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///1324658b-a0b6-4eb6-b570-2bed570a6302\",\"moduleSequenceNumber\":498169},{\"filename\":\"/contracts/start.js\",\"url\":\"blob:file:///4466217e-9751-4c09-b2f2-02b4ec698fd6\",\"moduleSequenceNumber\":498710}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"backdoor.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45933,\"ramUsage\":6.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///98aa458e-fdcf-4502-9538-8345c90ff041\",\"moduleSequenceNumber\":549},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///7b3b5ac9-3c82-4a21-9b4c-37befb5bd5d8\",\"moduleSequenceNumber\":547},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///25074192-f3e8-4f45-8b6f-ca018498ad8e\",\"moduleSequenceNumber\":551},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///61762485-ee43-4a97-977f-ddb8bbb135f9\",\"moduleSequenceNumber\":549},{\"filename\":\"/utils/nuke.js\",\"url\":\"blob:file:///01215a12-bde8-44be-9326-a00d267577cc\",\"moduleSequenceNumber\":548},{\"filename\":\"backdoor.js\",\"url\":\"blob:file:///3a3e4faa-1c02-44b0-a7e4-dc28769e8866\",\"moduleSequenceNumber\":46666}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45966,\"ramUsage\":4.1,\"server\":\"home\",\"threads\":12,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///4f4a64c9-adf5-4c5d-b869-c1e125834d47\",\"moduleSequenceNumber\":498711}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//GREATEST FACTOR\\nexport function factor(num) {\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\n        if (num % div != 0) {\\n            continue;\\n        }\\n        num = num / div;\\n        div = 1;\\n    }\\n    return num;\\n}\\n\",\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":499233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   let data = ns.args\\n//     .join(\\\" \\\")\\n//     .split(\\\" \\\")\\n//     .map((s) => parseInt(s));\\n//   // data = [0, 5, 3, 10, 0, 3, 10, 0, 4, 6, 6, 0, 0, 7, 0, 1, 1];\\n//   ns.tprint(solveJump(data));\\n//   ns.print(solveJump(data));\\n// }\\n//\\n// Array Jumping Game\\n//\\n// You are attempting to solve a Coding Contract. You have 1 tries remaining, after which the contract will self-destruct.\\n//\\n// You are given the following array of integers:\\n//\\n// 0,5,3,10,0,3,10,0,4,6,6,0,0,7,0,1,1 => 0\\n// 7,1,3,0,0,4,1,5,0,4,6,8,0,0,7,6,0,2,5,4,0=> 1\\n//\\n// Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n.\\n//\\n// Assuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\n//\\n// Your answer should be submitted as 1 or 0, representing true and false respectively\\nexport function solveJump(data) {\\n    if (data.length === 0)\\n        return 1;\\n    const maxJump = data[0];\\n    if (maxJump === 0)\\n        return 0;\\n    if (maxJump >= data.length)\\n        return 1;\\n    // find the best jump and solve it.\\n    let bestJump = [1, 1];\\n    for (let i = 1; i <= maxJump; i++) {\\n        const nextMax = data[i];\\n        const jumpValue = nextMax + i + 1;\\n        if (jumpValue >= data.length)\\n            return 1;\\n        if (jumpValue > bestJump[1])\\n            bestJump = [i, jumpValue];\\n    }\\n    return solveJump(data.slice(bestJump[0]));\\n}\\n\",\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///1836554b-f446-47ac-ba4e-005dd07b2609\",\"moduleSequenceNumber\":4479}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":499231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//Find All Valid Math Expressions\\n// You are attempting to solve a Coding Contract. You have 10 tries remaining, after which the contract will self-destruct.\\n// You are given the following string which contains only digits between 0 and 9:\\n// 288074550300\\n// You are also given a target number of 99. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\n// The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\n// [\\\"288074550300\\\", 99]\\n// NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\"1+01\\\" is not a valid expression Examples:\\n// Input: digits = \\\"123\\\", target = 6\\n// Output: [1+2+3, 1*2*3]\\n// Input: digits = \\\"105\\\", target = 5\\n// Output: [1*0+5, 10-5]\\n//\\nexport async function main(ns) {\\n    const testData = [\\\"288074550300\\\", 99];\\n    ns.tprint(await findMathExpression(ns, testData));\\n}\\n// TODO: Fix this as it freezes the ui.\\nexport async function findMathExpression(ns, data) {\\n    const digits = data[0].split(\\\"\\\");\\n    // [1, 2, 3, 4, 5]\\n    const operators = [\\\"+\\\", \\\"-\\\", \\\"*\\\", \\\"\\\"];\\n    // [+, -, *, ]\\n    let expressions = [digits[0], \\\"-\\\" + digits[0]].flatMap((d) => operators.map((op) => d + op));\\n    // [1+, 1-, 1*, 1, -1+, -1-, -1*, -1]\\n    for (let i = 1; i < digits.length - 1; i++) {\\n        await ns.sleep(1);\\n        expressions = expressions.flatMap((e) => operators.map((op) => e + digits[i] + op));\\n        // [1+2+, 1+2-, 1+2*, 1+2, 1-2+, ...]\\n    }\\n    let finalExpressions = [];\\n    for (const e of expressions.map((e) => e + digits[digits.length - 1])) {\\n        await ns.sleep(1);\\n        try {\\n            if (eval(e) === data[1])\\n                finalExpressions.push(e);\\n        }\\n        catch (e) {\\n            continue;\\n        }\\n    }\\n    return finalExpressions;\\n}\\nexport async function _findMathExpression(ns, data) {\\n    const digits = data[0].split(\\\"\\\");\\n    const operators = [\\\"+\\\", \\\"-\\\", \\\"*\\\", \\\"\\\"];\\n    let expressions = [digits[0], \\\"-\\\" + digits[0]].flatMap((d) => operators.map((op) => d + op));\\n    for (let i = 1; i < digits.length - 1; i++) {\\n        await ns.sleep(30);\\n        expressions = expressions.flatMap((e) => operators.map((op) => e + digits[i] + op));\\n    }\\n    return expressions\\n        .map((e) => e + digits[digits.length - 1])\\n        .filter((e) => {\\n        try {\\n            return eval(e) === data[1];\\n        }\\n        catch (e) {\\n            return false;\\n        }\\n    });\\n}\\n\",\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///0583886b-b84e-436a-8694-8cb6b6033e21\",\"moduleSequenceNumber\":394203}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":499235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//GENERATE IP ADDRESSES\\nexport function generateIps(num) {\\n    num = num.toString();\\n    const length = num.length;\\n    let ips = [];\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length),\\n                ];\\n                let isValid = true;\\n                ip.forEach((seg) => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n                if (isValid)\\n                    ips.push(ip.join(\\\".\\\"));\\n            }\\n        }\\n    }\\n    return ips;\\n}\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\")\\n        return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255)\\n        return false;\\n    return true;\\n}\\n\",\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":499237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export * from \\\"contracts/solvers/totalWaysToSum.js\\\";\\nexport * from \\\"contracts/solvers/arrayJumpingGame.js\\\";\\nexport * from \\\"contracts/solvers/solveSum.js\\\";\\nexport * from \\\"contracts/solvers/mergeOverlap.js\\\";\\nexport * from \\\"contracts/solvers/spiral.js\\\";\\nexport * from \\\"contracts/solvers/factor.js\\\";\\nexport * from \\\"contracts/solvers/generateIps.js\\\";\\nexport * from \\\"contracts/solvers/uniquePaths.js\\\";\\nexport * from \\\"contracts/solvers/triangleSum.js\\\";\\nexport * from \\\"contracts/solvers/stockSolver.js\\\";\\nexport * from \\\"contracts/solvers/sanitizeParentheses.js\\\";\\nexport * from \\\"contracts/solvers/findMathExpressions.js\\\";\\n\",\"filename\":\"/contracts/solvers/index.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":499239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Merge Overlapping Intervals\\nexport function mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\n\",\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":499241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   let data = \\\"((a(a)(()(((a)a)))((\\\";\\n//   // data = ns.args[0].toString();\\n//   ns.tprint(sanitizeParentheses(data));\\n//   ns.print(sanitizeParentheses(data));\\n// }\\n// Given a string:\\n//\\n// ie.: '((a(a)(()(((a)a)))((' => [a(a)(()(((a)a))),(aa)(()(((a)a))),(a(a)()(((a)a))),(a(a)(()((a)a))),((aa)()(((a)a))),((aa)(()((a)a))),((a(a))(((a)a))),((a(a)()((a)a))),((a(a)(()(a)a)))]\\n//\\n// remove the minimum number of invalid parentheses in order to validate the\\n// string. If there are multiple ways to validate the string, provide all of the\\n// possible results. The answer should be provided as an array of strings. If it\\n// is impossible to validate the string the result should be an array with only\\n// an empty string.\\nexport function sanitizeParentheses(data) {\\n    var solution = Sanitize(data);\\n    if (solution == null) {\\n        return '[\\\"\\\"]';\\n    }\\n    else {\\n        return \\\"[\\\" + solution.join(\\\",\\\") + \\\"]\\\";\\n    }\\n}\\nfunction Sanitize_removeOneParth(item) {\\n    var possibleAnswers = [];\\n    for (let i = 0; i < item.length; i++) {\\n        if (item[i].toLowerCase().indexOf(\\\"(\\\") === -1 &&\\n            item[i].toLowerCase().indexOf(\\\")\\\") === -1) {\\n            continue;\\n        }\\n        let possible = item.substring(0, i) + item.substring(i + 1);\\n        possibleAnswers.push(possible);\\n    }\\n    return possibleAnswers;\\n}\\nfunction Sanitize_isValid(item) {\\n    var unclosed = 0;\\n    for (var i = 0; i < item.length; i++) {\\n        if (item[i] == \\\"(\\\") {\\n            unclosed++;\\n        }\\n        else if (item[i] == \\\")\\\") {\\n            unclosed--;\\n        }\\n        if (unclosed < 0) {\\n            return false;\\n        }\\n    }\\n    return unclosed == 0;\\n}\\nfunction Sanitize(data) {\\n    var currentPossible = [data];\\n    for (var i = 0; i < currentPossible.length; i++) {\\n        var newPossible = new Set();\\n        for (var j = 0; j < currentPossible.length; j++) {\\n            let newRemovedPossible = Sanitize_removeOneParth(currentPossible[j]);\\n            for (let item of newRemovedPossible) {\\n                newPossible.add(item);\\n            }\\n        }\\n        var validBoolList = [];\\n        for (const item of newPossible) {\\n            validBoolList.push(Sanitize_isValid(item));\\n        }\\n        if (validBoolList.includes(true)) {\\n            let finalList = [];\\n            newPossible = [...newPossible];\\n            for (var j = 0; j < validBoolList.length; j++) {\\n                if (validBoolList[j]) {\\n                    finalList.push(newPossible[j]);\\n                }\\n            }\\n            finalList = new Set(finalList);\\n            return [...finalList];\\n        }\\n        currentPossible = [...newPossible];\\n    }\\n    return null;\\n}\\n\",\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///d744f228-8f91-4660-9d12-d00944b8e4d0\",\"moduleSequenceNumber\":287808}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":499243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function solveSum(data) {\\n    const arrLength = data.length;\\n    let maxSum = -Infinity;\\n    for (let i = 0; i < arrLength; i++) {\\n        const sub = data.slice(0, i + 1);\\n        for (let j = 0; j < sub.length; j++) {\\n            const sub2 = sub.slice(j, sub.length);\\n            // ns.tprint(`i ${i} j ${j} ${JSON.stringify(sub)} ${JSON.stringify(sub2)}`);\\n            const sum = sub2.reduce((prev, cur) => (prev += cur), 0);\\n            if (sum > maxSum)\\n                maxSum = sum;\\n            // ns.tprint(`${sum}: ${sub2}`);\\n        }\\n    }\\n    return maxSum;\\n}\\n\",\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":499245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//SPIRALIZE Matrix\\nexport function spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift() || []);\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat((arr.pop() || []).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\nfunction column(arr, index) {\\n    let res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n\",\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":499247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function maxProfit(arrayData) {\\n    let i, j, k;\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n    // WHY?\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n    let highestProfit = JSON.parse(tempArr);\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) {\\n            // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) {\\n                // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\",\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///3317a863-bbb6-46ab-9102-55587ce847a9\",\"moduleSequenceNumber\":270664}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":499249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   let data = 60;\\n//   // data = ns.args[0] as number;\\n//   ns.tprint(totalWaysToSum(data));\\n//   ns.print(totalWaysToSum(data));\\n// }\\n// Total Ways to Sum\\n// You are attempting to solve a Coding Contract. You have 10 tries remaining,\\n// after which the contract will self-destruct.\\n//\\n// It is possible write four as a sum in exactly four different ways:\\n//     3 + 1\\n//     2 + 2\\n//     2 + 1 + 1\\n//     1 + 1 + 1 + 1\\n//\\n//  How many different ways can the given number be written as a sum of at least\\n//  two positive integers?\\n//\\n//  60 => 966466\\nexport function totalWaysToSum(data) {\\n    let N = data;\\n    let K = data - 1;\\n    // Initialize a list\\n    let dp = Array.from({ length: N + 1 }, () => 0);\\n    // Update dp[0] to 1\\n    dp[0] = 1;\\n    // Iterate over the range [1, K + 1]\\n    for (let row = 1; row < K + 1; row++) {\\n        // Iterate over the range [1, N + 1]\\n        for (let col = 1; col < N + 1; col++) {\\n            // If col is greater\\n            // than or equal to row\\n            if (col >= row)\\n                // Update current\\n                // dp[col] state\\n                dp[col] = dp[col] + dp[col - row];\\n        }\\n    }\\n    // Return the total number of ways\\n    return dp[N];\\n}\\n\",\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///0511a33a-6f45-4133-a371-8392bfc4f2de\",\"moduleSequenceNumber\":288875}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":499251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { NS } from \\\"Bitburner\\\";\\n// export function main(ns: NS) {\\n//   const data = [\\n//     [9],\\n//     [3, 3],\\n//     [1, 5, 1],\\n//     [6, 9, 4, 1],\\n//     [8, 9, 1, 4, 3],\\n//     [6, 2, 5, 5, 8, 2],\\n//     [6, 3, 6, 2, 7, 5, 1],\\n//     [9, 8, 2, 4, 5, 2, 3, 7],\\n//   ];\\n//   ns.tprint(triangleSum(data));\\n//   ns.print(triangleSum(data));\\n// }\\n//\\n//Minimum Path Sum in a Triangle\\n// You are attempting to solve a Coding Contract. You have 10 tries remaining, after which the contract will self-destruct.\\n// Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\n// [\\n//          [9],\\n//         [3,3],\\n//        [1,5,1],\\n//       [6,9,4,1],\\n//      [8,9,1,4,3],\\n//     [6,2,5,5,8,2],\\n//    [6,3,6,2,7,5,1],\\n//   [9,8,2,4,5,2,3,7]\\n// ] => 23\\n// Example: If you are given the following triangle:\\n// [\\n//      [2],\\n//     [3,4],\\n//    [6,5,7],\\n//   [4,1,8,3]\\n// ]\\n// The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\n//\\n//\\nexport function triangleSum(arrayData) {\\n    let triangle = arrayData;\\n    let nextArray = [];\\n    let previousArray = triangle[0];\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            }\\n            else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            }\\n            else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n        }\\n        previousArray = nextArray;\\n    }\\n    return Math.min.apply(null, nextArray);\\n}\\n\",\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///e31bc6e0-ce54-4e21-8616-21950cd33e44\",\"moduleSequenceNumber\":6234}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":499253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//UNIQUE PATHS IN A GRID//UNIQUE PATHS IN A GRID\\nexport function uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\n}\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\nexport function uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n            if (grid[i][j] == 1 &&\\n                (!ignoreFirst || i != 0 || j != 0) &&\\n                (!ignoreLast || i != grid.length - 1 || j != grid[i].length - 1)) {\\n                let newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n    }\\n    return totalPossiblePaths;\\n}\\n\",\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":499255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nimport * as solvers from \\\"contracts/solvers/index.js\\\";\\nconst minuteInterval = 2;\\nfunction getAllServers(ns) {\\n    const tree = new ServerTree(ns);\\n    return tree.home.list();\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will automatically complete contracts that it finds on the network.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let failedContracts = [];\\n    let successfulContracts = [];\\n    function refreshLog() {\\n        ns.clearLog();\\n        for (const cnt of failedContracts) {\\n            ns.print(`\\n      =========================\\n        server: ${cnt.server}\\n        filename: ${cnt.contract}\\n        type: ${cnt.type}\\n      =========================\\n        `);\\n        }\\n        for (const cnt of successfulContracts) {\\n            ns.print(`\\n      =========================\\n        server: ${cnt.server}\\n        filename: ${cnt.contract}\\n        type: ${cnt.type}\\n        reward: \\n          ${cnt.reward}\\n      =========================\\n        `);\\n        }\\n        ns.print(`Contracts failed: ${failedContracts.length}`);\\n        ns.print(`Contracts Succeeded: ${successfulContracts.length}`);\\n    }\\n    while (true) {\\n        // await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\n        const contracts = getAllServers(ns).flatMap((server) => {\\n            const onServer = ns.ls(server.hostname, \\\".cct\\\").map((contract) => {\\n                const type = ns.codingcontract.getContractType(contract, server.hostname);\\n                const data = ns.codingcontract.getData(contract, server.hostname);\\n                return {\\n                    type,\\n                    data,\\n                    server,\\n                    contract,\\n                };\\n            });\\n            return onServer;\\n        });\\n        for (const { type, data, server, contract } of contracts) {\\n            const reward = await solve(type, data, server.hostname, contract, ns);\\n            if (!reward) {\\n                failedContracts.push({\\n                    server: server.hostname,\\n                    contract,\\n                    type,\\n                });\\n                refreshLog();\\n            }\\n            else {\\n                successfulContracts.push({\\n                    server: server.hostname,\\n                    contract,\\n                    type,\\n                    reward,\\n                });\\n                refreshLog();\\n            }\\n        }\\n        await ns.sleep(minuteInterval * 60 * 1000);\\n    }\\n}\\nasync function solve(type, data, server, contract, ns) {\\n    let solution;\\n    ns.print(type);\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = solvers.maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = solvers.maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = solvers.maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = solvers.maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solvers.triangleSum(data);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = solvers.uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = solvers.uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = solvers.generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = solvers.factor(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = solvers.spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = solvers.mergeOverlap(data);\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            solution = solvers.solveSum(data);\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            solution = solvers.solveJump(data);\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            solution = solvers.totalWaysToSum(data);\\n            break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n            solution = solvers.sanitizeParentheses(data);\\n            break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n            solution = await solvers.findMathExpression(ns, data);\\n            break;\\n        default:\\n            ns.print(`Unknown contract type: ${type}`);\\n            return \\\"\\\";\\n    }\\n    if (solution != undefined)\\n        ns.print(`Submitting solution: ${solution} to ${type} - ${contract}`);\\n    return solution != undefined\\n        ? ns.codingcontract.attempt(solution, contract, server, {\\n            returnReward: true,\\n        })\\n        : \\\"\\\";\\n}\\n\",\"filename\":\"/contracts/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///2bb80d47-0a3e-470e-a40f-28c865812587\",\"moduleSequenceNumber\":499235},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///0473bee5-29ca-4073-94a8-a09ad2c1972d\",\"moduleSequenceNumber\":499243},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///16ccbb20-06cd-43cb-a096-669c9470f718\",\"moduleSequenceNumber\":499249},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///31ff17f9-de39-4981-a485-2c2fd1ad1249\",\"moduleSequenceNumber\":499253},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///7ba322b2-e0d3-4b0a-b96c-b5f585597d30\",\"moduleSequenceNumber\":499255},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///b6bd6bb6-1004-4715-a7b2-97cf402c508b\",\"moduleSequenceNumber\":499237},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///bbd32040-a3ef-4f01-88d8-46babfb6276f\",\"moduleSequenceNumber\":499233},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///f9c40969-40bd-4988-acce-8bad88e89305\",\"moduleSequenceNumber\":499247},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///4e7663cf-5510-45fa-a01c-afa44b5bb045\",\"moduleSequenceNumber\":499241},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///b5fd4675-7346-4d09-8693-1518c926e57e\",\"moduleSequenceNumber\":499245},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///462ffb34-2cd4-4f02-8c03-8db50394086b\",\"moduleSequenceNumber\":499231},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///c97b5f74-c2ad-4313-9368-97aa8c10fec7\",\"moduleSequenceNumber\":499251},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///83bc510e-258a-48f0-8550-39855b78b900\",\"moduleSequenceNumber\":499239},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///1a19937d-940e-4be0-8bd9-736291fece69\",\"moduleSequenceNumber\":499299},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///dfb1f402-91ea-49cd-90ea-27c4cafefb49\",\"moduleSequenceNumber\":499307},{\"filename\":\"/contracts/start.js\",\"url\":\"blob:file:///78341e5b-9899-45fe-926f-a3b753691cf0\",\"moduleSequenceNumber\":499346}],\"dependents\":[],\"ramUsage\":24.1,\"server\":\"home\",\"moduleSequenceNumber\":499346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///42e282fc-6d74-482e-a9cf-5df80f263bc6\",\"moduleSequenceNumber\":499348}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":499348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nconst minuteInterval = 2;\\nfunction getAllServers(ns) {\\n    const tree = new ServerTree(ns);\\n    return tree.home.list();\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will automatically list contracts that it finds on the network.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let contracts;\\n    function refreshLog() {\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(\\\"Contracts\\\");\\n        ns.print(\\\"=========\\\");\\n        for (const c of contracts)\\n            ns.print(c);\\n        ns.print(\\\"=========\\\");\\n    }\\n    while (true) {\\n        // await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\n        contracts = getAllServers(ns).flatMap((server) => {\\n            const onServer = ns.ls(server.hostname, \\\".cct\\\").map((contract) => {\\n                const type = ns.codingcontract.getContractType(contract, server.hostname);\\n                return `${server.hostname} - ${contract} - ${type}`;\\n            });\\n            return onServer;\\n        });\\n        if (contracts.length > 0)\\n            refreshLog();\\n        await ns.sleep(minuteInterval * 60 * 1000);\\n    }\\n}\\n\",\"filename\":\"/contracts/list.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///bf42c2aa-95a2-4a23-abc1-1ad3de863b18\",\"moduleSequenceNumber\":2692},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///7915c4db-6fa3-49af-9314-ab3dfafb52d6\",\"moduleSequenceNumber\":2700},{\"filename\":\"/contracts/list.js\",\"url\":\"blob:file:///c7836513-5750-4fc4-9afd-ee7b4b9e3752\",\"moduleSequenceNumber\":3022}],\"dependents\":[],\"ramUsage\":9.1,\"server\":\"home\",\"moduleSequenceNumber\":499257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"cnct\\\";\\nconst serverPercent = 0.75;\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      Shares all the servers possible.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // copy the share script to all the servers we have admin priveledges to.\\n    for (const server of getRunnableServers(ns)) {\\n        // if (!server || server.hostname === \\\"home\\\") continue;\\n        if (!server)\\n            continue;\\n        const shareScript = \\\"share.js\\\";\\n        await ns.scp(shareScript, server.hostname);\\n        // calculate the maximum number of threads.\\n        server.ramUsed = ns.getServerUsedRam(server.hostname);\\n        let maxThreads = Math.max(Math.floor((server.maxRam * serverPercent - server.ramUsed) /\\n            ns.getScriptRam(shareScript, server.hostname)), 1);\\n        // run the share script if possible.\\n        ns.exec(shareScript, server.hostname, maxThreads);\\n    }\\n}\\n\",\"filename\":\"shareAll.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///510c9135-662e-4469-82e7-11ae02c81c35\",\"moduleSequenceNumber\":549},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///9958f7d7-eef8-4bdc-a00f-0b59fdc75b23\",\"moduleSequenceNumber\":547},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///0b3b0b76-4e73-4f5d-b7aa-bbbe078ac181\",\"moduleSequenceNumber\":551},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///11aba1be-55b1-4471-9e4e-6c7f953ab03a\",\"moduleSequenceNumber\":552},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///8d4097e9-fe0f-4629-87e7-5acd6e5574dc\",\"moduleSequenceNumber\":556},{\"filename\":\"shareAll.js\",\"url\":\"blob:file:///6c5b6d9f-05d1-4847-8668-fd8d842acaa3\",\"moduleSequenceNumber\":46667}],\"dependents\":[],\"ramUsage\":6.2,\"server\":\"home\",\"moduleSequenceNumber\":499339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"cnct\\\";\\nimport { kill } from \\\"utils/scriptKilling\\\";\\nconst serverPercent = 1;\\nconst homeSingletons = [\\n    \\\"hacknet.js\\\",\\n    \\\"contracts/start.js\\\",\\n    \\\"backdoor.js\\\",\\n    ///\\n];\\nconst homeReserve = [\\n    \\\"cnct.js\\\",\\n    \\\"bkdr.js\\\",\\n    ///\\n];\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      For sharing and only sharing.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // first kill everything else.\\n    kill(ns, (ps) => ps.filename !== ns.getScriptName());\\n    // run singleton scripts\\n    for (const script of homeSingletons) {\\n        ns.run(script);\\n    }\\n    // copy the share script to all the servers we have admin priveledges to.\\n    for (const server of getRunnableServers(ns)) {\\n        // if (!server || server.hostname === \\\"home\\\") continue;\\n        if (!server)\\n            continue;\\n        const shareScript = \\\"share.js\\\";\\n        await ns.scp(shareScript, server.hostname);\\n        // calculate the maximum number of threads.\\n        server.ramUsed = ns.getServerUsedRam(server.hostname);\\n        let maxThreads = Math.max(Math.floor((server.maxRam * serverPercent - server.ramUsed - getReservedRam(ns)) /\\n            ns.getScriptRam(shareScript, server.hostname)), 1);\\n        // run the share script if possible.\\n        ns.exec(shareScript, server.hostname, maxThreads);\\n    }\\n}\\nfunction getReservedRam(ns) {\\n    if (ns.getHostname() !== \\\"home\\\")\\n        return 0;\\n    return Math.max(...homeReserve.map((script) => ns.getScriptRam(script)));\\n}\\n\",\"filename\":\"shareOnly.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///9ac3354a-96b3-4589-ae7f-0cba1f5c22cf\",\"moduleSequenceNumber\":499299},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///0e4d3ded-de78-40c8-8bfe-23d774028b30\",\"moduleSequenceNumber\":499307},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///610f6b6e-23a3-46b2-a0d5-ff1722719941\",\"moduleSequenceNumber\":499305},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///2b741433-9254-43d2-b196-7e39123e3b5a\",\"moduleSequenceNumber\":499303},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///962e1ba4-6253-46bb-8bc9-9279ee951411\",\"moduleSequenceNumber\":499299},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///1be66020-526a-436c-aefa-43c27671f4da\",\"moduleSequenceNumber\":499307},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///6e7b4272-b4a3-4c4a-a838-ef19dd4570b7\",\"moduleSequenceNumber\":499309},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///0d66c765-8fe1-4fbd-aec8-681c7d23b2d8\",\"moduleSequenceNumber\":499317},{\"filename\":\"shareOnly.js\",\"url\":\"blob:file:///e7b6e438-b027-4754-aa64-9c2c33ed62fc\",\"moduleSequenceNumber\":499344}],\"dependents\":[],\"ramUsage\":7.95,\"server\":\"home\",\"moduleSequenceNumber\":499344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hasSourceFile } from \\\"actions/test\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const programName = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !programName) {\\n        ns.tprint(`\\n      This script will create a program for you.\\n      It requires Source File 4 to work.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} PROGRAM_NAME\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    while (!ns.fileExists(programName)) {\\n        ns.clearLog();\\n        ns.tail();\\n        ns.print(`Creating ${programName}`);\\n        if (hasSourceFile(ns, 4)) {\\n            if (!ns.isBusy() || !ns.getPlayer().workType.includes(\\\"Program\\\"))\\n                ns.createProgram(programName);\\n        }\\n        else if (!ns.getPlayer().workType.includes(\\\"Program\\\")) {\\n            ns.toast(`please create or purchase ${programName}`);\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\\n\",\"filename\":\"/actions/programming.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":95.3,\"server\":\"home\",\"moduleSequenceNumber\":499215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function hasSourceFile(ns, n) {\\n    return (ns\\n        .getOwnedSourceFiles()\\n        .map((sf) => sf.n)\\n        .includes(n) || ns.getPlayer().bitNodeN === n);\\n}\\n\",\"filename\":\"/actions/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":499217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { kill } from \\\"utils/scriptKilling\\\";\\nimport { prepBatch } from \\\"batching/prepBatch\\\";\\nconst bufferTime = 3000;\\nconst growMultiplier = 4;\\nconst hackPercent = 0.5;\\nconst spawnerName = \\\"/batching/spawner.js\\\";\\nconst analyzeScript = \\\"/analyzeServer.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"exec\\\");\\n    ns.enableLog(\\\"run\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This will continuously batch hack a target from a host.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET\\n      `);\\n        return;\\n    }\\n    // analyze the server\\n    ns.run(analyzeScript, 1, target, `Batch attack!`);\\n    // now find the required number of threads for each action.\\n    const growThreads = Math.ceil(ns.growthAnalyze(target, growMultiplier));\\n    const hackThreads = Math.ceil(hackPercent / ns.hackAnalyze(target));\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    const hackSecurityDelta = ns.hackAnalyzeSecurity(hackThreads);\\n    let weakenThreads = 0;\\n    let targetDelta = Math.max(growSecurityDelta, hackSecurityDelta);\\n    // pin targetDelta to 100 to prevent infinity\\n    if (targetDelta > 100)\\n        targetDelta = 100;\\n    while (ns.weakenAnalyze(weakenThreads) < targetDelta) {\\n        await ns.sleep(1);\\n        weakenThreads += 1;\\n        ns.clearLog();\\n        ns.print(`Calculating Weaken Threads: ${weakenThreads}`);\\n        ns.print(`${weakenThreads} threads will cut security by ${ns.weakenAnalyze(weakenThreads)}`);\\n        ns.print(`Target security is ${targetDelta}`);\\n    }\\n    // calculate timing\\n    const { hackTime, growTime, weakenTime } = getTiming(ns, target);\\n    // sanity check\\n    if (hackTime > growTime || hackTime > weakenTime || growTime > weakenTime) {\\n        ns.tprint(`Something screwy going on with ${target} timing`);\\n        return;\\n    }\\n    // Prepare the server\\n    await prepBatch(ns, target);\\n    ns.print(\\\"Hacking...\\\");\\n    ns.run(spawnerName, 1, \\\"weaken\\\", target, weakenThreads, bufferTime * 3, 1);\\n    await ns.sleep(weakenTime - bufferTime * 2);\\n    ns.run(spawnerName, 1, \\\"weaken\\\", target, weakenThreads, bufferTime * 3, 2);\\n    await ns.sleep(weakenTime - growTime - bufferTime);\\n    ns.run(spawnerName, 1, \\\"grow\\\", target, growThreads, bufferTime * 3);\\n    await ns.sleep(growTime - hackTime - bufferTime * 2);\\n    ns.run(spawnerName, 1, \\\"hack\\\", target, hackThreads, bufferTime * 3);\\n}\\nfunction getTiming(ns, target) {\\n    let hackTime = 1;\\n    let growTime = 1;\\n    let weakenTime = 1;\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n        const server = ns.getServer(target);\\n        server.hackDifficulty = server.minDifficulty;\\n        const player = ns.getPlayer();\\n        hackTime = ns.formulas.hacking.hackTime(server, player);\\n        growTime = ns.formulas.hacking.growTime(server, player);\\n        weakenTime = ns.formulas.hacking.weakenTime(server, player);\\n    }\\n    else {\\n        hackTime = ns.getHackTime(target);\\n        growTime = ns.getGrowTime(target);\\n        weakenTime = ns.getWeakenTime(target);\\n    }\\n    return { hackTime, growTime, weakenTime };\\n}\\nexport async function prepareServer(ns, target) {\\n    // now find the required number of threads for each action.\\n    const growThreads = Math.ceil(ns.growthAnalyze(target, growMultiplier));\\n    const hackThreads = Math.ceil(hackPercent / ns.hackAnalyze(target));\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    const hackSecurityDelta = ns.hackAnalyzeSecurity(hackThreads);\\n    let weakenThreads = 0;\\n    let targetDelta = Math.max(growSecurityDelta, hackSecurityDelta);\\n    // pin targetDelta to 100 to prevent infinity\\n    if (targetDelta > 100)\\n        targetDelta = 100;\\n    while (ns.weakenAnalyze(weakenThreads) < targetDelta) {\\n        await ns.sleep(1);\\n        weakenThreads += 1;\\n        // ns.clearLog();\\n        // ns.print(`Calculating Weaken Threads: ${weakenThreads}`);\\n        // ns.print(\\n        //   `${weakenThreads} threads will cut security by ${ns.weakenAnalyze(\\n        //     weakenThreads\\n        //   )}`\\n        // );\\n        // ns.print(`Target security is ${targetDelta}`);\\n    }\\n    // ns.print(`Preparing ${target} for hacking...`);\\n    // ns.print(\\\"Growing...\\\");\\n    await killMsg(ns, \\\"hack\\\", target);\\n    ns.run(spawnerName, 1, \\\"grow\\\", target, growThreads, bufferTime);\\n    ns.run(spawnerName, 1, \\\"weaken\\\", target, weakenThreads, bufferTime);\\n    while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target)) {\\n        await ns.sleep(bufferTime);\\n    }\\n    // ns.kill(growPid);\\n    await killMsg(ns, \\\"grow\\\", target);\\n    // ns.print(\\\"Weakening...\\\");\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n        await ns.sleep(bufferTime);\\n    }\\n    // ns.kill(weakenPid);\\n    await killMsg(ns, \\\"weaken\\\", target);\\n}\\nasync function killMsg(ns, cmd, target) {\\n    kill(ns, (ps) => {\\n        if (ps.filename.includes(spawnerName) &&\\n            ps.args.includes(cmd) &&\\n            ps.args.includes(target))\\n            return true;\\n        if (ps.filename.includes(cmd) && ps.args.includes(target))\\n            return true;\\n        return false;\\n    });\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\n\",\"filename\":\"/batching/batch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///144e5b6d-4b42-4f08-ba02-8ba4528853ac\",\"moduleSequenceNumber\":497022},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///ad5b6f78-d86e-4199-a3a6-ec23ddbc2031\",\"moduleSequenceNumber\":497030},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///f4297e63-22c1-4f8d-a4b0-450c6d3ae395\",\"moduleSequenceNumber\":497028},{\"filename\":\"/batching/prepBatch.js\",\"url\":\"blob:file:///f4025810-728f-461d-b927-a79516df60d3\",\"moduleSequenceNumber\":496948},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///35af5931-8a8d-4828-90a5-e34e372f687c\",\"moduleSequenceNumber\":497022},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///64578cac-431e-4636-a469-b3f9913e3dcc\",\"moduleSequenceNumber\":497030},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///5f6c8666-7409-4b25-935b-cfc2ca971a15\",\"moduleSequenceNumber\":497028},{\"filename\":\"/batching/batch.js\",\"url\":\"blob:file:///8f207904-f7c9-4079-80b2-64eb455a33e0\",\"moduleSequenceNumber\":498072}],\"dependents\":[],\"ramUsage\":11.75,\"server\":\"home\",\"moduleSequenceNumber\":499219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///b628cd01-c243-4005-aa6e-598233019e2e\",\"moduleSequenceNumber\":239095}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":499221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f56997dc-b6e4-4386-9d74-a1da7442a03a\",\"moduleSequenceNumber\":307763}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":499223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { kill } from \\\"utils/scriptKilling\\\";\\nconst bufferTime = 3000;\\nconst growMultiplier = 4;\\nconst spawnerName = \\\"/batching/spawner.js\\\";\\nconst analyzeScript = \\\"/analyzeServer.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.enableLog(\\\"exec\\\");\\n    ns.enableLog(\\\"run\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This will continuously prepare a server untill it's money is at maximum and it's security is at minimum.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET\\n      `);\\n        return;\\n    }\\n    // analyze the server\\n    ns.run(analyzeScript, 1, target, `Batch attack!`);\\n    await prepBatch(ns, target);\\n}\\nexport async function prepBatch(ns, target) {\\n    // now find the required number of threads for each action.\\n    const growThreads = Math.ceil(ns.growthAnalyze(target, growMultiplier));\\n    const growSecurityDelta = ns.growthAnalyzeSecurity(growThreads);\\n    let weakenThreads = 0;\\n    let targetDelta = growSecurityDelta;\\n    // pin targetDelta to 100 to prevent infinity\\n    if (targetDelta > 100)\\n        targetDelta = 100;\\n    while (ns.weakenAnalyze(weakenThreads) < targetDelta) {\\n        await ns.sleep(1);\\n        weakenThreads += 1;\\n        ns.clearLog();\\n        ns.print(`Calculating Weaken Threads: ${weakenThreads}`);\\n        ns.print(`${weakenThreads} threads will cut security by ${ns.weakenAnalyze(weakenThreads)}`);\\n        ns.print(`Target security is ${targetDelta}`);\\n    }\\n    // calculate timing\\n    const { hackTime, growTime, weakenTime } = getTiming(ns, target);\\n    // sanity check\\n    if (hackTime > growTime || hackTime > weakenTime || growTime > weakenTime) {\\n        ns.tprint(`Something screwy going on with ${target} timing`);\\n        return;\\n    }\\n    ns.print(\\\"Preparing...\\\");\\n    ns.run(spawnerName, 1, \\\"weaken\\\", target, weakenThreads, bufferTime, 1);\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\n        await ns.sleep(bufferTime);\\n    ns.run(spawnerName, 1, \\\"grow\\\", target, growThreads, bufferTime);\\n    while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\n        await ns.sleep(bufferTime);\\n    kill(ns, (ps) => (ps.filename === spawnerName && ps.args.includes(target)) ||\\n        (ps.filename.includes(\\\"grow\\\") && ps.args.includes(target)) ||\\n        (ps.filename.includes(\\\"weaken\\\") && ps.args.includes(target)));\\n}\\nfunction getTiming(ns, target) {\\n    let hackTime = 1;\\n    let growTime = 1;\\n    let weakenTime = 1;\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n        const server = ns.getServer(target);\\n        server.hackDifficulty = server.minDifficulty;\\n        const player = ns.getPlayer();\\n        hackTime = ns.formulas.hacking.hackTime(server, player);\\n        growTime = ns.formulas.hacking.growTime(server, player);\\n        weakenTime = ns.formulas.hacking.weakenTime(server, player);\\n    }\\n    else {\\n        hackTime = ns.getHackTime(target);\\n        growTime = ns.getGrowTime(target);\\n        weakenTime = ns.getWeakenTime(target);\\n    }\\n    return { hackTime, growTime, weakenTime };\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\n\",\"filename\":\"/batching/prepBatch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.75,\"server\":\"home\",\"moduleSequenceNumber\":499225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"cnct\\\";\\nimport { ServerTree } from \\\"utils/ServerTree\\\";\\nconst cnctScript = \\\"cnct.js\\\";\\nconst bkdrScript = \\\"bkdr.js\\\";\\n// time constants\\n// const second = 1000;\\n// const seconds = second;\\n// const minute = 60 * seconds;\\n// const minutes = minute;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const cmd = args._[0];\\n    const target = args._[1];\\n    const threads = args._[2];\\n    const bufferTime = args._[3];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help ||\\n        !cmd ||\\n        ![\\\"hack\\\", \\\"grow\\\", \\\"weaken\\\"].includes(cmd.toLowerCase()) ||\\n        !target ||\\n        !threads ||\\n        !bufferTime) {\\n        ns.tprint(`\\n      Repeatedly spawns weakens on a server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOST TARGET THREADS BUFFERTIME\\n      `);\\n        return;\\n    }\\n    let scriptName = `/batching/${cmd}.js`;\\n    let threadsLeft = threads;\\n    // calculate the memory.\\n    while (true) {\\n        // copy script to all servers (even those that have been purchased recently.)\\n        const tree = new ServerTree(ns);\\n        for (const host of tree.home.list()) {\\n            await ns.scp(scriptName, host.hostname);\\n        }\\n        const threadsUsed = spawnScript(ns, scriptName, threads, target);\\n        ns.clearLog();\\n        if (threadsUsed === 0) {\\n            ns.print(`No host with enough ram to run ${scriptName}.`);\\n            await ns.sleep(1);\\n            continue;\\n        }\\n        threadsLeft -= threadsUsed;\\n        if (threadsLeft <= 0) {\\n            threadsLeft = threads;\\n            await ns.sleep(bufferTime);\\n        }\\n    }\\n}\\n// Spawns a given script on the server with the most free ram up to a maximum\\n// number of threads. Returns the number of threads that were spawned or 0 if\\n// none could be spawned.\\nfunction spawnScript(ns, script, maxThreads, target) {\\n    for (const host of getRunnableServers(ns)) {\\n        // calculate available ram\\n        const ramAvailable = host.maxRam - host.ramUsed - reservedRam(ns, host.hostname);\\n        // calculate threads to use\\n        const threads = Math.min(maxThreads, Math.floor(ramAvailable / ns.getScriptRam(script)));\\n        // run the script\\n        ns.print(`Launching ${script} on ${host.hostname} with target ${target}`);\\n        if (threads > 0 &&\\n            ns.exec(script, host.hostname, threads, target, Date.now()))\\n            // if successfully run return the number of threads used\\n            return threads;\\n    }\\n    return 0;\\n}\\nfunction reservedRam(ns, host) {\\n    return host === \\\"home\\\"\\n        ? Math.max(ns.getScriptRam(cnctScript), ns.getScriptRam(bkdrScript))\\n        : 0;\\n}\\n\",\"filename\":\"/batching/spawner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///5a849d40-f021-4e5a-8480-1c3ecb431a79\",\"moduleSequenceNumber\":497022},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///a5aebe7e-9d55-4038-a0b9-24ae5f12980d\",\"moduleSequenceNumber\":497030},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///a20f50c6-5d0a-4acb-8009-a2732b2ff0d1\",\"moduleSequenceNumber\":497026},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///9c420d90-1df0-4004-a43f-99b7f33acb57\",\"moduleSequenceNumber\":497022},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///d1c2f661-149c-4ca6-b639-e0db66130263\",\"moduleSequenceNumber\":497030},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///4e746a23-c2d8-4799-88cb-138dbec22ad4\",\"moduleSequenceNumber\":497032},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///6956726b-aa9a-4a8e-814c-724cf042caa0\",\"moduleSequenceNumber\":497040},{\"filename\":\"/batching/spawner.js\",\"url\":\"blob:file:///bb0572da-d2af-4e11-aa5b-7952ab00fece\",\"moduleSequenceNumber\":498075}],\"dependents\":[],\"ramUsage\":6.15,\"server\":\"home\",\"moduleSequenceNumber\":499227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///734e44c9-a596-4152-98d7-1f1cc639904e\",\"moduleSequenceNumber\":234518}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":499229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { ServerNode } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will monitor for servers that need a backdoor installed.\\n      It will also nuke any server that needs it.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    const programs = new ProgramData(ns);\\n    while (true) {\\n        // 30 seconds should be a perfectly reasonable update time.\\n        await ns.sleep(30000);\\n        let servers = new ServerNode(ns);\\n        // find nukable servers.\\n        for (const server of servers\\n            .list()\\n            .filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts)) {\\n            // nuke them.\\n            ns.print(`nuking ${server.hostname}`);\\n            nuke(ns, server.hostname);\\n        }\\n        // clear the log.\\n        ns.clearLog();\\n        let backdoors = servers\\n            .list()\\n            .filter((s) => s.hasAdminRights &&\\n            !s.backdoorInstalled &&\\n            s.requiredHackingSkill < ns.getHackingLevel() &&\\n            s.hostname !== \\\"home\\\");\\n        // show the log if we have servers to backdoor\\n        if (backdoors.length === 0) {\\n            ns.print(\\\"No servers require a backdoor at this time.\\\");\\n            continue;\\n        }\\n        ns.tail();\\n        ns.print(`The following servers need to have the backdoor installed:`);\\n        ns.print(`==========================================================`);\\n        // find backdoorable servers.\\n        for (const server of backdoors) {\\n            // list them.\\n            ns.print(server.hostname);\\n        }\\n        ns.print(`==========================================================`);\\n    }\\n}\\n\",\"filename\":\"/phase1/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"home\",\"moduleSequenceNumber\":499261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    ns.tail();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      Hacks the richest server from every available server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = getHackableServers(ns)[0];\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    // prepare the target server\\n    if (!ns.isRunning(\\\"batching/prepBatch.js\\\", \\\"home\\\", richest.hostname))\\n        ns.run(\\\"batching/prepBatch.js\\\", 1, richest.hostname);\\n    while (ns.isRunning(\\\"batching/prepBatch.js\\\", \\\"home\\\", richest.hostname)) {\\n        serverStatus(ns, richest.hostname);\\n        await ns.sleep(1);\\n    }\\n    ns.spawn(\\\"batching/batch.js\\\", 1, richest.hostname);\\n}\\nfunction serverStatus(ns, host) {\\n    const currentSecurity = ns.getServerSecurityLevel(host);\\n    const minSecurity = ns.getServerMinSecurityLevel(host);\\n    const currentCash = ns.getServerMoneyAvailable(host);\\n    const maxCash = ns.getServerMaxMoney(host);\\n    ns.print(`${host}:\\n  Cash: ${ns.nFormat(currentCash, \\\"$0.000a\\\")}/${ns.nFormat(maxCash, \\\"$0.000a\\\")}(${ns.nFormat(currentCash / maxCash, \\\"0.0%\\\")})\\n  Security: ${minSecurity} / ${currentSecurity} (${ns.nFormat(minSecurity / currentSecurity, \\\"0.0%\\\")})\\n  `);\\n}\\n\",\"filename\":\"/phase1/basicHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":11.6,\"server\":\"home\",\"moduleSequenceNumber\":499263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      Hacks the richest server using the rest of your RAM.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = getHackableServers(ns)[0];\\n    const hackScript = \\\"hack.js\\\";\\n    // calculate the maximum number of threads.\\n    let maxThreads = Math.floor((ns.getServerMaxRam(ns.getHostname()) -\\n        ns.getServerUsedRam(ns.getHostname()) +\\n        ns.getScriptRam(ns.getScriptName(), ns.getHostname())) /\\n        ns.getScriptRam(hackScript, ns.getHostname()));\\n    // hack the richest server\\n    if (maxThreads > 0)\\n        ns.spawn(hackScript, maxThreads, richest.hostname);\\n    else {\\n        ns.tprint(\\\"ERROR! Cannot spawn hack script. Out of memory.\\\");\\n    }\\n}\\n\",\"filename\":\"/phase1/hackRichest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.25,\"server\":\"home\",\"moduleSequenceNumber\":499265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// timing constants\\nconst seconds = 1000; //milliseconds\\nconst second = seconds;\\nconst minutes = 60 * seconds;\\nconst minute = minutes;\\nconst hours = 60 * minutes;\\nconst hour = hours;\\nconst days = 24 * hours;\\nconst day = days;\\nlet restartDuration = 1 * day;\\nconst scripts = [\\n    \\\"/backdoor.js\\\",\\n    \\\"/phase1/basicHack.js\\\",\\n    \\\"hacknet.js\\\",\\n    // \\\"/contracts/list.js\\\",\\n    \\\"/contracts/start.js\\\",\\n    \\\"programs.js\\\",\\n    \\\"purchase.js\\\",\\n    \\\"/stocks/start.js\\\",\\n];\\nconst restartScripts = [\\\"/phase1/basicHack.js\\\"];\\nconst singularityScripts = [\\n    \\\"/expandServer.js\\\",\\n    //\\n];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This is a simple script that restarts the automated scripts periodically.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    for (const script of scripts) {\\n        ns.run(script);\\n        // This delay is to keep the scripts from colliding.\\n        await ns.sleep(5000);\\n    }\\n    while (true) {\\n        for (const script of restartScripts) {\\n            ns.run(script);\\n            // This delay is to keep the scripts from colliding.\\n            await ns.sleep(5000);\\n        }\\n        if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n            restartDuration = 30 * minutes;\\n        }\\n        if (ns.getOwnedSourceFiles().filter((sf) => sf.n === 4).length > 0 ||\\n            ns.getPlayer().bitNodeN === 4)\\n            for (const script of singularityScripts) {\\n                ns.scriptKill(script, ns.getHostname());\\n                ns.run(script);\\n            }\\n        const restartTime = Date.now() + restartDuration;\\n        while (true) {\\n            ns.clearLog();\\n            ns.tail();\\n            ns.print(`\\n      Hack Profit     : ${ns.nFormat(ns.getScriptIncome()[0], \\\"$0.0a\\\")} / sec.\\n      Hack XP         : ${ns.nFormat(ns.getScriptExpGain(), \\\"0.0a\\\")} / sec.\\n      Home RAM        : ${ns.nFormat(ns.getServerMaxRam(\\\"home\\\") * 1e9, \\\"0.0b\\\")}\\n      Servers Owned   : ${ns.getPurchasedServers().length}\\n      Total RAM       : ${ns.nFormat(getTotalRam(ns) * 1e9, \\\"0.0b\\\")}\\n`);\\n            ns.print(`Restart in ${ns.tFormat(restartTime - Date.now())}`);\\n            await ns.sleep(second);\\n            if (Date.now() >= restartTime)\\n                ns.spawn(\\\"restart.js\\\");\\n            if (getTotalRam(ns) > 1e6)\\n                ns.spawn(\\\"restart.js\\\");\\n        }\\n    }\\n}\\nfunction getTotalRam(ns) {\\n    let total = ns.getServerMaxRam(\\\"home\\\");\\n    if (ns.getPurchasedServers().length === 0)\\n        return total;\\n    for (const host of ns.getPurchasedServers()) {\\n        total += ns.getServerMaxRam(host);\\n    }\\n    return total;\\n}\\n\",\"filename\":\"/phase1/restart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.85,\"server\":\"home\",\"moduleSequenceNumber\":499267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const scripts = [\\n    \\\"hacknet.js\\\",\\n    \\\"shareAll.js\\\",\\n    \\\"/contracts/list.js\\\",\\n    \\\"cnct.js\\\",\\n    \\\"backdoor.js\\\",\\n    \\\"programs.js\\\",\\n    \\\"/phase1/basicHack.js\\\",\\n    \\\"/stocks/start.js\\\",\\n    // `expandServer.js` and `actions/programming.js` is currently failing until we can level up Source File 4\\n    // '/expandServer.js',\\n    // '/actions/programming.js',\\n];\\nconst maxRam = 32e9;\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will test all phase 1 scripts memory requirements.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    let pass = true;\\n    let failedScripts = [];\\n    for (const script of scripts) {\\n        const ram = ns.getScriptRam(script, \\\"home\\\") * 1e9;\\n        if (ram > maxRam) {\\n            pass = false;\\n            failedScripts.push(script);\\n            ns.tprint(`${script} requires ${ns.nFormat(ram, \\\"0.00b\\\")} RAM - that's too much!`);\\n        }\\n        else {\\n            ns.tprint(`${script} only requires ${ns.nFormat(ram, \\\"0.00b\\\")} RAM`);\\n        }\\n    }\\n    if (!pass) {\\n        ns.tprint(`FAIL! You still need to work on these scripts:\\n      ${failedScripts}`);\\n    }\\n    else {\\n        ns.tprint(\\\"SUCCESS!\\\");\\n    }\\n}\\n\",\"filename\":\"/phase1/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":499269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { ServerNode } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will monitor for servers that need a backdoor installed.\\n      It will also nuke any server that needs it.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    const programs = new ProgramData(ns);\\n    while (true) {\\n        // 30 seconds should be a perfectly reasonable update time.\\n        await ns.sleep(30000);\\n        let ownedServers = ns.getPurchasedServers();\\n        let servers = new ServerNode(ns);\\n        // find nukable servers.\\n        for (const server of servers\\n            .list()\\n            .filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts)) {\\n            // nuke them.\\n            ns.print(`nuking ${server.hostname}`);\\n            nuke(ns, server.hostname);\\n        }\\n        // clear the log.\\n        ns.clearLog();\\n        let backdoors = servers\\n            .list()\\n            .filter((s) => s.hasAdminRights &&\\n            !s.backdoorInstalled &&\\n            s.requiredHackingSkill < ns.getHackingLevel() &&\\n            s.hostname !== \\\"home\\\" &&\\n            !ownedServers.includes(s.hostname));\\n        // show the log if we have servers to backdoor\\n        if (backdoors.length === 0) {\\n            ns.print(\\\"No servers require a backdoor at this time.\\\");\\n            continue;\\n        }\\n        ns.tail();\\n        ns.print(`The following servers need to have the backdoor installed:`);\\n        ns.print(`==========================================================`);\\n        // find backdoorable servers.\\n        for (const server of backdoors) {\\n            // list them.\\n            ns.print(server.hostname);\\n        }\\n        ns.print(`==========================================================`);\\n    }\\n}\\n\",\"filename\":\"/phase2/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":499271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\n// - batchHack.js: This is your bread and butter batching script. It will calculate\\n//   the richest server that can be effectively hacked with the memory you have\\n//   available. Copy 'batch.js' to the source server and start a batch based\\n//   attack on the target server.\\nconst batchScript = \\\"/batching/batch.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will start your batch hacking.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // Find the richest server that we have enough memory to effectively\\n    // batch.\\n    const targetServer = await getTargetServer(ns);\\n    // start batching!\\n    if (!targetServer) {\\n        ns.tprint(\\\"Can't batch yet!\\\");\\n        return;\\n    }\\n    ns.tprint(`Hacking ${targetServer.hostname}`);\\n    ns.spawn(batchScript, 1, targetServer.hostname);\\n}\\nasync function getTargetServer(ns) {\\n    return getHackableServers(ns)[0];\\n}\\n\",\"filename\":\"/phase2/batchHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///6eb7358f-b32e-4255-9bb6-844c99fb2ffd\",\"moduleSequenceNumber\":497026},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///bcc7af83-043a-4ca1-9133-d4ee28cda09a\",\"moduleSequenceNumber\":497022},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///47ea135d-abd1-4336-99c8-26397232118d\",\"moduleSequenceNumber\":497030},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///39ecb5a8-3e06-4a90-8f25-709307c99adf\",\"moduleSequenceNumber\":497032},{\"filename\":\"cnct.js\",\"url\":\"blob:file:///5ec1ac74-d785-4824-904f-6703083f82d8\",\"moduleSequenceNumber\":497040},{\"filename\":\"/phase2/batchHack.js\",\"url\":\"blob:file:///10314f5c-1568-4296-8c71-a9bf21763687\",\"moduleSequenceNumber\":498071}],\"dependents\":[],\"ramUsage\":10.1,\"server\":\"home\",\"moduleSequenceNumber\":499273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will run continuously and expand your server for you. It will\\n      only work with Source File 4.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMaxRam(\\\"home\\\") < 1e9) {\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeRamCost()) {\\n            ns.upgradeHomeRam();\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeCoresCost()) {\\n            ns.upgradeHomeCores();\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase2/expandServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":145.85,\"server\":\"home\",\"moduleSequenceNumber\":499275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      Hacks the richest server using the rest of your RAM.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = undefined;\\n    for (const server of getHackableServers(ns)) {\\n        if (!richest || richest.moneyMax < server.moneyMax)\\n            richest = server;\\n    }\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    const hackScript = \\\"hack.js\\\";\\n    // calculate the maximum number of threads.\\n    let maxThreads = Math.floor((ns.getServerMaxRam(ns.getHostname()) -\\n        ns.getServerUsedRam(ns.getHostname()) +\\n        ns.getScriptRam(ns.getScriptName(), ns.getHostname())) /\\n        ns.getScriptRam(hackScript, ns.getHostname()));\\n    // hack the richest server\\n    if (maxThreads > 0)\\n        ns.spawn(hackScript, maxThreads, richest.hostname);\\n    else {\\n        ns.tprint(\\\"ERROR! Cannot spawn hack script. Out of memory.\\\");\\n    }\\n}\\n\",\"filename\":\"/phase2/hackRichest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.25,\"server\":\"home\",\"moduleSequenceNumber\":499277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMinRam } from \\\"purchase\\\";\\n// timing constants\\nconst seconds = 1000; //milliseconds\\nconst second = seconds;\\nconst minutes = 60 * seconds;\\nconst minute = minutes;\\nconst hours = 60 * minutes;\\nconst hour = hours;\\nconst days = 24 * hours;\\nconst day = days;\\nlet restartDuration = 1 * day;\\nconst scripts = [\\n    \\\"backdoor.js\\\",\\n    \\\"hacknet.js\\\",\\n    \\\"/contracts/start.js\\\",\\n    \\\"programs.js\\\",\\n    \\\"purchase.js\\\",\\n    \\\"/phase2/batchHack.js\\\",\\n    \\\"/stocks/start.js\\\",\\n    // \\\"shareAll.js\\\",\\n];\\nconst restartScripts = [\\n    \\\"/phase2/batchHack.js\\\",\\n    //\\n];\\nconst singularityScripts = [\\n    \\\"/expandServer.js\\\",\\n    //\\n];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This is a simple script that restarts the automated scripts periodically.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    for (const script of scripts) {\\n        ns.run(script);\\n        // This delay is to keep the scripts from colliding.\\n        await ns.sleep(5000);\\n    }\\n    while (true) {\\n        for (const script of restartScripts) {\\n            ns.run(script);\\n            // This delay is to keep the scripts from colliding.\\n            await ns.sleep(5000);\\n        }\\n        let hasFormulas = ns.fileExists(\\\"Formulas.exe\\\");\\n        if (hasFormulas) {\\n            restartDuration = 30 * minutes;\\n        }\\n        if (ns.getOwnedSourceFiles().filter((sf) => sf.n === 4).length > 0 ||\\n            ns.getPlayer().bitNodeN === 4)\\n            for (const script of singularityScripts) {\\n                ns.scriptKill(script, ns.getHostname());\\n                ns.run(script);\\n            }\\n        const restartTime = Date.now() + restartDuration;\\n        while (true) {\\n            ns.clearLog();\\n            ns.tail();\\n            ns.print(`\\n      Hack Profit  : ${ns.nFormat(ns.getScriptIncome()[0], \\\"$0.000a\\\")} / sec.\\n      Hack XP      : ${ns.nFormat(ns.getScriptExpGain(), \\\"0.000a\\\")} / sec.\\n`);\\n            ns.print(`Restart in ${ns.tFormat(restartTime - Date.now())}`);\\n            await ns.sleep(second);\\n            if (Date.now() >= restartTime)\\n                break;\\n            if (!hasFormulas && ns.fileExists(\\\"Formulas.exe\\\")) {\\n                restartDuration = 30 * minutes;\\n                break;\\n            }\\n            if (getMinRam(ns) === ns.getPurchasedServerMaxRam())\\n                ns.spawn(\\\"restart.js\\\");\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase2/restart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"purchase.js\",\"url\":\"blob:file:///1a44be24-ac15-45dd-8eb8-ed7f549cb5d5\",\"moduleSequenceNumber\":562},{\"filename\":\"/phase2/restart.js\",\"url\":\"blob:file:///bc801b0c-666a-42e2-be75-c7264e945b99\",\"moduleSequenceNumber\":46665}],\"dependents\":[],\"ramUsage\":13.95,\"server\":\"home\",\"moduleSequenceNumber\":499279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { ServerNode } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will monitor for servers that need a backdoor installed.\\n      It will also nuke any server that needs it.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    const programs = new ProgramData(ns);\\n    while (true) {\\n        // 30 seconds should be a perfectly reasonable update time.\\n        await ns.sleep(30000);\\n        let servers = new ServerNode(ns);\\n        // find nukable servers.\\n        for (const server of servers\\n            .list()\\n            .filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts)) {\\n            // nuke them.\\n            ns.print(`nuking ${server.hostname}`);\\n            nuke(ns, server.hostname);\\n        }\\n        // clear the log.\\n        ns.clearLog();\\n        let backdoors = servers\\n            .list()\\n            .filter((s) => s.hasAdminRights &&\\n            !s.backdoorInstalled &&\\n            s.requiredHackingSkill < ns.getHackingLevel() &&\\n            s.hostname !== \\\"home\\\" &&\\n            !ns.getPurchasedServers().includes(s.hostname));\\n        // show the log if we have servers to backdoor\\n        if (backdoors.length === 0) {\\n            ns.print(\\\"No servers require a backdoor at this time.\\\");\\n            continue;\\n        }\\n        ns.tail();\\n        ns.print(`The following servers need to have the backdoor installed:`);\\n        ns.print(`==========================================================`);\\n        // find backdoorable servers.\\n        for (const server of backdoors) {\\n            // list them.\\n            ns.print(server.hostname);\\n        }\\n        ns.print(`==========================================================`);\\n    }\\n}\\n\",\"filename\":\"/phase3/backdoor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":499281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\n// - batchHack.js: This is your bread and butter batching script. It will calculate\\n//   the richest server that can be effectively hacked with the memory you have\\n//   available. Copy 'batch.js' to the source server and start a batch based\\n//   attack on the target server.\\nconst batchScript = \\\"/batching/batch.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will start your batch hacking.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // Find the richest server that we have enough memory to effectively\\n    // batch.\\n    const targetServers = getTargetServers(ns);\\n    // start batching!\\n    if (!targetServers || targetServers.length === 0) {\\n        ns.tprint(\\\"Can't batch yet!\\\");\\n        return;\\n    }\\n    for (const targetServer of targetServers) {\\n        ns.tprint(`Hacking ${targetServer.hostname}`);\\n        ns.run(batchScript, 1, targetServer.hostname);\\n    }\\n}\\nfunction getTargetServers(ns) {\\n    const numServers = ns.getPurchasedServers().length + 1;\\n    // const numServers = 1;\\n    return getHackableServers(ns).slice(0, numServers);\\n}\\n\",\"filename\":\"/phase3/batchHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.1,\"server\":\"home\",\"moduleSequenceNumber\":499283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will run continuously and expand your server for you. It will\\n      only work with Source File 4.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMaxRam(\\\"home\\\") < 1e9) {\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeRamCost()) {\\n            ns.upgradeHomeRam();\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeCoresCost()) {\\n            ns.upgradeHomeCores();\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase3/expandServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":145.85,\"server\":\"home\",\"moduleSequenceNumber\":499285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"cnct\\\";\\nexport async function main(ns) {\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      Hacks the richest server using the rest of your RAM.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // find the richest server.\\n    let richest = undefined;\\n    for (const server of getHackableServers(ns)) {\\n        if (!richest || richest.moneyMax < server.moneyMax)\\n            richest = server;\\n    }\\n    if (!richest) {\\n        ns.tprint(`ERROR! You don't have any servers!`);\\n        return;\\n    }\\n    const hackScript = \\\"hack.js\\\";\\n    // calculate the maximum number of threads.\\n    let maxThreads = Math.floor((ns.getServerMaxRam(ns.getHostname()) -\\n        ns.getServerUsedRam(ns.getHostname()) +\\n        ns.getScriptRam(ns.getScriptName(), ns.getHostname())) /\\n        ns.getScriptRam(hackScript, ns.getHostname()));\\n    // hack the richest server\\n    if (maxThreads > 0)\\n        ns.spawn(hackScript, maxThreads, richest.hostname);\\n    else {\\n        ns.tprint(\\\"ERROR! Cannot spawn hack script. Out of memory.\\\");\\n    }\\n}\\n\",\"filename\":\"/phase3/hackRichest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.25,\"server\":\"home\",\"moduleSequenceNumber\":499287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// timing constants\\nconst seconds = 1000; //milliseconds\\nconst second = seconds;\\nconst minutes = 60 * seconds;\\nconst minute = minutes;\\nconst hours = 60 * minutes;\\nconst hour = hours;\\nconst days = 24 * hours;\\nconst day = days;\\nlet restartDuration = 1 * day;\\nrestartDuration = 30 * minutes;\\nconst scripts = [\\n    \\\"hacknet.js\\\",\\n    \\\"backdoor.js\\\",\\n    \\\"/phase3/batchHack.js\\\",\\n    \\\"/contracts/start.js\\\",\\n    \\\"programs.js\\\",\\n    \\\"purchase.js\\\",\\n    \\\"shareAll.js\\\",\\n];\\nconst restartScripts = [\\n    \\\"/phase3/batchHack.js\\\",\\n    \\\"/stocks/start.js\\\",\\n    \\\"shareAll.js\\\",\\n    //\\n];\\nconst singularityScripts = [\\n    \\\"expandServer.js\\\",\\n    //\\n];\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This is a simple script that restarts the automated scripts periodically.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    for (const script of scripts) {\\n        ns.run(script);\\n        // This delay is to keep the scripts from colliding.\\n        await ns.sleep(5000);\\n    }\\n    while (true) {\\n        for (const script of restartScripts) {\\n            ns.run(script);\\n            // This delay is to keep the scripts from colliding.\\n            await ns.sleep(5000);\\n        }\\n        let hasFormulas = ns.fileExists(\\\"Formulas.exe\\\");\\n        if (hasFormulas) {\\n            restartDuration = 30 * minutes;\\n        }\\n        if (ns.getOwnedSourceFiles().filter((sf) => sf.n === 4).length > 0 ||\\n            ns.getPlayer().bitNodeN === 4)\\n            for (const script of singularityScripts) {\\n                ns.scriptKill(script, ns.getHostname());\\n                ns.run(script);\\n            }\\n        const restartTime = Date.now() + restartDuration;\\n        while (true) {\\n            ns.clearLog();\\n            ns.tail();\\n            ns.print(`\\n      Hack Profit  : ${ns.nFormat(ns.getScriptIncome()[0], \\\"$0.000a\\\")} / sec.\\n      Hack XP      : ${ns.nFormat(ns.getScriptExpGain(), \\\"0.000a\\\")} / sec.\\n`);\\n            ns.print(`Restart in ${ns.tFormat(restartTime - Date.now())}`);\\n            await ns.sleep(second);\\n            if (Date.now() >= restartTime)\\n                break;\\n            if (!hasFormulas && ns.fileExists(\\\"Formulas.exe\\\")) {\\n                restartDuration = 30 * minutes;\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"filename\":\"/phase3/restart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.55,\"server\":\"home\",\"moduleSequenceNumber\":499289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getFolio(ns) {\\n    const symbols = ns.stock.getSymbols();\\n    let folio = [];\\n    for (const sym of symbols) {\\n        const [shares] = ns.stock.getPosition(sym);\\n        if (shares > 0) {\\n            folio.push({ sym, shares });\\n        }\\n    }\\n    return folio;\\n}\\n\",\"filename\":\"/stocks/folio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":499291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolio } from \\\"stocks/folio\\\";\\nexport async function main(ns) {\\n    ns.scriptKill(\\\"/stocks/start.js\\\", \\\"home\\\");\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.tail();\\n    ns.print(\\\"Liquidating assets.\\\");\\n    let total = 0;\\n    const folio = getFolio(ns);\\n    for (const { sym, shares } of folio) {\\n        ns.print(`Waiting for ${sym} to stop growing.`);\\n        while (ns.stock.getPosition(sym)[0] > 0) {\\n            let increaseChance = ns.stock.getForecast(sym);\\n            if (increaseChance <= 0.5) {\\n                let stockPrice = ns.stock.sell(sym, shares);\\n                ns.print(`${ns.nFormat(shares, \\\"0.000a\\\")} of ${sym} sold for a total of ${ns.nFormat(stockPrice * shares, \\\"$0.000a\\\")} \\n                    because it's growth is stopping.`);\\n                total += stockPrice * shares;\\n            }\\n            else {\\n                await ns.sleep(1);\\n            }\\n        }\\n    }\\n    ns.print(`All stocks sold for a total of ${total}`);\\n}\\n\",\"filename\":\"/stocks/liquidate.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":11.6,\"server\":\"home\",\"moduleSequenceNumber\":499293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// % of money to use in buying stocks\\n// const budget = 1;\\n// % at which to buy or sell stocks\\n// const buyAt = 60;\\n// Profit amount to sell the stock at.\\n// const sellAt = 10000000;\\n// TODO short stocks\\n// const shortAt = 40;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let stocks = ns.stock.getSymbols();\\n    for (let stock of stocks) {\\n        let increaseChance = ns.stock.getForecast(stock) * 100;\\n        ns.tprint(`${stock} - ${increaseChance.toLocaleString(undefined, {\\n            minimumFractionDigits: 2,\\n        })}%`);\\n    }\\n}\\n\",\"filename\":\"/stocks/listall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":499295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolio } from \\\"stocks/folio\\\";\\n// % of money to use in buying stocks\\nconst budget = 0.9;\\n// % at which to buy or sell stocks\\nconst buyAt = 0.6;\\nconst sellBellow = 0.5;\\n// const stockToWatch = \\\"MGCP\\\"; // Megacorp\\n// TODO short stocks\\n// const shortAt = 40;\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    try {\\n        if (!ns.stock.purchase4SMarketData() ||\\n            !ns.stock.purchase4SMarketDataTixApi()) {\\n            ns.tprint(\\\"You need 4S Maket Data Api access to effectively trade stocks!\\\");\\n            return;\\n        }\\n    }\\n    catch (error) {\\n        ns.tprint(\\\"You need 4S Maket Data Api access to effectively trade stocks!\\\");\\n        return;\\n    }\\n    while (true) {\\n        await manageStock(ns);\\n        await ns.sleep(1);\\n    }\\n}\\n/** @param {NS} ns **/\\nasync function manageStock(ns) {\\n    // let stock = stockToWatch;\\n    let folio = getFolio(ns);\\n    if (folio.length > 0) {\\n        // we have a stock - get it and monitor if it is increasing/decreasing\\n        let { sym, shares } = folio[0];\\n        while (ns.stock.getPosition(sym)[0] > 0) {\\n            let increaseChance = ns.stock.getForecast(sym);\\n            if (increaseChance <= sellBellow) {\\n                let total = ns.stock.sell(sym, shares);\\n                ns.tail();\\n                ns.print(`Sold:\\n        shares    : ${ns.nFormat(shares, \\\"0.00a\\\")} \\n        stock     : ${sym}\\n        total     : ${ns.nFormat(total * shares, \\\"$0.000a\\\")} \\n        increase%   : ${increaseChance.toLocaleString(undefined, {\\n                    style: \\\"percent\\\",\\n                })}\\n          `);\\n            }\\n            else {\\n                await ns.sleep(1);\\n            }\\n        }\\n    }\\n    else {\\n        // find a stock to get\\n        const stock = getBestStock(ns);\\n        let increaseChance = ns.stock.getForecast(stock);\\n        let maxShares = getMaxShares(ns, stock);\\n        if (increaseChance >= buyAt) {\\n            let cost = ns.stock.buy(stock, maxShares);\\n            if (cost === 0) {\\n            }\\n            ns.tail();\\n            ns.print(`Bought:\\n        shares      : ${ns.nFormat(maxShares, \\\"0.000a\\\")}\\n        stock       : ${stock} \\n        total       : ${ns.nFormat(cost * maxShares, \\\"$0.000a\\\")}\\n        increase%   : ${increaseChance.toLocaleString(undefined, {\\n                style: \\\"percent\\\",\\n            })}\\n        `);\\n        }\\n    }\\n}\\nfunction getMaxShares(ns, sym) {\\n    let cashAvailable = ns.getServerMoneyAvailable(\\\"home\\\") * budget;\\n    let stockCost = ns.stock.getBidPrice(sym);\\n    let maxPurchaseable = Math.min(ns.stock.getMaxShares(sym), cashAvailable / stockCost);\\n    return maxPurchaseable;\\n}\\nexport function getBestStock(ns) {\\n    let best = [\\\"\\\", 0];\\n    for (const stock of ns.stock.getSymbols()) {\\n        let increaseChance = ns.stock.getForecast(stock);\\n        if (increaseChance > best[1]) {\\n            best = [stock, increaseChance];\\n        }\\n    }\\n    return best[0];\\n}\\n\",\"filename\":\"/stocks/start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":22.2,\"server\":\"home\",\"moduleSequenceNumber\":499297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketData\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketDataTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const keys = {\\n    serverNodes: \\\"ServerNodes\\\",\\n};\\n// localStorage Functions\\nexport function setItem(key, value) {\\n    localStorage.setItem(key, JSON.stringify(value));\\n}\\nexport function getItem(key) {\\n    JSON.parse(localStorage.getItem(key) || JSON.stringify(undefined));\\n}\\n\",\"filename\":\"/utils/localStorage.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":499299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ProgramData } from \\\"utils/ProgramData\\\";\\nexport function nuke(ns, target) {\\n    const programs = new ProgramData(ns);\\n    for (const p of programs.programs) {\\n        if (p.exists)\\n            p.execute(target);\\n    }\\n    ns.nuke(target);\\n}\\n\",\"filename\":\"/utils/nuke.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":499301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ProgramData {\\n    constructor(ns) {\\n        this.programs = [\\n            {\\n                filename: \\\"BruteSSH.exe\\\",\\n                hackingLevel: 50,\\n                execute: ns.brutessh,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"FTPCrack.exe\\\",\\n                hackingLevel: 100,\\n                execute: ns.ftpcrack,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"relaySMTP.exe\\\",\\n                hackingLevel: 250,\\n                execute: ns.relaysmtp,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"HTTPWorm.exe\\\",\\n                hackingLevel: 500,\\n                execute: ns.httpworm,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n            {\\n                filename: \\\"SQLInject.exe\\\",\\n                hackingLevel: 750,\\n                execute: ns.sqlinject,\\n                get exists() {\\n                    return ns.fileExists(this.filename);\\n                },\\n            },\\n        ];\\n    }\\n    get hackablePorts() {\\n        let total = 0;\\n        for (const p of this.programs) {\\n            if (p.exists)\\n                total++;\\n        }\\n        return total;\\n    }\\n}\\n\",\"filename\":\"/utils/ProgramData.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":499303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\n// ONLY USE FOR TESTING\\nexport async function main(ns) {\\n    ns.tprint(`This script doesn't do anything right now. Call a function from it if you want to use it.`);\\n}\\nexport function kill(ns, predicate) {\\n    const tree = new ServerTree(ns);\\n    const processes = [];\\n    for (const server of tree.home.list()) {\\n        for (const ps of ns.ps(server.hostname)) {\\n            processes.push([ps, server.hostname]);\\n        }\\n    }\\n    for (const [ps, server] of processes) {\\n        if (predicate(ps, server))\\n            ns.kill(ps.pid);\\n    }\\n}\\n\",\"filename\":\"/utils/scriptKilling.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.5,\"server\":\"home\",\"moduleSequenceNumber\":499305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { setItem, keys } from \\\"utils/localStorage.js\\\";\\nexport class ServerNode {\\n    // Constructs a server node and traverses the tree to create children nodes as\\n    // well.\\n    constructor(ns, name = \\\"home\\\", parent) {\\n        this.children = [];\\n        this.ns = ns;\\n        this.name = name;\\n        this.parent = parent;\\n        this.data = ns.getServer(name);\\n        const children = ns.scan(name);\\n        if (parent && children.includes(parent)) {\\n            const index = children.indexOf(parent);\\n            delete children[index];\\n        }\\n        this.children = children.map((child) => new ServerNode(ns, child, name));\\n    }\\n    // This finds a node with a given name and returns the path to it as an array\\n    // of strings.\\n    find(name, path = []) {\\n        // check if we are found.\\n        if (this.name === name) {\\n            path.push(this.name);\\n            return path;\\n        }\\n        // shallow search first\\n        if (this.children.map((c) => c.name).includes(name)) {\\n            path.push(this.name);\\n            path.push(name);\\n            return path;\\n        }\\n        // now we go deeper\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            let branch = child.find(name, path);\\n            if (branch.length > 0) {\\n                // we have found our server.\\n                return [this.name, ...branch];\\n            }\\n        }\\n        // if nothing is found we return an empty list.\\n        return [];\\n    }\\n    // This simply returns an array of all the servers.\\n    list() {\\n        let result = [this.data];\\n        // go through each child and add it and all it's children.\\n        for (const child of this.children) {\\n            if (!child)\\n                continue;\\n            if (!result.map((v) => v.hostname).includes(child.name))\\n                result.push(child.data);\\n            if (child.children.length > 0) {\\n                result = [...result, ...child.list()];\\n            }\\n            else\\n                result.push(child.data);\\n        }\\n        // uniquify the results.\\n        return [...new Set(result)];\\n    }\\n    filter(predicate) {\\n        return this.list().filter(predicate);\\n    }\\n}\\nexport class ServerTree {\\n    // Initializes the server tree and saves it to local storage.\\n    constructor(ns) {\\n        this.home = new ServerNode(ns);\\n        setItem(keys.serverNodes, this.home);\\n    }\\n}\\n\",\"filename\":\"/utils/ServerTree.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":499307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function copyCmd(ns, cmd) {\\n    const terminalInput = document.getElementById(\\\"terminal-input\\\");\\n    if (!terminalInput) {\\n        ns.tprint(\\\"Couldn't get terminal-input field.\\\");\\n        return;\\n    }\\n    terminalInput.value = cmd;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({ target: terminalInput });\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\nexport function runCmd(ns, cmd) {\\n    copyCmd(ns, cmd);\\n    document.dispatchEvent(new KeyboardEvent(\\\"keydown\\\", { keyCode: 13 }));\\n}\\n\",\"filename\":\"/utils/terminal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":499309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const server = ns.args[0];\\n    if (args.help || !server) {\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    const msg = ns.args[1];\\n    const loop = ns.args[2];\\n    if (loop)\\n        await analyzeServerLoop(ns, server, msg);\\n    else\\n        analyzeServer(ns, server, msg);\\n}\\nexport function analyzeServer(ns, server, msg = \\\"\\\") {\\n    const ram = [ns.getServerMaxRam(server), ns.getServerUsedRam(server)];\\n    const money = ns.getServerMoneyAvailable(server);\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    const minSec = ns.getServerMinSecurityLevel(server);\\n    const sec = ns.getServerSecurityLevel(server);\\n    if (msg)\\n        ns.tprint(msg);\\n    ns.tprint(`    Hack Profit  : ${ns.nFormat(ns.getScriptIncome()[0], \\\"$0.000a\\\")} / sec.\\n    Hack XP      : ${ns.nFormat(ns.getScriptExpGain(), \\\"0.000a\\\")} / sec.`);\\n    ns.tprint(`\\n\\n${server}:\\n    RAM          : ${ram[1]} / ${ram[0]} (${(ram[1] / ram[0]) * 100}%)\\n    $            : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${((money / maxMoney) * 100).toFixed(2)}%)\\n    security     : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth       : ${ns.getServerGrowth(server)}\\n    hack time    : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time    : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time  : ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2      : ${ns.growthAnalyze(server, 2).toFixed(2)} threads\\n    grow x3      : ${ns.growthAnalyze(server, 3).toFixed(2)} threads\\n    grow x4      : ${ns.growthAnalyze(server, 4).toFixed(2)} threads\\n    hack 10%     : ${(0.1 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%     : ${(0.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%     : ${(0.5 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance   : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\\nexport async function analyzeServerLoop(ns, server, msg = \\\"\\\") {\\n    while (true) {\\n        await ns.sleep(1000);\\n        ns.clearLog();\\n        ns.tail();\\n        const ram = [ns.getServerMaxRam(server), ns.getServerUsedRam(server)];\\n        const money = ns.getServerMoneyAvailable(server);\\n        const maxMoney = ns.getServerMaxMoney(server);\\n        const minSec = ns.getServerMinSecurityLevel(server);\\n        const sec = ns.getServerSecurityLevel(server);\\n        if (msg)\\n            ns.print(msg);\\n        ns.print(`    Hack Profit  : ${ns.nFormat(ns.getScriptIncome()[0], \\\"$0.000a\\\")} / sec.\\n    Hack XP      : ${ns.nFormat(ns.getScriptExpGain(), \\\"0.000a\\\")} / sec.`);\\n        ns.print(`\\n\\n${server}:\\n    RAM          : ${ram[1]} / ${ram[0]} (${(ram[1] / ram[0]) * 100}%)\\n    $            : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${((money / maxMoney) * 100).toFixed(2)}%)\\n    security     : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth       : ${ns.getServerGrowth(server)}\\n    hack time    : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time    : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time  : ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2      : ${ns.growthAnalyze(server, 2).toFixed(2)} threads\\n    grow x3      : ${ns.growthAnalyze(server, 3).toFixed(2)} threads\\n    grow x4      : ${ns.growthAnalyze(server, 4).toFixed(2)} threads\\n    hack 10%     : ${(0.1 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%     : ${(0.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%     : ${(0.5 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance   : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n    }\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\n\",\"filename\":\"analyzeServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"analyzeServer.js\",\"url\":\"blob:file:///16be65d2-9bc1-4303-9279-461b27fe7f64\",\"moduleSequenceNumber\":498073}],\"dependents\":[],\"ramUsage\":5.55,\"server\":\"home\",\"moduleSequenceNumber\":499311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nuke } from \\\"utils/nuke\\\";\\nimport { ServerNode } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.clearLog();\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will monitor for servers that need a backdoor installed.\\n      It will also nuke any server that needs it.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    const programs = new ProgramData(ns);\\n    while (true) {\\n        await ns.sleep(1);\\n        let servers = new ServerNode(ns);\\n        // find nukable servers.\\n        for (const server of servers\\n            .list()\\n            .filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts)) {\\n            // nuke them.\\n            ns.print(`nuking ${server.hostname}`);\\n            nuke(ns, server.hostname);\\n        }\\n        // clear the log.\\n        ns.clearLog();\\n        let backdoors = servers\\n            .list()\\n            .filter((s) => s.hasAdminRights &&\\n            !s.backdoorInstalled &&\\n            s.requiredHackingSkill < ns.getHackingLevel() &&\\n            s.hostname !== \\\"home\\\" &&\\n            !ns.getPurchasedServers().includes(s.hostname));\\n        // show the log if we have servers to backdoor\\n        if (backdoors.length === 0) {\\n            ns.print(\\\"No servers require a backdoor at this time.\\\");\\n            continue;\\n        }\\n        ns.tail();\\n        ns.print(`Backdoor the following servers:`);\\n        ns.print(`===============================`);\\n        // find backdoorable servers.\\n        for (const server of backdoors) {\\n            // list them.\\n            ns.print(server.hostname);\\n        }\\n        ns.print(`===============================`);\\n    }\\n}\\n\",\"filename\":\"backdoor.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///8223d0bb-7ce0-4594-a806-9ab307091fcb\",\"moduleSequenceNumber\":499303},{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///59e24e87-8ec5-4915-affe-f78dfe7ea551\",\"moduleSequenceNumber\":499299},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///68556cb3-3113-4083-af26-0948bb8851dc\",\"moduleSequenceNumber\":499307},{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///d0275d6a-2c82-4202-b49b-0b36d46bdcf2\",\"moduleSequenceNumber\":499303},{\"filename\":\"/utils/nuke.js\",\"url\":\"blob:file:///9e858976-473b-4087-a6ef-fd34f108a1af\",\"moduleSequenceNumber\":499301},{\"filename\":\"backdoor.js\",\"url\":\"blob:file:///73cd11d8-eac8-4ad0-8feb-0aa63fd20669\",\"moduleSequenceNumber\":499347}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":499347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerTree } from \\\"utils/ServerTree\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\") + \\\"backdoor;\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"bkdr.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///8b576d0e-104b-479f-a89f-350b8b663458\",\"moduleSequenceNumber\":499299},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///bf045f3c-62db-45b7-bc18-fef3b9f94ebf\",\"moduleSequenceNumber\":499307},{\"filename\":\"/utils/terminal.js\",\"url\":\"blob:file:///8fbfd92a-b631-4f28-bae8-0bb8b4193dc9\",\"moduleSequenceNumber\":499309},{\"filename\":\"bkdr.js\",\"url\":\"blob:file:///977d26fa-276b-46ef-bd35-0352759b7027\",\"moduleSequenceNumber\":499349}],\"dependents\":[],\"ramUsage\":28.9,\"server\":\"home\",\"moduleSequenceNumber\":499349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// import { copyCmd, ServerTree, ProgramData } from \\\"utils/index\\\";\\nimport { copyCmd } from \\\"utils/terminal\\\";\\nimport { ServerNode, ServerTree } from \\\"utils/ServerTree\\\";\\nimport { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const target = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !target) {\\n        ns.tprint(`\\n      This script will connect you to any server regardless of location.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} TARGET_SERVER\\n      `);\\n        return;\\n    }\\n    let tree = new ServerTree(ns);\\n    let path = tree.home.find(target).map((name) => {\\n        if (name === \\\"home\\\")\\n            return \\\"home;\\\";\\n        else\\n            return `connect ${name};`;\\n    });\\n    copyCmd(ns, path.join(\\\"\\\"));\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\nexport function getNukableServers(ns) {\\n    let programs = new ProgramData(ns);\\n    let tree = new ServerTree(ns);\\n    return tree.home.filter((s) => !s.hasAdminRights && s.numOpenPortsRequired <= programs.hackablePorts);\\n}\\n// This returns all the servers that we can hack sorted by the amount of money\\n// we can make off them.\\nexport function getHackableServers(ns) {\\n    const tree = new ServerTree(ns);\\n    return tree.home\\n        .filter((s) => s.requiredHackingSkill <= ns.getHackingLevel() &&\\n        s.hasAdminRights &&\\n        s.hostname !== \\\"home\\\" &&\\n        !ns.getPurchasedServers().includes(s.hostname) &&\\n        s.moneyMax > 0\\n    // &&\\n    //   s.moneyAvailable > 0 // Exclude dead servers.\\n    )\\n        .sort((a, b) => {\\n        const formulas = ns.fileExists(\\\"Formulas.exe\\\");\\n        if (formulas) {\\n            a.hackDifficulty = a.minDifficulty;\\n            b.hackDifficulty = b.minDifficulty;\\n            const player = ns.getPlayer();\\n            const aValue = (a.moneyMax * ns.formulas.hacking.hackChance(a, player)) /\\n                ns.formulas.hacking.hackTime(a, player);\\n            const bValue = (b.moneyMax * ns.formulas.hacking.hackChance(b, player)) /\\n                ns.formulas.hacking.hackTime(b, player);\\n            return bValue - aValue;\\n        }\\n        else {\\n            const aValue = (a.moneyMax * ns.hackAnalyzeChance(a.hostname)) /\\n                ns.getHackTime(a.hostname);\\n            const bValue = (b.moneyMax * ns.hackAnalyzeChance(b.hostname)) /\\n                ns.getHackTime(b.hostname);\\n            return bValue - aValue;\\n        }\\n    });\\n}\\nexport function getBackdoorableServers(ns) {\\n    let tree = new ServerTree(ns);\\n    return (tree.home.filter((s) => !s.backdoorInstalled && s.hasAdminRights) || []);\\n}\\nexport function getRunnableServers(ns) {\\n    const tree = new ServerNode(ns);\\n    return tree\\n        .list()\\n        .filter((s) => s.hasAdminRights)\\n        .sort((a, b) => b.maxRam - b.ramUsed - (a.maxRam - a.ramUsed));\\n}\\n\",\"filename\":\"cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.1,\"server\":\"home\",\"moduleSequenceNumber\":499317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This script will run continuously and expand your server for you. It will\\n      only work with Source File 4.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMaxRam(\\\"home\\\") < 1e9) {\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeRamCost()) {\\n            ns.upgradeHomeRam();\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeCoresCost()) {\\n            ns.upgradeHomeCores();\\n        }\\n    }\\n}\\n\",\"filename\":\"expandServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":145.85,\"server\":\"home\",\"moduleSequenceNumber\":499319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":499321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":499323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const allowancePercentage = 0.01;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    // buy our first node if needed.\\n    if (ns.hacknet.numNodes() === 0)\\n        ns.hacknet.purchaseNode();\\n    while (true) {\\n        ns.disableLog(\\\"ALL\\\");\\n        ns.clearLog();\\n        for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n            let gain = [0, 0, 0];\\n            let currentCash = ns.getServerMoneyAvailable(\\\"home\\\");\\n            currentCash *= allowancePercentage;\\n            if (ns.hacknet.getPurchaseNodeCost() <= currentCash) {\\n                ns.hacknet.purchaseNode();\\n                continue;\\n            }\\n            else {\\n                ns.print(`Cannot afford a new node with ${ns.nFormat(currentCash, \\\"$0.00a\\\")}`);\\n            }\\n            const node = ns.hacknet.getNodeStats(i);\\n            if (node.level < 200) {\\n                gain[0] =\\n                    ((node.level + 1) *\\n                        1.6 *\\n                        Math.pow(1.035, node.ram - 1) *\\n                        ((node.cores + 5) / 6)) /\\n                        ns.hacknet.getLevelUpgradeCost(i, 1);\\n            }\\n            else {\\n                gain[0] = 0;\\n            }\\n            if (node.ram < 64) {\\n                gain[1] =\\n                    (node.level *\\n                        1.6 *\\n                        Math.pow(1.035, node.ram * 2 - 1) *\\n                        ((node.cores + 5) / 6)) /\\n                        ns.hacknet.getRamUpgradeCost(i, 1);\\n            }\\n            else {\\n                gain[1] = 0;\\n            }\\n            if (node.cores < 16) {\\n                gain[2] =\\n                    (node.level *\\n                        1.6 *\\n                        Math.pow(1.035, node.ram - 1) *\\n                        ((node.cores + 6) / 6)) /\\n                        ns.hacknet.getCoreUpgradeCost(i, 1);\\n            }\\n            else {\\n                gain[2] = 0;\\n            }\\n            // ns.print(`Level Upgrade: ${gain[0]}`);\\n            // ns.print(`Ram Upgrade: ${gain[1]}`);\\n            // ns.print(`Core Upgrade: ${gain[2]}`);\\n            let topgain = 0;\\n            for (let g of gain) {\\n                if (g > topgain) {\\n                    topgain = g;\\n                }\\n            }\\n            if (topgain === 0) {\\n                ns.print(`All Gains maxed on Node ${i}`);\\n                continue;\\n            }\\n            if (topgain === gain[0] &&\\n                ns.hacknet.getLevelUpgradeCost(i, 1) < currentCash) {\\n                ns.print(`Upgrading Level on Node ${i}`);\\n                ns.hacknet.upgradeLevel(i, 1);\\n            }\\n            if (topgain === gain[1] &&\\n                ns.hacknet.getRamUpgradeCost(i, 1) < currentCash) {\\n                ns.print(`Upgrading Ram on Node ${i}`);\\n                ns.hacknet.upgradeRam(i, 1);\\n            }\\n            if (topgain === gain[2] &&\\n                ns.hacknet.getCoreUpgradeCost(i, 1) < currentCash) {\\n                ns.print(`Upgrading Cores on Node ${i}`);\\n                ns.hacknet.upgradeCore(i, 1);\\n            }\\n            else {\\n                ns.print(`Cannot afford to upgrade Node ${i} with ${ns.nFormat(currentCash, \\\"$0.00a\\\")}`);\\n            }\\n        }\\n        await ns.sleep(1);\\n    }\\n}\\n\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:file:///36a0f6a4-acc9-430b-b4be-046aea58012a\",\"moduleSequenceNumber\":499345}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":499345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ProgramData } from \\\"utils/ProgramData\\\";\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This monitors for programs that need created and creates the program if\\n      you have Source File 4. If not it prompts the user to create the program.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    ns.disableLog(\\\"ALL\\\");\\n    const data = new ProgramData(ns);\\n    while (true) {\\n        await ns.sleep(30 * 1000);\\n        ns.clearLog();\\n        let neededPrograms = [];\\n        for (const program of data.programs) {\\n            if (!program.exists)\\n                neededPrograms.push(program.filename);\\n            else\\n                continue;\\n            if (program.hackingLevel <= ns.getHackingLevel()) {\\n                // this program needs created.\\n                if (!ns.scriptRunning(\\\"/actions/programming.js\\\", ns.getHostname()))\\n                    ns.run(\\\"/actions/programming.js\\\", 1, program.filename);\\n            }\\n        }\\n        if (neededPrograms.length === 0)\\n            return;\\n        else {\\n            ns.print(`Need these programs:\\n        ${neededPrograms.join(\\\"\\\\n\\\")}`);\\n        }\\n    }\\n}\\n\",\"filename\":\"programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/ProgramData.js\",\"url\":\"blob:file:///2b63f3b4-ccdd-4468-8798-73655fda6553\",\"moduleSequenceNumber\":549},{\"filename\":\"programs.js\",\"url\":\"blob:file:///29b2afda-a5bc-428e-a277-3c278d17bd54\",\"moduleSequenceNumber\":46669}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":499329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(`\\n      This will purchase the largest possible servers.\\n\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    while (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\n        await ns.sleep(1000);\\n        ns.clearLog();\\n        ns.tail();\\n        const ram = await calculateRam(ns);\\n        const price = ns.getPurchasedServerCost(ram);\\n        const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\n        if (moneyAvailable > price) {\\n            const serverName = `pserver-${Date.now()}`;\\n            ns.print(`Buying server ${serverName} for ${ns.nFormat(price, \\\"$0.000a\\\")}`);\\n            ns.purchaseServer(`pserver-${Date.now()}`, ram);\\n        }\\n        else {\\n            ns.print(`You need ${ns.nFormat(price, \\\"$0.000a\\\")} to purchase a server with ${ns.nFormat(ram * 1e9, \\\"0.000b\\\")} of RAM`);\\n        }\\n    }\\n    ns.clearLog();\\n    ns.print(\\\"All servers have been purchased! Working on upgrades.\\\");\\n    while (getMinRam(ns) < ns.getPurchasedServerMaxRam()) {\\n        await ns.sleep(1000);\\n        ns.clearLog();\\n        ns.tail();\\n        const ram = await calculateRam(ns);\\n        const price = ns.getPurchasedServerCost(ram);\\n        const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\n        const serverName = ns\\n            .getPurchasedServers()\\n            .sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b))[0];\\n        if (moneyAvailable > price) {\\n            // find the server with the least amount of ram.\\n            ns.print(`Upgrading server ${serverName} from ${ns.nFormat(ns.getServerMaxRam(serverName) * 1e9, \\\"0.000b\\\")} to ${ns.nFormat(ram * 1e9, \\\"0.000b\\\")} of RAM for ${ns.nFormat(price, \\\"$0.000a\\\")}`);\\n            ns.enableLog(\\\"deleteServer\\\");\\n            ns.enableLog(\\\"purchaseServer\\\");\\n            ns.killall(serverName);\\n            ns.deleteServer(serverName);\\n            ns.purchaseServer(serverName, ram);\\n        }\\n        else {\\n            ns.print(`You need ${ns.nFormat(price, \\\"$0.000a\\\")} to upgrade ${serverName} from ${ns.nFormat(ns.getServerMaxRam(serverName) * 1e9, \\\"0.000b\\\")} to ${ns.nFormat(ram * 1e9, \\\"0.000b\\\")} of RAM`);\\n        }\\n    }\\n    ns.clearLog();\\n    ns.print(\\\"All servers have been Upgraded!\\\");\\n}\\nasync function calculateRam(ns) {\\n    return getMinRam(ns) * 2;\\n}\\nexport function getMinRam(ns) {\\n    if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit())\\n        return 32;\\n    const serverName = ns\\n        .getPurchasedServers()\\n        .sort((a, b) => ns.getServerMaxRam(a) - ns.getServerMaxRam(b))[0];\\n    return ns.getServerMaxRam(serverName) || 32;\\n}\\n\",\"filename\":\"purchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.35,\"server\":\"home\",\"moduleSequenceNumber\":499331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMinRam } from \\\"purchase\\\";\\nimport { kill } from \\\"utils/scriptKilling\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This is a script that will detect which phase you are in and restart your hacking scripts.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()}\\n      `);\\n        return;\\n    }\\n    // kill all scripts to start.\\n    kill(ns, (ps) => ps.filename !== ns.getScriptName());\\n    if (ns.getServerMaxRam(\\\"home\\\") >= 128 && getTotalRam(ns) > 1e3) {\\n        // phase1\\n        ns.spawn(\\\"/phase2/restart.js\\\");\\n    }\\n    if (getMinRam(ns) >= ns.getPurchasedServerMaxRam()) {\\n        // phase2\\n        ns.spawn(\\\"/phase3/restart.js\\\");\\n    }\\n    ns.spawn(\\\"/phase1/restart.js\\\");\\n}\\nfunction getTotalRam(ns) {\\n    let total = ns.getServerMaxRam(\\\"home\\\");\\n    if (ns.getPurchasedServers().length === 0)\\n        return total;\\n    for (const ram of ns.getPurchasedServers().map((s) => ns.getServerMaxRam(s)))\\n        total += ram;\\n    return total;\\n}\\n\",\"filename\":\"restart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///be3dcb0f-19ee-48a0-b7aa-a7ede8115ffd\",\"moduleSequenceNumber\":547},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///84cec07c-9136-4d96-8ce6-594571969852\",\"moduleSequenceNumber\":551},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///122a0649-3116-49ee-b481-8dcebe1b9856\",\"moduleSequenceNumber\":550},{\"filename\":\"purchase.js\",\"url\":\"blob:file:///641439da-5aee-4f06-a510-90cb30b0d8d1\",\"moduleSequenceNumber\":562},{\"filename\":\"restart.js\",\"url\":\"blob:file:///02f6c74b-314c-4f95-b57d-1c7a8e853cd2\",\"moduleSequenceNumber\":46664}],\"dependents\":[],\"ramUsage\":9,\"server\":\"home\",\"moduleSequenceNumber\":499333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerTree } from \\\"utils/ServerTree\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script analyzes hackable server wealth/health.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    await ns.sleep(1000);\\n    ns.clearLog();\\n    ns.tail();\\n    const tree = new ServerTree(ns);\\n    for (const server of tree.home\\n        .filter((s) => s.hasAdminRights &&\\n        s.requiredHackingSkill <= ns.getHackingLevel() &&\\n        s.hostname !== \\\"home\\\" &&\\n        !ns.getPurchasedServers().includes(s.hostname) &&\\n        s.moneyMax > 0)\\n        .sort((a, b) => {\\n        const maxMoneyA = ns.getServerMaxMoney(a.hostname);\\n        const maxMoneyB = ns.getServerMaxMoney(b.hostname);\\n        // const availableRam =\\n        //   (ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) * 1e9;\\n        let hackChanceA = 0;\\n        let hackChanceB = 0;\\n        let hackTimeA = 1;\\n        let hackTimeB = 1;\\n        if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n            a.hackDifficulty = a.minDifficulty;\\n            b.hackDifficulty = b.minDifficulty;\\n            hackChanceA = ns.formulas.hacking.hackChance(a, ns.getPlayer());\\n            hackChanceB = ns.formulas.hacking.hackChance(b, ns.getPlayer());\\n            hackTimeA = ns.formulas.hacking.hackTime(a, ns.getPlayer());\\n            hackTimeB = ns.formulas.hacking.hackTime(b, ns.getPlayer());\\n        }\\n        else {\\n            hackChanceA = ns.hackAnalyzeChance(a.hostname);\\n            hackChanceB = ns.hackAnalyzeChance(b.hostname);\\n        }\\n        const valueA = (maxMoneyA * hackChanceA) / hackTimeA;\\n        const valueB = (maxMoneyB * hackChanceB) / hackTimeB;\\n        return valueB - valueA;\\n    })) {\\n        analyzeServer(ns, server.hostname);\\n    }\\n}\\nfunction analyzeServer(ns, server, msg = \\\"\\\") {\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    // const availableRam =\\n    //   (ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) * 1e9;\\n    let hackChance = 0;\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\n        const testServer = ns.getServer(server);\\n        testServer.hackDifficulty = testServer.minDifficulty;\\n        hackChance = ns.formulas.hacking.hackChance(testServer, ns.getPlayer());\\n    }\\n    else {\\n        hackChance = ns.hackAnalyzeChance(server);\\n    }\\n    if (msg)\\n        ns.print(msg);\\n    const value = maxMoney * hackChance;\\n    ns.print(`${server}:\\n      ${ns.nFormat(value, \\\"$0.000a\\\")}`);\\n}\\nexport function autocomplete(data) {\\n    return data.servers;\\n}\\n\",\"filename\":\"serverWealth.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///4cce6c0c-7b53-4bef-95aa-9506c3338e9f\",\"moduleSequenceNumber\":547},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///6c778162-8f7d-4326-990c-c7bac9480fd5\",\"moduleSequenceNumber\":551},{\"filename\":\"serverWealth.js\",\"url\":\"blob:file:///495d376d-179c-4af0-85af-818dd2b1b642\",\"moduleSequenceNumber\":47194}],\"dependents\":[],\"ramUsage\":7.8,\"server\":\"home\",\"moduleSequenceNumber\":499335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":499343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { kill } from \\\"utils/scriptKilling\\\";\\nexport async function main(ns) {\\n    kill(ns, (ps) => ps.filename === \\\"share.js\\\");\\n}\\n\",\"filename\":\"killShare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/localStorage.js\",\"url\":\"blob:file:///fa8f73d4-4733-44be-bf59-21104f25bf58\",\"moduleSequenceNumber\":430995},{\"filename\":\"/utils/ServerTree.js\",\"url\":\"blob:file:///4906ac4a-1762-4fb8-b5b1-d66553698b4f\",\"moduleSequenceNumber\":431003},{\"filename\":\"/utils/scriptKilling.js\",\"url\":\"blob:file:///ade70732-1e76-432d-aa1c-df6e37201403\",\"moduleSequenceNumber\":431001},{\"filename\":\"killShare.js\",\"url\":\"blob:file:///487cd935-8078-4ece-8f10-ee86c25b83a1\",\"moduleSequenceNumber\":432045}],\"dependents\":[],\"ramUsage\":4.5,\"server\":\"home\",\"moduleSequenceNumber\":499327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserver-1648915035422\",\"pserver-1648915036425\",\"pserver-1648915037429\",\"pserver-1648915038430\",\"pserver-1648915039432\",\"pserver-1648915040436\",\"pserver-1648915041440\",\"pserver-1648909803739\",\"pserver-1648910658582\",\"pserver-1648911513471\",\"pserver-1648912368095\",\"pserver-1648913222139\",\"pserver-1648914076673\",\"pserver-1648914931293\",\"pserver-1648915024351\",\"pserver-1648915025372\",\"pserver-1648915026394\",\"pserver-1648915027408\",\"pserver-1648915028409\",\"pserver-1648915029412\",\"pserver-1648915030413\",\"pserver-1648915031413\",\"pserver-1648915032415\",\"pserver-1648915033416\",\"pserver-1648915034420\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.196,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"80.3.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"ecorp\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"ecorp\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"ecorp\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"ecorp\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":56334132317,\"moneyMax\":1408353307925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1400,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"37.8.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"megacorp\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"megacorp\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"megacorp\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"megacorp\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":56743579578,\"moneyMax\":1418589489450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1204,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"4.7.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"b-and-a\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"b-and-a\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"b-and-a\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"b-and-a\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":26045732190,\"moneyMax\":651143304750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1025,\"serverGrowth\":61}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"49.7.1.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":94.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45964,\"ramUsage\":4.1,\"server\":\"blade\",\"threads\":23,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///fc34f5e5-42be-45fd-95a5-ab28e38cc483\",\"moduleSequenceNumber\":1004}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7b396aef-3eea-4a5f-8eee-48b38a47600c\",\"moduleSequenceNumber\":234522}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"blade\",\"moduleSequenceNumber\":234522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///cc97c8df-23b1-4684-8056-8257d31239dc\",\"moduleSequenceNumber\":239099}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"blade\",\"moduleSequenceNumber\":239099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///b551571d-e8c5-4e58-962d-0615a35720f1\",\"moduleSequenceNumber\":307767}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"blade\",\"moduleSequenceNumber\":307767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///fc34f5e5-42be-45fd-95a5-ab28e38cc483\",\"moduleSequenceNumber\":1004}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"blade\",\"moduleSequenceNumber\":1004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":35928988380,\"moneyMax\":898224709500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1048,\"serverGrowth\":66}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"26.4.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nwo\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nwo\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nwo\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"nwo\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":29260750041,\"moneyMax\":731518751025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1022,\"serverGrowth\":80}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"50.2.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"clarkinc\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"clarkinc\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"clarkinc\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"clarkinc\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":19330110827,\"moneyMax\":483252770675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1154,\"serverGrowth\":74}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"99.7.8.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":221.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45960,\"ramUsage\":4.1,\"server\":\"omnitek\",\"threads\":54,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///07690479-6e9a-4491-87be-26743a4b2e73\",\"moduleSequenceNumber\":1005}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///da47bc84-5c09-43a7-9176-4c9f50af272e\",\"moduleSequenceNumber\":234517}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnitek\",\"moduleSequenceNumber\":234517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9d08ad5a-1b67-4f28-ad3e-d0a0f2a1371d\",\"moduleSequenceNumber\":239094}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnitek\",\"moduleSequenceNumber\":239094,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///53ed4983-7142-4e3a-9af4-671477024952\",\"moduleSequenceNumber\":307762}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omnitek\",\"moduleSequenceNumber\":307762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///07690479-6e9a-4491-87be-26743a4b2e73\",\"moduleSequenceNumber\":1005}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"omnitek\",\"moduleSequenceNumber\":1005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":16259591034,\"moneyMax\":406489775850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1087,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"71.6.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"4sigma\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"4sigma\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"4sigma\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"4sigma\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":17949152175,\"moneyMax\":448728804375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1049,\"serverGrowth\":93}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"31.7.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":20609810079,\"moneyMax\":515245251975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1225,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"69.5.7.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":94.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45963,\"ramUsage\":4.1,\"server\":\"fulcrumtech\",\"threads\":23,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///ccb8abd5-a0cb-47c6-98ec-53bb9200ee0b\",\"moduleSequenceNumber\":1006}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///77a3d197-8a00-41da-a989-803d63253612\",\"moduleSequenceNumber\":234521}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":234521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///422d5f1d-11e4-4365-818c-48e2c850cc52\",\"moduleSequenceNumber\":239098}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":239098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a47815a3-2ab1-4c06-bbe4-6f8bb77e568c\",\"moduleSequenceNumber\":307766}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":307766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///ccb8abd5-a0cb-47c6-98ec-53bb9200ee0b\",\"moduleSequenceNumber\":1006}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1659768291,\"moneyMax\":41494207275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":992,\"serverGrowth\":88}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"72.0.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1288,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"40.5.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"stormtech\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"stormtech\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"stormtech\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"stormtech\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1140490374,\"moneyMax\":28512259350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1044,\"serverGrowth\":69}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"86.3.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"defcomm\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"defcomm\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"defcomm\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"defcomm\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":821464803,\"moneyMax\":20536620075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":939,\"serverGrowth\":63}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"31.0.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"infocomm\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"infocomm\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"infocomm\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"infocomm\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":743576019,\"moneyMax\":18589400475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":931,\"serverGrowth\":38}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"74.7.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45980,\"ramUsage\":4.1,\"server\":\"helios\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///c8d9b6b5-c3c5-4c92-8b69-a809eaa88888\",\"moduleSequenceNumber\":1007}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4b91a00f-13b5-4a54-ae8d-fe9ffa9d55b5\",\"moduleSequenceNumber\":16958}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"helios\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///6cc0ea84-9dac-428c-ba86-ba20ed8120ad\",\"moduleSequenceNumber\":236064}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"helios\",\"moduleSequenceNumber\":236064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f77459d5-6769-453b-90e6-a5132dad4ea6\",\"moduleSequenceNumber\":234537}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"helios\",\"moduleSequenceNumber\":234537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///c8d9b6b5-c3c5-4c92-8b69-a809eaa88888\",\"moduleSequenceNumber\":1007}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"helios\",\"moduleSequenceNumber\":1007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":678970874,\"moneyMax\":16974271850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":885,\"serverGrowth\":71}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"36.1.2.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":94.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45962,\"ramUsage\":4.1,\"server\":\"vitalife\",\"threads\":23,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///3b840e1f-7646-4f5d-aec7-f82808a7538c\",\"moduleSequenceNumber\":1008}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6d04207f-12cf-4bb2-a456-ad73157f92c2\",\"moduleSequenceNumber\":234520}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"vitalife\",\"moduleSequenceNumber\":234520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9ad4affb-5412-448a-b73c-a76aecc994fe\",\"moduleSequenceNumber\":239097}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"vitalife\",\"moduleSequenceNumber\":239097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///eaee3ddb-a1cc-49db-8950-1fb046a876cf\",\"moduleSequenceNumber\":307765}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"vitalife\",\"moduleSequenceNumber\":307765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///3b840e1f-7646-4f5d-aec7-f82808a7538c\",\"moduleSequenceNumber\":1008}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"vitalife\",\"moduleSequenceNumber\":1008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":781734400,\"moneyMax\":19543360000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":883,\"serverGrowth\":80}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"92.7.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"icarus\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"icarus\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"icarus\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"icarus\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":924443444,\"moneyMax\":23111086100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":867,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"65.4.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45991,\"ramUsage\":4.1,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///e0850da7-3976-4125-8bc7-8715c7c8f216\",\"moduleSequenceNumber\":1009}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d154d069-d73b-4058-ac91-0218a2e4b7fe\",\"moduleSequenceNumber\":273687}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"univ-energy\",\"moduleSequenceNumber\":273687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///f3819695-55d1-4eb1-8b25-0b6982c2158d\",\"moduleSequenceNumber\":236075}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"univ-energy\",\"moduleSequenceNumber\":236075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///1feecde8-b6b0-4d8a-8d61-e89c1e4fcab0\",\"moduleSequenceNumber\":234548}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"univ-energy\",\"moduleSequenceNumber\":234548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///e0850da7-3976-4125-8bc7-8715c7c8f216\",\"moduleSequenceNumber\":1009}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1151304335,\"moneyMax\":28782608375,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":842,\"serverGrowth\":84}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"88.0.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":28.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45972,\"ramUsage\":4.1,\"server\":\"titan-labs\",\"threads\":7,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///3344d585-a8da-413e-bed9-ad498221f720\",\"moduleSequenceNumber\":1010}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///65bb2187-6834-4671-9624-e7eb8a8805a0\",\"moduleSequenceNumber\":234529}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"titan-labs\",\"moduleSequenceNumber\":234529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///f349b283-fd5f-43e1-af42-0122b1db2486\",\"moduleSequenceNumber\":239106}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"titan-labs\",\"moduleSequenceNumber\":239106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///1b95a568-ecb8-4c59-a727-b2b69079156a\",\"moduleSequenceNumber\":16950}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"titan-labs\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///3344d585-a8da-413e-bed9-ad498221f720\",\"moduleSequenceNumber\":1010}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":764763017,\"moneyMax\":19119075425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":818,\"serverGrowth\":68}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"29.0.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45992,\"ramUsage\":4.1,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///ecbf9fcc-c1d7-4180-9dca-376343fa382b\",\"moduleSequenceNumber\":1011}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e261f1c6-9743-4648-a11a-0243fbce0742\",\"moduleSequenceNumber\":273688}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"microdyne\",\"moduleSequenceNumber\":273688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///33c7a9e9-42b0-4d80-bf76-348c9cfa4be8\",\"moduleSequenceNumber\":236076}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"microdyne\",\"moduleSequenceNumber\":236076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a8212d2e-79c1-4e2d-a927-8e48b7d7d3b9\",\"moduleSequenceNumber\":234549}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"microdyne\",\"moduleSequenceNumber\":234549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///ecbf9fcc-c1d7-4180-9dca-376343fa382b\",\"moduleSequenceNumber\":1011}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"microdyne\",\"moduleSequenceNumber\":1011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":571942904,\"moneyMax\":14298572600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":808,\"serverGrowth\":72}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"75.7.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":870807299,\"moneyMax\":21770182475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":851,\"serverGrowth\":73}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"38.9.7.0\",\"isConnectedTo\":true,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":843163672,\"moneyMax\":21079091800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":71}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"52.4.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aerocorp\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aerocorp\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"aerocorp\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"aerocorp\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1086422417,\"moneyMax\":27160560425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":881,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"51.3.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":28.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45973,\"ramUsage\":4.1,\"server\":\"omnia\",\"threads\":7,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///3af0f1bc-1ad4-4883-813b-1b67a6bd3533\",\"moduleSequenceNumber\":1012}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///fef7eb28-8b5a-45b1-958d-471e34928456\",\"moduleSequenceNumber\":234530}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnia\",\"moduleSequenceNumber\":234530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9f1ceca4-4ecc-43cc-bc00-43d68067970a\",\"moduleSequenceNumber\":239107}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omnia\",\"moduleSequenceNumber\":239107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///aaaf11af-3b51-4c32-8e70-a2099f07f5d9\",\"moduleSequenceNumber\":273678}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omnia\",\"moduleSequenceNumber\":273678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///3af0f1bc-1ad4-4883-813b-1b67a6bd3533\",\"moduleSequenceNumber\":1012}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"omnia\",\"moduleSequenceNumber\":1012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"icarus\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":970137351,\"moneyMax\":24253433775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":908,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"82.7.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-def\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-def\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zb-def\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"zb-def\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":990724697,\"moneyMax\":24768117425,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":825,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"82.5.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":967006392,\"moneyMax\":24175159800,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":838,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"83.4.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":28.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45974,\"ramUsage\":4.1,\"server\":\"solaris\",\"threads\":7,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///ba55424f-2ff5-489e-a5b3-fc9cd6d0b648\",\"moduleSequenceNumber\":1013}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///90ceba49-73ad-4b51-9e0d-a3670804b8b9\",\"moduleSequenceNumber\":234531}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"solaris\",\"moduleSequenceNumber\":234531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///312355b6-45f6-4169-bbf7-8c649abd5ba1\",\"moduleSequenceNumber\":239108}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"solaris\",\"moduleSequenceNumber\":239108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///c92e3e42-36ba-4f0c-9437-f5b5d658fe67\",\"moduleSequenceNumber\":273679}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"solaris\",\"moduleSequenceNumber\":273679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///ba55424f-2ff5-489e-a5b3-fc9cd6d0b648\",\"moduleSequenceNumber\":1013}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"solaris\",\"moduleSequenceNumber\":1013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":850427933,\"moneyMax\":21260698325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":775,\"serverGrowth\":72}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"98.5.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"deltaone\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"deltaone\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"deltaone\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"deltaone\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1548979140,\"moneyMax\":38724478500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":898,\"serverGrowth\":68}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"50.0.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45985,\"ramUsage\":4.1,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///85e84010-7ed8-4f25-a08a-af7264f65541\",\"moduleSequenceNumber\":1014}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///ef5d27a7-f2fb-40f6-af62-7e2f9dcda4b3\",\"moduleSequenceNumber\":273681}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"global-pharm\",\"moduleSequenceNumber\":273681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ff2bc8e1-94b3-42fd-a997-7bd5da8849d0\",\"moduleSequenceNumber\":236069}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"global-pharm\",\"moduleSequenceNumber\":236069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///88542c6b-d724-49f9-8ca6-246349b2d8d8\",\"moduleSequenceNumber\":234542}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"global-pharm\",\"moduleSequenceNumber\":234542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///85e84010-7ed8-4f25-a08a-af7264f65541\",\"moduleSequenceNumber\":1014}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1552759107,\"moneyMax\":38818977675,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":776,\"serverGrowth\":82}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"93.7.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nova-med\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nova-med\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nova-med\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"nova-med\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":1176820528,\"moneyMax\":29420513200,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":812,\"serverGrowth\":84}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"44.6.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zeus-med\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zeus-med\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zeus-med\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"zeus-med\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1428241740,\"moneyMax\":35706043500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":843,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"21.5.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45999,\"ramUsage\":4.1,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///978a64ec-7a5a-446a-bcd9-1e15f4dc3569\",\"moduleSequenceNumber\":1015}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"unitalife\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///e76ecb07-e7d7-4d4f-95e8-5848df60d08c\",\"moduleSequenceNumber\":236083}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"unitalife\",\"moduleSequenceNumber\":236083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a4408bb6-5cfe-4417-abcd-8f0a509a76fe\",\"moduleSequenceNumber\":315786}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"unitalife\",\"moduleSequenceNumber\":315786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///978a64ec-7a5a-446a-bcd9-1e15f4dc3569\",\"moduleSequenceNumber\":1015}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"unitalife\",\"moduleSequenceNumber\":1015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1079779248,\"moneyMax\":26994481200,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":823,\"serverGrowth\":74}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"61.8.3.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":94.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45961,\"ramUsage\":4.1,\"server\":\"lexo-corp\",\"threads\":23,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///9b51f727-24b5-4c1f-a7e6-0e9c083e6aa3\",\"moduleSequenceNumber\":1016}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b44787c2-45cc-4bd1-85e2-6b5891106b51\",\"moduleSequenceNumber\":234519}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":234519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///eebc7b6c-747c-45c5-9ca4-59f2a09a41ed\",\"moduleSequenceNumber\":239096}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":239096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///b9da3c1c-1270-4bf3-8bde-4186cbab40c3\",\"moduleSequenceNumber\":307764}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":307764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///9b51f727-24b5-4c1f-a7e6-0e9c083e6aa3\",\"moduleSequenceNumber\":1016}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":770816586,\"moneyMax\":19270414650,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":657,\"serverGrowth\":59}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"92.1.8.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":28.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45968,\"ramUsage\":4.1,\"server\":\"rho-construction\",\"threads\":7,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///a2536cf0-2a59-43fb-83a9-d5d72da39ad0\",\"moduleSequenceNumber\":1017}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///3492acdb-0d2e-4bfa-899e-93823a7e4aaa\",\"moduleSequenceNumber\":234525}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rho-construction\",\"moduleSequenceNumber\":234525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///6b879d02-310e-4183-a6c7-046f5ec9c51c\",\"moduleSequenceNumber\":239102}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rho-construction\",\"moduleSequenceNumber\":239102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"rho-construction\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///a2536cf0-2a59-43fb-83a9-d5d72da39ad0\",\"moduleSequenceNumber\":1017}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":55,\"hackDifficulty\":22.992000000000004,\"minDifficulty\":18,\"moneyAvailable\":275411035,\"moneyMax\":15182483575,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":520,\"serverGrowth\":53}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"0.0.9.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":94.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45965,\"ramUsage\":4.1,\"server\":\"alpha-ent\",\"threads\":23,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///b8000e07-e904-4f3c-a19b-c759903430ea\",\"moduleSequenceNumber\":1018}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///1fb9edf9-4f1d-4e24-a4fe-317284465261\",\"moduleSequenceNumber\":234523}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":234523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///078b1f79-de09-48c9-8140-3979af9c61b3\",\"moduleSequenceNumber\":239100}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":239100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///b8000e07-e904-4f3c-a19b-c759903430ea\",\"moduleSequenceNumber\":1018}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":664834739,\"moneyMax\":16620868475,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":577,\"serverGrowth\":50}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"67.2.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45978,\"ramUsage\":4.1,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///421df093-1853-408a-9d96-42c0ef166803\",\"moduleSequenceNumber\":1019}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///58ca335f-ab91-4a0c-96f9-603c122a6b2d\",\"moduleSequenceNumber\":16956}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aevum-police\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a04eb236-a5ea-47a0-ba73-4874849af23c\",\"moduleSequenceNumber\":236062}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"aevum-police\",\"moduleSequenceNumber\":236062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///54a30018-d08f-4461-8044-fe2630a78e1f\",\"moduleSequenceNumber\":234535}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"aevum-police\",\"moduleSequenceNumber\":234535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///421df093-1853-408a-9d96-42c0ef166803\",\"moduleSequenceNumber\":1019}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":340508845,\"moneyMax\":8512721125,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":414,\"serverGrowth\":39}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"2.8.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45998,\"ramUsage\":4.1,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///cb9aecf0-484f-4d09-a85e-af84ead14d20\",\"moduleSequenceNumber\":1020}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///421d7720-48cf-402c-acf3-ef83b0303197\",\"moduleSequenceNumber\":236082}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":236082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///e2aba8ae-53d9-41ff-934c-ad47eeffe782\",\"moduleSequenceNumber\":234555}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":234555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///cb9aecf0-484f-4d09-a85e-af84ead14d20\",\"moduleSequenceNumber\":1020}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":223427006,\"moneyMax\":5585675150,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":379,\"serverGrowth\":39}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"49.0.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":28.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45967,\"ramUsage\":4.1,\"server\":\"zb-institute\",\"threads\":7,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///65aa7d4e-8e84-45d9-85a0-6611ab1ef44a\",\"moduleSequenceNumber\":1021}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///1a98ded5-39e9-4e3c-8292-3e71a55efe90\",\"moduleSequenceNumber\":234524}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-institute\",\"moduleSequenceNumber\":234524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///43484b2c-f0a4-493b-8cd9-781d93457143\",\"moduleSequenceNumber\":239101}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zb-institute\",\"moduleSequenceNumber\":239101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zb-institute\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///65aa7d4e-8e84-45d9-85a0-6611ab1ef44a\",\"moduleSequenceNumber\":1021}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":930821811,\"moneyMax\":23270545275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":768,\"serverGrowth\":84}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"73.1.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":28.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45970,\"ramUsage\":4.1,\"server\":\"summit-uni\",\"threads\":7,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///9520bb4c-a69c-4153-94ec-6fe65e793e5b\",\"moduleSequenceNumber\":1022}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///e0fa8fd9-38b2-4d07-83cc-82e43cbd0a11\",\"moduleSequenceNumber\":234527}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"summit-uni\",\"moduleSequenceNumber\":234527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///9638cc3f-789d-4aa2-8f17-2d1ef623186d\",\"moduleSequenceNumber\":239104}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"summit-uni\",\"moduleSequenceNumber\":239104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"summit-uni\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///9520bb4c-a69c-4153-94ec-6fe65e793e5b\",\"moduleSequenceNumber\":1022}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":208245664,\"moneyMax\":5206141600,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":473,\"serverGrowth\":51}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"15.9.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"syscore\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"syscore\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"syscore\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"syscore\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"computek\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":412226353,\"moneyMax\":10305658825,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":562,\"serverGrowth\":68}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"78.9.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45989,\"ramUsage\":4.1,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///6b8affda-d27c-4bee-a2ba-f0e9514533ab\",\"moduleSequenceNumber\":1023}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///1221d7b0-934a-48b8-b8e3-214c73f5d912\",\"moduleSequenceNumber\":273685}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"catalyst\",\"moduleSequenceNumber\":273685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///e9eb7ec7-8954-4e65-859e-e5261dd39d2e\",\"moduleSequenceNumber\":236073}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"catalyst\",\"moduleSequenceNumber\":236073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///860bbb20-1ba3-4db2-a2b3-3efec93c7df8\",\"moduleSequenceNumber\":234546}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"catalyst\",\"moduleSequenceNumber\":234546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///6b8affda-d27c-4bee-a2ba-f0e9514533ab\",\"moduleSequenceNumber\":1023}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"catalyst\",\"moduleSequenceNumber\":1023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":441769590,\"moneyMax\":11044239750,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":435,\"serverGrowth\":45}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"59.2.4.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":46000,\"ramUsage\":4.1,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///01b03ae6-94bf-41aa-8026-41bdeac467ff\",\"moduleSequenceNumber\":1024}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c1732899-37b9-4eed-9d59-ee5c38e4b601\",\"moduleSequenceNumber\":606028}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"the-hub\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c892e120-4947-4309-8a30-d17e7790fca8\",\"moduleSequenceNumber\":606029}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"the-hub\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///93dd6089-165e-407d-8409-c1ebda813e78\",\"moduleSequenceNumber\":612506}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"the-hub\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///5275f3f0-3286-41df-8bbe-623441fa35f6\",\"moduleSequenceNumber\":316790}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"the-hub\",\"moduleSequenceNumber\":316790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d002135a-5763-4d9f-a972-924b08a4d13a\",\"moduleSequenceNumber\":236085}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"the-hub\",\"moduleSequenceNumber\":236085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"the-hub\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///01b03ae6-94bf-41aa-8026-41bdeac467ff\",\"moduleSequenceNumber\":1024}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"the-hub\",\"moduleSequenceNumber\":1024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":162403402,\"moneyMax\":4060085050,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":315,\"serverGrowth\":47}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"38.5.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"computek\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"computek\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"computek\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"computek\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":222616698,\"moneyMax\":5565417450,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":323,\"serverGrowth\":49}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"46.8.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45976,\"ramUsage\":4.1,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///4df49e50-22db-469d-ac91-361abe4c6b63\",\"moduleSequenceNumber\":1025}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///1cecd47f-f8af-47b5-b1fe-dc50fa5be4a3\",\"moduleSequenceNumber\":16954}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"netlink\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///ee1006bd-d0c5-4544-80fa-23bff0286b8c\",\"moduleSequenceNumber\":236060}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"netlink\",\"moduleSequenceNumber\":236060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///75d54a28-1d5f-4e48-b240-fd876bc1e48f\",\"moduleSequenceNumber\":234533}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"netlink\",\"moduleSequenceNumber\":234533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///4df49e50-22db-469d-ac91-361abe4c6b63\",\"moduleSequenceNumber\":1025}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"netlink\",\"moduleSequenceNumber\":1025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":378,\"serverGrowth\":75}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"90.3.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":84256362,\"moneyMax\":2106409050,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":297,\"serverGrowth\":39}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"60.2.1.1\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"n00dles\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"n00dles\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///41c6b329-54c5-4075-8cf3-17366f60028a\",\"moduleSequenceNumber\":612512}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"n00dles\",\"moduleSequenceNumber\":754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///42636cb1-be54-499d-9d51-201e0442f793\",\"moduleSequenceNumber\":315787}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":315787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///53e97abe-c11b-452d-a555-5ffc14bf59e8\",\"moduleSequenceNumber\":236084}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"n00dles\",\"moduleSequenceNumber\":236084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"n00dles\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"n00dles\",\"moduleSequenceNumber\":758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"47.4.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45986,\"ramUsage\":4.1,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///3b1479c1-9ebe-4c74-bfb3-24bce6f6d50b\",\"moduleSequenceNumber\":1026}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///279f21cb-9078-4799-9bcc-d3c104d54d86\",\"moduleSequenceNumber\":591993}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ad1c2c92-0ffb-4f6e-9d86-a5cb179b46ad\",\"moduleSequenceNumber\":591994}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///bb03c578-d33f-4bd8-b30f-e28fc86ad8f0\",\"moduleSequenceNumber\":612485}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///2c1f2c01-e57c-4f28-b2bf-9d6627cd83d8\",\"moduleSequenceNumber\":273682}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":273682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///89e5d823-d470-43df-97e0-165580bf238b\",\"moduleSequenceNumber\":236070}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":236070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///b0b5ecfb-3572-44f7-90cb-c0492f8d5a98\",\"moduleSequenceNumber\":234543}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":234543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///3b1479c1-9ebe-4c74-bfb3-24bce6f6d50b\",\"moduleSequenceNumber\":1026}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":27.442000000000153,\"minDifficulty\":3,\"moneyAvailable\":22122004.615400005,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"68.7.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45987,\"ramUsage\":4.1,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///895a7064-e0ae-4040-a010-10c8db4fc5f7\",\"moduleSequenceNumber\":1027}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9e210b59-715e-40bb-bcae-5e93a9e7b1a1\",\"moduleSequenceNumber\":591999}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///8dd04137-1a89-4ddb-b813-e0a542543caa\",\"moduleSequenceNumber\":592000}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///5b488abd-eadf-43b1-900b-3665a03ed526\",\"moduleSequenceNumber\":612488}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///26ca049a-1036-43a3-9e13-44913107c935\",\"moduleSequenceNumber\":273683}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":273683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///91a27112-1ec4-40bc-bd9c-626621bff511\",\"moduleSequenceNumber\":236071}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":236071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///dd40cf85-c5b6-4288-a067-8311cbc8393a\",\"moduleSequenceNumber\":234544}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":234544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///895a7064-e0ae-4040-a010-10c8db4fc5f7\",\"moduleSequenceNumber\":1027}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"92.9.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45990,\"ramUsage\":4.1,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///1e0425bc-5c2f-4998-b717-62663117b231\",\"moduleSequenceNumber\":1028}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///92e4bd1b-b770-421e-8af2-c6142c2785e6\",\"moduleSequenceNumber\":592011}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"joesguns\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///785fec12-61b7-4f22-8f6c-132b58aabbd7\",\"moduleSequenceNumber\":592012}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"joesguns\",\"moduleSequenceNumber\":774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///0c195760-fb24-4668-9a55-e188f72b5372\",\"moduleSequenceNumber\":612494}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"joesguns\",\"moduleSequenceNumber\":775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d7a0a4bb-d051-474f-938c-718b4086057c\",\"moduleSequenceNumber\":273686}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":273686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3dd7d44b-d2c8-479c-8743-d1d388c2c67e\",\"moduleSequenceNumber\":236074}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"joesguns\",\"moduleSequenceNumber\":236074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5a3d4695-3292-4736-9050-dfb23ac6a7c9\",\"moduleSequenceNumber\":234547}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"joesguns\",\"moduleSequenceNumber\":234547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///1e0425bc-5c2f-4998-b717-62663117b231\",\"moduleSequenceNumber\":1028}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"joesguns\",\"moduleSequenceNumber\":1028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"65.2.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45983,\"ramUsage\":4.1,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///a03fabed-84e8-4b34-81cc-b1e7d6fad195\",\"moduleSequenceNumber\":1029}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b1299258-3440-4781-8db9-f9c6ffa630fd\",\"moduleSequenceNumber\":591981}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"zer0\",\"moduleSequenceNumber\":780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///cb6563be-c9db-4b6c-8758-1a0d50f5b280\",\"moduleSequenceNumber\":591982}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"zer0\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a02630fb-76ce-48b1-9349-30b3428b22b1\",\"moduleSequenceNumber\":612482}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"zer0\",\"moduleSequenceNumber\":782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///67218bdf-aead-4729-97d7-eb21495f4cd3\",\"moduleSequenceNumber\":314783}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zer0\",\"moduleSequenceNumber\":314783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///710d5359-8650-4ab1-96b5-59400302cd91\",\"moduleSequenceNumber\":236067}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"zer0\",\"moduleSequenceNumber\":236067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///e40e4f06-d359-4f52-a2ca-bd88228c1807\",\"moduleSequenceNumber\":234540}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"zer0\",\"moduleSequenceNumber\":234540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///a03fabed-84e8-4b34-81cc-b1e7d6fad195\",\"moduleSequenceNumber\":1029}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"zer0\",\"moduleSequenceNumber\":1029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"41.7.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45988,\"ramUsage\":4.1,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///31573e62-d16f-43ad-8322-d157f4683f79\",\"moduleSequenceNumber\":1030}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0fe21ead-4efe-4976-8669-505611d599ca\",\"moduleSequenceNumber\":592005}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"nectar-net\",\"moduleSequenceNumber\":787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///154cba66-2f8e-403e-ba5b-aef0b7f59c8b\",\"moduleSequenceNumber\":592006}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"nectar-net\",\"moduleSequenceNumber\":788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b85c4a6b-1b37-46e1-9efc-094a64dad040\",\"moduleSequenceNumber\":612491}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"nectar-net\",\"moduleSequenceNumber\":789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///43368e8a-3845-423c-9298-62e04f70f524\",\"moduleSequenceNumber\":273684}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nectar-net\",\"moduleSequenceNumber\":273684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///aa9cc466-67ca-45b8-982f-1084fc45dbe4\",\"moduleSequenceNumber\":236072}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"nectar-net\",\"moduleSequenceNumber\":236072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///ecc610e4-8025-414a-8fc1-a77c6d7e8702\",\"moduleSequenceNumber\":234545}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"nectar-net\",\"moduleSequenceNumber\":234545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///31573e62-d16f-43ad-8322-d157f4683f79\",\"moduleSequenceNumber\":1030}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"44.4.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45984,\"ramUsage\":4.1,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///005046e2-bf62-489c-88ac-773d229cae51\",\"moduleSequenceNumber\":1031}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80f1bb96-941d-4a7a-b680-a65baff76e9e\",\"moduleSequenceNumber\":591987}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"neo-net\",\"moduleSequenceNumber\":794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ad968f77-6e4f-4132-a359-ee1d016a86da\",\"moduleSequenceNumber\":591988}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"neo-net\",\"moduleSequenceNumber\":795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///319792e6-3fe5-46eb-aae4-13eb3fd6a324\",\"moduleSequenceNumber\":612467}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"neo-net\",\"moduleSequenceNumber\":796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d653d220-da64-4f63-9d2c-5d2727e6c25a\",\"moduleSequenceNumber\":273680}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"neo-net\",\"moduleSequenceNumber\":273680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2eee105f-7912-4636-b010-dd810456442b\",\"moduleSequenceNumber\":236068}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"neo-net\",\"moduleSequenceNumber\":236068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///6fc77e98-f79a-4033-8f8c-07a29670b667\",\"moduleSequenceNumber\":234541}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"neo-net\",\"moduleSequenceNumber\":234541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///005046e2-bf62-489c-88ac-773d229cae51\",\"moduleSequenceNumber\":1031}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"neo-net\",\"moduleSequenceNumber\":1031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"36.0.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":28.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45971,\"ramUsage\":4.1,\"server\":\"silver-helix\",\"threads\":7,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///4c1d3d7b-d3d5-4f5f-9eac-47cadad116a1\",\"moduleSequenceNumber\":1032}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///09cfcc7a-fd89-4a70-a4fc-fa4724145c9d\",\"moduleSequenceNumber\":605982}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"silver-helix\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///27f52408-40bd-4aa0-8906-362899551819\",\"moduleSequenceNumber\":605983}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"silver-helix\",\"moduleSequenceNumber\":802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///79dc12f8-4fae-446d-abe5-cb0a2eb91b1f\",\"moduleSequenceNumber\":612452}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"silver-helix\",\"moduleSequenceNumber\":803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///f76a7478-f114-4c32-a8c4-5c07aaa4180a\",\"moduleSequenceNumber\":234528}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"silver-helix\",\"moduleSequenceNumber\":234528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d79687f9-57db-44da-83b8-b4a608d98dca\",\"moduleSequenceNumber\":239105}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"silver-helix\",\"moduleSequenceNumber\":239105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///99e4649e-c49d-450c-a050-d075601cf897\",\"moduleSequenceNumber\":317794}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"silver-helix\",\"moduleSequenceNumber\":317794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///4c1d3d7b-d3d5-4f5f-9eac-47cadad116a1\",\"moduleSequenceNumber\":1032}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"46.7.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45995,\"ramUsage\":4.1,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///32532b36-7c8d-4f67-9caa-f8705d9f7c1a\",\"moduleSequenceNumber\":1033}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///34ef9bca-522e-459f-805a-427ca48a219f\",\"moduleSequenceNumber\":592017}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d0fca740-7f17-4a34-929f-457783d93a37\",\"moduleSequenceNumber\":592018}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a1adccec-8f65-4939-80cd-3cd0a95753e8\",\"moduleSequenceNumber\":612497}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7ebbb0d8-ec49-4a69-8298-9661b9840bfe\",\"moduleSequenceNumber\":273691}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":273691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0ea9ce64-a13a-4360-8690-8fb3068d26bf\",\"moduleSequenceNumber\":236079}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":236079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///c778416b-d83e-4e7a-bb60-65a821643630\",\"moduleSequenceNumber\":234552}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":234552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///32532b36-7c8d-4f67-9caa-f8705d9f7c1a\",\"moduleSequenceNumber\":1033}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"21.4.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45996,\"ramUsage\":4.1,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///09feb648-74cc-48fa-80aa-efa4c83ff281\",\"moduleSequenceNumber\":1034}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b6ff0609-8b17-42d3-81db-2bec94fe6bab\",\"moduleSequenceNumber\":592023}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c36770a6-b66d-4439-a493-2f3a21f517d9\",\"moduleSequenceNumber\":592024}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///f824dfc5-6e98-4711-af02-a8627931ea5f\",\"moduleSequenceNumber\":612500}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///31c6ba41-b384-4546-a5e0-06bba6435782\",\"moduleSequenceNumber\":273692}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":273692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///e52aec9b-3442-414b-ac89-ed626182f56f\",\"moduleSequenceNumber\":236080}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":236080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///d0140c2a-4116-4d4f-a8fd-a46e5c94f74e\",\"moduleSequenceNumber\":234553}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":234553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///09feb648-74cc-48fa-80aa-efa4c83ff281\",\"moduleSequenceNumber\":1034}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"44.4.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45975,\"ramUsage\":4.1,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///959abf2e-8f9b-4d7a-b800-c9ea7a48dfe8\",\"moduleSequenceNumber\":1035}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///325f6921-6d5e-4353-94ba-79b2cc77281f\",\"moduleSequenceNumber\":606010}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"phantasy\",\"moduleSequenceNumber\":822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///3fa3ca20-1b21-4f5b-aace-f5d45bc43b84\",\"moduleSequenceNumber\":606011}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"phantasy\",\"moduleSequenceNumber\":823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4bdedf89-6275-484b-b31f-5c1da2c12d9f\",\"moduleSequenceNumber\":612470}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"phantasy\",\"moduleSequenceNumber\":824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b30d0040-9240-4336-98c2-10af9c5c927b\",\"moduleSequenceNumber\":16953}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"phantasy\",\"moduleSequenceNumber\":825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a23c033a-ed54-462e-9d3b-c35acc7038c0\",\"moduleSequenceNumber\":236059}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"phantasy\",\"moduleSequenceNumber\":236059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///27c86538-4056-45a5-a72d-d0824d30f43a\",\"moduleSequenceNumber\":234532}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"phantasy\",\"moduleSequenceNumber\":234532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///959abf2e-8f9b-4d7a-b800-c9ea7a48dfe8\",\"moduleSequenceNumber\":1035}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"phantasy\",\"moduleSequenceNumber\":1035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nectar-net\",\"netlink\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":7.182,\"minDifficulty\":7,\"moneyAvailable\":265027453,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"45.1.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45979,\"ramUsage\":4.1,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///75659fd6-fbfa-4aea-8994-3e6ceed297a0\",\"moduleSequenceNumber\":1036}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///444caa44-84c1-4227-9b2e-b05bd64e5301\",\"moduleSequenceNumber\":591969}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"max-hardware\",\"moduleSequenceNumber\":829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///745865bd-58b9-47bf-9cc0-067e8c9c7a55\",\"moduleSequenceNumber\":591970}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"max-hardware\",\"moduleSequenceNumber\":830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///fb7fff2e-f3d6-4a2a-b0f9-7a372ed2d718\",\"moduleSequenceNumber\":612473}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"max-hardware\",\"moduleSequenceNumber\":831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///754ca23d-7ce0-4673-a0da-0b7f80685265\",\"moduleSequenceNumber\":16957}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"max-hardware\",\"moduleSequenceNumber\":832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///fcf40852-78c6-4ffb-a519-8e8ac9eb0ff7\",\"moduleSequenceNumber\":236063}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"max-hardware\",\"moduleSequenceNumber\":236063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///41d45a37-2fe5-44a0-ad4f-c85fc591d06c\",\"moduleSequenceNumber\":234536}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"max-hardware\",\"moduleSequenceNumber\":234536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///75659fd6-fbfa-4aea-8994-3e6ceed297a0\",\"moduleSequenceNumber\":1036}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"31.0.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45981,\"ramUsage\":4.1,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///2f801939-f81e-4c19-b770-058740ecc3da\",\"moduleSequenceNumber\":1037}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///34861b10-e545-4c0f-a145-04f3f5e6e50a\",\"moduleSequenceNumber\":606016}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"omega-net\",\"moduleSequenceNumber\":836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///122666b5-bbaa-4c19-95c2-8c827090c4f8\",\"moduleSequenceNumber\":606017}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"omega-net\",\"moduleSequenceNumber\":837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c9c49a87-9308-46ec-9f12-549f465b8fbd\",\"moduleSequenceNumber\":612476}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"omega-net\",\"moduleSequenceNumber\":838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///05cbbb5d-9889-409b-b3c4-1a6cf1fa38e4\",\"moduleSequenceNumber\":17437}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omega-net\",\"moduleSequenceNumber\":839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a7b2f654-40b2-4e5c-a9b3-8629871bbcab\",\"moduleSequenceNumber\":236065}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"omega-net\",\"moduleSequenceNumber\":236065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///f8de2317-a3d3-4d8f-bb24-76b85a4aded0\",\"moduleSequenceNumber\":234538}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"omega-net\",\"moduleSequenceNumber\":234538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///2f801939-f81e-4c19-b770-058740ecc3da\",\"moduleSequenceNumber\":1037}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"omega-net\",\"moduleSequenceNumber\":1037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":8.236,\"minDifficulty\":8,\"moneyAvailable\":639385992,\"moneyMax\":1719021800,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":203,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"10.9.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":40073745,\"moneyMax\":1001843625,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":230,\"serverGrowth\":28}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"12.8.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45982,\"ramUsage\":4.1,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///4e92eeff-96c1-421f-87b5-b2939898f5f0\",\"moduleSequenceNumber\":1038}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///74f94956-a1f0-4f04-ac04-9a68f25c924d\",\"moduleSequenceNumber\":591975}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"iron-gym\",\"moduleSequenceNumber\":850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///a8da43cb-70ba-4414-8da6-a6a5e69af238\",\"moduleSequenceNumber\":591976}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"iron-gym\",\"moduleSequenceNumber\":851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///eb75ac0d-17d9-4933-92bf-65657f5cd636\",\"moduleSequenceNumber\":612479}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"iron-gym\",\"moduleSequenceNumber\":852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b0888912-76ca-4788-8910-52e231eba530\",\"moduleSequenceNumber\":314782}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":314782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///4b0db03f-df54-4b99-b554-72c423c44355\",\"moduleSequenceNumber\":236066}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"iron-gym\",\"moduleSequenceNumber\":236066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///102d0719-a715-415d-8d0e-340fdee49118\",\"moduleSequenceNumber\":234539}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"iron-gym\",\"moduleSequenceNumber\":234539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///4e92eeff-96c1-421f-87b5-b2939898f5f0\",\"moduleSequenceNumber\":1038}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"94.5.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":28.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45969,\"ramUsage\":4.1,\"server\":\"millenium-fitness\",\"threads\":7,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///969bc180-d062-41e4-b24d-187b6ff38ba5\",\"moduleSequenceNumber\":1039}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///af2218d3-f172-4da1-b6ed-18c27c92189a\",\"moduleSequenceNumber\":234526}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":234526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///a6349281-f356-4081-8af6-d071bc0e13c5\",\"moduleSequenceNumber\":239103}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":239103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///969bc180-d062-41e4-b24d-187b6ff38ba5\",\"moduleSequenceNumber\":1039}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":517,\"serverGrowth\":37}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"76.6.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45993,\"ramUsage\":4.1,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///dda1f7af-4056-45f7-bf3a-9092fa59b0a1\",\"moduleSequenceNumber\":1040}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6a5e7fcb-b08c-46d6-a089-f04f6f080d54\",\"moduleSequenceNumber\":273689}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":273689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///f903c22e-d702-4d61-b0c4-9baf28f9a7d2\",\"moduleSequenceNumber\":236077}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":236077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///451a4516-b007-420d-a70a-3f38bb2de87a\",\"moduleSequenceNumber\":234550}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":234550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///dda1f7af-4056-45f7-bf3a-9092fa59b0a1\",\"moduleSequenceNumber\":1040}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1059,\"serverGrowth\":50}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"16.3.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":789,\"serverGrowth\":48}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"10.5.2.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":475.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45959,\"ramUsage\":4.1,\"server\":\"run4theh111z\",\"threads\":116,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///54814131-81d5-418f-a8a4-8ea8645b92f7\",\"moduleSequenceNumber\":1041}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///1c91fcee-69ee-46e3-ab35-7b2077413141\",\"moduleSequenceNumber\":234516}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":234516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///328271ce-aa9e-4075-a320-32a8c704a149\",\"moduleSequenceNumber\":239093}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":239093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///8dd384bd-2881-4f01-bbd8-56d23a65b0e4\",\"moduleSequenceNumber\":307761}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":307761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///54814131-81d5-418f-a8a4-8ea8645b92f7\",\"moduleSequenceNumber\":1041}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":509,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"74.7.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45977,\"ramUsage\":4.1,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///1b1c92e1-8a2e-419e-9ff6-0e0ad8fffb8e\",\"moduleSequenceNumber\":1042}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///69d29d2f-f331-4ba3-b8f9-8e8b91f46697\",\"moduleSequenceNumber\":16955}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///75e3fe03-9449-48bb-8729-efe78b388e6d\",\"moduleSequenceNumber\":236061}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":236061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///39a9069b-4fd5-4909-87b5-f829d466e619\",\"moduleSequenceNumber\":234534}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":234534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///1b1c92e1-8a2e-419e-9ff6-0e0ad8fffb8e\",\"moduleSequenceNumber\":1042}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":351,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"84.7.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45997,\"ramUsage\":4.1,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///67be7278-caef-482a-9a10-32390bf341be\",\"moduleSequenceNumber\":1043}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b840fcfc-a78b-4694-b4da-e40e4a7f72df\",\"moduleSequenceNumber\":606024}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///564b9506-f13f-47a8-bcaf-6942f4428caf\",\"moduleSequenceNumber\":606025}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8b817e54-1fcd-4448-a93d-1b0df8108726\",\"moduleSequenceNumber\":612503}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///b1d3f373-4152-4f03-bca0-97b47b75d417\",\"moduleSequenceNumber\":236081}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":236081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///01bd922d-d18c-4d71-baec-9c295877f744\",\"moduleSequenceNumber\":234554}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":234554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///67be7278-caef-482a-9a10-32390bf341be\",\"moduleSequenceNumber\":1043}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":214,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"33.1.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45994,\"ramUsage\":4.1,\"server\":\".\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///7debed31-fa6c-465c-9610-abf5b6756ead\",\"moduleSequenceNumber\":1044}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///667f2aaa-a483-416a-a608-d485a97be5d3\",\"moduleSequenceNumber\":273690}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\".\",\"moduleSequenceNumber\":273690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///fbc84d77-dd28-4aa1-a9b1-b07691638c58\",\"moduleSequenceNumber\":236078}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\".\",\"moduleSequenceNumber\":236078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///e9d0db1f-9935-4a31-b2df-6b2741650b19\",\"moduleSequenceNumber\":234551}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\".\",\"moduleSequenceNumber\":234551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///7debed31-fa6c-465c-9610-abf5b6756ead\",\"moduleSequenceNumber\":1044}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\".\",\"moduleSequenceNumber\":1044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"helios\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":533,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"35.5.8.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":4.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":46001,\"ramUsage\":4.1,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///029f177f-80f2-4359-87cb-1e66f86bdfc6\",\"moduleSequenceNumber\":1045}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will grow a server until it's full.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n        ns.clearLog();\\n        await ns.grow(hostname);\\n    }\\n    ns.print(\\\"${hostname} is full of cash!\\\");\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///38e7af59-adc5-4408-946c-56abe87a657e\",\"moduleSequenceNumber\":592029}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"CSEC\",\"moduleSequenceNumber\":888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will weaken a server until it is as weak as it can be.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n        ns.clearLog();\\n        await ns.weaken(hostname);\\n    }\\n    ns.print(`${hostname} is weak and ripe for plunder`);\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///88e79cbb-0dec-4bce-90b5-3d531c50f6c8\",\"moduleSequenceNumber\":592030}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"CSEC\",\"moduleSequenceNumber\":889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      This script will continuously hack a given prepared server.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    // now HACK\\n    while (true) {\\n        ns.clearLog();\\n        await ns.hack(hostname);\\n        await ns.weaken(hostname);\\n        await ns.grow(hostname);\\n        await ns.weaken(hostname);\\n    }\\n}\\nexport function autocomplete(data, _args) {\\n    return data.servers;\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///29c04c6f-705f-4976-86e1-eaf4f117965c\",\"moduleSequenceNumber\":612509}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"CSEC\",\"moduleSequenceNumber\":890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///950eba9d-b5c5-415f-958f-de72adca57c0\",\"moduleSequenceNumber\":316791}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"CSEC\",\"moduleSequenceNumber\":316791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2dcc52c3-7a05-435c-ac73-8b9e269b3fff\",\"moduleSequenceNumber\":236086}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"CSEC\",\"moduleSequenceNumber\":236086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"CSEC\",\"moduleSequenceNumber\":893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///029f177f-80f2-4359-87cb-1e66f86bdfc6\",\"moduleSequenceNumber\":1045}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"CSEC\",\"moduleSequenceNumber\":1045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"86.3.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"The-Cave\",\"moduleSequenceNumber\":895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"The-Cave\",\"moduleSequenceNumber\":896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"The-Cave\",\"moduleSequenceNumber\":897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"The-Cave\",\"moduleSequenceNumber\":898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"1.3.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"56.5.4.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"darkweb\",\"moduleSequenceNumber\":899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"darkweb\",\"moduleSequenceNumber\":900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"darkweb\",\"moduleSequenceNumber\":901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"darkweb\",\"moduleSequenceNumber\":902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915035422\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915035422\",\"httpPortOpen\":false,\"ip\":\"59.3.1.2\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32734.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45952,\"ramUsage\":4.1,\"server\":\"pserver-1648915035422\",\"threads\":7984,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///d41db88a-299f-4b3b-97db-95c330dbd570\",\"moduleSequenceNumber\":1046}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///c57d6dae-9be6-4e98-b7c3-00ea20caa43a\",\"moduleSequenceNumber\":51743}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915035422\",\"moduleSequenceNumber\":51743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///6c93e22d-3b12-4797-a856-66398f0a4dae\",\"moduleSequenceNumber\":51225}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915035422\",\"moduleSequenceNumber\":51225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///34fc155c-7bf9-4119-8717-1d6d4c10c919\",\"moduleSequenceNumber\":51742}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915035422\",\"moduleSequenceNumber\":51742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///d41db88a-299f-4b3b-97db-95c330dbd570\",\"moduleSequenceNumber\":1046}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915035422\",\"moduleSequenceNumber\":1046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915036425\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915036425\",\"httpPortOpen\":false,\"ip\":\"54.9.2.8\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32734.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45953,\"ramUsage\":4.1,\"server\":\"pserver-1648915036425\",\"threads\":7984,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///dfb81fe5-f4ce-418b-9f08-6c9468acfc9f\",\"moduleSequenceNumber\":1047}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a52851f3-7a12-4bf9-bd89-2e7b5642912c\",\"moduleSequenceNumber\":51226}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915036425\",\"moduleSequenceNumber\":51226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///45ed484e-ede7-4ae7-b8f1-4d43d0899162\",\"moduleSequenceNumber\":51236}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915036425\",\"moduleSequenceNumber\":51236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///0d337f46-1bc6-4a1a-9fbe-f53be23f2221\",\"moduleSequenceNumber\":51234}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915036425\",\"moduleSequenceNumber\":51234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///dfb81fe5-f4ce-418b-9f08-6c9468acfc9f\",\"moduleSequenceNumber\":1047}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915036425\",\"moduleSequenceNumber\":1047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915037429\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915037429\",\"httpPortOpen\":false,\"ip\":\"89.3.0.4\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32734.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45954,\"ramUsage\":4.1,\"server\":\"pserver-1648915037429\",\"threads\":7984,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///eff86934-0425-4c6f-8f2c-b5d5090327d7\",\"moduleSequenceNumber\":1048}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///b4c3d33c-64a4-466c-8a7c-6a53856bf2ef\",\"moduleSequenceNumber\":51227}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915037429\",\"moduleSequenceNumber\":51227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///040ce56c-581d-41f1-b9bb-a90c3ca8ed59\",\"moduleSequenceNumber\":51738}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915037429\",\"moduleSequenceNumber\":51738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///a52b5413-ef93-49e4-a172-a18dbc2adae0\",\"moduleSequenceNumber\":134315}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915037429\",\"moduleSequenceNumber\":134315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///eff86934-0425-4c6f-8f2c-b5d5090327d7\",\"moduleSequenceNumber\":1048}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915037429\",\"moduleSequenceNumber\":1048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915038430\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915038430\",\"httpPortOpen\":false,\"ip\":\"94.2.4.4\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32734.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45955,\"ramUsage\":4.1,\"server\":\"pserver-1648915038430\",\"threads\":7984,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///2390c0e2-dfc3-4cf4-b4e1-0a84435ec1ec\",\"moduleSequenceNumber\":1049}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///12395a64-8356-43cb-b1e5-161e05d949a6\",\"moduleSequenceNumber\":62280}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915038430\",\"moduleSequenceNumber\":62280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7158bb29-ec18-4827-bbd6-0c3e09584f09\",\"moduleSequenceNumber\":51228}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915038430\",\"moduleSequenceNumber\":51228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///573912e1-ee4b-4640-a447-b73799cb6a9d\",\"moduleSequenceNumber\":62279}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915038430\",\"moduleSequenceNumber\":62279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///2390c0e2-dfc3-4cf4-b4e1-0a84435ec1ec\",\"moduleSequenceNumber\":1049}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915038430\",\"moduleSequenceNumber\":1049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915039432\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915039432\",\"httpPortOpen\":false,\"ip\":\"42.9.8.6\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32734.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45956,\"ramUsage\":4.1,\"server\":\"pserver-1648915039432\",\"threads\":7984,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///04cf3ff6-afae-40e7-adf3-197fbdc65ae5\",\"moduleSequenceNumber\":1050}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9c4ba746-0370-41eb-a470-d4a558a613f8\",\"moduleSequenceNumber\":51229}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915039432\",\"moduleSequenceNumber\":51229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///19742ca7-98d0-444b-ae46-c24d1892339a\",\"moduleSequenceNumber\":51233}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915039432\",\"moduleSequenceNumber\":51233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///0568de8b-8ec6-44de-8162-ab8bde90fa9f\",\"moduleSequenceNumber\":51744}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915039432\",\"moduleSequenceNumber\":51744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///04cf3ff6-afae-40e7-adf3-197fbdc65ae5\",\"moduleSequenceNumber\":1050}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915039432\",\"moduleSequenceNumber\":1050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915040436\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915040436\",\"httpPortOpen\":false,\"ip\":\"31.1.2.0\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32734.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45957,\"ramUsage\":4.1,\"server\":\"pserver-1648915040436\",\"threads\":7984,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///1e0ad70a-9102-490c-8e45-164f8d6d6555\",\"moduleSequenceNumber\":1051}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///40a19852-99a2-4887-a1ba-d840de4f9569\",\"moduleSequenceNumber\":51741}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915040436\",\"moduleSequenceNumber\":51741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///570277a0-14eb-4cd4-b7ee-0059b53a08f7\",\"moduleSequenceNumber\":51230}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915040436\",\"moduleSequenceNumber\":51230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///3be759f6-3647-4a59-9c76-9362b56e8e02\",\"moduleSequenceNumber\":52753}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915040436\",\"moduleSequenceNumber\":52753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///1e0ad70a-9102-490c-8e45-164f8d6d6555\",\"moduleSequenceNumber\":1051}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915040436\",\"moduleSequenceNumber\":1051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915041440\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915041440\",\"httpPortOpen\":false,\"ip\":\"93.3.4.7\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32734.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45958,\"ramUsage\":4.1,\"server\":\"pserver-1648915041440\",\"threads\":7984,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///6b08bcd1-1c1e-4090-a9a8-d4b985496b43\",\"moduleSequenceNumber\":1052}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///45b244c8-1353-4886-8362-42fc48cd4c00\",\"moduleSequenceNumber\":51231}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915041440\",\"moduleSequenceNumber\":51231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///fb7e121e-f20d-4c40-aa78-f6265c246a98\",\"moduleSequenceNumber\":51235}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915041440\",\"moduleSequenceNumber\":51235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5b9c42f9-3b20-4c8e-a219-3d9acb0b60fa\",\"moduleSequenceNumber\":52250}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915041440\",\"moduleSequenceNumber\":52250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///6b08bcd1-1c1e-4090-a9a8-d4b985496b43\",\"moduleSequenceNumber\":1052}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915041440\",\"moduleSequenceNumber\":1052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648909803739\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648909803739\",\"httpPortOpen\":false,\"ip\":\"57.6.0.4\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45934,\"ramUsage\":4.1,\"server\":\"pserver-1648909803739\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///e5d1dd5b-2720-49b1-911c-3c2254555ca7\",\"moduleSequenceNumber\":1053}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d0b87cdf-9023-4669-8e4b-9186b71db117\",\"moduleSequenceNumber\":46675}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648909803739\",\"moduleSequenceNumber\":46675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///55f319c1-481d-4259-8930-6217afbef33f\",\"moduleSequenceNumber\":49713}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648909803739\",\"moduleSequenceNumber\":49713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///8a7ca7bb-f23f-41c6-9ea2-4bd0d4a0bcb3\",\"moduleSequenceNumber\":50720}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648909803739\",\"moduleSequenceNumber\":50720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///e5d1dd5b-2720-49b1-911c-3c2254555ca7\",\"moduleSequenceNumber\":1053}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648909803739\",\"moduleSequenceNumber\":1053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648910658582\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648910658582\",\"httpPortOpen\":false,\"ip\":\"47.4.5.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45935,\"ramUsage\":4.1,\"server\":\"pserver-1648910658582\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///cee33d60-0388-4510-962b-a641d036872d\",\"moduleSequenceNumber\":1054}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///4dc6dae2-c852-45fc-b68e-05dff7a74f1b\",\"moduleSequenceNumber\":46676}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648910658582\",\"moduleSequenceNumber\":46676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3ec6881d-c964-4f42-81fd-e9704db6fdb3\",\"moduleSequenceNumber\":49708}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648910658582\",\"moduleSequenceNumber\":49708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///45325966-66fd-4503-a49b-52d2132d12ef\",\"moduleSequenceNumber\":52248}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648910658582\",\"moduleSequenceNumber\":52248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///cee33d60-0388-4510-962b-a641d036872d\",\"moduleSequenceNumber\":1054}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648910658582\",\"moduleSequenceNumber\":1054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648911513471\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648911513471\",\"httpPortOpen\":false,\"ip\":\"5.7.9.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45936,\"ramUsage\":4.1,\"server\":\"pserver-1648911513471\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///4b721328-ef97-4826-9c1e-07163812f4ba\",\"moduleSequenceNumber\":1055}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///51a7c4a5-4e03-4dba-8030-a9fbaa441360\",\"moduleSequenceNumber\":46677}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648911513471\",\"moduleSequenceNumber\":46677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///cd5567ae-e7cb-4fe0-96b5-e29dcf3f4787\",\"moduleSequenceNumber\":49704}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648911513471\",\"moduleSequenceNumber\":49704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///d859930a-cd76-429a-85f6-8ed69aa5c416\",\"moduleSequenceNumber\":52754}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648911513471\",\"moduleSequenceNumber\":52754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///4b721328-ef97-4826-9c1e-07163812f4ba\",\"moduleSequenceNumber\":1055}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648911513471\",\"moduleSequenceNumber\":1055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648912368095\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648912368095\",\"httpPortOpen\":false,\"ip\":\"86.3.9.0\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45937,\"ramUsage\":4.1,\"server\":\"pserver-1648912368095\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///f467d9ab-d407-49d0-b2e4-c0da9d7d90be\",\"moduleSequenceNumber\":1056}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///300806d3-4991-40af-bd6f-9e8aad10a1ab\",\"moduleSequenceNumber\":47179}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648912368095\",\"moduleSequenceNumber\":47179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///d8a09201-2de0-4107-9335-67e3bc57609b\",\"moduleSequenceNumber\":49717}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648912368095\",\"moduleSequenceNumber\":49717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///70c4929f-5445-4ab7-bc4b-2e4f23bb9474\",\"moduleSequenceNumber\":52251}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648912368095\",\"moduleSequenceNumber\":52251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///f467d9ab-d407-49d0-b2e4-c0da9d7d90be\",\"moduleSequenceNumber\":1056}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648912368095\",\"moduleSequenceNumber\":1056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648913222139\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648913222139\",\"httpPortOpen\":false,\"ip\":\"35.9.1.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45938,\"ramUsage\":4.1,\"server\":\"pserver-1648913222139\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///f5cf58a2-13b6-487f-828b-f1242f1f9672\",\"moduleSequenceNumber\":1057}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///d492fec5-2095-4e45-a6b1-e7da244a878c\",\"moduleSequenceNumber\":47180}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648913222139\",\"moduleSequenceNumber\":47180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///645ea27a-2c61-480e-9824-85266cca3d14\",\"moduleSequenceNumber\":49706}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648913222139\",\"moduleSequenceNumber\":49706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///12d8f710-a12d-4e7b-a906-2af5e09f2810\",\"moduleSequenceNumber\":55263}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648913222139\",\"moduleSequenceNumber\":55263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///f5cf58a2-13b6-487f-828b-f1242f1f9672\",\"moduleSequenceNumber\":1057}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648913222139\",\"moduleSequenceNumber\":1057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648914076673\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648914076673\",\"httpPortOpen\":false,\"ip\":\"1.1.9.1\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45939,\"ramUsage\":4.1,\"server\":\"pserver-1648914076673\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///28c5ccc5-9f0f-4178-9f7f-2ad3004a0a9c\",\"moduleSequenceNumber\":1058}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///163a858c-3460-41f1-ae0e-a733575f091e\",\"moduleSequenceNumber\":47181}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648914076673\",\"moduleSequenceNumber\":47181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///0c58e0cf-d3d2-40f8-8d41-cd08a610882c\",\"moduleSequenceNumber\":49710}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648914076673\",\"moduleSequenceNumber\":49710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///92207d4c-4731-4974-b015-867fdb7c11a6\",\"moduleSequenceNumber\":51739}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648914076673\",\"moduleSequenceNumber\":51739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///28c5ccc5-9f0f-4178-9f7f-2ad3004a0a9c\",\"moduleSequenceNumber\":1058}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648914076673\",\"moduleSequenceNumber\":1058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648914931293\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648914931293\",\"httpPortOpen\":false,\"ip\":\"75.5.0.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45940,\"ramUsage\":4.1,\"server\":\"pserver-1648914931293\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///85b2ec73-a17d-49b2-84a9-a26a2b85d253\",\"moduleSequenceNumber\":1059}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///6e9d82e3-2092-490d-85c8-fe6b49064be2\",\"moduleSequenceNumber\":47182}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648914931293\",\"moduleSequenceNumber\":47182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///228daf71-39c0-4c52-ae7a-195dab3a4b3d\",\"moduleSequenceNumber\":49702}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648914931293\",\"moduleSequenceNumber\":49702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///21415169-6b43-4b28-93a8-6d5ca9c5e9d8\",\"moduleSequenceNumber\":52247}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648914931293\",\"moduleSequenceNumber\":52247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///85b2ec73-a17d-49b2-84a9-a26a2b85d253\",\"moduleSequenceNumber\":1059}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648914931293\",\"moduleSequenceNumber\":1059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915024351\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915024351\",\"httpPortOpen\":false,\"ip\":\"71.9.0.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45941,\"ramUsage\":4.1,\"server\":\"pserver-1648915024351\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///c8feaf15-647a-4166-b0b4-a95650fcca52\",\"moduleSequenceNumber\":1060}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///f2bdd272-e0a1-471f-9861-c0f5ee7fa8a6\",\"moduleSequenceNumber\":47183}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915024351\",\"moduleSequenceNumber\":47183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///79c7053b-d789-4338-80b4-ca6a6a548d57\",\"moduleSequenceNumber\":49712}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915024351\",\"moduleSequenceNumber\":49712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///86e6d4a1-03f8-4200-88d5-d922ea41b5c0\",\"moduleSequenceNumber\":52249}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915024351\",\"moduleSequenceNumber\":52249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///c8feaf15-647a-4166-b0b4-a95650fcca52\",\"moduleSequenceNumber\":1060}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915024351\",\"moduleSequenceNumber\":1060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915025372\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915025372\",\"httpPortOpen\":false,\"ip\":\"32.2.1.3\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45942,\"ramUsage\":4.1,\"server\":\"pserver-1648915025372\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///e4ff98a0-3b2a-45b1-bdb9-24931459c90d\",\"moduleSequenceNumber\":1061}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///613dfa74-78cb-4ef3-bddb-99f00757e0d9\",\"moduleSequenceNumber\":47184}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915025372\",\"moduleSequenceNumber\":47184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///143a9575-9b10-46ab-a13b-d8817ed37282\",\"moduleSequenceNumber\":49711}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915025372\",\"moduleSequenceNumber\":49711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///eb81268b-826c-4f1d-8aa8-1f5c1a806bee\",\"moduleSequenceNumber\":51222}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915025372\",\"moduleSequenceNumber\":51222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///e4ff98a0-3b2a-45b1-bdb9-24931459c90d\",\"moduleSequenceNumber\":1061}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915025372\",\"moduleSequenceNumber\":1061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915026394\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915026394\",\"httpPortOpen\":false,\"ip\":\"75.5.4.1\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45943,\"ramUsage\":4.1,\"server\":\"pserver-1648915026394\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///a16395de-3216-4a18-8733-5c4923a91c4e\",\"moduleSequenceNumber\":1062}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///1442fa8e-b8e2-4c07-be73-9e7ef5b32558\",\"moduleSequenceNumber\":47185}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915026394\",\"moduleSequenceNumber\":47185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///7056a391-2379-465f-b676-65dd7d76cdb8\",\"moduleSequenceNumber\":49700}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915026394\",\"moduleSequenceNumber\":49700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///fc4a9b4c-308a-464a-b5d2-7f4a26c96ab3\",\"moduleSequenceNumber\":51740}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915026394\",\"moduleSequenceNumber\":51740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///a16395de-3216-4a18-8733-5c4923a91c4e\",\"moduleSequenceNumber\":1062}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915026394\",\"moduleSequenceNumber\":1062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915027408\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915027408\",\"httpPortOpen\":false,\"ip\":\"73.2.4.4\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45944,\"ramUsage\":4.1,\"server\":\"pserver-1648915027408\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///6de5345f-dfe4-421e-a555-31ccdcd793d7\",\"moduleSequenceNumber\":1063}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///f2541eef-6762-4471-9e02-5012b26eff1f\",\"moduleSequenceNumber\":47186}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915027408\",\"moduleSequenceNumber\":47186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///3eeaacc5-8455-449c-9737-2f755049565e\",\"moduleSequenceNumber\":49707}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915027408\",\"moduleSequenceNumber\":49707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///d526ac00-cd4d-4792-aa21-4c78a52bad0a\",\"moduleSequenceNumber\":51232}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915027408\",\"moduleSequenceNumber\":51232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///6de5345f-dfe4-421e-a555-31ccdcd793d7\",\"moduleSequenceNumber\":1063}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915027408\",\"moduleSequenceNumber\":1063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915028409\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915028409\",\"httpPortOpen\":false,\"ip\":\"51.4.4.3\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45945,\"ramUsage\":4.1,\"server\":\"pserver-1648915028409\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///05510b63-4621-4262-9572-ad1005fc3c78\",\"moduleSequenceNumber\":1064}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///341cab87-bce6-4e85-99eb-b3b541d63b62\",\"moduleSequenceNumber\":47187}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915028409\",\"moduleSequenceNumber\":47187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///63765f90-2227-42e5-b6f2-af291433707a\",\"moduleSequenceNumber\":49715}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915028409\",\"moduleSequenceNumber\":49715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///55d2e313-5560-4845-98c5-1075c05ada7c\",\"moduleSequenceNumber\":52246}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915028409\",\"moduleSequenceNumber\":52246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///05510b63-4621-4262-9572-ad1005fc3c78\",\"moduleSequenceNumber\":1064}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915028409\",\"moduleSequenceNumber\":1064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915029412\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915029412\",\"httpPortOpen\":false,\"ip\":\"31.2.8.5\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45946,\"ramUsage\":4.1,\"server\":\"pserver-1648915029412\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///407ea305-7c4f-43a0-8dd5-3952e75fcdc2\",\"moduleSequenceNumber\":1065}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///9e9aac7f-e75b-4869-a603-d9abebf887d3\",\"moduleSequenceNumber\":47188}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915029412\",\"moduleSequenceNumber\":47188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///2a63679b-a894-46f3-9a41-4de3f15519c5\",\"moduleSequenceNumber\":49714}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915029412\",\"moduleSequenceNumber\":49714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///13d4b6e8-6543-4c15-a270-8eed01007690\",\"moduleSequenceNumber\":51224}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915029412\",\"moduleSequenceNumber\":51224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///407ea305-7c4f-43a0-8dd5-3952e75fcdc2\",\"moduleSequenceNumber\":1065}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915029412\",\"moduleSequenceNumber\":1065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915030413\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915030413\",\"httpPortOpen\":false,\"ip\":\"30.5.1.1\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45947,\"ramUsage\":4.1,\"server\":\"pserver-1648915030413\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///b85ebe53-ecd0-47ed-9ffb-5cc4ab2dd523\",\"moduleSequenceNumber\":1066}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///0cc114c1-cc9e-4610-982b-e0c22ec94658\",\"moduleSequenceNumber\":47189}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915030413\",\"moduleSequenceNumber\":47189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///162f776c-c75f-49a3-8253-31874ad5710b\",\"moduleSequenceNumber\":49703}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915030413\",\"moduleSequenceNumber\":49703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///3678b6d9-2bb5-45b0-bb18-da6c87d08d7f\",\"moduleSequenceNumber\":53256}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915030413\",\"moduleSequenceNumber\":53256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///b85ebe53-ecd0-47ed-9ffb-5cc4ab2dd523\",\"moduleSequenceNumber\":1066}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915030413\",\"moduleSequenceNumber\":1066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915031413\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915031413\",\"httpPortOpen\":false,\"ip\":\"52.5.6.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45948,\"ramUsage\":4.1,\"server\":\"pserver-1648915031413\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///a713b4c1-eb9c-4eac-9a62-b83231f5dbe6\",\"moduleSequenceNumber\":1067}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///761adb72-5f7e-462f-850f-7e40b1f57295\",\"moduleSequenceNumber\":47190}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915031413\",\"moduleSequenceNumber\":47190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8d87ea3c-f4da-46d3-9179-8f414b6247b3\",\"moduleSequenceNumber\":49709}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915031413\",\"moduleSequenceNumber\":49709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///76cec699-bcf0-4f54-aada-f67d847b22f0\",\"moduleSequenceNumber\":55765}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915031413\",\"moduleSequenceNumber\":55765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///a713b4c1-eb9c-4eac-9a62-b83231f5dbe6\",\"moduleSequenceNumber\":1067}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915031413\",\"moduleSequenceNumber\":1067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915032415\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915032415\",\"httpPortOpen\":false,\"ip\":\"16.7.1.0\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45949,\"ramUsage\":4.1,\"server\":\"pserver-1648915032415\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///c231dddb-caa8-4f3a-9ce7-d921ddaa2c1c\",\"moduleSequenceNumber\":1068}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///decadff5-65dc-4874-aa40-90321254ca8d\",\"moduleSequenceNumber\":47191}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915032415\",\"moduleSequenceNumber\":47191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///6fc57eff-07c4-4226-9735-47572099ad18\",\"moduleSequenceNumber\":49716}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915032415\",\"moduleSequenceNumber\":49716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///5fbc46e9-0bb0-4c99-a27f-4008d2de331f\",\"moduleSequenceNumber\":53257}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915032415\",\"moduleSequenceNumber\":53257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///c231dddb-caa8-4f3a-9ce7-d921ddaa2c1c\",\"moduleSequenceNumber\":1068}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915032415\",\"moduleSequenceNumber\":1068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915033416\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915033416\",\"httpPortOpen\":false,\"ip\":\"11.8.0.4\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45950,\"ramUsage\":4.1,\"server\":\"pserver-1648915033416\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///8f470d8a-b933-4adb-b3ed-ea5f37c7785c\",\"moduleSequenceNumber\":1069}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///a752d8d0-6133-40c6-a11f-02360a3b96d0\",\"moduleSequenceNumber\":47192}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915033416\",\"moduleSequenceNumber\":47192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///8523d4d8-deef-46dd-8231-ebdd3aa5ed0d\",\"moduleSequenceNumber\":49705}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915033416\",\"moduleSequenceNumber\":49705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///2a0cb560-dcd1-4603-bb02-9181b45c3a54\",\"moduleSequenceNumber\":51223}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915033416\",\"moduleSequenceNumber\":51223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///8f470d8a-b933-4adb-b3ed-ea5f37c7785c\",\"moduleSequenceNumber\":1069}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915033416\",\"moduleSequenceNumber\":1069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserver-1648915034420\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserver-1648915034420\",\"httpPortOpen\":false,\"ip\":\"84.4.7.0\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65501.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":555.2099999999898,\"pid\":45951,\"ramUsage\":4.1,\"server\":\"pserver-1648915034420\",\"threads\":15976,\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///3ab5e380-72dc-4cd3-9b10-fcd05fac89e6\",\"moduleSequenceNumber\":1070}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Weaken the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.weaken(hostname);\\n}\\n\",\"filename\":\"/batching/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/weaken.js\",\"url\":\"blob:file:///7b647cfa-e17a-4d03-bc97-6356558868fb\",\"moduleSequenceNumber\":47193}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915034420\",\"moduleSequenceNumber\":47193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Grow the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.grow(hostname);\\n}\\n\",\"filename\":\"/batching/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/grow.js\",\"url\":\"blob:file:///c2155eb2-978d-4991-a2fc-e99bd7d9e3de\",\"moduleSequenceNumber\":49701}],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"pserver-1648915034420\",\"moduleSequenceNumber\":49701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const hostname = args._[0];\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help || !hostname) {\\n        ns.tprint(`\\n      Hack the given host and stop. Used for batching.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} HOSTNAME\\n      `);\\n        return;\\n    }\\n    await ns.hack(hostname);\\n}\\n\",\"filename\":\"/batching/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/batching/hack.js\",\"url\":\"blob:file:///c6351230-bef7-44c6-8721-138e4ce6feb1\",\"moduleSequenceNumber\":54260}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"pserver-1648915034420\",\"moduleSequenceNumber\":54260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const ram = ns.getScriptRam(ns.getScriptName()) * 1e9;\\n    if (args.help) {\\n        ns.tprint(`\\n      This will grind faction rep.\\n\\n      This script uses ${ns.nFormat(ram, \\\"0.000b\\\")} of RAM.\\n      USAGE: run ${ns.getScriptName()} ARGS_HERE\\n      `);\\n        return;\\n    }\\n    while (true) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///3ab5e380-72dc-4cd3-9b10-fcd05fac89e6\",\"moduleSequenceNumber\":1070}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"pserver-1648915034420\",\"moduleSequenceNumber\":1070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":328925.1223816592,\"favor\":13.5593,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":92058.49867365188,\"favor\":0.004,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":94.8868,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":106.7462,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":13528.350218861806}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":4.9254,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":371451.2350164558}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":20.347,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":229769.7069702202}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":94.6914,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":305844.71620736417}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":307378.2308996427}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":93.8076,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":316112.9596450145}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":77.5196,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":240056.9722756753}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":65.1028,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":240015.87146494622}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"darkweb\":\"home;connect darkweb\",\"liquidate\":\"run stocks/liquidate.js\",\"cnct\":\"run cnct.js\",\"scn\":\"cls;scan-analyze 10\",\"bkdr\":\"run bkdr.js\",\"hm\":\"home\",\"scn3\":\"cls; scan-analyze 3\",\"restart\":\"killall; run restart.js\",\"flight\":\"run fl1ght.exe\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as NiteSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for The Black Hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":7,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":24,\"MonacoVim\":true,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-34,\"y\":101,\"opened\":true}}","VersionSave":"13","AllGangsSave":"","LastExportBonus":"1649084218290","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}