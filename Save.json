{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":205,\"hp\":15,\"max_hp\":15,\"strength\":52,\"defense\":52,\"dexterity\":70,\"agility\":70,\"charisma\":54,\"intelligence\":0,\"hacking_chance_mult\":1.16,\"hacking_speed_mult\":1.16,\"hacking_money_mult\":1.16,\"hacking_grow_mult\":1.16,\"hacking_exp\":130276.14320002707,\"strength_exp\":1592.7597499997823,\"defense_exp\":1592.7597499997823,\"dexterity_exp\":2944.4497500003063,\"agility_exp\":2944.4497500003063,\"charisma_exp\":1738.428199999527,\"intelligence_exp\":0,\"hacking_mult\":1.16,\"strength_mult\":1.16,\"defense_mult\":1.16,\"dexterity_mult\":1.16,\"agility_mult\":1.16,\"charisma_mult\":1.16,\"hacking_exp_mult\":1.16,\"strength_exp_mult\":1.16,\"defense_exp_mult\":1.16,\"dexterity_exp_mult\":1.16,\"agility_exp_mult\":1.16,\"charisma_exp_mult\":1.16,\"company_rep_mult\":1.16,\"faction_rep_mult\":1.16,\"money\":262880258.14659882,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{\"Joe's Guns\":\"Part-time Employee\"},\"companyName\":\"Joe's Guns\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":278.6331084612038,\"onlineTimeSeconds\":56266.19999979423,\"ram\":64,\"totalMoneyGenerated\":269948.1498994967,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":278.6331084612038,\"onlineTimeSeconds\":36887.400000002475,\"ram\":64,\"totalMoneyGenerated\":225729.15053228402,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":278.6331084612038,\"onlineTimeSeconds\":26694.600000039678,\"ram\":64,\"totalMoneyGenerated\":190343.62313223328,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":278.6331084612038,\"onlineTimeSeconds\":26694.600000039678,\"ram\":64,\"totalMoneyGenerated\":190250.84633223145,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":278.6331084612038,\"onlineTimeSeconds\":26694.600000039678,\"ram\":64,\"totalMoneyGenerated\":190246.9661322314,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":278.6331084612038,\"onlineTimeSeconds\":26694.600000039678,\"ram\":64,\"totalMoneyGenerated\":190239.29273223138,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":139,\"moneyGainRatePerSecond\":13.407725262374996,\"onlineTimeSeconds\":141.40000000000052,\"ram\":4,\"totalMoneyGenerated\":890.8468220214752,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":139,\"moneyGainRatePerSecond\":13.407725262374996,\"onlineTimeSeconds\":141.40000000000052,\"ram\":4,\"totalMoneyGenerated\":890.8468220214752,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":139,\"moneyGainRatePerSecond\":13.407725262374996,\"onlineTimeSeconds\":141.40000000000052,\"ram\":4,\"totalMoneyGenerated\":890.8468220214752,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":140,\"moneyGainRatePerSecond\":13.504183717499997,\"onlineTimeSeconds\":141.40000000000052,\"ram\":4,\"totalMoneyGenerated\":904.29691404795,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":140,\"moneyGainRatePerSecond\":13.504183717499997,\"onlineTimeSeconds\":141.40000000000052,\"ram\":4,\"totalMoneyGenerated\":904.29691404795,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":140,\"moneyGainRatePerSecond\":13.504183717499997,\"onlineTimeSeconds\":141.40000000000052,\"ram\":4,\"totalMoneyGenerated\":904.29691404795,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":140,\"moneyGainRatePerSecond\":13.504183717499997,\"onlineTimeSeconds\":141.40000000000052,\"ram\":4,\"totalMoneyGenerated\":904.29691404795,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":140,\"moneyGainRatePerSecond\":13.504183717499997,\"onlineTimeSeconds\":141.40000000000052,\"ram\":4,\"totalMoneyGenerated\":904.29691404795,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":140,\"moneyGainRatePerSecond\":13.504183717499997,\"onlineTimeSeconds\":141.40000000000052,\"ram\":4,\"totalMoneyGenerated\":904.29691404795,\"name\":\"hacknet-node-14\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Slum Snakes\",\"Sector-12\",\"Netburners\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"}],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":-109.20000000000005,\"crime_money_mult\":1.16,\"crime_success_mult\":1.16,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":1,\"workExpMult\":1,\"currentWorkFactionName\":\"CyberSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.087,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.13719230769230767,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":37.39260000000032,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":58.938886153845665,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":106200,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.16,\"hacknet_node_money_mult\":1.16,\"hacknet_node_purchase_cost_mult\":0.84,\"hacknet_node_ram_cost_mult\":0.84,\"hacknet_node_core_cost_mult\":0.84,\"hacknet_node_level_cost_mult\":0.84,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"lastUpdate\":1646679496966,\"lastSave\":1646679457182,\"totalPlaytime\":1653350000,\"playtimeSinceLastAug\":59593400,\"playtimeSinceLastBitnode\":59593400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":1387500000,\"corporation\":0,\"crime\":4895896,\"gang\":0,\"hacking\":13222135.855373472,\"hacknet\":1264856.3507078032,\"hacknet_expenses\":-253230068.3542081,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":262879258.14659882,\"work\":226863.5200000896,\"servers\":-460789425.21496165,\"other\":-286700000,\"augmentations\":-143511000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":1387500000,\"corporation\":0,\"crime\":4895896,\"gang\":0,\"hacking\":13222135.855373472,\"hacknet\":1264856.3507078032,\"hacknet_expenses\":-253230068.3542081,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":262879258.14659882,\"work\":226863.5200000896,\"servers\":-460789425.21496165,\"other\":-286700000,\"augmentations\":-143511000}},\"scriptProdSinceLastAug\":13215404,\"exploits\":[],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1645026146788},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1645028434786},{\"ID\":\"NS2\",\"unlockedOn\":1645044319911},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1645045831181},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1645056200950},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1645056560955},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1645066283086},{\"ID\":\"TOR\",\"unlockedOn\":1645066643085},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1645070003093},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1645097626865},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1645155279886},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1645183682014},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1645190539010},{\"ID\":\"TRAVEL\",\"unlockedOn\":1645202118069},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1645206439756},{\"ID\":\"WORKOUT\",\"unlockedOn\":1645274022801},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1645310391987},{\"ID\":\"NITESEC\",\"unlockedOn\":1645372344826},{\"ID\":\"4S\",\"unlockedOn\":1645407697058},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1645449421121},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1645451161327},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1645492247503},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1645588414067},{\"ID\":\"DONATION\",\"unlockedOn\":1645808344381},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1645842991741},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1646071287225},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1646082477122},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1646132482080},{\"ID\":\"SF1.1\",\"unlockedOn\":1646609210207}],\"terminalCommandHistory\":[\"ps\",\"killall\",\"run earlyGrind.js\",\"ps\",\"killall\",\"run earlyGrind.js\",\"cnct CSEC\",\"killall\",\"cnct CSEC\",\"home; connect foodnstuff; connect CSEC\",\"backdoor\",\"home\",\"run earlyGrind.js\",\"ps\",\"killall\",\"run advanced/crime.js\",\"run earlyGrind.js\",\"run advanced/earlyDaemon.js\",\"killall\",\"run advanced/crime.js\",\"hackall\",\"repGrind\",\"cat repGrind.js\",\"killall\",\"run rep/shareall.js\",\"killall\",\"run /basic/share.js -t 6\",\"killall\",\"run /basic/share.js -t 10\",\"run /basic/share.js -t 9\",\"run /basic/share.js -t 8\",\"hackall\",\"repGrind\",\"killeverything\",\"ls\",\"alias\",\"cat hackGrind.js\",\"run official/custom-stats.js\",\"cat advanced/daemon.js\",\"hackall\",\"ps\",\"killa\",\"killall\",\"run official/custom-stats.js\",\"run advanced/hackrichest.js\",\"hackall\",\"run contracts/daemon.js\",\"ls\",\"ps\",\"run hacknet/daemon.js\"],\"identifier\":\"afc61675d036e\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"41.2.4.6\",\"isConnectedTo\":true,\"maxRam\":512,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"AutoLink.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe-5.58%-INC\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":183.00000000000006,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/official/custom-stats.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":337.8099999999894,\"pid\":3646,\"ramUsage\":36.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///9921cddc-5750-4830-b164-b8722f2a1805\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///d41a2a4b-a581-434d-bc1f-331507aa9002\",\"moduleSequenceNumber\":21419},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///c4e023e3-795d-4379-ba66-05647783883d\",\"moduleSequenceNumber\":21409},{\"filename\":\"/official/custom-stats.js\",\"url\":\"blob:file:///971fe1d2-ebfb-48c8-aaa8-500c748f9141\",\"moduleSequenceNumber\":38992}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/advanced/daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":337.8099999999894,\"pid\":3647,\"ramUsage\":3.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/advanced/daemon.js\",\"url\":\"blob:file:///0b120e84-0d3c-441e-a125-914fa084205d\",\"moduleSequenceNumber\":1907}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/advanced/hackall.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":337.2099999999894,\"pid\":3649,\"ramUsage\":12.4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///e2650744-4a29-4898-887e-3eb6a6242454\",\"moduleSequenceNumber\":1378},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///7275dd34-511b-406d-8cb9-a0cfdeb27d21\",\"moduleSequenceNumber\":1380},{\"filename\":\"/advanced/hackall.js\",\"url\":\"blob:file:///d3dda3d6-9be2-420e-8697-8759831e0ae2\",\"moduleSequenceNumber\":1909}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"/advanced/batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1257.1151999999997,\"onlineMoneyMade\":147392,\"onlineRunningTime\":336.0099999999895,\"pid\":3650,\"ramUsage\":7.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///433cd89f-a4b1-4e1e-b8e0-0db5cb25ca50\",\"moduleSequenceNumber\":21425},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///7b02a866-6eb7-447e-b55e-f982d7120179\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///f3ff9ba3-53ad-48b9-95c9-60a990261829\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/batch.js\",\"url\":\"blob:file:///5908df1c-3505-4ee5-8e2a-ee352e958a6c\",\"moduleSequenceNumber\":38163}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"/advanced/batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2229.984,\"onlineMoneyMade\":1122400,\"onlineRunningTime\":335.6099999999895,\"pid\":3651,\"ramUsage\":7.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///433cd89f-a4b1-4e1e-b8e0-0db5cb25ca50\",\"moduleSequenceNumber\":21425},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///7b02a866-6eb7-447e-b55e-f982d7120179\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///f3ff9ba3-53ad-48b9-95c9-60a990261829\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/batch.js\",\"url\":\"blob:file:///5908df1c-3505-4ee5-8e2a-ee352e958a6c\",\"moduleSequenceNumber\":38163}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"/advanced/batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2277.312,\"onlineMoneyMade\":1327625,\"onlineRunningTime\":335.4099999999895,\"pid\":3653,\"ramUsage\":7.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///433cd89f-a4b1-4e1e-b8e0-0db5cb25ca50\",\"moduleSequenceNumber\":21425},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///7b02a866-6eb7-447e-b55e-f982d7120179\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///f3ff9ba3-53ad-48b9-95c9-60a990261829\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/batch.js\",\"url\":\"blob:file:///5908df1c-3505-4ee5-8e2a-ee352e958a6c\",\"moduleSequenceNumber\":38163}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"/advanced/batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3.48,\"onlineMoneyMade\":0,\"onlineRunningTime\":335.00999999998953,\"pid\":3654,\"ramUsage\":7.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///433cd89f-a4b1-4e1e-b8e0-0db5cb25ca50\",\"moduleSequenceNumber\":21425},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///7b02a866-6eb7-447e-b55e-f982d7120179\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///f3ff9ba3-53ad-48b9-95c9-60a990261829\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/batch.js\",\"url\":\"blob:file:///5908df1c-3505-4ee5-8e2a-ee352e958a6c\",\"moduleSequenceNumber\":38163}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"/advanced/batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5476.128000000001,\"onlineMoneyMade\":3162368,\"onlineRunningTime\":334.80999999998954,\"pid\":3655,\"ramUsage\":7.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///433cd89f-a4b1-4e1e-b8e0-0db5cb25ca50\",\"moduleSequenceNumber\":21425},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///7b02a866-6eb7-447e-b55e-f982d7120179\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///f3ff9ba3-53ad-48b9-95c9-60a990261829\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/batch.js\",\"url\":\"blob:file:///5908df1c-3505-4ee5-8e2a-ee352e958a6c\",\"moduleSequenceNumber\":38163}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"/advanced/batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2982.36,\"onlineMoneyMade\":1649512,\"onlineRunningTime\":334.40999999998957,\"pid\":3657,\"ramUsage\":7.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///433cd89f-a4b1-4e1e-b8e0-0db5cb25ca50\",\"moduleSequenceNumber\":21425},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///7b02a866-6eb7-447e-b55e-f982d7120179\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///f3ff9ba3-53ad-48b9-95c9-60a990261829\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/batch.js\",\"url\":\"blob:file:///5908df1c-3505-4ee5-8e2a-ee352e958a6c\",\"moduleSequenceNumber\":38163}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"/advanced/batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3337.32,\"onlineMoneyMade\":1696618,\"onlineRunningTime\":334.2099999999896,\"pid\":3659,\"ramUsage\":7.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///433cd89f-a4b1-4e1e-b8e0-0db5cb25ca50\",\"moduleSequenceNumber\":21425},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///7b02a866-6eb7-447e-b55e-f982d7120179\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///f3ff9ba3-53ad-48b9-95c9-60a990261829\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/batch.js\",\"url\":\"blob:file:///5908df1c-3505-4ee5-8e2a-ee352e958a6c\",\"moduleSequenceNumber\":38163}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"/advanced/batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3549.6,\"onlineMoneyMade\":2265237,\"onlineRunningTime\":333.8099999999896,\"pid\":3661,\"ramUsage\":7.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///433cd89f-a4b1-4e1e-b8e0-0db5cb25ca50\",\"moduleSequenceNumber\":21425},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///7b02a866-6eb7-447e-b55e-f982d7120179\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///f3ff9ba3-53ad-48b9-95c9-60a990261829\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/batch.js\",\"url\":\"blob:file:///5908df1c-3505-4ee5-8e2a-ee352e958a6c\",\"moduleSequenceNumber\":38163}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"/advanced/batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4.872,\"onlineMoneyMade\":0,\"onlineRunningTime\":333.6099999999896,\"pid\":3663,\"ramUsage\":7.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///433cd89f-a4b1-4e1e-b8e0-0db5cb25ca50\",\"moduleSequenceNumber\":21425},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///7b02a866-6eb7-447e-b55e-f982d7120179\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///f3ff9ba3-53ad-48b9-95c9-60a990261829\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/batch.js\",\"url\":\"blob:file:///5908df1c-3505-4ee5-8e2a-ee352e958a6c\",\"moduleSequenceNumber\":38163}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"/advanced/batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4.176,\"onlineMoneyMade\":0,\"onlineRunningTime\":333.20999999998963,\"pid\":3665,\"ramUsage\":7.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///433cd89f-a4b1-4e1e-b8e0-0db5cb25ca50\",\"moduleSequenceNumber\":21425},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///7b02a866-6eb7-447e-b55e-f982d7120179\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///f3ff9ba3-53ad-48b9-95c9-60a990261829\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/batch.js\",\"url\":\"blob:file:///5908df1c-3505-4ee5-8e2a-ee352e958a6c\",\"moduleSequenceNumber\":38163}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/advanced/batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5.568,\"onlineMoneyMade\":0,\"onlineRunningTime\":333.00999999998965,\"pid\":3667,\"ramUsage\":7.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///433cd89f-a4b1-4e1e-b8e0-0db5cb25ca50\",\"moduleSequenceNumber\":21425},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///7b02a866-6eb7-447e-b55e-f982d7120179\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///f3ff9ba3-53ad-48b9-95c9-60a990261829\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/batch.js\",\"url\":\"blob:file:///5908df1c-3505-4ee5-8e2a-ee352e958a6c\",\"moduleSequenceNumber\":38163}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"/advanced/batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3862.8,\"onlineMoneyMade\":1549548,\"onlineRunningTime\":332.60999999998967,\"pid\":3669,\"ramUsage\":7.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///433cd89f-a4b1-4e1e-b8e0-0db5cb25ca50\",\"moduleSequenceNumber\":21425},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///7b02a866-6eb7-447e-b55e-f982d7120179\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///f3ff9ba3-53ad-48b9-95c9-60a990261829\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/batch.js\",\"url\":\"blob:file:///5908df1c-3505-4ee5-8e2a-ee352e958a6c\",\"moduleSequenceNumber\":38163}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/advanced/batch.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5.568,\"onlineMoneyMade\":0,\"onlineRunningTime\":332.4099999999897,\"pid\":3671,\"ramUsage\":7.9,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///433cd89f-a4b1-4e1e-b8e0-0db5cb25ca50\",\"moduleSequenceNumber\":21425},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///7b02a866-6eb7-447e-b55e-f982d7120179\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///f3ff9ba3-53ad-48b9-95c9-60a990261829\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/batch.js\",\"url\":\"blob:file:///5908df1c-3505-4ee5-8e2a-ee352e958a6c\",\"moduleSequenceNumber\":38163}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/contracts/daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":301.20999999999145,\"pid\":3677,\"ramUsage\":22,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///79359150-ae8d-4fce-8b07-fdaa6d65110f\",\"moduleSequenceNumber\":456},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///eef6651c-3b05-43cc-bf93-782ed4b27741\",\"moduleSequenceNumber\":450},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///b2cfd281-9b6d-4d3e-a1c7-9ae6e5c32079\",\"moduleSequenceNumber\":449},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///c20b929d-6080-49a5-a67d-a052892e8b42\",\"moduleSequenceNumber\":448},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///fd050ef6-11c3-4a91-b543-c7f78f2015f6\",\"moduleSequenceNumber\":447},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///5f57c13a-6537-4e00-8946-34b3856ab8d5\",\"moduleSequenceNumber\":446},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///f14881e7-61c0-4af4-8e26-24d54c60fc5e\",\"moduleSequenceNumber\":445},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///eb80bc29-0d82-4202-a4a2-30edfa48c063\",\"moduleSequenceNumber\":444},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///e9f5f0fd-ce0c-41ef-9fa9-adae2dedc391\",\"moduleSequenceNumber\":443},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///41332799-f6b5-4b6e-bb1e-90a60b393a40\",\"moduleSequenceNumber\":442},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///743f464c-1030-4b2e-b85d-16f04b4972e0\",\"moduleSequenceNumber\":441},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///988cfccb-0beb-4c3e-acbb-424c0090f987\",\"moduleSequenceNumber\":439},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///06d3d7c2-9486-4b5e-bcd3-31c682283f97\",\"moduleSequenceNumber\":440},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///cf3b1cfd-91ab-4da2-8eca-878b1a0af31a\",\"moduleSequenceNumber\":452},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///8d5a6864-13f8-4c38-9049-d0f44e74ce27\",\"moduleSequenceNumber\":419},{\"filename\":\"/contracts/daemon.js\",\"url\":\"blob:file:///ac414c5d-8383-4e57-b7b1-cc8752d1fca4\",\"moduleSequenceNumber\":829}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/hacknet/daemon.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":141.6100000000005,\"pid\":3686,\"ramUsage\":5.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/hacknet/daemon.js\",\"url\":\"blob:file:///1c671468-55b4-4e64-b6ad-5d1360a27207\",\"moduleSequenceNumber\":6564}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///4a388446-e414-463a-bc0e-abd3fd575b0f\",\"moduleSequenceNumber\":29200}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":21469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let target = ns.args[0].toString();\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.print(\\\"Opening ssh port\\\");\\r\\n        ns.brutessh(target);\\r\\n    }\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ns.print(\\\"Opening ftp port\\\");\\r\\n        ns.ftpcrack(target);\\r\\n    }\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        ns.print(\\\"Opening smtp port\\\");\\r\\n        ns.relaysmtp(target);\\r\\n    }\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        ns.print(\\\"Opening http port\\\");\\r\\n        ns.httpworm(target);\\r\\n    }\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        ns.print(\\\"Opening sql port\\\");\\r\\n        ns.sqlinject(target);\\r\\n    }\\r\\n    if (!ns.hasRootAccess(target)) {\\r\\n        ns.nuke(target);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/nuke.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/nuke.js\",\"url\":\"blob:file:///a3a2af29-31db-4105-975b-03e697d1c565\",\"moduleSequenceNumber\":18787}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":21471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatCurrency, formatNumber } from \\\"utils\\\";\\r\\nconst allowancePercentage = 0.5;\\r\\nexport async function main(ns) {\\r\\n    let ram = ns.args[0];\\r\\n    if (typeof ram === \\\"string\\\") {\\r\\n        ram = parseInt(ram);\\r\\n    }\\r\\n    else {\\r\\n        ram = ns.getPurchasedServerMaxRam();\\r\\n        let cost = ns.getPurchasedServerCost(ram);\\r\\n        ns.tprint(`Purchasing servers with ${formatNumber(ram)} for ${formatCurrency(cost)} a piece.`);\\r\\n    }\\r\\n    await purchaseServer(ns, ram);\\r\\n}\\r\\nasync function purchaseServer(ns, ram) {\\r\\n    let numServers = ns.getPurchasedServers().length;\\r\\n    while (numServers < ns.getPurchasedServerLimit()) {\\r\\n        // Check if we have enough money to purchase a server\\r\\n        // only use 1% of cash for purchases\\r\\n        let cost = ns.getPurchasedServerCost(ram);\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") * allowancePercentage > cost) {\\r\\n            // If we have enough money, then:\\r\\n            //  1. Purchase the server\\r\\n            //  2. Copy our hacking script onto the newly-purchased server\\r\\n            //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n            //  4. Increment our iterator to indicate that we've bought a new server\\r\\n            var hostname = ns.purchaseServer(\\\"pserv-\\\" + numServers, ram);\\r\\n            ns.tprint(`Purchased ${hostname} for ${cost.toLocaleString(undefined, {\\r\\n                style: \\\"currency\\\",\\r\\n                currency: \\\"USD\\\",\\r\\n                maximumSignificantDigits: 3,\\r\\n                compactDisplay: \\\"short\\\",\\r\\n            })}.`);\\r\\n            numServers++;\\r\\n        }\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/server-expansion/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///22d5eec7-3635-4e0c-8a48-2f7f0a4caa47\",\"moduleSequenceNumber\":46879},{\"filename\":\"/server-expansion/daemon.js\",\"url\":\"blob:file:///b3ebac8e-d2d9-4976-9246-0bec6ace0bb2\",\"moduleSequenceNumber\":46901}],\"dependents\":[],\"ramUsage\":6.55,\"server\":\"home\",\"moduleSequenceNumber\":21503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall\\\";\\r\\nexport async function main(ns) {\\r\\n    const servers = await getAllServers(ns);\\r\\n    for (const server of servers) {\\r\\n        ns.tprint(server);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/listall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///4a539878-4868-4d82-94c9-6afb04da690e\",\"moduleSequenceNumber\":220077},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///7af7b28b-36b0-4026-b432-41f7d5efdef4\",\"moduleSequenceNumber\":220044},{\"filename\":\"/advanced/listall.js\",\"url\":\"blob:file:///31b65b97-67e7-4f62-9f88-28dda93361fd\",\"moduleSequenceNumber\":222089}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":21459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getPlayerDetails } from \\\"lib/getDetails\\\";\\r\\nexport async function main(ns) {\\r\\n    await getAllServers(ns);\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function getAllServers(ns) {\\r\\n    let allServers = [];\\r\\n    async function getServers(host = undefined) {\\r\\n        let localServers = ns.scan(host);\\r\\n        localServers = localServers.filter((s) => !allServers.includes(s));\\r\\n        if (localServers.length === 0)\\r\\n            return;\\r\\n        for (let server of localServers) {\\r\\n            if (!allServers.includes(server))\\r\\n                allServers.push(server);\\r\\n            await ns.sleep(1);\\r\\n            await getServers(server);\\r\\n        }\\r\\n    }\\r\\n    await getServers();\\r\\n    return allServers;\\r\\n}\\r\\nexport async function getHackableServers(ns) {\\r\\n    let minCash = 1e3;\\r\\n    let playerData = getPlayerDetails(ns);\\r\\n    let servers = (await getAllServers(ns)).filter((s) => s !== \\\"home\\\" &&\\r\\n        playerData.hackingLevel >= ns.getServerRequiredHackingLevel(s) &&\\r\\n        ns.hasRootAccess(s) &&\\r\\n        ns.getServerMaxMoney(s) > minCash &&\\r\\n        ns.getServerMoneyAvailable(s) > 0);\\r\\n    while (servers.length > 100) {\\r\\n        minCash *= 1e3;\\r\\n        servers = servers.filter((s) => ns.getServerMaxMoney(s) > minCash);\\r\\n    }\\r\\n    return servers;\\r\\n}\\r\\nexport async function getNukableServers(ns) {\\r\\n    let playerData = getPlayerDetails(ns);\\r\\n    return (await getAllServers(ns)).filter((s) => playerData.portHacks >= ns.getServerNumPortsRequired(s) &&\\r\\n        !ns.hasRootAccess(s));\\r\\n}\\r\\nexport async function getRunnableServers(ns) {\\r\\n    return (await getAllServers(ns)).filter((s) => ns.hasRootAccess(s));\\r\\n}\\r\\n\",\"filename\":\"/lib/getall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":11.4,\"server\":\"home\",\"moduleSequenceNumber\":21419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"lib/getall\\\";\\r\\nconst bufferTime = 300;\\r\\nconst minutesToCheck = 5;\\r\\nexport async function main(ns) {\\r\\n    await crawl(ns);\\r\\n}\\r\\nasync function crawl(ns) {\\r\\n    ns.disableLog(\\\"scan\\\");\\r\\n    ns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\r\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\r\\n    ns.disableLog(\\\"getServerMaxMoney\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    while (true) {\\r\\n        for (const target of await getHackableServers(ns)) {\\r\\n            if (ns.isRunning(\\\"/advanced/batch.js\\\", \\\"home\\\", target))\\r\\n                continue;\\r\\n            if (!ns.run(\\\"/advanced/batch.js\\\", 1, target)) {\\r\\n                break;\\r\\n            }\\r\\n            await ns.sleep(bufferTime);\\r\\n        }\\r\\n        await ns.sleep(minutesToCheck * 60 * 1000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/hackall.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///ac65196c-d310-4e03-9576-3b21fde44d94\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///8b06c5b3-6e74-4d84-b194-3637ca7e3a17\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/hackall.js\",\"url\":\"blob:file:///7bb2115c-15d9-43ff-adb4-e51194aa3770\",\"moduleSequenceNumber\":39454}],\"dependents\":[],\"ramUsage\":12.4,\"server\":\"home\",\"moduleSequenceNumber\":39454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const minuteInterval = 5;\\r\\nconst nukeScript = \\\"/advanced/nukeall.js\\\";\\r\\nconst hackScript = \\\"/advanced/hackall.js\\\";\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        ns.run(nukeScript);\\r\\n        while (ns.scriptRunning(nukeScript, \\\"home\\\"))\\r\\n            await ns.sleep(1);\\r\\n        if (!ns.scriptRunning(hackScript, \\\"home\\\"))\\r\\n            ns.run(hackScript);\\r\\n        await ns.sleep(minuteInterval * 60 * 1000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/advanced/daemon.js\",\"url\":\"blob:file:///1bc0d063-0797-4c79-9f97-df32e68fcecd\",\"moduleSequenceNumber\":39453}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":39453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const allowancePercentage = 0.01;\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\r\\n            let gain = [0, 0, 0];\\r\\n            let currentCash = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n            currentCash *= allowancePercentage;\\r\\n            if (ns.hacknet.getPurchaseNodeCost() <= currentCash) {\\r\\n                ns.hacknet.purchaseNode();\\r\\n                continue;\\r\\n            }\\r\\n            const node = ns.hacknet.getNodeStats(i);\\r\\n            if (node.level < 200) {\\r\\n                gain[0] =\\r\\n                    ((node.level + 1) *\\r\\n                        1.6 *\\r\\n                        Math.pow(1.035, node.ram - 1) *\\r\\n                        ((node.cores + 5) / 6)) /\\r\\n                        ns.hacknet.getLevelUpgradeCost(i, 1);\\r\\n            }\\r\\n            else {\\r\\n                gain[0] = 0;\\r\\n            }\\r\\n            if (node.ram < 64) {\\r\\n                gain[1] =\\r\\n                    (node.level *\\r\\n                        1.6 *\\r\\n                        Math.pow(1.035, node.ram * 2 - 1) *\\r\\n                        ((node.cores + 5) / 6)) /\\r\\n                        ns.hacknet.getRamUpgradeCost(i, 1);\\r\\n            }\\r\\n            else {\\r\\n                gain[1] = 0;\\r\\n            }\\r\\n            if (node.cores < 16) {\\r\\n                gain[2] =\\r\\n                    (node.level *\\r\\n                        1.6 *\\r\\n                        Math.pow(1.035, node.ram - 1) *\\r\\n                        ((node.cores + 6) / 6)) /\\r\\n                        ns.hacknet.getCoreUpgradeCost(i, 1);\\r\\n            }\\r\\n            else {\\r\\n                gain[2] = 0;\\r\\n            }\\r\\n            ns.print(`Level Upgrade: ${gain[0]}`);\\r\\n            ns.print(`Ram Upgrade: ${gain[1]}`);\\r\\n            ns.print(`Core Upgrade: ${gain[2]}`);\\r\\n            let topgain = 0;\\r\\n            for (let g of gain) {\\r\\n                if (g > topgain) {\\r\\n                    topgain = g;\\r\\n                }\\r\\n            }\\r\\n            if (topgain === 0) {\\r\\n                ns.print(`All Gains maxed on Node ${i}`);\\r\\n                break;\\r\\n            }\\r\\n            if (topgain === gain[0] &&\\r\\n                ns.hacknet.getLevelUpgradeCost(i, 1) < currentCash) {\\r\\n                ns.print(`Upgrading Level on Node ${i}`);\\r\\n                ns.hacknet.upgradeLevel(i, 1);\\r\\n            }\\r\\n            if (topgain === gain[1] &&\\r\\n                ns.hacknet.getRamUpgradeCost(i, 1) < currentCash) {\\r\\n                ns.print(`Upgrading Ram on Node ${i}`);\\r\\n                ns.hacknet.upgradeRam(i, 1);\\r\\n            }\\r\\n            if (topgain === gain[2] &&\\r\\n                ns.hacknet.getCoreUpgradeCost(i, 1) < currentCash) {\\r\\n                ns.print(`Upgrading Cores on Node ${i}`);\\r\\n                ns.hacknet.upgradeCore(i, 1);\\r\\n            }\\r\\n            else {\\r\\n                ns.print(`Cannot afford upgrades on Node ${i}`);\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/hacknet/daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/hacknet/daemon.js\",\"url\":\"blob:file:///f968b548-db68-430b-afcc-5c486dc08d8e\",\"moduleSequenceNumber\":40698}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":40698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall.js\\\";\\r\\nimport * as solvers from \\\"contracts/solvers/index.js\\\";\\r\\nconst minuteInterval = 2;\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        // await dfs(ns, null, \\\"home\\\", trySolveContracts, 0);\\r\\n        const contracts = (await getAllServers(ns)).flatMap((server) => {\\r\\n            const onServer = ns.ls(server, \\\".cct\\\").map((contract) => {\\r\\n                const type = ns.codingcontract.getContractType(contract, server);\\r\\n                const data = ns.codingcontract.getData(contract, server);\\r\\n                const reward = solve(type, data, server, contract, ns);\\r\\n                return `${server} - ${contract} - ${type} - ${reward || \\\"FAILED!\\\"}`;\\r\\n            });\\r\\n            return onServer;\\r\\n        });\\r\\n        if (contracts.length > 0)\\r\\n            ns.tprint(`Found ${contracts.length} contracts`);\\r\\n        for (const contract of contracts) {\\r\\n            ns.tprint(contract);\\r\\n        }\\r\\n        await ns.sleep(minuteInterval * 60 * 1000);\\r\\n    }\\r\\n}\\r\\nfunction solve(type, data, server, contract, ns) {\\r\\n    let solution;\\r\\n    ns.tprint(type);\\r\\n    switch (type) {\\r\\n        case \\\"Algorithmic Stock Trader I\\\":\\r\\n            solution = solvers.maxProfit([1, data]);\\r\\n            break;\\r\\n        case \\\"Algorithmic Stock Trader II\\\":\\r\\n            solution = solvers.maxProfit([Math.ceil(data.length / 2), data]);\\r\\n            break;\\r\\n        case \\\"Algorithmic Stock Trader III\\\":\\r\\n            solution = solvers.maxProfit([2, data]);\\r\\n            break;\\r\\n        case \\\"Algorithmic Stock Trader IV\\\":\\r\\n            solution = solvers.maxProfit(data);\\r\\n            break;\\r\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\r\\n            solution = solvers.triangleSum(data);\\r\\n            break;\\r\\n        case \\\"Unique Paths in a Grid I\\\":\\r\\n            solution = solvers.uniquePathsI(data);\\r\\n            break;\\r\\n        case \\\"Unique Paths in a Grid II\\\":\\r\\n            solution = solvers.uniquePathsII(data);\\r\\n            break;\\r\\n        case \\\"Generate IP Addresses\\\":\\r\\n            solution = solvers.generateIps(data);\\r\\n            break;\\r\\n        case \\\"Find Largest Prime Factor\\\":\\r\\n            solution = solvers.factor(data);\\r\\n            break;\\r\\n        case \\\"Spiralize Matrix\\\":\\r\\n            solution = solvers.spiral(data);\\r\\n            break;\\r\\n        case \\\"Merge Overlapping Intervals\\\":\\r\\n            solution = solvers.mergeOverlap(data);\\r\\n            break;\\r\\n        case \\\"Subarray with Maximum Sum\\\":\\r\\n            solution = solvers.solveSum(data);\\r\\n            break;\\r\\n        case \\\"Array Jumping Game\\\":\\r\\n            solution = solvers.solveJump(data);\\r\\n            break;\\r\\n        case \\\"Total Ways to Sum\\\":\\r\\n            solution = solvers.totalWaysToSum(data);\\r\\n            break;\\r\\n        case \\\"Sanitize Parentheses in Expression\\\":\\r\\n            solution = solvers.sanitizeParentheses(data);\\r\\n            break;\\r\\n        case \\\"Find All Valid Math Expressions\\\":\\r\\n            solution = solvers.findMathExpression(data);\\r\\n            break;\\r\\n        default:\\r\\n            ns.tprint(`Unknown contract type: ${type}`);\\r\\n            return \\\"\\\";\\r\\n    }\\r\\n    if (solution != undefined)\\r\\n        ns.tprint(`Submitting solution: ${solution} to ${type} - ${contract}`);\\r\\n    return solution != undefined\\r\\n        ? ns.codingcontract.attempt(solution, contract, server, {\\r\\n            returnReward: true,\\r\\n        })\\r\\n        : \\\"\\\";\\r\\n}\\r\\n\",\"filename\":\"/contracts/daemon.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///7af02d01-2112-4948-8a2b-8d0a7668ffdb\",\"moduleSequenceNumber\":21497},{\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"blob:file:///934b843d-2590-4b17-a7e6-d7b140902031\",\"moduleSequenceNumber\":21495},{\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"blob:file:///9be78655-fa9c-47e2-81d4-b4f10ac6f9bb\",\"moduleSequenceNumber\":21493},{\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"blob:file:///96796562-4324-4ec4-90db-bf4f6c230fd3\",\"moduleSequenceNumber\":21491},{\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"blob:file:///e2e1101f-6540-457c-97b5-d8e7b05e7d05\",\"moduleSequenceNumber\":21489},{\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"blob:file:///3f895e1a-f66b-4054-b8eb-a6fec7497dae\",\"moduleSequenceNumber\":21487},{\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"blob:file:///be7bce85-6f7a-47ab-b38c-0c8da3d075fa\",\"moduleSequenceNumber\":21485},{\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"blob:file:///efbc009d-3e8e-49d5-b300-577bcd52c15a\",\"moduleSequenceNumber\":21483},{\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"blob:file:///0c7d5d89-6459-4572-994c-b88cec07641c\",\"moduleSequenceNumber\":21481},{\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"blob:file:///c0b176c0-6514-461c-9a2a-a4b5db93074a\",\"moduleSequenceNumber\":21479},{\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"blob:file:///1bc569fc-2442-4965-9dd0-487677f026e5\",\"moduleSequenceNumber\":21477},{\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"blob:file:///dcb8468f-57fc-4f84-86e4-41da85e7435d\",\"moduleSequenceNumber\":21431},{\"filename\":\"/contracts/solvers/index.js\",\"url\":\"blob:file:///fec4df81-1951-4975-9d3c-4efa8ac7b712\",\"moduleSequenceNumber\":21499},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///69c58b31-de6f-4dcb-862d-9c8c7b7d6b00\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///846bdca0-42f1-4311-9716-2c1e2207b245\",\"moduleSequenceNumber\":21419},{\"filename\":\"/contracts/daemon.js\",\"url\":\"blob:file:///f7d7e991-e557-4efc-8589-05d3eb6ecb4d\",\"moduleSequenceNumber\":39455}],\"dependents\":[],\"ramUsage\":22,\"server\":\"home\",\"moduleSequenceNumber\":39455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall\\\";\\r\\nexport async function main(ns) {\\r\\n    await killAll(ns);\\r\\n}\\r\\nexport async function killAll(ns) {\\r\\n    const servers = await getAllServers(ns);\\r\\n    for (const server of servers) {\\r\\n        if (server !== \\\"home\\\") {\\r\\n            ns.killall(server);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/killall.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///b89b09b5-4d7c-4c5c-bb88-f0182fe94018\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///ba4cdbe7-2e46-4622-80f5-9be796b7e6e3\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/killall.js\",\"url\":\"blob:file:///e44b7fad-8e44-41bb-8ca4-c0ac28eddc1d\",\"moduleSequenceNumber\":39451}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":39451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatCurrency, formatNumber, getFolio } from \\\"utils\\\";\\r\\n// % of money to use in buying stocks\\r\\nconst budget = 0.9;\\r\\n// % at which to buy or sell stocks\\r\\nconst buyAt = 0.6;\\r\\nconst sellBellow = 0.5;\\r\\n// const stockToWatch = \\\"MGCP\\\"; // Megacorp\\r\\n// TODO short stocks\\r\\n// const shortAt = 40;\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await manageStock(ns);\\r\\n        await ns.sleep(1);\\r\\n    }\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nasync function manageStock(ns) {\\r\\n    // let stock = stockToWatch;\\r\\n    let folio = getFolio(ns);\\r\\n    if (folio.length > 0) {\\r\\n        // we have a stock - get it and monitor if it is increasing/decreasing\\r\\n        let { sym, shares } = folio[0];\\r\\n        while (ns.stock.getPosition(sym)[0] > 0) {\\r\\n            let increaseChance = ns.stock.getForecast(sym);\\r\\n            if (increaseChance <= sellBellow) {\\r\\n                let total = ns.stock.sell(sym, shares);\\r\\n                ns.tprint(`${formatNumber(shares)} shares of ${sym} sold for a total of ${formatCurrency(total * shares)} \\n                    because it's growth is stopping.`);\\r\\n            }\\r\\n            else {\\r\\n                await ns.sleep(1);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    else {\\r\\n        // find a stock to get\\r\\n        const stock = getBestStock(ns);\\r\\n        let increaseChance = ns.stock.getForecast(stock);\\r\\n        let maxShares = getMaxShares(ns, stock);\\r\\n        if (increaseChance >= buyAt) {\\r\\n            let cost = ns.stock.buy(stock, maxShares);\\r\\n            ns.tprint(`${formatNumber(maxShares)} shares of ${stock} purchased for a total of ${formatCurrency(cost * maxShares)}\\n        because it has a ${increaseChance.toLocaleString(undefined, {\\r\\n                style: \\\"percent\\\",\\r\\n            })} chance of increasing.`);\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction getMaxShares(ns, sym) {\\r\\n    let cashAvailable = ns.getServerMoneyAvailable(\\\"home\\\") * budget;\\r\\n    let stockCost = ns.stock.getBidPrice(sym);\\r\\n    let maxPurchaseable = Math.min(ns.stock.getMaxShares(sym), cashAvailable / stockCost);\\r\\n    return maxPurchaseable;\\r\\n}\\r\\nexport function getBestStock(ns) {\\r\\n    let best = [\\\"\\\", 0];\\r\\n    for (const stock of ns.stock.getSymbols()) {\\r\\n        let increaseChance = ns.stock.getForecast(stock);\\r\\n        if (increaseChance > best[1]) {\\r\\n            best = [stock, increaseChance];\\r\\n        }\\r\\n    }\\r\\n    return best[0];\\r\\n}\\r\\n\",\"filename\":\"/stocks/daemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///17541e6c-e271-4d7f-a65d-91821244bc94\",\"moduleSequenceNumber\":20999},{\"filename\":\"/stocks/daemon.js\",\"url\":\"blob:file:///c7ed0d88-943b-423f-8736-5f10cabc8e7b\",\"moduleSequenceNumber\":23596}],\"dependents\":[],\"ramUsage\":17.2,\"server\":\"home\",\"moduleSequenceNumber\":21505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let tree = await getTree(ns);\\r\\n    ns.tprint(JSON.stringify(tree, null, 2));\\r\\n}\\r\\n/**\\r\\n * Returns the path to a specified target - or prints the entire tree.\\r\\n */\\r\\nexport async function getTree(ns) {\\r\\n    /**\\r\\n     * @typedef HashMap\\r\\n     * @type {object}\\r\\n     *\\r\\n     * @type {HashMap}\\r\\n     */\\r\\n    let serverRoot = { home: {} };\\r\\n    let allServers = [\\\"home\\\"];\\r\\n    async function getServers(host = \\\"home\\\", parent = serverRoot.home) {\\r\\n        let localServers = ns.scan(host);\\r\\n        localServers = localServers.filter((s) => !allServers.includes(s));\\r\\n        if (localServers.length === 0)\\r\\n            return;\\r\\n        for (let server of localServers) {\\r\\n            allServers.push(server);\\r\\n            parent[server] = {};\\r\\n            await getServers(server, parent[server]);\\r\\n        }\\r\\n    }\\r\\n    await getServers();\\r\\n    // This lists all contracts.\\r\\n    /*\\r\\n      for (let server of serverRoot) {\\r\\n          let files = ns.ls(server, 'cct');\\r\\n          if (files.length === 0) return;\\r\\n          ns.tprint(\\\"==================================\\\");\\r\\n          ns.tprint(`Files on ${server}:`);\\r\\n          for (let file of files) {\\r\\n              ns.tprint(`\\\\t${file}`);\\r\\n          }\\r\\n          ns.tprint(\\\"==================================\\\");\\r\\n      }\\r\\n      */\\r\\n    // ns.tprint(`${serverRoot.length} servers found!`);\\r\\n    return serverRoot;\\r\\n}\\r\\n\",\"filename\":\"/lib/gettree.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/gettree.js\",\"url\":\"blob:file:///4790c1ac-10c0-460d-b66e-c37525898665\",\"moduleSequenceNumber\":62627}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":21427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolio, formatCurrency } from \\\"utils\\\";\\r\\nexport async function main(ns) {\\r\\n    ns.scriptKill(\\\"/stocks/daemon.js\\\", \\\"home\\\");\\r\\n    ns.tprint(\\\"Liquidating assets.\\\");\\r\\n    let total = 0;\\r\\n    const folio = getFolio(ns);\\r\\n    for (const { sym, shares } of folio) {\\r\\n        ns.tprint(`Waiting for ${sym} to stop growing.`);\\r\\n        while (ns.stock.getPosition(sym)[0] > 0) {\\r\\n            let increaseChance = ns.stock.getForecast(sym);\\r\\n            if (increaseChance <= 0.5) {\\r\\n                let stockPrice = ns.stock.sell(sym, shares);\\r\\n                ns.tprint(`${formatCurrency(shares)} of ${sym} sold for a total of ${formatCurrency(stockPrice * shares)} \\n                    because it's growth is stopping.`);\\r\\n                total += stockPrice * shares;\\r\\n            }\\r\\n            else {\\r\\n                await ns.sleep(1);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    ns.tprint(`All stocks sold for a total of ${total}`);\\r\\n}\\r\\n\",\"filename\":\"/stocks/liquidate.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///abb3f36d-ad9e-4e1a-ba1e-163aa5fd90bd\",\"moduleSequenceNumber\":220083},{\"filename\":\"/stocks/liquidate.js\",\"url\":\"blob:file:///c79d6526-1aa3-4c8a-a766-e835a7aa8a7e\",\"moduleSequenceNumber\":223806}],\"dependents\":[],\"ramUsage\":11.6,\"server\":\"home\",\"moduleSequenceNumber\":21523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// % of money to use in buying stocks\\r\\n// const budget = 1;\\r\\n// % at which to buy or sell stocks\\r\\n// const buyAt = 60;\\r\\n// Profit amount to sell the stock at.\\r\\n// const sellAt = 10000000;\\r\\n// TODO short stocks\\r\\n// const shortAt = 40;\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    let stocks = ns.stock.getSymbols();\\r\\n    for (let stock of stocks) {\\r\\n        let increaseChance = ns.stock.getForecast(stock) * 100;\\r\\n        ns.tprint(`${stock} - ${increaseChance.toLocaleString(undefined, {\\r\\n            minimumFractionDigits: 2,\\r\\n        })}%`);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/stocks/listall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/stocks/listall.js\",\"url\":\"blob:file:///007cf73f-7c6f-4614-9551-73491e961bba\",\"moduleSequenceNumber\":23453}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":21525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/lib/Bitburner.t.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getNukableServers } from \\\"lib/getall\\\";\\r\\nimport { getPlayerDetails } from \\\"lib/getDetails\\\";\\r\\nexport async function main(ns) {\\r\\n    const servers = await getNukableServers(ns);\\r\\n    const player = getPlayerDetails(ns);\\r\\n    ns.tprint(`You can hack through ${player.portHacks} ports.`);\\r\\n    for (let server of servers) {\\r\\n        ns.print(`Nuking ${server}!`);\\r\\n        ns.run(\\\"/basic/nuke.js\\\", 1, server);\\r\\n        while (ns.scriptRunning(\\\"/basic/nuke.js\\\", ns.getHostname()))\\r\\n            await ns.sleep(1);\\r\\n    }\\r\\n    if (servers.length === 0)\\r\\n        ns.tprint(\\\"No nukable servers found.\\\");\\r\\n    else\\r\\n        ns.tprint(\\\"All servers nuked!\\\");\\r\\n}\\r\\n\",\"filename\":\"/advanced/nukeall.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///e9b03c7b-a9cd-4e82-9676-90805962df5a\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///d86b4175-0179-47cd-9468-412d51a98080\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///7dc0fde7-a8e5-4b22-bcec-6ed2090cdbae\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/nukeall.js\",\"url\":\"blob:file:///34bdd079-5ca5-441a-8818-7b9d8a4b34ad\",\"moduleSequenceNumber\":22356}],\"dependents\":[],\"ramUsage\":13.15,\"server\":\"home\",\"moduleSequenceNumber\":22356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    const server = ns.args[0].toString();\\r\\n    if (args.help || !server) {\\r\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\r\\n        return;\\r\\n    }\\r\\n    // const ram = ns.getServerRam(server);\\r\\n    const ram = [ns.getServerMaxRam(server), ns.getServerUsedRam(server)];\\r\\n    const money = ns.getServerMoneyAvailable(server);\\r\\n    const maxMoney = ns.getServerMaxMoney(server);\\r\\n    const minSec = ns.getServerMinSecurityLevel(server);\\r\\n    const sec = ns.getServerSecurityLevel(server);\\r\\n    ns.tprint(`\\n\\n${server}:\\n    RAM        : ${ram[1]} / ${ram[0]} (${(ram[1] / ram[0]) * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${((money / maxMoney) * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${ns.growthAnalyze(server, 2).toFixed(2)} threads\\n    grow x3    : ${ns.growthAnalyze(server, 3).toFixed(2)} threads\\n    grow x4    : ${ns.growthAnalyze(server, 4).toFixed(2)} threads\\n    hack 10%   : ${(0.1 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(0.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(0.5 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\r\\n}\\r\\n\",\"filename\":\"/official/analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"server\":\"home\",\"moduleSequenceNumber\":21437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    const hostname = args._[0];\\r\\n    if (args.help || !hostname) {\\r\\n        ns.tprint(\\\"This script will generate money by hacking a target server.\\\");\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\r\\n        return;\\r\\n    }\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(hostname) >\\r\\n            ns.getServerMinSecurityLevel(hostname)) {\\r\\n            await ns.weaken(hostname);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\r\\n            await ns.grow(hostname);\\r\\n        }\\r\\n        else {\\r\\n            await ns.hack(hostname);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/official/basic_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":21507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getPlayerDetails } from \\\"lib/getDetails\\\";\\r\\nimport { getAllServers, getHackableServers, getNukableServers, } from \\\"lib/getall\\\";\\r\\nconst updateSeconds = 30;\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    const doc = document; // This is expensive! (25GB RAM) Perhaps there's a way around it? ;)\\r\\n    const hook0 = doc.getElementById(\\\"overview-extra-hook-0\\\");\\r\\n    const hook1 = doc.getElementById(\\\"overview-extra-hook-1\\\");\\r\\n    if (hook0 === null || hook1 === null) {\\r\\n        ns.tprint(\\\"Could not get overview hooks. Is this being run in bitburner?\\\");\\r\\n        return;\\r\\n    }\\r\\n    while (true) {\\r\\n        try {\\r\\n            let headers = [];\\r\\n            let values = [];\\r\\n            // Add script income per second\\r\\n            headers.push(\\\"Script Income\\\");\\r\\n            values.push(ns.getScriptIncome()[0].toLocaleString(undefined, {\\r\\n                style: \\\"currency\\\",\\r\\n                currency: \\\"USD\\\",\\r\\n                currencyDisplay: \\\"narrowSymbol\\\",\\r\\n                notation: \\\"compact\\\",\\r\\n                maximumSignificantDigits: 3,\\r\\n            }) + \\\"/sec\\\");\\r\\n            // Add script exp gain rate per second\\r\\n            headers.push(\\\"Script XP\\\");\\r\\n            values.push(ns.getScriptExpGain().toLocaleString(undefined, {\\r\\n                style: \\\"decimal\\\",\\r\\n                maximumSignificantDigits: 3,\\r\\n                notation: \\\"compact\\\",\\r\\n            }) + \\\"/sec\\\");\\r\\n            // Add number of hackable ports\\r\\n            headers.push(\\\"Hackable Ports\\\");\\r\\n            let { portHacks } = getPlayerDetails(ns);\\r\\n            values.push(portHacks < 5 ? portHacks.toString() : \\\"ALL\\\");\\r\\n            // Add number of hackable servers\\r\\n            headers.push(\\\"Hackable servers\\\");\\r\\n            // values.push((await getHackableServers(ns)).length.toString());\\r\\n            values.push(`${(await getHackableServers(ns)).length}/${(await getAllServers(ns)).length}`);\\r\\n            // Add the number of servers that need nuked\\r\\n            headers.push(\\\"Servers Needing Nuked\\\");\\r\\n            values.push((await getNukableServers(ns)).length.toString());\\r\\n            // TODO: Add more neat stuff\\r\\n            // Now drop it into the placeholder elements\\r\\n            hook0.innerText = headers.join(\\\" \\\\n\\\");\\r\\n            hook1.innerText = values.join(\\\"\\\\n\\\");\\r\\n        }\\r\\n        catch (err) {\\r\\n            // This might come in handy later\\r\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\r\\n        }\\r\\n        await ns.sleep(updateSeconds * 1000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/official/custom-stats.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///9921cddc-5750-4830-b164-b8722f2a1805\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///d41a2a4b-a581-434d-bc1f-331507aa9002\",\"moduleSequenceNumber\":21419},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///c4e023e3-795d-4379-ba66-05647783883d\",\"moduleSequenceNumber\":21409},{\"filename\":\"/official/custom-stats.js\",\"url\":\"blob:file:///971fe1d2-ebfb-48c8-aaa8-500c748f9141\",\"moduleSequenceNumber\":38992}],\"dependents\":[],\"ramUsage\":36.6,\"server\":\"home\",\"moduleSequenceNumber\":38992,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help || args._.length < 2) {\\r\\n        ns.tprint(\\\"This script deploys another script on a server with maximum threads possible.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} HOST SCRIPT ARGUMENTS`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles basic_hack.js foodnstuff`);\\r\\n        return;\\r\\n    }\\r\\n    const host = args._[0];\\r\\n    const script = args._[1];\\r\\n    const script_args = args._.slice(2);\\r\\n    if (!ns.serverExists(host)) {\\r\\n        ns.tprint(`Server '${host}' does not exist. Aborting.`);\\r\\n        return;\\r\\n    }\\r\\n    if (!ns.ls(ns.getHostname()).find((f) => f === script)) {\\r\\n        ns.tprint(`Script '${script}' does not exist. Aborting.`);\\r\\n        return;\\r\\n    }\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) /\\r\\n        ns.getScriptRam(script));\\r\\n    ns.tprint(`Launching script '${script}' on server '${host}' with ${threads} threads and the following arguments: ${script_args}`);\\r\\n    await ns.scp(script, ns.getHostname(), host);\\r\\n    if (threads > 0)\\r\\n        ns.exec(script, host, threads, ...script_args);\\r\\n}\\r\\n\",\"filename\":\"/official/deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/official/deploy.js\",\"url\":\"blob:file:///6bf33d00-7d84-4e8e-9f04-645f63293bad\",\"moduleSequenceNumber\":244}],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"moduleSequenceNumber\":21511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\r\\n    const children = ns.scan(server);\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue;\\r\\n        }\\r\\n        list.push(child);\\r\\n        scan(ns, server, child, list);\\r\\n    }\\r\\n}\\r\\nexport function list_servers(ns) {\\r\\n    const list = [];\\r\\n    scan(ns, \\\"\\\", \\\"home\\\", list);\\r\\n    return list;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script helps you find an unsolved coding contract.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    let servers = list_servers(ns);\\r\\n    const boughtServers = ns.getPurchasedServers();\\r\\n    servers = servers.filter((s) => !boughtServers.includes(s));\\r\\n    const hostname = servers.find((s) => ns.ls(s).find((f) => f.endsWith(\\\".cct\\\")));\\r\\n    if (!hostname) {\\r\\n        ns.tprint(\\\"No coding contract found.\\\");\\r\\n        return;\\r\\n    }\\r\\n    ns.tprint(`Found coding contract on '${hostname}'.`);\\r\\n}\\r\\n\",\"filename\":\"/official/find_coding_contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.25,\"server\":\"home\",\"moduleSequenceNumber\":21513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\r\\n    const children = ns.scan(server);\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue;\\r\\n        }\\r\\n        if (child == target) {\\r\\n            route.unshift(child);\\r\\n            route.unshift(server);\\r\\n            return true;\\r\\n        }\\r\\n        if (recursiveScan(ns, server, child, target, route)) {\\r\\n            route.unshift(server);\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    let route = [];\\r\\n    let server = args._[0];\\r\\n    if (!server || args.help) {\\r\\n        ns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\r\\n        return;\\r\\n    }\\r\\n    recursiveScan(ns, \\\"\\\", \\\"home\\\", server, route);\\r\\n    for (const i in route) {\\r\\n        await ns.sleep(500);\\r\\n        const extra = i.length > 0 ? \\\"└ \\\" : \\\"\\\";\\r\\n        ns.tprint(`${\\\" \\\".repeat(parseInt(i))}${extra}${route[i]}`);\\r\\n    }\\r\\n}\\r\\nexport function autocomplete(data, _args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"/official/find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/official/find_server.js\",\"url\":\"blob:file:///d35cae28-2969-40aa-b8b7-0a067289c072\",\"moduleSequenceNumber\":98371}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":21515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const flags = ns.flags([\\r\\n        [\\\"refreshrate\\\", 200],\\r\\n        [\\\"help\\\", false],\\r\\n    ]);\\r\\n    if (flags._.length === 0 || flags.help) {\\r\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\");\\r\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\r\\n        return;\\r\\n    }\\r\\n    ns.tail();\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    while (true) {\\r\\n        const server = flags._[0];\\r\\n        let money = ns.getServerMoneyAvailable(server);\\r\\n        if (money === 0)\\r\\n            money = 1;\\r\\n        const maxMoney = ns.getServerMaxMoney(server);\\r\\n        const minSec = ns.getServerMinSecurityLevel(server);\\r\\n        const sec = ns.getServerSecurityLevel(server);\\r\\n        ns.clearLog();\\r\\n        ns.print(`${server}:`);\\r\\n        ns.print(` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${((money / maxMoney) * 100).toFixed(2)}%)`);\\r\\n        ns.print(` security: +${(sec - minSec).toFixed(2)}`);\\r\\n        ns.print(` hack____: ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`);\\r\\n        ns.print(` grow____: ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`);\\r\\n        ns.print(` weaken__: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil((sec - minSec) * 20)})`);\\r\\n        await ns.sleep(flags.refreshrate);\\r\\n    }\\r\\n}\\r\\nexport function autocomplete(data, _args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"/official/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":21517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\r\\n    const children = ns.scan(server);\\r\\n    for (let child of children) {\\r\\n        if (parent == child) {\\r\\n            continue;\\r\\n        }\\r\\n        list.push(child);\\r\\n        scan(ns, server, child, list);\\r\\n    }\\r\\n}\\r\\nexport function list_servers(ns) {\\r\\n    const list = [];\\r\\n    scan(ns, \\\"\\\", \\\"home\\\", list);\\r\\n    return list;\\r\\n}\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help) {\\r\\n        ns.tprint(\\\"This script lists all servers on which you can run scripts.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\r\\n        return;\\r\\n    }\\r\\n    const servers = list_servers(ns)\\r\\n        .filter((s) => ns.hasRootAccess(s))\\r\\n        .concat(\\\"home\\\");\\r\\n    for (const server of servers) {\\r\\n        const used = ns.getServerUsedRam(server);\\r\\n        const max = ns.getServerMaxRam(server);\\r\\n        ns.tprint(`${server} is opened. ${used} GB / ${max} GB (${((100 * used) /\\r\\n            max).toFixed(2)}%)`);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/official/opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":21519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Total Ways to Sum\\r\\nexport function totalWaysToSum(data) {\\r\\n    let N = data;\\r\\n    let K = data - 1;\\r\\n    // Initialize a list\\r\\n    let dp = Array.from({ length: N + 1 }, () => 0);\\r\\n    // Update dp[0] to 1\\r\\n    dp[0] = 1;\\r\\n    // Iterate over the range [1, K + 1]\\r\\n    for (let row = 1; row < K + 1; row++) {\\r\\n        // Iterate over the range [1, N + 1]\\r\\n        for (let col = 1; col < N + 1; col++) {\\r\\n            // If col is greater\\r\\n            // than or equal to row\\r\\n            if (col >= row)\\r\\n                // Update current\\r\\n                // dp[col] state\\r\\n                dp[col] = dp[col] + dp[col - row];\\r\\n        }\\r\\n    }\\r\\n    // Return the total number of ways\\r\\n    return dp[N];\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/totalWaysToSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":21431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export * from \\\"contracts/solvers/totalWaysToSum.js\\\";\\r\\nexport * from \\\"contracts/solvers/arrayJumpingGame.js\\\";\\r\\nexport * from \\\"contracts/solvers/solveSum.js\\\";\\r\\nexport * from \\\"contracts/solvers/mergeOverlap.js\\\";\\r\\nexport * from \\\"contracts/solvers/spiral.js\\\";\\r\\nexport * from \\\"contracts/solvers/factor.js\\\";\\r\\nexport * from \\\"contracts/solvers/generateIps.js\\\";\\r\\nexport * from \\\"contracts/solvers/uniquePaths.js\\\";\\r\\nexport * from \\\"contracts/solvers/triangleSum.js\\\";\\r\\nexport * from \\\"contracts/solvers/stockSolver.js\\\";\\r\\nexport * from \\\"contracts/solvers/sanitizeParentheses.js\\\";\\r\\nexport * from \\\"contracts/solvers/findMathExpressions.js\\\";\\r\\n\",\"filename\":\"/contracts/solvers/index.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":21499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Array jumping game solver\\r\\nexport function solveJump(data) {\\r\\n    // ns.tprint(JSON.stringify(data))\\r\\n    for (let i = data[0] - 1; i > -1; i--) {\\r\\n        if (i + 1 >= data.length)\\r\\n            return 1;\\r\\n        return solveJump(data.slice(i + 1));\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/arrayJumpingGame.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":21477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function solveSum(data) {\\r\\n    const arrLength = data.length;\\r\\n    let maxSum = -Infinity;\\r\\n    for (let i = 0; i < arrLength; i++) {\\r\\n        const sub = data.slice(0, i + 1);\\r\\n        for (let j = 0; j < sub.length; j++) {\\r\\n            const sub2 = sub.slice(j, sub.length);\\r\\n            // ns.tprint(`i ${i} j ${j} ${JSON.stringify(sub)} ${JSON.stringify(sub2)}`);\\r\\n            const sum = sub2.reduce((prev, cur) => (prev += cur), 0);\\r\\n            if (sum > maxSum)\\r\\n                maxSum = sum;\\r\\n            // ns.tprint(`${sum}: ${sub2}`);\\r\\n        }\\r\\n    }\\r\\n    return maxSum;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/solveSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":21479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Merge Overlapping Intervals\\r\\nexport function mergeOverlap(intervals) {\\r\\n    intervals.sort(([minA], [minB]) => minA - minB);\\r\\n    for (let i = 0; i < intervals.length; i++) {\\r\\n        for (let j = i + 1; j < intervals.length; j++) {\\r\\n            const [min, max] = intervals[i];\\r\\n            const [laterMin, laterMax] = intervals[j];\\r\\n            if (laterMin <= max) {\\r\\n                const newMax = laterMax > max ? laterMax : max;\\r\\n                const newInterval = [min, newMax];\\r\\n                intervals[i] = newInterval;\\r\\n                intervals.splice(j, 1);\\r\\n                j = i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return intervals;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/mergeOverlap.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":21481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//SPIRALIZE Matrix\\r\\nexport function spiral(arr, accum = []) {\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(arr.shift() || []);\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat((arr.pop() || []).reverse());\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    accum = accum.concat(column(arr, 0).reverse());\\r\\n    if (arr.length === 0 || arr[0].length === 0) {\\r\\n        return accum;\\r\\n    }\\r\\n    return spiral(arr, accum);\\r\\n}\\r\\nfunction column(arr, index) {\\r\\n    let res = [];\\r\\n    for (let i = 0; i < arr.length; i++) {\\r\\n        const elm = arr[i].splice(index, 1)[0];\\r\\n        if (elm) {\\r\\n            res.push(elm);\\r\\n        }\\r\\n    }\\r\\n    return res;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/spiral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":21483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//GREATEST FACTOR\\r\\nexport function factor(num) {\\r\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\r\\n        if (num % div != 0) {\\r\\n            continue;\\r\\n        }\\r\\n        num = num / div;\\r\\n        div = 1;\\r\\n    }\\r\\n    return num;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/factor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":21485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//GENERATE IP ADDRESSES\\r\\nexport function generateIps(num) {\\r\\n    num = num.toString();\\r\\n    const length = num.length;\\r\\n    let ips = [];\\r\\n    for (let i = 1; i < length - 2; i++) {\\r\\n        for (let j = i + 1; j < length - 1; j++) {\\r\\n            for (let k = j + 1; k < length; k++) {\\r\\n                const ip = [\\r\\n                    num.slice(0, i),\\r\\n                    num.slice(i, j),\\r\\n                    num.slice(j, k),\\r\\n                    num.slice(k, num.length),\\r\\n                ];\\r\\n                let isValid = true;\\r\\n                ip.forEach((seg) => {\\r\\n                    isValid = isValid && isValidIpSegment(seg);\\r\\n                });\\r\\n                if (isValid)\\r\\n                    ips.push(ip.join(\\\".\\\"));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return ips;\\r\\n}\\r\\nfunction isValidIpSegment(segment) {\\r\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\")\\r\\n        return false;\\r\\n    segment = Number(segment);\\r\\n    if (segment < 0 || segment > 255)\\r\\n        return false;\\r\\n    return true;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/generateIps.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":21487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//UNIQUE PATHS IN A GRID//UNIQUE PATHS IN A GRID\\r\\nexport function uniquePathsI(grid) {\\r\\n    const rightMoves = grid[0] - 1;\\r\\n    const downMoves = grid[1] - 1;\\r\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\r\\n}\\r\\nfunction factorial(n) {\\r\\n    return factorialDivision(n, 1);\\r\\n}\\r\\nfunction factorialDivision(n, d) {\\r\\n    if (n == 0 || n == 1 || n == d)\\r\\n        return 1;\\r\\n    return factorialDivision(n - 1, d) * n;\\r\\n}\\r\\nexport function uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\r\\n    const rightMoves = grid[0].length - 1;\\r\\n    const downMoves = grid.length - 1;\\r\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / factorial(downMoves));\\r\\n    for (let i = 0; i < grid.length; i++) {\\r\\n        for (let j = 0; j < grid[i].length; j++) {\\r\\n            if (grid[i][j] == 1 &&\\r\\n                (!ignoreFirst || i != 0 || j != 0) &&\\r\\n                (!ignoreLast || i != grid.length - 1 || j != grid[i].length - 1)) {\\r\\n                let newArray = [];\\r\\n                for (let k = i; k < grid.length; k++) {\\r\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\r\\n                }\\r\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\r\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\r\\n                totalPossiblePaths -= removedPaths;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return totalPossiblePaths;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/uniquePaths.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":21489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function triangleSum(arrayData) {\\r\\n    let triangle = arrayData;\\r\\n    let nextArray = [];\\r\\n    let previousArray = triangle[0];\\r\\n    for (let i = 1; i < triangle.length; i++) {\\r\\n        nextArray = [];\\r\\n        for (let j = 0; j < triangle[i].length; j++) {\\r\\n            if (j == 0) {\\r\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\r\\n            }\\r\\n            else if (j == triangle[i].length - 1) {\\r\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\r\\n            }\\r\\n            else {\\r\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\r\\n            }\\r\\n        }\\r\\n        previousArray = nextArray;\\r\\n    }\\r\\n    return Math.min.apply(null, nextArray);\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/triangleSum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":21491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function maxProfit(arrayData) {\\r\\n    let i, j, k;\\r\\n    let maxTrades = arrayData[0];\\r\\n    let stockPrices = arrayData[1];\\r\\n    // WHY?\\r\\n    let tempStr = \\\"[0\\\";\\r\\n    for (i = 0; i < stockPrices.length; i++) {\\r\\n        tempStr += \\\",0\\\";\\r\\n    }\\r\\n    tempStr += \\\"]\\\";\\r\\n    let tempArr = \\\"[\\\" + tempStr;\\r\\n    for (i = 0; i < maxTrades - 1; i++) {\\r\\n        tempArr += \\\",\\\" + tempStr;\\r\\n    }\\r\\n    tempArr += \\\"]\\\";\\r\\n    let highestProfit = JSON.parse(tempArr);\\r\\n    for (i = 0; i < maxTrades; i++) {\\r\\n        for (j = 0; j < stockPrices.length; j++) {\\r\\n            // Buy / Start\\r\\n            for (k = j; k < stockPrices.length; k++) {\\r\\n                // Sell / End\\r\\n                if (i > 0 && j > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else if (i > 0 && j > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else if (i > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else if (j > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n                else {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/stockSolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":21493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function sanitizeParentheses(data) {\\r\\n    var solution = Sanitize(data);\\r\\n    if (solution == null) {\\r\\n        return '[\\\"\\\"]';\\r\\n    }\\r\\n    else {\\r\\n        return \\\"[\\\" + solution.join(\\\",\\\") + \\\"]\\\";\\r\\n    }\\r\\n}\\r\\nfunction Sanitize_removeOneParth(item) {\\r\\n    var possibleAnswers = [];\\r\\n    for (let i = 0; i < item.length; i++) {\\r\\n        if (item[i].toLowerCase().indexOf(\\\"(\\\") === -1 &&\\r\\n            item[i].toLowerCase().indexOf(\\\")\\\") === -1) {\\r\\n            continue;\\r\\n        }\\r\\n        let possible = item.substring(0, i) + item.substring(i + 1);\\r\\n        possibleAnswers.push(possible);\\r\\n    }\\r\\n    return possibleAnswers;\\r\\n}\\r\\nfunction Sanitize_isValid(item) {\\r\\n    var unclosed = 0;\\r\\n    for (var i = 0; i < item.length; i++) {\\r\\n        if (item[i] == \\\"(\\\") {\\r\\n            unclosed++;\\r\\n        }\\r\\n        else if (item[i] == \\\")\\\") {\\r\\n            unclosed--;\\r\\n        }\\r\\n        if (unclosed < 0) {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n    return unclosed == 0;\\r\\n}\\r\\nfunction Sanitize(data) {\\r\\n    var currentPossible = [data];\\r\\n    for (var i = 0; i < currentPossible.length; i++) {\\r\\n        var newPossible = new Set();\\r\\n        for (var j = 0; j < currentPossible.length; j++) {\\r\\n            let newRemovedPossible = Sanitize_removeOneParth(currentPossible[j]);\\r\\n            for (let item of newRemovedPossible) {\\r\\n                newPossible.add(item);\\r\\n            }\\r\\n        }\\r\\n        var validBoolList = [];\\r\\n        for (const item of newPossible) {\\r\\n            validBoolList.push(Sanitize_isValid(item));\\r\\n        }\\r\\n        if (validBoolList.includes(true)) {\\r\\n            let finalList = [];\\r\\n            newPossible = [...newPossible];\\r\\n            for (var j = 0; j < validBoolList.length; j++) {\\r\\n                if (validBoolList[j]) {\\r\\n                    finalList.push(newPossible[j]);\\r\\n                }\\r\\n            }\\r\\n            finalList = new Set(finalList);\\r\\n            return [...finalList];\\r\\n        }\\r\\n        currentPossible = [...newPossible];\\r\\n    }\\r\\n    return null;\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/sanitizeParentheses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":21495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const hackPrograms = [\\r\\n    \\\"BruteSSH.exe\\\",\\r\\n    \\\"FTPCrack.exe\\\",\\r\\n    \\\"relaySMTP.exe\\\",\\r\\n    \\\"HTTPWorm.exe\\\",\\r\\n    \\\"SQLInject.exe\\\",\\r\\n];\\r\\nexport function getPlayerDetails(ns) {\\r\\n    let portHacks = 0;\\r\\n    for (let hackProgram of hackPrograms) {\\r\\n        if (ns.fileExists(hackProgram, \\\"home\\\")) {\\r\\n            portHacks += 1;\\r\\n        }\\r\\n    }\\r\\n    return {\\r\\n        hackingLevel: ns.getHackingLevel(),\\r\\n        portHacks,\\r\\n    };\\r\\n}\\r\\n\",\"filename\":\"/lib/getports.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const hackPrograms = [\\r\\n    \\\"BruteSSH.exe\\\",\\r\\n    \\\"FTPCrack.exe\\\",\\r\\n    \\\"relaySMTP.exe\\\",\\r\\n    \\\"HTTPWorm.exe\\\",\\r\\n    \\\"SQLInject.exe\\\",\\r\\n];\\r\\nconst programRequirements = [50, 100, 250, 500, 750];\\r\\nexport function getPlayerDetails(ns) {\\r\\n    let portHacks = 0;\\r\\n    let programming = false;\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    for (const i in hackPrograms) {\\r\\n        const hackProgram = hackPrograms[i];\\r\\n        const levelReq = programRequirements[i];\\r\\n        if (ns.fileExists(hackProgram, \\\"home\\\")) {\\r\\n            portHacks += 1;\\r\\n        }\\r\\n        else {\\r\\n            if (!programming && hackingLevel >= levelReq) {\\r\\n                programming = ns.createProgram(hackProgram, true);\\r\\n            }\\r\\n            else {\\r\\n                ns.purchaseTor();\\r\\n                ns.purchaseProgram(hackProgram);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return {\\r\\n        hackingLevel,\\r\\n        portHacks,\\r\\n    };\\r\\n}\\r\\n\",\"filename\":\"/lib/getDetails.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.75,\"server\":\"home\",\"moduleSequenceNumber\":21409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"lib/getall\\\";\\r\\nexport async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    if (args.help || args._.length < 2) {\\r\\n        ns.tprint(\\\"This script deploys another script on a server with maximum threads possible.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} HOST SCRIPT ARGUMENTS`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles basic_hack.js foodnstuff`);\\r\\n        return;\\r\\n    }\\r\\n    const host = args._[0];\\r\\n    const script = args._[1];\\r\\n    const script_args = args._.slice(2);\\r\\n    await deploy(ns, host, script, ...script_args);\\r\\n}\\r\\n/**\\r\\n * Deploys another script on a server with maximum threads possible.\\r\\n * @param {NS} ns - the netscript library.\\r\\n * @param {string} host - the host to run the script on.\\r\\n * @param {...(string | number | boolean)} script_args - the arguments to pass\\r\\n * to the script.\\r\\n */\\r\\nexport async function deploy(ns, host, script, ...script_args) {\\r\\n    if (!ns.serverExists(host)) {\\r\\n        ns.tprint(`Server '${host}' does not exist. Aborting.`);\\r\\n        return;\\r\\n    }\\r\\n    if (!ns.ls(ns.getHostname()).find((f) => f === script)) {\\r\\n        ns.tprint(`Script '${script}' does not exist. Aborting.`);\\r\\n        return;\\r\\n    }\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) /\\r\\n        ns.getScriptRam(script));\\r\\n    if (threads > 0) {\\r\\n        ns.print(`Launching script '${script}' on server '${host}' with ${threads} threads and the following arguments: ${script_args}`);\\r\\n        await ns.scp(script, ns.getHostname(), host);\\r\\n        ns.exec(script, host, threads, ...script_args);\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * Deploys another script on a server with maximum threads possible.\\r\\n * @param {NS} ns - the netscript library.\\r\\n * @param {string} host - the host to run the script on.\\r\\n * @param {...(string | number | boolean)} script_args - the arguments to pass\\r\\n * to the script.\\r\\n */\\r\\nexport async function deployHalf(ns, host, script, ...script_args) {\\r\\n    if (!ns.serverExists(host)) {\\r\\n        ns.tprint(`Server '${host}' does not exist. Aborting.`);\\r\\n        return;\\r\\n    }\\r\\n    if (!ns.ls(ns.getHostname()).find((f) => f === script)) {\\r\\n        ns.tprint(`Script '${script}' does not exist. Aborting.`);\\r\\n        return;\\r\\n    }\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) /\\r\\n        (ns.getScriptRam(script) * 2));\\r\\n    if (threads > 0) {\\r\\n        ns.tprint(`Launching script '${script}' on server '${host}' with ${threads} threads and the following arguments: ${script_args}`);\\r\\n        await ns.scp(script, ns.getHostname(), host);\\r\\n        ns.exec(script, host, threads, ...script_args);\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * @param {NS} ns - The netscript library.\\r\\n * @param {string} script - The name of the script to run.\\r\\n * @param {boolean} restart - Should the script be restarted if it is already\\r\\n * running? Defaults to false. If true this will kill all scripts on the server.\\r\\n * @param {...string | number | boolean} args - Any arguments to pass to the script.\\r\\n */\\r\\nexport async function deployToAll(ns, script, restart = false, ...args) {\\r\\n    const servers = await getRunnableServers(ns);\\r\\n    for (const s of servers) {\\r\\n        // Don't hog home - so I can still run things like find...\\r\\n        if (s === \\\"home\\\") {\\r\\n            if (ns.scriptRunning(script, s))\\r\\n                continue;\\r\\n            await deployHalf(ns, s, script, ...args);\\r\\n            await ns.sleep(1);\\r\\n            continue;\\r\\n        }\\r\\n        if (restart)\\r\\n            ns.killall(s);\\r\\n        if (ns.scriptRunning(script, s))\\r\\n            continue;\\r\\n        await deploy(ns, s, script, ...args);\\r\\n        await ns.sleep(1);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/lib/deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///fe4c8a55-990c-4318-a56a-3f6605520380\",\"moduleSequenceNumber\":20993},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///a7be763b-9253-4858-b866-82778c25f6d9\",\"moduleSequenceNumber\":21003},{\"filename\":\"/lib/deploy.js\",\"url\":\"blob:file:///57885e2f-e6cd-4a49-abd9-78c2c4235700\",\"moduleSequenceNumber\":23598}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":21429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///d7a0ad3f-def8-43e3-b6e0-bc19a6dbc911\",\"moduleSequenceNumber\":27754}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":27754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///9db7738b-9e16-4707-93dc-4efc552e3885\",\"moduleSequenceNumber\":21526}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":21526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const testData = [\\\"123\\\", 6];\\r\\n    ns.tprint(findMathExpression(testData));\\r\\n}\\r\\nexport function findMathExpression(data) {\\r\\n    const digits = data[0].split(\\\"\\\");\\r\\n    const operators = [\\\"+\\\", \\\"-\\\", \\\"*\\\", \\\"\\\"];\\r\\n    let expressions = [digits[0], \\\"-\\\" + digits[0]].flatMap((d) => operators.map((op) => d + op));\\r\\n    for (let i = 1; i < digits.length - 1; i++) {\\r\\n        expressions = expressions.flatMap((e) => operators.map((op) => e + digits[i] + op));\\r\\n    }\\r\\n    return expressions\\r\\n        .map((e) => e + digits[digits.length - 1])\\r\\n        .filter((e) => {\\r\\n        try {\\r\\n            return eval(e) === data[1];\\r\\n        }\\r\\n        catch (e) {\\r\\n            return false;\\r\\n        }\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/contracts/solvers/findMathExpressions.js\",\"url\":\"blob:file:///a54ba11e-0bcd-4a13-bd1a-7c881afa8c47\",\"moduleSequenceNumber\":13879}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":21497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getTree } from \\\"lib/gettree.js\\\";\\r\\nexport async function main(ns) {\\r\\n    let target = ns.args[0].toString();\\r\\n    let path = \\\"\\\";\\r\\n    function iterate(obj, stack = \\\"\\\") {\\r\\n        for (let property in obj) {\\r\\n            if (obj.hasOwnProperty(property)) {\\r\\n                if (typeof obj[property] === \\\"object\\\") {\\r\\n                    iterate(obj[property], (stack ? stack + \\\"; connect \\\" : stack) + property);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if (stack.includes(target)) {\\r\\n            path = stack;\\r\\n        }\\r\\n    }\\r\\n    iterate(await getTree(ns));\\r\\n    const terminalInput = document.getElementById(\\\"terminal-input\\\");\\r\\n    if (!terminalInput) {\\r\\n        ns.tprint(\\\"Couldn't get terminal-input field.\\\");\\r\\n        return;\\r\\n    }\\r\\n    terminalInput.value = path;\\r\\n    const handler = Object.keys(terminalInput)[1];\\r\\n    terminalInput[handler].onChange({ target: terminalInput });\\r\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\r\\n}\\r\\nexport function autocomplete(data, _args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"/advanced/cnct.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/gettree.js\",\"url\":\"blob:file:///03ba7057-03ce-4a8c-bcda-8fd2d1b904a2\",\"moduleSequenceNumber\":46847},{\"filename\":\"/advanced/cnct.js\",\"url\":\"blob:file:///cd2754e9-48e6-4207-bee0-517881294d0e\",\"moduleSequenceNumber\":54245}],\"dependents\":[],\"ramUsage\":26.8,\"server\":\"home\",\"moduleSequenceNumber\":21439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function formatCurrency(n) {\\r\\n    return n.toLocaleString(undefined, {\\r\\n        style: \\\"currency\\\",\\r\\n        currency: \\\"USD\\\",\\r\\n        maximumSignificantDigits: 3,\\r\\n        notation: \\\"compact\\\",\\r\\n        compactDisplay: \\\"short\\\",\\r\\n    });\\r\\n}\\r\\nexport function formatNumber(n) {\\r\\n    return n.toLocaleString(undefined, {\\r\\n        maximumSignificantDigits: 3,\\r\\n        notation: \\\"compact\\\",\\r\\n        compactDisplay: \\\"short\\\",\\r\\n    });\\r\\n}\\r\\nexport function formatPercent(n) {\\r\\n    return n.toLocaleString(undefined, {\\r\\n        style: \\\"percent\\\",\\r\\n    });\\r\\n}\\r\\nexport function getFolio(ns) {\\r\\n    let folio = [];\\r\\n    for (const sym of ns.stock.getSymbols()) {\\r\\n        let shares = ns.stock.getPosition(sym)[0];\\r\\n        if (shares > 0) {\\r\\n            folio.push({\\r\\n                sym,\\r\\n                shares,\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    return folio;\\r\\n}\\r\\n\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":21417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([[\\\"help\\\", false]]);\\r\\n    const server = ns.args[0].toString();\\r\\n    if (args.help || !server) {\\r\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\r\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\r\\n        return;\\r\\n    }\\r\\n    analyzeServer(ns, server);\\r\\n}\\r\\nexport const getServerFreeRam = (ns, host) => ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\nexport function analyzeServer(ns, server, printToTerminal = true) {\\r\\n    // const ram = ns.getServerRam(server);\\r\\n    const ram = [ns.getServerMaxRam(server), ns.getServerUsedRam(server)];\\r\\n    const money = ns.getServerMoneyAvailable(server);\\r\\n    const maxMoney = ns.getServerMaxMoney(server);\\r\\n    const minSec = ns.getServerMinSecurityLevel(server);\\r\\n    const sec = ns.getServerSecurityLevel(server);\\r\\n    const print = printToTerminal ? ns.tprint : ns.print;\\r\\n    print(`\\n${server}:\\n    RAM        : ${ram[1]} / ${ram[0]} (${(ram[1] / ram[0]) * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${((money / maxMoney) * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${ns.growthAnalyze(server, 2).toFixed(2)} threads\\n    grow x3    : ${ns.growthAnalyze(server, 3).toFixed(2)} threads\\n    grow x4    : ${ns.growthAnalyze(server, 4).toFixed(2)} threads\\n    hack 10%   : ${(0.1 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(0.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(0.5 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\nexport function weakenTime(ns, host) {\\r\\n    return ns.getWeakenTime(host);\\r\\n}\\r\\nexport function getMemForHack(ns, host) {\\r\\n    const hackMem = ns.getScriptRam(\\\"/basic/hack.js\\\");\\r\\n    const hackCount = hackThreads(ns, host);\\r\\n    return hackMem * hackCount;\\r\\n}\\r\\nexport function getMemForGrow(ns, host) {\\r\\n    const growMem = ns.getScriptRam(\\\"/basic/grow.js\\\");\\r\\n    const growCount = growThreads(ns, host);\\r\\n    return growMem * growCount;\\r\\n}\\r\\nexport function getMemForWeaken(ns, host) {\\r\\n    const weakenMem = ns.getScriptRam(\\\"/basic/weaken.js\\\");\\r\\n    const weakenCount = weakenThreads(ns, host);\\r\\n    return weakenMem * weakenCount;\\r\\n}\\r\\n\",\"filename\":\"/lib/analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///3bb6421e-03da-4815-83b2-a2a2bb3e9ad2\",\"moduleSequenceNumber\":16170}],\"dependents\":[],\"ramUsage\":6.45,\"server\":\"home\",\"moduleSequenceNumber\":21425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"lib/getall\\\";\\r\\nimport { analyzeServer, growThreads, hackThreads, weakenThreads, hackTime, growTime, weakenTime, } from \\\"lib/analyze_server\\\";\\r\\nconst bufferTime = 300;\\r\\nexport async function main(ns) {\\r\\n    await batch(ns, ns.args[0].toString());\\r\\n}\\r\\nasync function batch(ns, target) {\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    let weakenThreads = 1;\\r\\n    // Growth Phase\\r\\n    ns.print(\\\"Begining growth phase.\\\");\\r\\n    analyzeServer(ns, target, false);\\r\\n    weakenThreads = await deployGrow(ns, target);\\r\\n    // Weaken Phase\\r\\n    ns.print(\\\"Beginning Weaken Phase\\\");\\r\\n    analyzeServer(ns, target, false);\\r\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        await deployWeaken(ns, target);\\r\\n    }\\r\\n    // Hack Phase\\r\\n    ns.print(\\\"Benninging Hack Phase\\\");\\r\\n    analyzeServer(ns, target, false);\\r\\n    await deployHack(ns, target, weakenThreads);\\r\\n}\\r\\nasync function deployHack(ns, target, threadsToWeaken) {\\r\\n    // get hackTime and threads\\r\\n    const timeToHack = hackTime(ns, target);\\r\\n    const timeToGrow = growTime(ns, target);\\r\\n    const timeToWeaken = weakenTime(ns, target);\\r\\n    let threadsToHack = hackThreads(ns, target);\\r\\n    let threadsToGrow = growThreads(ns, target);\\r\\n    let weakening = false;\\r\\n    let growing = false;\\r\\n    let hacking = false;\\r\\n    let sleepTime = 1;\\r\\n    let firstRun = true;\\r\\n    while (true) {\\r\\n        for (const host of await getRunnableServers(ns)) {\\r\\n            if (!weakening) {\\r\\n                // Start with a weaken\\r\\n                if (ns.exec(\\\"/basic/weaken.js\\\", host, threadsToWeaken, target)) {\\r\\n                    weakening = true;\\r\\n                    sleepTime = firstRun\\r\\n                        ? timeToWeaken\\r\\n                        : timeToWeaken - timeToGrow - bufferTime;\\r\\n                    ns.print(`${host} => ${target} weakening and sleeping for ${ns.tFormat(sleepTime)}`);\\r\\n                    await ns.sleep(Math.floor(sleepTime));\\r\\n                    ns.print(\\\"Woke up from my nap...\\\");\\r\\n                }\\r\\n            }\\r\\n            if (!growing) {\\r\\n                if (ns.exec(\\\"/basic/grow.js\\\", host, threadsToGrow, target)) {\\r\\n                    growing = true;\\r\\n                    sleepTime = firstRun\\r\\n                        ? timeToGrow\\r\\n                        : timeToGrow - timeToHack - bufferTime;\\r\\n                    ns.print(`${host} => ${target} growing and sleeping for ${sleepTime}`);\\r\\n                    await ns.sleep(sleepTime);\\r\\n                    if (firstRun)\\r\\n                        threadsToWeaken = weakenThreads(ns, target);\\r\\n                }\\r\\n            }\\r\\n            if (!hacking) {\\r\\n                if (ns.exec(\\\"/basic/hack.js\\\", host, threadsToHack, target)) {\\r\\n                    hacking = true;\\r\\n                    sleepTime = firstRun ? timeToHack : timeToHack + bufferTime;\\r\\n                    ns.print(`${host} => ${target} hacking and sleeping for ${sleepTime}`);\\r\\n                    await ns.sleep(sleepTime);\\r\\n                    if (firstRun)\\r\\n                        threadsToGrow = growThreads(ns, target);\\r\\n                    firstRun = false;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(sleepTime);\\r\\n    }\\r\\n}\\r\\nasync function deployGrow(ns, target) {\\r\\n    for (const host of await getRunnableServers(ns)) {\\r\\n        if (!ns.exec(\\\"/basic/grow.js\\\", host, growThreads(ns, target), target))\\r\\n            continue;\\r\\n        await ns.sleep(growTime(ns, target));\\r\\n        break;\\r\\n    }\\r\\n    return weakenThreads(ns, target);\\r\\n}\\r\\nasync function deployWeaken(ns, target) {\\r\\n    while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\r\\n        for (const host of await getRunnableServers(ns)) {\\r\\n            if (!ns.exec(\\\"/basic/weaken.js\\\", host, weakenThreads(ns, target), target))\\r\\n                continue;\\r\\n            await ns.sleep(weakenTime(ns, target));\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/batch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///433cd89f-a4b1-4e1e-b8e0-0db5cb25ca50\",\"moduleSequenceNumber\":21425},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///7b02a866-6eb7-447e-b55e-f982d7120179\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///f3ff9ba3-53ad-48b9-95c9-60a990261829\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/batch.js\",\"url\":\"blob:file:///5908df1c-3505-4ee5-8e2a-ee352e958a6c\",\"moduleSequenceNumber\":38163}],\"dependents\":[],\"ramUsage\":7.9,\"server\":\"home\",\"moduleSequenceNumber\":38163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall\\\";\\r\\nexport async function main(ns) {\\r\\n    // files to copy to each server\\r\\n    const files = [\\r\\n        \\\"/basic/hack.js\\\",\\r\\n        \\\"/basic/grow.js\\\",\\r\\n        \\\"/basic/weaken.js\\\",\\r\\n        \\\"/basic/early-hack.js\\\",\\r\\n    ];\\r\\n    for (const server of await getAllServers(ns)) {\\r\\n        await ns.scp(files, \\\"home\\\", server);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/cpall.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///11d110af-8f64-4480-bd04-92391092fcf0\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///2e1b0033-0100-4b54-a509-438aa2d75a0f\",\"moduleSequenceNumber\":21419},{\"filename\":\"/basic/cpall.js\",\"url\":\"blob:file:///8c276ca7-3d3f-4f92-9a9e-b7c3b621e05b\",\"moduleSequenceNumber\":39452}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":39452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const scripts = [\\\"hacknet/daemon.js\\\", \\\"server-expansion/daemon.js\\\"];\\r\\n    for (const script of scripts)\\r\\n        ns.run(script);\\r\\n}\\r\\n\",\"filename\":\"expand.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"expand.js\",\"url\":\"blob:file:///a8c5248c-5b68-476b-a10f-f3b7d827c45e\",\"moduleSequenceNumber\":11503}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":21411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///dfdba668-3978-4f94-b94a-d09396df0251\",\"moduleSequenceNumber\":830}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":21473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"lib/getall\\\";\\r\\nexport async function main(ns) {\\r\\n    // The files to copy to each server node\\r\\n    const files = [\\r\\n        \\\"/basic/hack.js\\\",\\r\\n        \\\"/basic/grow.js\\\",\\r\\n        \\\"/basic/weaken.js\\\",\\r\\n        \\\"/basic/share.js\\\",\\r\\n    ];\\r\\n    for (const host of await getAllServers(ns))\\r\\n        await ns.scp(files, \\\"home\\\", host);\\r\\n}\\r\\n\",\"filename\":\"/advanced/cpall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///f3ecd739-713f-4a75-93ff-088b18cf3663\",\"moduleSequenceNumber\":20993},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///5f47363d-cdc7-41bd-80dd-635860d8fec3\",\"moduleSequenceNumber\":21003},{\"filename\":\"/advanced/cpall.js\",\"url\":\"blob:file:///96c423aa-71dc-44db-9cc3-8a7790223845\",\"moduleSequenceNumber\":23594}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":21441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"lib/getall\\\";\\r\\nimport { analyzeServer } from \\\"lib/analyze_server\\\";\\r\\nexport async function main(ns) {\\r\\n    let richest = await getRichestServer(ns);\\r\\n    analyzeServer(ns, richest[0], true);\\r\\n}\\r\\nexport async function getRichestServer(ns) {\\r\\n    let richest = [\\\"\\\", 0];\\r\\n    for (const s of await getHackableServers(ns)) {\\r\\n        const money = ns.getServerMaxMoney(s);\\r\\n        if (money > richest[1]) {\\r\\n            richest = [s, money];\\r\\n        }\\r\\n    }\\r\\n    return richest;\\r\\n}\\r\\n\",\"filename\":\"/advanced/richestServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///0a77bb05-030a-4df2-ba1a-b889ebd91bae\",\"moduleSequenceNumber\":377},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///27345d78-ccd2-4831-b107-37f4860462a3\",\"moduleSequenceNumber\":370},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///635acbdb-868e-400a-b7eb-eba69a1cb448\",\"moduleSequenceNumber\":337},{\"filename\":\"/advanced/richestServer.js\",\"url\":\"blob:file:///e5236b67-ad3f-40c7-9974-0a2e6dd3126b\",\"moduleSequenceNumber\":997}],\"dependents\":[],\"ramUsage\":14.85,\"server\":\"home\",\"moduleSequenceNumber\":21453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackableServers } from \\\"lib/getall\\\";\\r\\nimport { analyzeServer } from \\\"lib/analyze_server\\\";\\r\\nexport async function main(ns) {\\r\\n    let fastest = [\\\"\\\", 1e500];\\r\\n    for (const s of await getHackableServers(ns)) {\\r\\n        const time = ns.getHackTime(s) + ns.getGrowTime(s) + ns.getWeakenTime(s);\\r\\n        if (time < fastest[1]) {\\r\\n            fastest = [s, time];\\r\\n        }\\r\\n    }\\r\\n    analyzeServer(ns, fastest[0], true);\\r\\n}\\r\\n\",\"filename\":\"/advanced/fastestServer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///e91a2e7b-e233-4d90-b1d9-22faa243ae2d\",\"moduleSequenceNumber\":1060},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///3d5c533d-2eea-47c6-86fc-6cd2fac2a961\",\"moduleSequenceNumber\":1048},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///dee170eb-472e-4555-812f-2e86bcd4275f\",\"moduleSequenceNumber\":1057},{\"filename\":\"/advanced/fastestServer.js\",\"url\":\"blob:file:///87f64e5f-cb31-4d37-a70b-f5ae37491495\",\"moduleSequenceNumber\":2721}],\"dependents\":[],\"ramUsage\":14.85,\"server\":\"home\",\"moduleSequenceNumber\":21449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const scripts = [\\r\\n        \\\"advanced/killall.js\\\",\\r\\n        \\\"advanced/cpall.js\\\",\\r\\n        \\\"contracts/daemon.js\\\",\\r\\n        \\\"stocks/daemon.js\\\",\\r\\n        \\\"rep/shareall.js\\\",\\r\\n    ];\\r\\n    for (const script of scripts)\\r\\n        ns.run(script);\\r\\n}\\r\\n\",\"filename\":\"repGrind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"repGrind.js\",\"url\":\"blob:file:///be2dc65f-993e-4c51-81d4-aa8c0d7a016e\",\"moduleSequenceNumber\":23592}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":21415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRunnableServers } from \\\"lib/getall\\\";\\r\\nexport async function main(ns) {\\r\\n    for (const s of await getRunnableServers(ns)) {\\r\\n        ns.run(\\\"/lib/deploy.js\\\", 1, s, \\\"/basic/share.js\\\");\\r\\n        await ns.sleep(1);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/rep/shareall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///ea8b8fce-226e-45b2-9c0f-973403f74bd4\",\"moduleSequenceNumber\":20993},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///57b8c1e3-6dda-4713-a99b-41689595d05f\",\"moduleSequenceNumber\":21003},{\"filename\":\"/rep/shareall.js\",\"url\":\"blob:file:///c41b4541-0e1b-476d-9c36-ecfbebbf92ad\",\"moduleSequenceNumber\":23597}],\"dependents\":[],\"ramUsage\":2.85,\"server\":\"home\",\"moduleSequenceNumber\":21501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const scripts = [\\r\\n        \\\"advanced/killall.js\\\",\\r\\n        \\\"basic/cpall.js\\\",\\r\\n        \\\"official/custom-stats.js\\\",\\r\\n        \\\"advanced/daemon.js\\\",\\r\\n    ];\\r\\n    for (const script of scripts)\\r\\n        ns.run(script);\\r\\n}\\r\\n\",\"filename\":\"hackGrind.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hackGrind.js\",\"url\":\"blob:file:///76e0d56d-4974-4f42-b624-06cf159f33fe\",\"moduleSequenceNumber\":39450}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":39450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const scripts = [\\\"contracts/daemon.js\\\", \\\"official/custom-stats.js\\\"];\\r\\n    for (const script of scripts)\\r\\n        ns.run(script);\\r\\n}\\r\\n\",\"filename\":\"contractGrind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":21405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRichestServer } from \\\"advanced/richestServer\\\";\\r\\nimport { getRunnableServers } from \\\"lib/getall\\\";\\r\\nimport { deployToAll as deploy } from \\\"lib/deploy\\\";\\r\\nconst bufferTime = 300;\\r\\nexport async function main(ns) {\\r\\n    await crawl(ns);\\r\\n}\\r\\nasync function crawl(ns) {\\r\\n    while (true) {\\r\\n        const target = await getRichestServer(ns);\\r\\n        for (const host of await getRunnableServers(ns)) {\\r\\n            if (host === \\\"home\\\")\\r\\n                continue;\\r\\n            await deploy(ns, \\\"/basic/early-hack.js\\\", false, target[0]);\\r\\n            await ns.sleep(bufferTime);\\r\\n        }\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeRamCost()) {\\r\\n            ns.upgradeHomeRam();\\r\\n        }\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeCoresCost()) {\\r\\n            ns.upgradeHomeCores();\\r\\n        }\\r\\n        await ns.sleep(1e50);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/hackrichest.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///9e905395-fc29-4335-9f76-487c411e66c9\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///928cdc53-ec00-4249-8993-0ac813f3156f\",\"moduleSequenceNumber\":21419},{\"filename\":\"/lib/deploy.js\",\"url\":\"blob:file:///c08afb04-5fb0-4f30-bd13-f72fc68857a4\",\"moduleSequenceNumber\":21429},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///06a37a73-79c6-4e9f-a8a2-2c654bff8575\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///8e13a1f1-6071-4fa4-a1bb-d7691a5c7d9d\",\"moduleSequenceNumber\":21419},{\"filename\":\"/lib/analyze_server.js\",\"url\":\"blob:file:///e103741d-8fb1-4e72-a36e-b66ea3adbf56\",\"moduleSequenceNumber\":21425},{\"filename\":\"/lib/getDetails.js\",\"url\":\"blob:file:///2002ee8e-d810-45c5-8ded-e8a6ab78557a\",\"moduleSequenceNumber\":21409},{\"filename\":\"/lib/getall.js\",\"url\":\"blob:file:///d6412d5b-2927-4b6e-b80d-c027cd76e51d\",\"moduleSequenceNumber\":21419},{\"filename\":\"/advanced/richestServer.js\",\"url\":\"blob:file:///021f215a-9489-4927-8a65-9ffdae21807e\",\"moduleSequenceNumber\":21453},{\"filename\":\"/advanced/hackrichest.js\",\"url\":\"blob:file:///69db6f48-2096-447e-9eea-84d2c0ff2127\",\"moduleSequenceNumber\":38993}],\"dependents\":[],\"ramUsage\":24.25,\"server\":\"home\",\"moduleSequenceNumber\":38993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"createProgram\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/basic-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///6f7b0ce9-b2ec-4469-a6ac-94aad7c87ce3\",\"moduleSequenceNumber\":38994}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"home\",\"moduleSequenceNumber\":38994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const scripts = [\\r\\n        \\\"/advanced/killall.js\\\",\\r\\n        \\\"/basic/cpall.js\\\",\\r\\n        \\\"/hacknet/daemon.js\\\",\\r\\n        // \\\"/server-expansion/daemon.js\\\",\\r\\n        \\\"/advanced/earlyDaemon.js\\\",\\r\\n    ];\\r\\n    for (const script of scripts)\\r\\n        ns.run(script);\\r\\n}\\r\\n\",\"filename\":\"earlyGrind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyGrind.js\",\"url\":\"blob:file:///5ea67c16-8291-44bf-9f7f-b9d9ca658972\",\"moduleSequenceNumber\":6561}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":21407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const minuteInterval = 5;\\r\\nconst nukeScript = \\\"/advanced/nukeall.js\\\";\\r\\n// const hackScript = \\\"/advanced/hackrichest.js\\\";\\r\\nconst hackScript = \\\"/advanced/work.js\\\";\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        ns.run(nukeScript);\\r\\n        while (ns.scriptRunning(nukeScript, \\\"home\\\"))\\r\\n            await ns.sleep(1);\\r\\n        if (!ns.scriptRunning(hackScript, \\\"home\\\"))\\r\\n            ns.spawn(hackScript);\\r\\n        await ns.sleep(minuteInterval * 60 * 1000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/earlyDaemon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/advanced/earlyDaemon.js\",\"url\":\"blob:file:///46aafe3a-cdda-4bc1-8b59-1ede4e550507\",\"moduleSequenceNumber\":1033}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":21447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const allowancePercentage = 0.5;\\r\\nexport async function main(ns) {\\r\\n    let ram = ns.args[0];\\r\\n    if (typeof ram === \\\"string\\\") {\\r\\n        ram = parseInt(ram);\\r\\n    }\\r\\n    else {\\r\\n        ram = ns.getPurchasedServerMaxRam();\\r\\n        let cost = ns.getPurchasedServerCost(ram);\\r\\n        ns.tprint(`Purchasing servers with ${ns.nFormat(ram, \\\"0.00a\\\")} for ${ns.nFormat(cost, \\\"$0.00a\\\")} a piece.`);\\r\\n    }\\r\\n    await purchaseServer(ns, ram);\\r\\n}\\r\\nasync function purchaseServer(ns, ram) {\\r\\n    let numServers = ns.getPurchasedServers().length;\\r\\n    while (numServers < ns.getPurchasedServerLimit()) {\\r\\n        // Check if we have enough money to purchase a server\\r\\n        // only use 1% of cash for purchases\\r\\n        let cost = ns.getPurchasedServerCost(ram);\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") * allowancePercentage > cost) {\\r\\n            // If we have enough money, then:\\r\\n            //  1. Purchase the server\\r\\n            //  2. Copy our hacking script onto the newly-purchased server\\r\\n            //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n            //  4. Increment our iterator to indicate that we've bought a new server\\r\\n            var hostname = ns.purchaseServer(\\\"pserv-\\\" + numServers, ram);\\r\\n            ns.tprint(`Purchased ${hostname} for ${cost.toLocaleString(undefined, {\\r\\n                style: \\\"currency\\\",\\r\\n                currency: \\\"USD\\\",\\r\\n                maximumSignificantDigits: 3,\\r\\n                compactDisplay: \\\"short\\\",\\r\\n            })}.`);\\r\\n            numServers++;\\r\\n        }\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/server-expansion/singularity.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/server-expansion/singularity.js\",\"url\":\"blob:file:///a7af8177-688c-4889-a90a-f12313c9eef2\",\"moduleSequenceNumber\":52888}],\"dependents\":[],\"ramUsage\":6.55,\"server\":\"home\",\"moduleSequenceNumber\":21521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const crimes = [\\r\\n        \\\"Heist\\\",\\r\\n        \\\"Assassination\\\",\\r\\n        \\\"Kidnap\\\",\\r\\n        \\\"Grand Theft Auto\\\",\\r\\n        \\\"Homicide\\\",\\r\\n        \\\"Traffick Arms\\\",\\r\\n        \\\"Bond Forgery\\\",\\r\\n        \\\"Deal Drugs\\\",\\r\\n        \\\"Larceny\\\",\\r\\n        \\\"Mug\\\",\\r\\n        \\\"Rob Store\\\",\\r\\n        \\\"Shoplift\\\",\\r\\n    ];\\r\\n    while (true) {\\r\\n        for (const crime of crimes) {\\r\\n            if (ns.getCrimeChance(crime) > 0.9 && !ns.isBusy()) {\\r\\n                ns.commitCrime(crime);\\r\\n                break;\\r\\n            }\\r\\n            await ns.sleep(1);\\r\\n        }\\r\\n        if (!ns.isBusy()) {\\r\\n            ns.commitCrime(\\\"Shoplift\\\");\\r\\n        }\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeRamCost()) {\\r\\n            ns.upgradeHomeRam();\\r\\n        }\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeCoresCost()) {\\r\\n            ns.upgradeHomeCores();\\r\\n        }\\r\\n        await ns.sleep(3000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/crime.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/advanced/crime.js\",\"url\":\"blob:file:///3e8a6e0c-04be-4e1b-a36e-3aaf1841be8f\",\"moduleSequenceNumber\":3107}],\"dependents\":[],\"ramUsage\":21.2,\"server\":\"home\",\"moduleSequenceNumber\":21443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const crimes = [\\r\\n        \\\"Heist\\\",\\r\\n        \\\"Assassination\\\",\\r\\n        \\\"Kidnap\\\",\\r\\n        \\\"Grand Theft Auto\\\",\\r\\n        \\\"Homicide\\\",\\r\\n        \\\"Traffick Arms\\\",\\r\\n        \\\"Bond Forgery\\\",\\r\\n        \\\"Deal Drugs\\\",\\r\\n        \\\"Larceny\\\",\\r\\n        \\\"Mug\\\",\\r\\n        \\\"Rob Store\\\",\\r\\n        \\\"Shoplift\\\",\\r\\n    ];\\r\\n    const companies = [\\r\\n        {\\r\\n            name: \\\"MegaCorp\\\",\\r\\n            position: \\\"Security\\\",\\r\\n        },\\r\\n        {\\r\\n            name: \\\"Alpha Enterprises\\\",\\r\\n            position: \\\"Business\\\",\\r\\n        },\\r\\n        {\\r\\n            name: \\\"Universal Energy\\\",\\r\\n            position: \\\"Business\\\",\\r\\n        },\\r\\n        {\\r\\n            name: \\\"Icarus Microsystems\\\",\\r\\n            position: \\\"Business\\\",\\r\\n        },\\r\\n        {\\r\\n            name: \\\"Blade Industries\\\",\\r\\n            position: \\\"Security\\\",\\r\\n        },\\r\\n        {\\r\\n            name: \\\"Central Intelligence Agency\\\",\\r\\n            position: \\\"Security\\\",\\r\\n        },\\r\\n        {\\r\\n            name: \\\"Carmichael Security\\\",\\r\\n            position: \\\"Security\\\",\\r\\n        },\\r\\n        {\\r\\n            name: \\\"DeltaOne\\\",\\r\\n            position: \\\"Security\\\",\\r\\n        },\\r\\n        {\\r\\n            name: \\\"Four Sigma\\\",\\r\\n            position: \\\"Security\\\",\\r\\n        },\\r\\n        {\\r\\n            name: \\\"National Security Agency\\\",\\r\\n            position: \\\"Security\\\",\\r\\n        },\\r\\n        {\\r\\n            name: \\\"FoodNStuff\\\",\\r\\n            position: \\\"Part-time Waiter\\\",\\r\\n        },\\r\\n        {\\r\\n            name: \\\"Joe's Guns\\\",\\r\\n            position: \\\"Part-time Employee\\\",\\r\\n        },\\r\\n    ];\\r\\n    const employers = [];\\r\\n    while (true) {\\r\\n        for (const company of companies) {\\r\\n            if (ns.applyToCompany(company.name, company.position)) {\\r\\n                if (!employers.includes(company))\\r\\n                    employers.push(company);\\r\\n                if (!ns.isBusy())\\r\\n                    ns.workForCompany(company.name);\\r\\n                break;\\r\\n            }\\r\\n            await ns.sleep(1);\\r\\n        }\\r\\n        if (!ns.isBusy()) {\\r\\n            for (const company of employers) {\\r\\n                if (ns.applyToCompany(company.name, company.position)) {\\r\\n                    if (!employers.includes(company))\\r\\n                        employers.push(company);\\r\\n                    ns.workForCompany(company.name);\\r\\n                    break;\\r\\n                }\\r\\n                await ns.sleep(1);\\r\\n            }\\r\\n        }\\r\\n        if (!ns.isBusy()) {\\r\\n            for (const crime of crimes) {\\r\\n                if (ns.getCrimeChance(crime) > 0.9 && !ns.isBusy()) {\\r\\n                    ns.commitCrime(crime);\\r\\n                    break;\\r\\n                }\\r\\n                await ns.sleep(1);\\r\\n            }\\r\\n        }\\r\\n        // if (!ns.isBusy()) {\\r\\n        //   ns.commitCrime(\\\"Shoplift\\\");\\r\\n        // }\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeRamCost()) {\\r\\n            ns.upgradeHomeRam();\\r\\n        }\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= ns.getUpgradeHomeCoresCost()) {\\r\\n            ns.upgradeHomeCores();\\r\\n        }\\r\\n        await ns.sleep(3000);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/advanced/work.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/advanced/work.js\",\"url\":\"blob:file:///1f83be93-62ec-4e98-b40d-b772beae2fb3\",\"moduleSequenceNumber\":2418}],\"dependents\":[],\"ramUsage\":27.2,\"server\":\"home\",\"moduleSequenceNumber\":21463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"applyToCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"workForCompany\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":3}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"27.9.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"ecorp\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"ecorp\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":49971151643.25,\"moneyMax\":187391818662.1875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1227,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"18.6.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"megacorp\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"megacorp\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43905816693,\"moneyMax\":164646812598.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1243,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"20.6.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"b-and-a\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":15104318307,\"moneyMax\":56641193651.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1105,\"serverGrowth\":62}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"35.6.1.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///0c572228-8369-457e-ad38-1d2d0b955ffb\",\"moduleSequenceNumber\":39021}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"blade\",\"moduleSequenceNumber\":39021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///5d925a48-71c5-4351-b281-c3ad54959d2e\",\"moduleSequenceNumber\":831}],\"dependents\":[],\"ramUsage\":4,\"server\":\"blade\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":14222767942.5,\"moneyMax\":53335379784.375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1056,\"serverGrowth\":76}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"65.0.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"nwo\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nwo\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":29709275205.75,\"moneyMax\":111409782021.5625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":998,\"serverGrowth\":90}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"55.8.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"clarkinc\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":13784619750.75,\"moneyMax\":51692324065.3125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1217,\"serverGrowth\":53}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"22.0.3.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///7ff7cfe3-4c1e-404c-9f4b-f7efa3de1aad\",\"moduleSequenceNumber\":12973}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":12973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///bb8f4edc-70c7-42fa-83c5-108a5be0cd7b\",\"moduleSequenceNumber\":18788}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///d8f0c1b8-c13f-4ab7-9a56-7228706e2043\",\"moduleSequenceNumber\":39009}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"omnitek\",\"moduleSequenceNumber\":39009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///1c294701-57d9-4740-bfc7-a95949e31e24\",\"moduleSequenceNumber\":832}],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnitek\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":15826868541.75,\"moneyMax\":59350757031.5625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":971,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"15.7.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"4sigma\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"4sigma\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":17758206759.75,\"moneyMax\":66593275349.0625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1146,\"serverGrowth\":97}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"45.1.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":18059431804.5,\"moneyMax\":67722869266.875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1128,\"serverGrowth\":97}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"2.1.2.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/hack.js\",\"url\":\"blob:file:///c20b50ab-9e81-4836-b036-c059c6f1b248\",\"moduleSequenceNumber\":12557}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":12557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///b0563047-639e-4e07-b7af-a9d9f0453357\",\"moduleSequenceNumber\":1914}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///3c0cac72-0b39-4716-b31b-853c81b38678\",\"moduleSequenceNumber\":39018}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":39018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///b8915330-54b3-48d8-b636-7360a21a9908\",\"moduleSequenceNumber\":833}],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":1186530783.75,\"moneyMax\":4449490439.0625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1182,\"serverGrowth\":87}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"11.1.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1534,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"96.6.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"stormtech\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"stormtech\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":897394635,\"moneyMax\":3365229881.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":934,\"serverGrowth\":78}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"44.7.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"defcomm\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"defcomm\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":683649285,\"moneyMax\":2563684818.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1038,\"serverGrowth\":71}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"54.4.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"infocomm\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"infocomm\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":554127363,\"moneyMax\":2077977611.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":892,\"serverGrowth\":69}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"99.3.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///99869942-9be2-447c-b80d-ae498d6023c3\",\"moduleSequenceNumber\":39020}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"helios\",\"moduleSequenceNumber\":39020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///e760ad88-f83e-494d-a6af-2310a500f815\",\"moduleSequenceNumber\":834}],\"dependents\":[],\"ramUsage\":4,\"server\":\"helios\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":546249392.25,\"moneyMax\":2048435220.9375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":846,\"serverGrowth\":71}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"69.3.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///729902f8-b99f-4bb7-84bd-a1ea4dd28fea\",\"moduleSequenceNumber\":2335}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":2335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///63f9a9ab-d3c6-475d-ae70-8deca00dfbfc\",\"moduleSequenceNumber\":12972}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":12972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///dfe6aff9-db6d-4028-a458-3b3a2f2d24b7\",\"moduleSequenceNumber\":39008}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"vitalife\",\"moduleSequenceNumber\":39008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///317390ee-dc90-4150-81ec-5924e876c663\",\"moduleSequenceNumber\":835}],\"dependents\":[],\"ramUsage\":4,\"server\":\"vitalife\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":594488931.75,\"moneyMax\":2229333494.0625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":848,\"serverGrowth\":79}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"1.6.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"icarus\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"icarus\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":737907079.5,\"moneyMax\":2767151548.125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":914,\"serverGrowth\":89}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"96.7.2.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///ca1a6369-b8ed-4e9e-903c-2f853d6e595c\",\"moduleSequenceNumber\":39023}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"univ-energy\",\"moduleSequenceNumber\":39023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///efd6cb9e-38e4-4f1a-84cc-41fc346d9c8a\",\"moduleSequenceNumber\":836}],\"dependents\":[],\"ramUsage\":4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":868937346,\"moneyMax\":3258515047.5,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":822,\"serverGrowth\":84}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"37.6.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///423731f0-0f4a-4ea9-bfdf-be3d5b029365\",\"moduleSequenceNumber\":39017}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"titan-labs\",\"moduleSequenceNumber\":39017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///b8fc116b-0aa4-4b89-96f0-858a96e7c436\",\"moduleSequenceNumber\":837}],\"dependents\":[],\"ramUsage\":4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":626354311.5,\"moneyMax\":2348828668.125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":820,\"serverGrowth\":72}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"53.6.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///fea8faf2-9e01-44a7-bef8-f77f14db1e39\",\"moduleSequenceNumber\":1918}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":1918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///50fe411a-bd62-4a36-a5ef-b15929bd53c0\",\"moduleSequenceNumber\":39007}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"microdyne\",\"moduleSequenceNumber\":39007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///b035e773-5a98-42c3-8615-9eac671d6d12\",\"moduleSequenceNumber\":838}],\"dependents\":[],\"ramUsage\":4,\"server\":\"microdyne\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":507803340.75,\"moneyMax\":1904262527.8125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":80}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"19.9.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":625760658,\"moneyMax\":2346602467.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":949,\"serverGrowth\":73}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"72.3.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":581692310.25,\"moneyMax\":2181346163.4375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":84}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"22.9.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"aerocorp\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":757848679.5,\"moneyMax\":2841932548.125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":890,\"serverGrowth\":57}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"80.0.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///3eb5ad48-eee3-42c3-86b0-6928a67c267c\",\"moduleSequenceNumber\":39006}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"omnia\",\"moduleSequenceNumber\":39006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///b7c55b29-c5ad-4cd5-a727-ff201995aa2a\",\"moduleSequenceNumber\":839}],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnia\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":699076803.75,\"moneyMax\":2621538014.0625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":872,\"serverGrowth\":63}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"87.4.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"zb-def\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-def\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"defcomm\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":780890849.25,\"moneyMax\":2928340684.6875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":824,\"serverGrowth\":74}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"54.9.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":564881732.25,\"moneyMax\":2118306495.9375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":803,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"37.9.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///e47aef27-af76-40be-8c6d-b2d43ea3e1ac\",\"moduleSequenceNumber\":39012}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"solaris\",\"moduleSequenceNumber\":39012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///2e5376c6-bfb4-45a2-a71a-c11b99de1b86\",\"moduleSequenceNumber\":840}],\"dependents\":[],\"ramUsage\":4,\"server\":\"solaris\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":568644186,\"moneyMax\":2132415697.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":831,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"74.5.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"deltaone\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"deltaone\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1038863510.25,\"moneyMax\":3895738163.4375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":883,\"serverGrowth\":65}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"98.4.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///26d9695c-6b85-476a-8bc5-4c62f9d2d6d0\",\"moduleSequenceNumber\":39022}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"global-pharm\",\"moduleSequenceNumber\":39022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///78ca4912-da0c-4795-afa9-7fbaf3e3f7c7\",\"moduleSequenceNumber\":841}],\"dependents\":[],\"ramUsage\":4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1239411624,\"moneyMax\":4647793590,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":85}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"15.7.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"nova-med\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nova-med\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":836834472.75,\"moneyMax\":3138129272.8125,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":777,\"serverGrowth\":73}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"91.7.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"zeus-med\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1010325785.25,\"moneyMax\":3788721694.6875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":835,\"serverGrowth\":78}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"2.6.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///eb9c55f5-b6bf-4438-8ffe-c01e0de869d0\",\"moduleSequenceNumber\":39016}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"unitalife\",\"moduleSequenceNumber\":39016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///7935c677-c931-4e35-8c88-361a4d10b950\",\"moduleSequenceNumber\":842}],\"dependents\":[],\"ramUsage\":4,\"server\":\"unitalife\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":818375594.25,\"moneyMax\":3068908478.4375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":816,\"serverGrowth\":73}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"95.4.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///5f2b8e10-6367-49a8-b0de-d52d449d4f9c\",\"moduleSequenceNumber\":39004}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":39004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///5860d92d-2963-4e88-a4f5-4993ce3745d7\",\"moduleSequenceNumber\":843}],\"dependents\":[],\"ramUsage\":4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":566803422,\"moneyMax\":2125512832.5,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":675,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"35.3.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///c73a8450-e122-475c-9548-4d906a8e1148\",\"moduleSequenceNumber\":39015}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"rho-construction\",\"moduleSequenceNumber\":39015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///82e7fed1-6b75-4b0e-8921-04c0654dc4d0\",\"moduleSequenceNumber\":844}],\"dependents\":[],\"ramUsage\":4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":389770288.5,\"moneyMax\":1461638581.875,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":502,\"serverGrowth\":45}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"63.8.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///1db4947d-f6db-4d46-bd65-68b1dba677b3\",\"moduleSequenceNumber\":39005}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":39005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///2b6a407e-454c-4f14-8309-0e048fe5c326\",\"moduleSequenceNumber\":845}],\"dependents\":[],\"ramUsage\":4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"syscore\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":505754607.75,\"moneyMax\":1896579779.0625,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":570,\"serverGrowth\":51}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"17.9.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///315c14e7-36df-417e-8e02-e32de859d1dd\",\"moduleSequenceNumber\":39025}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"aevum-police\",\"moduleSequenceNumber\":39025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///64780e25-bc00-4bd9-b649-71e081d6b0f5\",\"moduleSequenceNumber\":846}],\"dependents\":[],\"ramUsage\":4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":177606518.25,\"moneyMax\":666024443.4375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":425,\"serverGrowth\":44}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"6.2.9.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///9592bf14-a7f8-462f-ba0d-59b676bfafc5\",\"moduleSequenceNumber\":39033}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":39033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///1f70cda6-c689-47b3-9946-69e3f9c4befb\",\"moduleSequenceNumber\":847}],\"dependents\":[],\"ramUsage\":4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":136295253,\"moneyMax\":511107198.75,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":391,\"serverGrowth\":39}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"20.0.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///9eb0bd8e-9082-4fb3-add5-0ee7c511e5b1\",\"moduleSequenceNumber\":39024}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"zb-institute\",\"moduleSequenceNumber\":39024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///634a6a54-718b-4423-ad8d-d434e6e2961c\",\"moduleSequenceNumber\":848}],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":657162648,\"moneyMax\":2464359930,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":751,\"serverGrowth\":83}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"55.0.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///78ac49e5-94b5-47bf-bdd1-3dcbc33759f4\",\"moduleSequenceNumber\":39030}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"summit-uni\",\"moduleSequenceNumber\":39030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///54c2650e-b2be-4896-84dc-7ee452807492\",\"moduleSequenceNumber\":849}],\"dependents\":[],\"ramUsage\":4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":257443428.75,\"moneyMax\":965412857.8125,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":463,\"serverGrowth\":57}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"28.3.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"syscore\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"syscore\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"netlink\",\"lexo-corp\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":376389645,\"moneyMax\":1411461168.75,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":625,\"serverGrowth\":60}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"88.3.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///302cd02a-4dde-407c-a019-15272dbdb36c\",\"moduleSequenceNumber\":39014}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"catalyst\",\"moduleSequenceNumber\":39014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///0b76f2cf-6a2a-47a2-9586-77cc990ff066\",\"moduleSequenceNumber\":850}],\"dependents\":[],\"ramUsage\":4,\"server\":\"catalyst\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"netlink\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":322515385.5,\"moneyMax\":1209432695.625,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":436,\"serverGrowth\":26}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"11.8.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///3b325427-7bb2-478e-a4b2-5651003cc0d1\",\"moduleSequenceNumber\":9310}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///40a50116-9b53-476a-ab60-d5d10ce8ba4d\",\"moduleSequenceNumber\":39029}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"the-hub\",\"moduleSequenceNumber\":39029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///e973903f-ff7a-46aa-9290-1ae0cf4a5b13\",\"moduleSequenceNumber\":851}],\"dependents\":[],\"ramUsage\":4,\"server\":\"the-hub\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":120971397,\"moneyMax\":453642738.75,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":293,\"serverGrowth\":51}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"87.5.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"comptek\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"comptek\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":169078365,\"moneyMax\":634043868.75,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":386,\"serverGrowth\":52}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"93.8.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///24b2befd-45cb-4141-9478-c929878c3994\",\"moduleSequenceNumber\":39003}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"netlink\",\"moduleSequenceNumber\":39003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///32bc7596-8557-4d63-8d05-c00a36da747f\",\"moduleSequenceNumber\":852}],\"dependents\":[],\"ramUsage\":4,\"server\":\"netlink\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":422,\"serverGrowth\":54}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"75.7.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":57108781.5,\"moneyMax\":214157930.625,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":300,\"serverGrowth\":36}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"32.3.7.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///3ba6d8e7-adf2-4850-bbaa-90859c23c010\",\"moduleSequenceNumber\":1912}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"n00dles\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///0afb020e-c653-4410-9da0-068653995ca2\",\"moduleSequenceNumber\":853}],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":2.568,\"minDifficulty\":1,\"moneyAvailable\":49483,\"moneyMax\":196875,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"62.1.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///53d51699-4980-43b0-9d78-d3789df98649\",\"moduleSequenceNumber\":1915}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///b16125f5-ef3b-4ccd-be4f-705d595a9da0\",\"moduleSequenceNumber\":39035}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":39035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///a66ed39e-1631-4f70-9acb-28148aeb46cd\",\"moduleSequenceNumber\":854}],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":4.6,\"minDifficulty\":3,\"moneyAvailable\":374472.8023471646,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"46.1.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///ffff6140-f0a6-4749-bc0c-18010ba9ba91\",\"moduleSequenceNumber\":1917}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///3c8355a6-0eac-4e9d-8b8f-4ea9891552b6\",\"moduleSequenceNumber\":39034}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":39034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///38b3f571-dfdf-4ea7-adc1-2bc84833acec\",\"moduleSequenceNumber\":855}],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":4.634,\"minDifficulty\":3,\"moneyAvailable\":440542.18290220737,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"85.3.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///d2f4050d-9612-43a2-9e11-9b6510d4174e\",\"moduleSequenceNumber\":97968}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///281a9abf-d1ac-4c89-a3ab-b005fe231096\",\"moduleSequenceNumber\":38998}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"joesguns\",\"moduleSequenceNumber\":38998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///a6604dc0-e9cf-4844-bb7c-caf417e34f5b\",\"moduleSequenceNumber\":856}],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.712,\"minDifficulty\":5,\"moneyAvailable\":549867.4484435013,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"62.7.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///92ce0ad4-c0a5-48e0-a0d6-c8657274dada\",\"moduleSequenceNumber\":23185}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":23185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///c1b08e2f-c36e-44b6-bab8-8f882788f7a7\",\"moduleSequenceNumber\":39001}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"zer0\",\"moduleSequenceNumber\":39001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///160a2b4d-d4d2-4b3a-af4b-f46524503bbf\",\"moduleSequenceNumber\":857}],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":5625000,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"79.7.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///fbea55f4-45e4-4661-83ad-83e43cd735e9\",\"moduleSequenceNumber\":39027}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"nectar-net\",\"moduleSequenceNumber\":39027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///c07e77bd-12a7-4bc2-a7ea-04a64a545193\",\"moduleSequenceNumber\":858}],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":8.848,\"minDifficulty\":7,\"moneyAvailable\":512952,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"16.1.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///9f6ffc78-0029-4217-ade1-828f1cb1c3d9\",\"moduleSequenceNumber\":2334}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":2334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///848ac2fb-d8fd-4a62-ac45-41b4c42ed822\",\"moduleSequenceNumber\":38996}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"neo-net\",\"moduleSequenceNumber\":38996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///4c08fcff-df5d-4602-a8f4-0af2a3d567bf\",\"moduleSequenceNumber\":859}],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":10.246,\"minDifficulty\":8,\"moneyAvailable\":1031894.9463416175,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"19.4.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///b417a234-2774-43b4-9b10-898f6d7cbb0f\",\"moduleSequenceNumber\":8964}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///f1aec709-e3a8-4fa0-9453-4453dd30b0bc\",\"moduleSequenceNumber\":39028}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"silver-helix\",\"moduleSequenceNumber\":39028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///9c26ae15-ce7b-4e1e-88d4-4d8bcb5f4aa4\",\"moduleSequenceNumber\":860}],\"dependents\":[],\"ramUsage\":4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":33750000,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"27.0.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///97a6bf57-162d-4d3c-92e1-4cf3836e6a63\",\"moduleSequenceNumber\":38999}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":38999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///f81f2408-587d-4d0b-8915-40d5404e0a5e\",\"moduleSequenceNumber\":861}],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.916,\"minDifficulty\":5,\"moneyAvailable\":553382,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"57.3.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///beb19938-603a-4c23-afd4-82f0a4ddcc48\",\"moduleSequenceNumber\":39000}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":39000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///7c27f47f-bf09-46d5-8933-bb07d29f9714\",\"moduleSequenceNumber\":862}],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":7.038,\"minDifficulty\":5,\"moneyAvailable\":734763,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"35.6.6.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///849bdcf2-13f8-41e7-a3d3-450744537378\",\"moduleSequenceNumber\":39002}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"phantasy\",\"moduleSequenceNumber\":39002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///85a70890-d8f4-4740-9898-880b48d0ac6a\",\"moduleSequenceNumber\":863}],\"dependents\":[],\"ramUsage\":4,\"server\":\"phantasy\",\"moduleSequenceNumber\":758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zer0\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":18000000,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"78.2.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/grow.js\",\"url\":\"blob:file:///6eacc43c-b768-4c06-a688-064ac75fe04d\",\"moduleSequenceNumber\":8618}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///8b1fbc75-4a75-4cf9-9f0a-8851eb01c066\",\"moduleSequenceNumber\":1919}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///563fbdec-8426-47ff-9c75-994a2abed230\",\"moduleSequenceNumber\":38995}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"max-hardware\",\"moduleSequenceNumber\":38995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///2cfe0ec0-799e-4bda-8b93-18c01efeb673\",\"moduleSequenceNumber\":864}],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":7500000,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"54.6.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///b14e3c2e-f0fd-42b2-b653-af85704df711\",\"moduleSequenceNumber\":39032}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"omega-net\",\"moduleSequenceNumber\":39032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///92fd79d2-b216-48a0-92dc-5743c7b400a2\",\"moduleSequenceNumber\":865}],\"dependents\":[],\"ramUsage\":4,\"server\":\"omega-net\",\"moduleSequenceNumber\":768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":31,\"minDifficulty\":10,\"moneyAvailable\":50107248.75,\"moneyMax\":187902182.8125,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":207,\"serverGrowth\":36}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"92.5.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":33690051,\"moneyMax\":126337691.25,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":272,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"55.2.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///458bece0-5fd7-493c-953c-b208690dc843\",\"moduleSequenceNumber\":39026}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"iron-gym\",\"moduleSequenceNumber\":39026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///e9b1ed7b-1cca-40f3-8e1b-53877c3c0bd0\",\"moduleSequenceNumber\":866}],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":15000000,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"7.9.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///a77d1055-075b-4094-a218-c0ac98ac0d24\",\"moduleSequenceNumber\":39013}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":39013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///4d7ba748-a8a1-4d2e-bb9a-02c0b4b092f5\",\"moduleSequenceNumber\":867}],\"dependents\":[],\"ramUsage\":4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":524,\"serverGrowth\":35}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"68.4.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///a75ee021-b30e-4883-a301-ff0b94aa0472\",\"moduleSequenceNumber\":39011}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":39011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///d38eaaec-a1e3-4d4d-817b-68cd966f606a\",\"moduleSequenceNumber\":868}],\"dependents\":[],\"ramUsage\":4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":970,\"serverGrowth\":55}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"59.2.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":799,\"serverGrowth\":52}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"51.3.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///ae979596-e285-4ecf-8f44-3995c0ce8dd4\",\"moduleSequenceNumber\":39019}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":39019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///d6a6f313-e2be-4710-a8dd-625a2d407eb8\",\"moduleSequenceNumber\":869}],\"dependents\":[],\"ramUsage\":4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":515,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"81.5.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///01624eac-030f-4525-9762-590c6558f185\",\"moduleSequenceNumber\":39031}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":39031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///72a203b5-6056-48b0-b38f-2619b519b781\",\"moduleSequenceNumber\":870}],\"dependents\":[],\"ramUsage\":4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":358,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"46.2.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///76fac34c-6eb5-4216-83ee-22607a365d4e\",\"moduleSequenceNumber\":6484}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":6484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///004ae4fa-3984-45bb-96b9-12092acf1dc5\",\"moduleSequenceNumber\":38997}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":38997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///5dbf4c9b-963d-45f2-8a1d-d5fc74668a6a\",\"moduleSequenceNumber\":871}],\"dependents\":[],\"ramUsage\":4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":219,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"27.0.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///281b12b2-4bf9-43b3-a4de-edf59224dc95\",\"moduleSequenceNumber\":39010}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\".\",\"moduleSequenceNumber\":39010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///5c4128c0-73d9-465c-b609-0bf73075e047\",\"moduleSequenceNumber\":872}],\"dependents\":[],\"ramUsage\":4,\"server\":\".\",\"moduleSequenceNumber\":813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":539,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"37.8.9.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/basic/weaken.js\",\"url\":\"blob:file:///16a59f70-804d-441c-a06c-c580cb3cef07\",\"moduleSequenceNumber\":1916}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/early-hack.js\",\"url\":\"blob:file:///7f55ed1e-0b27-4eb3-9d74-07f2a63ae4b3\",\"moduleSequenceNumber\":103119}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"CSEC\",\"moduleSequenceNumber\":817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/basic/share.js\",\"url\":\"blob:file:///6f7f905f-925f-4034-9f9a-992580ca23de\",\"moduleSequenceNumber\":873}],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":53,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"67.9.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"The-Cave\",\"moduleSequenceNumber\":822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"38.2.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":9000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"44.7.9.5\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const host = ns.args[0].toString();\\r\\n    await ns.hack(host);\\r\\n}\\r\\n\",\"filename\":\"/basic/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.grow(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    await ns.weaken(target);\\r\\n}\\r\\n\",\"filename\":\"/basic/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const target = ns.args[0].toString();\\r\\n    while (true) {\\r\\n        while (ns.getServerMoneyAvailable(target) < ns.getServerMaxMoney(target))\\r\\n            await ns.grow(target, {\\r\\n                threads: Math.min(growThreads(ns, target), this.threads),\\r\\n            });\\r\\n        while (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target))\\r\\n            await ns.weaken(target, {\\r\\n                threads: Math.min(weakenThreads(ns, target), this.threads),\\r\\n            });\\r\\n        await ns.hack(target, { threads: hackThreads(ns, target) });\\r\\n    }\\r\\n}\\r\\nexport function hackThreads(ns, server) {\\r\\n    return Math.ceil(0.75 / ns.hackAnalyze(server));\\r\\n}\\r\\nexport function hackTime(ns, host) {\\r\\n    return ns.getHackTime(host);\\r\\n}\\r\\nexport function growThreads(ns, s) {\\r\\n    // get the percentage of the server that is full\\r\\n    return ns.growthAnalyze(s, 10);\\r\\n}\\r\\nexport function growTime(ns, host) {\\r\\n    return ns.getGrowTime(host);\\r\\n}\\r\\nexport function weakenThreads(ns, server) {\\r\\n    return Math.max(Math.ceil((ns.getServerSecurityLevel(server) -\\r\\n        ns.getServerMinSecurityLevel(server)) /\\r\\n        ns.weakenAnalyze(1)), 1);\\r\\n}\\r\\n\",\"filename\":\"/basic/early-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"darkweb\",\"moduleSequenceNumber\":827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/basic/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"darkweb\",\"moduleSequenceNumber\":828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":93946.82830605083,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":1091.9466666665091}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":1226.2145843451756}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":6.524999999999977}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":11893.657775632219}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"track\":\"run fl1ght.exe\",\"darkweb\":\"home;connect darkweb\",\"killeverything\":\"killall;run advanced/killall.js\",\"listall\":\"run advanced/listall.js\",\"liquidate\":\"run stocks/liquidate.js\",\"nukeall\":\"run advanced/nukeall.js\",\"cnct\":\"run advanced/cnct.js\",\"scn\":\"cls;scan-analyze 10\",\"hackall\":\"killall; run hackGrind.js\",\"expand\":\"killall; run expand.js\",\"repGrind\":\"killall; run repGrind.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":24,\"MonacoVim\":true,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Fira Code, Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-94,\"y\":88,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1646679497159","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}